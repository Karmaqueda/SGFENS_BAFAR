/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class BancoOperacionTokenDaoImpl extends AbstractDAO implements BancoOperacionTokenDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_BANCO_OPERACION, ID_EMPRESA, ID_ESTATUS, ID_USUARIO, NOMBRE_TITULAR, CONCEPTO_DESCRIPCION, MONTO, TOKEN_GENERADO, LIGA_GENERADA, FECHA_GENERACION, FECHA_USO, CORREO_DESTINO_LIGA, ID_TABLA_BANCO_OPERACION FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_BANCO_OPERACION, ID_EMPRESA, ID_ESTATUS, ID_USUARIO, NOMBRE_TITULAR, CONCEPTO_DESCRIPCION, MONTO, TOKEN_GENERADO, LIGA_GENERADA, FECHA_GENERACION, FECHA_USO, CORREO_DESTINO_LIGA, ID_TABLA_BANCO_OPERACION ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_BANCO_OPERACION = ?, ID_EMPRESA = ?, ID_ESTATUS = ?, ID_USUARIO = ?, NOMBRE_TITULAR = ?, CONCEPTO_DESCRIPCION = ?, MONTO = ?, TOKEN_GENERADO = ?, LIGA_GENERADA = ?, FECHA_GENERACION = ?, FECHA_USO = ?, CORREO_DESTINO_LIGA = ?, ID_TABLA_BANCO_OPERACION = ? WHERE ID_BANCO_OPERACION = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_BANCO_OPERACION = ?";

	/** 
	 * Index of column ID_BANCO_OPERACION
	 */
	protected static final int COLUMN_ID_BANCO_OPERACION = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 3;

	/** 
	 * Index of column ID_USUARIO
	 */
	protected static final int COLUMN_ID_USUARIO = 4;

	/** 
	 * Index of column NOMBRE_TITULAR
	 */
	protected static final int COLUMN_NOMBRE_TITULAR = 5;

	/** 
	 * Index of column CONCEPTO_DESCRIPCION
	 */
	protected static final int COLUMN_CONCEPTO_DESCRIPCION = 6;

	/** 
	 * Index of column MONTO
	 */
	protected static final int COLUMN_MONTO = 7;

	/** 
	 * Index of column TOKEN_GENERADO
	 */
	protected static final int COLUMN_TOKEN_GENERADO = 8;

	/** 
	 * Index of column LIGA_GENERADA
	 */
	protected static final int COLUMN_LIGA_GENERADA = 9;

	/** 
	 * Index of column FECHA_GENERACION
	 */
	protected static final int COLUMN_FECHA_GENERACION = 10;

	/** 
	 * Index of column FECHA_USO
	 */
	protected static final int COLUMN_FECHA_USO = 11;

	/** 
	 * Index of column CORREO_DESTINO_LIGA
	 */
	protected static final int COLUMN_CORREO_DESTINO_LIGA = 12;

	/** 
	 * Index of column ID_TABLA_BANCO_OPERACION
	 */
	protected static final int COLUMN_ID_TABLA_BANCO_OPERACION = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column ID_BANCO_OPERACION
	 */
	protected static final int PK_COLUMN_ID_BANCO_OPERACION = 1;

	/** 
	 * Inserts a new row in the banco_operacion_token table.
	 */
	public BancoOperacionTokenPk insert(BancoOperacionToken dto) throws BancoOperacionTokenDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdBancoOperacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_BANCO_OPERACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_USUARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreTitularModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_TITULAR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isConceptoDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CONCEPTO_DESCRIPCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMontoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MONTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTokenGeneradoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TOKEN_GENERADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLigaGeneradaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LIGA_GENERADA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaGeneracionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_GENERACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaUsoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_USO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCorreoDestinoLigaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CORREO_DESTINO_LIGA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdTablaBancoOperacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_TABLA_BANCO_OPERACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdBancoOperacionModified()) {
				stmt.setInt( index++, dto.getIdBancoOperacion() );
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isIdUsuarioModified()) {
				if (dto.isIdUsuarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuario() );
				}
		
			}
		
			if (dto.isNombreTitularModified()) {
				stmt.setString( index++, dto.getNombreTitular() );
			}
		
			if (dto.isConceptoDescripcionModified()) {
				stmt.setString( index++, dto.getConceptoDescripcion() );
			}
		
			if (dto.isMontoModified()) {
				if (dto.isMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMonto() );
				}
		
			}
		
			if (dto.isTokenGeneradoModified()) {
				stmt.setString( index++, dto.getTokenGenerado() );
			}
		
			if (dto.isLigaGeneradaModified()) {
				stmt.setString( index++, dto.getLigaGenerada() );
			}
		
			if (dto.isFechaGeneracionModified()) {
				stmt.setTimestamp(index++, dto.getFechaGeneracion()==null ? null : new java.sql.Timestamp( dto.getFechaGeneracion().getTime() ) );
			}
		
			if (dto.isFechaUsoModified()) {
				stmt.setTimestamp(index++, dto.getFechaUso()==null ? null : new java.sql.Timestamp( dto.getFechaUso().getTime() ) );
			}
		
			if (dto.isCorreoDestinoLigaModified()) {
				stmt.setString( index++, dto.getCorreoDestinoLiga() );
			}
		
			if (dto.isIdTablaBancoOperacionModified()) {
				if (dto.isIdTablaBancoOperacionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdTablaBancoOperacion() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdBancoOperacion( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BancoOperacionTokenDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the banco_operacion_token table.
	 */
	public void update(BancoOperacionTokenPk pk, BancoOperacionToken dto) throws BancoOperacionTokenDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdBancoOperacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_BANCO_OPERACION=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_USUARIO=?" );
				modified=true;
			}
		
			if (dto.isNombreTitularModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_TITULAR=?" );
				modified=true;
			}
		
			if (dto.isConceptoDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONCEPTO_DESCRIPCION=?" );
				modified=true;
			}
		
			if (dto.isMontoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MONTO=?" );
				modified=true;
			}
		
			if (dto.isTokenGeneradoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TOKEN_GENERADO=?" );
				modified=true;
			}
		
			if (dto.isLigaGeneradaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LIGA_GENERADA=?" );
				modified=true;
			}
		
			if (dto.isFechaGeneracionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_GENERACION=?" );
				modified=true;
			}
		
			if (dto.isFechaUsoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_USO=?" );
				modified=true;
			}
		
			if (dto.isCorreoDestinoLigaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CORREO_DESTINO_LIGA=?" );
				modified=true;
			}
		
			if (dto.isIdTablaBancoOperacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_TABLA_BANCO_OPERACION=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_BANCO_OPERACION=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdBancoOperacionModified()) {
				stmt.setInt( index++, dto.getIdBancoOperacion() );
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isIdUsuarioModified()) {
				if (dto.isIdUsuarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuario() );
				}
		
			}
		
			if (dto.isNombreTitularModified()) {
				stmt.setString( index++, dto.getNombreTitular() );
			}
		
			if (dto.isConceptoDescripcionModified()) {
				stmt.setString( index++, dto.getConceptoDescripcion() );
			}
		
			if (dto.isMontoModified()) {
				if (dto.isMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMonto() );
				}
		
			}
		
			if (dto.isTokenGeneradoModified()) {
				stmt.setString( index++, dto.getTokenGenerado() );
			}
		
			if (dto.isLigaGeneradaModified()) {
				stmt.setString( index++, dto.getLigaGenerada() );
			}
		
			if (dto.isFechaGeneracionModified()) {
				stmt.setTimestamp(index++, dto.getFechaGeneracion()==null ? null : new java.sql.Timestamp( dto.getFechaGeneracion().getTime() ) );
			}
		
			if (dto.isFechaUsoModified()) {
				stmt.setTimestamp(index++, dto.getFechaUso()==null ? null : new java.sql.Timestamp( dto.getFechaUso().getTime() ) );
			}
		
			if (dto.isCorreoDestinoLigaModified()) {
				stmt.setString( index++, dto.getCorreoDestinoLiga() );
			}
		
			if (dto.isIdTablaBancoOperacionModified()) {
				if (dto.isIdTablaBancoOperacionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdTablaBancoOperacion() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdBancoOperacion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BancoOperacionTokenDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the banco_operacion_token table.
	 */
	public void delete(BancoOperacionTokenPk pk) throws BancoOperacionTokenDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdBancoOperacion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BancoOperacionTokenDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the banco_operacion_token table that matches the specified primary-key value.
	 */
	public BancoOperacionToken findByPrimaryKey(BancoOperacionTokenPk pk) throws BancoOperacionTokenDaoException
	{
		return findByPrimaryKey( pk.getIdBancoOperacion() );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'ID_BANCO_OPERACION = :idBancoOperacion'.
	 */
	public BancoOperacionToken findByPrimaryKey(int idBancoOperacion) throws BancoOperacionTokenDaoException
	{
		BancoOperacionToken ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_BANCO_OPERACION = ?", new Object[] {  new Integer(idBancoOperacion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria ''.
	 */
	public BancoOperacionToken[] findAll() throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_BANCO_OPERACION", null );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'ID_BANCO_OPERACION = :idBancoOperacion'.
	 */
	public BancoOperacionToken[] findWhereIdBancoOperacionEquals(int idBancoOperacion) throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_BANCO_OPERACION = ? ORDER BY ID_BANCO_OPERACION", new Object[] {  new Integer(idBancoOperacion) } );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public BancoOperacionToken[] findWhereIdEmpresaEquals(int idEmpresa) throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public BancoOperacionToken[] findWhereIdEstatusEquals(int idEstatus) throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public BancoOperacionToken[] findWhereIdUsuarioEquals(int idUsuario) throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO = ? ORDER BY ID_USUARIO", new Object[] {  new Integer(idUsuario) } );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'NOMBRE_TITULAR = :nombreTitular'.
	 */
	public BancoOperacionToken[] findWhereNombreTitularEquals(String nombreTitular) throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_TITULAR = ? ORDER BY NOMBRE_TITULAR", new Object[] { nombreTitular } );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'CONCEPTO_DESCRIPCION = :conceptoDescripcion'.
	 */
	public BancoOperacionToken[] findWhereConceptoDescripcionEquals(String conceptoDescripcion) throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONCEPTO_DESCRIPCION = ? ORDER BY CONCEPTO_DESCRIPCION", new Object[] { conceptoDescripcion } );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'MONTO = :monto'.
	 */
	public BancoOperacionToken[] findWhereMontoEquals(double monto) throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONTO = ? ORDER BY MONTO", new Object[] {  new Double(monto) } );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'TOKEN_GENERADO = :tokenGenerado'.
	 */
	public BancoOperacionToken[] findWhereTokenGeneradoEquals(String tokenGenerado) throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TOKEN_GENERADO = ? ORDER BY TOKEN_GENERADO", new Object[] { tokenGenerado } );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'LIGA_GENERADA = :ligaGenerada'.
	 */
	public BancoOperacionToken[] findWhereLigaGeneradaEquals(String ligaGenerada) throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LIGA_GENERADA = ? ORDER BY LIGA_GENERADA", new Object[] { ligaGenerada } );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'FECHA_GENERACION = :fechaGeneracion'.
	 */
	public BancoOperacionToken[] findWhereFechaGeneracionEquals(Date fechaGeneracion) throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_GENERACION = ? ORDER BY FECHA_GENERACION", new Object[] { fechaGeneracion==null ? null : new java.sql.Timestamp( fechaGeneracion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'FECHA_USO = :fechaUso'.
	 */
	public BancoOperacionToken[] findWhereFechaUsoEquals(Date fechaUso) throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_USO = ? ORDER BY FECHA_USO", new Object[] { fechaUso==null ? null : new java.sql.Timestamp( fechaUso.getTime() ) } );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'CORREO_DESTINO_LIGA = :correoDestinoLiga'.
	 */
	public BancoOperacionToken[] findWhereCorreoDestinoLigaEquals(String correoDestinoLiga) throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CORREO_DESTINO_LIGA = ? ORDER BY CORREO_DESTINO_LIGA", new Object[] { correoDestinoLiga } );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the criteria 'ID_TABLA_BANCO_OPERACION = :idTablaBancoOperacion'.
	 */
	public BancoOperacionToken[] findWhereIdTablaBancoOperacionEquals(int idTablaBancoOperacion) throws BancoOperacionTokenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TABLA_BANCO_OPERACION = ? ORDER BY ID_TABLA_BANCO_OPERACION", new Object[] {  new Integer(idTablaBancoOperacion) } );
	}

	/**
	 * Method 'BancoOperacionTokenDaoImpl'
	 * 
	 */
	public BancoOperacionTokenDaoImpl()
	{
	}

	/**
	 * Method 'BancoOperacionTokenDaoImpl'
	 * 
	 * @param userConn
	 */
	public BancoOperacionTokenDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "banco_operacion_token";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected BancoOperacionToken fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			BancoOperacionToken dto = new BancoOperacionToken();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected BancoOperacionToken[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			BancoOperacionToken dto = new BancoOperacionToken();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		BancoOperacionToken ret[] = new BancoOperacionToken[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(BancoOperacionToken dto, ResultSet rs) throws SQLException
	{
		dto.setIdBancoOperacion( rs.getInt( COLUMN_ID_BANCO_OPERACION ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		if (rs.wasNull()) {
			dto.setIdEmpresaNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setIdUsuario( rs.getInt( COLUMN_ID_USUARIO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioNull( true );
		}
		
		dto.setNombreTitular( rs.getString( COLUMN_NOMBRE_TITULAR ) );
		dto.setConceptoDescripcion( rs.getString( COLUMN_CONCEPTO_DESCRIPCION ) );
		dto.setMonto( rs.getDouble( COLUMN_MONTO ) );
		if (rs.wasNull()) {
			dto.setMontoNull( true );
		}
		
		dto.setTokenGenerado( rs.getString( COLUMN_TOKEN_GENERADO ) );
		dto.setLigaGenerada( rs.getString( COLUMN_LIGA_GENERADA ) );
		dto.setFechaGeneracion( rs.getTimestamp(COLUMN_FECHA_GENERACION ) );
		dto.setFechaUso( rs.getTimestamp(COLUMN_FECHA_USO ) );
		dto.setCorreoDestinoLiga( rs.getString( COLUMN_CORREO_DESTINO_LIGA ) );
		dto.setIdTablaBancoOperacion( rs.getInt( COLUMN_ID_TABLA_BANCO_OPERACION ) );
		if (rs.wasNull()) {
			dto.setIdTablaBancoOperacionNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(BancoOperacionToken dto)
	{
		dto.setIdBancoOperacionModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEstatusModified( false );
		dto.setIdUsuarioModified( false );
		dto.setNombreTitularModified( false );
		dto.setConceptoDescripcionModified( false );
		dto.setMontoModified( false );
		dto.setTokenGeneradoModified( false );
		dto.setLigaGeneradaModified( false );
		dto.setFechaGeneracionModified( false );
		dto.setFechaUsoModified( false );
		dto.setCorreoDestinoLigaModified( false );
		dto.setIdTablaBancoOperacionModified( false );
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the specified arbitrary SQL statement
	 */
	public BancoOperacionToken[] findByDynamicSelect(String sql, Object[] sqlParams) throws BancoOperacionTokenDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BancoOperacionTokenDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the banco_operacion_token table that match the specified arbitrary SQL statement
	 */
	public BancoOperacionToken[] findByDynamicWhere(String sql, Object[] sqlParams) throws BancoOperacionTokenDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BancoOperacionTokenDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
