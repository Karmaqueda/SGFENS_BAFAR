/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ComprobanteDescripcionDaoImpl extends AbstractDAO implements ComprobanteDescripcionDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_COMPROBANTE_DESCRIPCION, ID_COMPROBANTE_FISCAL, ID_CONCEPTO, DESCRIPCION, CANTIDAD, PRECIO_UNITARIO, UNIDAD, IDENTIFICACION, ORDEN, ID_SERVICIO, NOMBRE_CONCEPTO, ID_IMPUESTO, DESCUENTO_PORCENTAJE, DESCUENTO_MONTO, id_Almacen_Origen FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_COMPROBANTE_DESCRIPCION, ID_COMPROBANTE_FISCAL, ID_CONCEPTO, DESCRIPCION, CANTIDAD, PRECIO_UNITARIO, UNIDAD, IDENTIFICACION, ORDEN, ID_SERVICIO, NOMBRE_CONCEPTO, ID_IMPUESTO, DESCUENTO_PORCENTAJE, DESCUENTO_MONTO, id_Almacen_Origen ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_COMPROBANTE_DESCRIPCION = ?, ID_COMPROBANTE_FISCAL = ?, ID_CONCEPTO = ?, DESCRIPCION = ?, CANTIDAD = ?, PRECIO_UNITARIO = ?, UNIDAD = ?, IDENTIFICACION = ?, ORDEN = ?, ID_SERVICIO = ?, NOMBRE_CONCEPTO = ?, ID_IMPUESTO = ?, DESCUENTO_PORCENTAJE = ?, DESCUENTO_MONTO = ?, id_Almacen_Origen = ? WHERE ID_COMPROBANTE_DESCRIPCION = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_COMPROBANTE_DESCRIPCION = ?";

	/** 
	 * Index of column ID_COMPROBANTE_DESCRIPCION
	 */
	protected static final int COLUMN_ID_COMPROBANTE_DESCRIPCION = 1;

	/** 
	 * Index of column ID_COMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_ID_COMPROBANTE_FISCAL = 2;

	/** 
	 * Index of column ID_CONCEPTO
	 */
	protected static final int COLUMN_ID_CONCEPTO = 3;

	/** 
	 * Index of column DESCRIPCION
	 */
	protected static final int COLUMN_DESCRIPCION = 4;

	/** 
	 * Index of column CANTIDAD
	 */
	protected static final int COLUMN_CANTIDAD = 5;

	/** 
	 * Index of column PRECIO_UNITARIO
	 */
	protected static final int COLUMN_PRECIO_UNITARIO = 6;

	/** 
	 * Index of column UNIDAD
	 */
	protected static final int COLUMN_UNIDAD = 7;

	/** 
	 * Index of column IDENTIFICACION
	 */
	protected static final int COLUMN_IDENTIFICACION = 8;

	/** 
	 * Index of column ORDEN
	 */
	protected static final int COLUMN_ORDEN = 9;

	/** 
	 * Index of column ID_SERVICIO
	 */
	protected static final int COLUMN_ID_SERVICIO = 10;

	/** 
	 * Index of column NOMBRE_CONCEPTO
	 */
	protected static final int COLUMN_NOMBRE_CONCEPTO = 11;

	/** 
	 * Index of column ID_IMPUESTO
	 */
	protected static final int COLUMN_ID_IMPUESTO = 12;

	/** 
	 * Index of column DESCUENTO_PORCENTAJE
	 */
	protected static final int COLUMN_DESCUENTO_PORCENTAJE = 13;

	/** 
	 * Index of column DESCUENTO_MONTO
	 */
	protected static final int COLUMN_DESCUENTO_MONTO = 14;

	/** 
	 * Index of column id_Almacen_Origen
	 */
	protected static final int COLUMN_ID_ALMACEN_ORIGEN = 15;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 15;

	/** 
	 * Index of primary-key column ID_COMPROBANTE_DESCRIPCION
	 */
	protected static final int PK_COLUMN_ID_COMPROBANTE_DESCRIPCION = 1;

	/** 
	 * Inserts a new row in the comprobante_descripcion table.
	 */
	public ComprobanteDescripcionPk insert(ComprobanteDescripcion dto) throws ComprobanteDescripcionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdComprobanteDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_DESCRIPCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCRIPCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CANTIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioUnitarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUnidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "UNIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdentificacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IDENTIFICACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isOrdenModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ORDEN" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdServicioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_SERVICIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdImpuestoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_IMPUESTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_PORCENTAJE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdAlmacenOrigenModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_Almacen_Origen" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdComprobanteDescripcionModified()) {
				stmt.setInt( index++, dto.getIdComprobanteDescripcion() );
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				stmt.setInt( index++, dto.getIdComprobanteFiscal() );
			}
		
			if (dto.isIdConceptoModified()) {
				stmt.setInt( index++, dto.getIdConcepto() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isCantidadModified()) {
				if (dto.isCantidadNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getCantidad() );
				}
		
			}
		
			if (dto.isPrecioUnitarioModified()) {
				if (dto.isPrecioUnitarioNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getPrecioUnitario() );
				}
		
			}
		
			if (dto.isUnidadModified()) {
				stmt.setString( index++, dto.getUnidad() );
			}
		
			if (dto.isIdentificacionModified()) {
				stmt.setString( index++, dto.getIdentificacion() );
			}
		
			if (dto.isOrdenModified()) {
				if (dto.isOrdenNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getOrden() );
				}
		
			}
		
			if (dto.isIdServicioModified()) {
				if (dto.isIdServicioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdServicio() );
				}
		
			}
		
			if (dto.isNombreConceptoModified()) {
				stmt.setString( index++, dto.getNombreConcepto() );
			}
		
			if (dto.isIdImpuestoModified()) {
				if (dto.isIdImpuestoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdImpuesto() );
				}
		
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (dto.isDescuentoPorcentajeNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getDescuentoPorcentaje() );
				}
		
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (dto.isDescuentoMontoNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getDescuentoMonto() );
				}
		
			}
		
			if (dto.isIdAlmacenOrigenModified()) {
				if (dto.isIdAlmacenOrigenNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdAlmacenOrigen() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteDescripcionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the comprobante_descripcion table.
	 */
	public void update(ComprobanteDescripcionPk pk, ComprobanteDescripcion dto) throws ComprobanteDescripcionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdComprobanteDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_DESCRIPCION=?" );
				modified=true;
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCRIPCION=?" );
				modified=true;
			}
		
			if (dto.isCantidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CANTIDAD=?" );
				modified=true;
			}
		
			if (dto.isPrecioUnitarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO=?" );
				modified=true;
			}
		
			if (dto.isUnidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "UNIDAD=?" );
				modified=true;
			}
		
			if (dto.isIdentificacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IDENTIFICACION=?" );
				modified=true;
			}
		
			if (dto.isOrdenModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ORDEN=?" );
				modified=true;
			}
		
			if (dto.isIdServicioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_SERVICIO=?" );
				modified=true;
			}
		
			if (dto.isNombreConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isIdImpuestoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_IMPUESTO=?" );
				modified=true;
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_PORCENTAJE=?" );
				modified=true;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO=?" );
				modified=true;
			}
		
			if (dto.isIdAlmacenOrigenModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_Almacen_Origen=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_COMPROBANTE_DESCRIPCION=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdComprobanteDescripcionModified()) {
				stmt.setInt( index++, dto.getIdComprobanteDescripcion() );
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				stmt.setInt( index++, dto.getIdComprobanteFiscal() );
			}
		
			if (dto.isIdConceptoModified()) {
				stmt.setInt( index++, dto.getIdConcepto() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isCantidadModified()) {
				if (dto.isCantidadNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getCantidad() );
				}
		
			}
		
			if (dto.isPrecioUnitarioModified()) {
				if (dto.isPrecioUnitarioNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getPrecioUnitario() );
				}
		
			}
		
			if (dto.isUnidadModified()) {
				stmt.setString( index++, dto.getUnidad() );
			}
		
			if (dto.isIdentificacionModified()) {
				stmt.setString( index++, dto.getIdentificacion() );
			}
		
			if (dto.isOrdenModified()) {
				if (dto.isOrdenNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getOrden() );
				}
		
			}
		
			if (dto.isIdServicioModified()) {
				if (dto.isIdServicioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdServicio() );
				}
		
			}
		
			if (dto.isNombreConceptoModified()) {
				stmt.setString( index++, dto.getNombreConcepto() );
			}
		
			if (dto.isIdImpuestoModified()) {
				if (dto.isIdImpuestoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdImpuesto() );
				}
		
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (dto.isDescuentoPorcentajeNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getDescuentoPorcentaje() );
				}
		
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (dto.isDescuentoMontoNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getDescuentoMonto() );
				}
		
			}
		
			if (dto.isIdAlmacenOrigenModified()) {
				if (dto.isIdAlmacenOrigenNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdAlmacenOrigen() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdComprobanteDescripcion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteDescripcionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the comprobante_descripcion table.
	 */
	public void delete(ComprobanteDescripcionPk pk) throws ComprobanteDescripcionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdComprobanteDescripcion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteDescripcionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the comprobante_descripcion table that matches the specified primary-key value.
	 */
	public ComprobanteDescripcion findByPrimaryKey(ComprobanteDescripcionPk pk) throws ComprobanteDescripcionDaoException
	{
		return findByPrimaryKey( pk.getIdComprobanteDescripcion() );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ID_COMPROBANTE_DESCRIPCION = :idComprobanteDescripcion'.
	 */
	public ComprobanteDescripcion findByPrimaryKey(int idComprobanteDescripcion) throws ComprobanteDescripcionDaoException
	{
		ComprobanteDescripcion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_DESCRIPCION = ?", new Object[] {  new Integer(idComprobanteDescripcion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria ''.
	 */
	public ComprobanteDescripcion[] findAll() throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_COMPROBANTE_DESCRIPCION", null );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ID_COMPROBANTE_DESCRIPCION = :idComprobanteDescripcion'.
	 */
	public ComprobanteDescripcion[] findWhereIdComprobanteDescripcionEquals(int idComprobanteDescripcion) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_DESCRIPCION = ? ORDER BY ID_COMPROBANTE_DESCRIPCION", new Object[] {  new Integer(idComprobanteDescripcion) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public ComprobanteDescripcion[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_FISCAL = ? ORDER BY ID_COMPROBANTE_FISCAL", new Object[] {  new Integer(idComprobanteFiscal) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public ComprobanteDescripcion[] findWhereIdConceptoEquals(int idConcepto) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO = ? ORDER BY ID_CONCEPTO", new Object[] {  new Integer(idConcepto) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public ComprobanteDescripcion[] findWhereDescripcionEquals(String descripcion) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION = ? ORDER BY DESCRIPCION", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public ComprobanteDescripcion[] findWhereCantidadEquals(float cantidad) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD = ? ORDER BY CANTIDAD", new Object[] {  new Float(cantidad) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'PRECIO_UNITARIO = :precioUnitario'.
	 */
	public ComprobanteDescripcion[] findWherePrecioUnitarioEquals(float precioUnitario) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_UNITARIO = ? ORDER BY PRECIO_UNITARIO", new Object[] {  new Float(precioUnitario) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'UNIDAD = :unidad'.
	 */
	public ComprobanteDescripcion[] findWhereUnidadEquals(String unidad) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UNIDAD = ? ORDER BY UNIDAD", new Object[] { unidad } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'IDENTIFICACION = :identificacion'.
	 */
	public ComprobanteDescripcion[] findWhereIdentificacionEquals(String identificacion) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDENTIFICACION = ? ORDER BY IDENTIFICACION", new Object[] { identificacion } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ORDEN = :orden'.
	 */
	public ComprobanteDescripcion[] findWhereOrdenEquals(int orden) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORDEN = ? ORDER BY ORDEN", new Object[] {  new Integer(orden) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ID_SERVICIO = :idServicio'.
	 */
	public ComprobanteDescripcion[] findWhereIdServicioEquals(int idServicio) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_SERVICIO = ? ORDER BY ID_SERVICIO", new Object[] {  new Integer(idServicio) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'NOMBRE_CONCEPTO = :nombreConcepto'.
	 */
	public ComprobanteDescripcion[] findWhereNombreConceptoEquals(String nombreConcepto) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_CONCEPTO = ? ORDER BY NOMBRE_CONCEPTO", new Object[] { nombreConcepto } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ID_IMPUESTO = :idImpuesto'.
	 */
	public ComprobanteDescripcion[] findWhereIdImpuestoEquals(int idImpuesto) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_IMPUESTO = ? ORDER BY ID_IMPUESTO", new Object[] {  new Integer(idImpuesto) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'DESCUENTO_PORCENTAJE = :descuentoPorcentaje'.
	 */
	public ComprobanteDescripcion[] findWhereDescuentoPorcentajeEquals(float descuentoPorcentaje) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_PORCENTAJE = ? ORDER BY DESCUENTO_PORCENTAJE", new Object[] {  new Float(descuentoPorcentaje) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'DESCUENTO_MONTO = :descuentoMonto'.
	 */
	public ComprobanteDescripcion[] findWhereDescuentoMontoEquals(float descuentoMonto) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_MONTO = ? ORDER BY DESCUENTO_MONTO", new Object[] {  new Float(descuentoMonto) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'id_Almacen_Origen = :idAlmacenOrigen'.
	 */
	public ComprobanteDescripcion[] findWhereIdAlmacenOrigenEquals(int idAlmacenOrigen) throws ComprobanteDescripcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_Almacen_Origen = ? ORDER BY id_Almacen_Origen", new Object[] {  new Integer(idAlmacenOrigen) } );
	}

	/**
	 * Method 'ComprobanteDescripcionDaoImpl'
	 * 
	 */
	public ComprobanteDescripcionDaoImpl()
	{
	}

	/**
	 * Method 'ComprobanteDescripcionDaoImpl'
	 * 
	 * @param userConn
	 */
	public ComprobanteDescripcionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "comprobante_descripcion";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ComprobanteDescripcion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ComprobanteDescripcion dto = new ComprobanteDescripcion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ComprobanteDescripcion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ComprobanteDescripcion dto = new ComprobanteDescripcion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ComprobanteDescripcion ret[] = new ComprobanteDescripcion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ComprobanteDescripcion dto, ResultSet rs) throws SQLException
	{
		dto.setIdComprobanteDescripcion( rs.getInt( COLUMN_ID_COMPROBANTE_DESCRIPCION ) );
		dto.setIdComprobanteFiscal( rs.getInt( COLUMN_ID_COMPROBANTE_FISCAL ) );
		dto.setIdConcepto( rs.getInt( COLUMN_ID_CONCEPTO ) );
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setCantidad( rs.getFloat( COLUMN_CANTIDAD ) );
		if (rs.wasNull()) {
			dto.setCantidadNull( true );
		}
		
		dto.setPrecioUnitario( rs.getFloat( COLUMN_PRECIO_UNITARIO ) );
		if (rs.wasNull()) {
			dto.setPrecioUnitarioNull( true );
		}
		
		dto.setUnidad( rs.getString( COLUMN_UNIDAD ) );
		dto.setIdentificacion( rs.getString( COLUMN_IDENTIFICACION ) );
		dto.setOrden( rs.getInt( COLUMN_ORDEN ) );
		if (rs.wasNull()) {
			dto.setOrdenNull( true );
		}
		
		dto.setIdServicio( rs.getInt( COLUMN_ID_SERVICIO ) );
		if (rs.wasNull()) {
			dto.setIdServicioNull( true );
		}
		
		dto.setNombreConcepto( rs.getString( COLUMN_NOMBRE_CONCEPTO ) );
		dto.setIdImpuesto( rs.getInt( COLUMN_ID_IMPUESTO ) );
		if (rs.wasNull()) {
			dto.setIdImpuestoNull( true );
		}
		
		dto.setDescuentoPorcentaje( rs.getFloat( COLUMN_DESCUENTO_PORCENTAJE ) );
		if (rs.wasNull()) {
			dto.setDescuentoPorcentajeNull( true );
		}
		
		dto.setDescuentoMonto( rs.getFloat( COLUMN_DESCUENTO_MONTO ) );
		if (rs.wasNull()) {
			dto.setDescuentoMontoNull( true );
		}
		
		dto.setIdAlmacenOrigen( rs.getInt( COLUMN_ID_ALMACEN_ORIGEN ) );
		if (rs.wasNull()) {
			dto.setIdAlmacenOrigenNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ComprobanteDescripcion dto)
	{
		dto.setIdComprobanteDescripcionModified( false );
		dto.setIdComprobanteFiscalModified( false );
		dto.setIdConceptoModified( false );
		dto.setDescripcionModified( false );
		dto.setCantidadModified( false );
		dto.setPrecioUnitarioModified( false );
		dto.setUnidadModified( false );
		dto.setIdentificacionModified( false );
		dto.setOrdenModified( false );
		dto.setIdServicioModified( false );
		dto.setNombreConceptoModified( false );
		dto.setIdImpuestoModified( false );
		dto.setDescuentoPorcentajeModified( false );
		dto.setDescuentoMontoModified( false );
		dto.setIdAlmacenOrigenModified( false );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the specified arbitrary SQL statement
	 */
	public ComprobanteDescripcion[] findByDynamicSelect(String sql, Object[] sqlParams) throws ComprobanteDescripcionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteDescripcionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the specified arbitrary SQL statement
	 */
	public ComprobanteDescripcion[] findByDynamicWhere(String sql, Object[] sqlParams) throws ComprobanteDescripcionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteDescripcionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

        protected final String SQL_SELECT_MAX = "SELECT ID_COMPROBANTE_DESCRIPCION, ID_COMPROBANTE_FISCAL, ID_CONCEPTO, DESCRIPCION, CANTIDAD, PRECIO_UNITARIO, UNIDAD, IDENTIFICACION, ORDEN, ID_SERVICIO, NOMBRE_CONCEPTO, ID_IMPUESTO, DESCUENTO_PORCENTAJE, DESCUENTO_MONTO, id_Almacen_Origen FROM " + getTableName() + " ORDER BY ID_COMPROBANTE_DESCRIPCION DESC LIMIT 1 ";
         
        public ComprobanteDescripcion findLast() throws ComprobanteDescripcionDaoException
	{
		ComprobanteDescripcion ret[] = findByDynamicSelect( SQL_SELECT_MAX , new Object[0] );
		return ret.length==0 ? null : ret[0];
}

}
