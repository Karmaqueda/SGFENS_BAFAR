/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SmsCompraBitacoraDaoImpl extends AbstractDAO implements SmsCompraBitacoraDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_sms_compra_bitacora, is_auto_servicio, id_empresa, fecha_hr, id_sms_paquete_precio, cantidad_agregada, cantidad_restada, observaciones, id_usuario_preto, id_usuario_ventas, dato_pago_1, dato_pago_2, dato_pago_3, dato_pago_4, id_banco_operacion FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_sms_compra_bitacora, is_auto_servicio, id_empresa, fecha_hr, id_sms_paquete_precio, cantidad_agregada, cantidad_restada, observaciones, id_usuario_preto, id_usuario_ventas, dato_pago_1, dato_pago_2, dato_pago_3, dato_pago_4, id_banco_operacion ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_sms_compra_bitacora = ?, is_auto_servicio = ?, id_empresa = ?, fecha_hr = ?, id_sms_paquete_precio = ?, cantidad_agregada = ?, cantidad_restada = ?, observaciones = ?, id_usuario_preto = ?, id_usuario_ventas = ?, dato_pago_1 = ?, dato_pago_2 = ?, dato_pago_3 = ?, dato_pago_4 = ?, id_banco_operacion = ? WHERE id_sms_compra_bitacora = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_sms_compra_bitacora = ?";

	/** 
	 * Index of column id_sms_compra_bitacora
	 */
	protected static final int COLUMN_ID_SMS_COMPRA_BITACORA = 1;

	/** 
	 * Index of column is_auto_servicio
	 */
	protected static final int COLUMN_IS_AUTO_SERVICIO = 2;

	/** 
	 * Index of column id_empresa
	 */
	protected static final int COLUMN_ID_EMPRESA = 3;

	/** 
	 * Index of column fecha_hr
	 */
	protected static final int COLUMN_FECHA_HR = 4;

	/** 
	 * Index of column id_sms_paquete_precio
	 */
	protected static final int COLUMN_ID_SMS_PAQUETE_PRECIO = 5;

	/** 
	 * Index of column cantidad_agregada
	 */
	protected static final int COLUMN_CANTIDAD_AGREGADA = 6;

	/** 
	 * Index of column cantidad_restada
	 */
	protected static final int COLUMN_CANTIDAD_RESTADA = 7;

	/** 
	 * Index of column observaciones
	 */
	protected static final int COLUMN_OBSERVACIONES = 8;

	/** 
	 * Index of column id_usuario_preto
	 */
	protected static final int COLUMN_ID_USUARIO_PRETO = 9;

	/** 
	 * Index of column id_usuario_ventas
	 */
	protected static final int COLUMN_ID_USUARIO_VENTAS = 10;

	/** 
	 * Index of column dato_pago_1
	 */
	protected static final int COLUMN_DATO_PAGO1 = 11;

	/** 
	 * Index of column dato_pago_2
	 */
	protected static final int COLUMN_DATO_PAGO2 = 12;

	/** 
	 * Index of column dato_pago_3
	 */
	protected static final int COLUMN_DATO_PAGO3 = 13;

	/** 
	 * Index of column dato_pago_4
	 */
	protected static final int COLUMN_DATO_PAGO4 = 14;

	/** 
	 * Index of column id_banco_operacion
	 */
	protected static final int COLUMN_ID_BANCO_OPERACION = 15;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 15;

	/** 
	 * Index of primary-key column id_sms_compra_bitacora
	 */
	protected static final int PK_COLUMN_ID_SMS_COMPRA_BITACORA = 1;

	/** 
	 * Inserts a new row in the sms_compra_bitacora table.
	 */
	public SmsCompraBitacoraPk insert(SmsCompraBitacora dto) throws SmsCompraBitacoraDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdSmsCompraBitacoraModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_compra_bitacora" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsAutoServicioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_auto_servicio" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_empresa" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSmsPaquetePrecioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_paquete_precio" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadAgregadaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "cantidad_agregada" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadRestadaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "cantidad_restada" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isObservacionesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "observaciones" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioPretoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_usuario_preto" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioVentasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_usuario_ventas" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDatoPago1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "dato_pago_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDatoPago2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "dato_pago_2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDatoPago3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "dato_pago_3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDatoPago4Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "dato_pago_4" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdBancoOperacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_banco_operacion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdSmsCompraBitacoraModified()) {
				stmt.setInt( index++, dto.getIdSmsCompraBitacora() );
			}
		
			if (dto.isIsAutoServicioModified()) {
				stmt.setInt( index++, dto.getIsAutoServicio() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isFechaHrModified()) {
				stmt.setTimestamp(index++, dto.getFechaHr()==null ? null : new java.sql.Timestamp( dto.getFechaHr().getTime() ) );
			}
		
			if (dto.isIdSmsPaquetePrecioModified()) {
				if (dto.isIdSmsPaquetePrecioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsPaquetePrecio() );
				}
		
			}
		
			if (dto.isCantidadAgregadaModified()) {
				if (dto.isCantidadAgregadaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCantidadAgregada() );
				}
		
			}
		
			if (dto.isCantidadRestadaModified()) {
				if (dto.isCantidadRestadaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCantidadRestada() );
				}
		
			}
		
			if (dto.isObservacionesModified()) {
				stmt.setString( index++, dto.getObservaciones() );
			}
		
			if (dto.isIdUsuarioPretoModified()) {
				if (dto.isIdUsuarioPretoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioPreto() );
				}
		
			}
		
			if (dto.isIdUsuarioVentasModified()) {
				if (dto.isIdUsuarioVentasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVentas() );
				}
		
			}
		
			if (dto.isDatoPago1Modified()) {
				stmt.setString( index++, dto.getDatoPago1() );
			}
		
			if (dto.isDatoPago2Modified()) {
				stmt.setString( index++, dto.getDatoPago2() );
			}
		
			if (dto.isDatoPago3Modified()) {
				stmt.setString( index++, dto.getDatoPago3() );
			}
		
			if (dto.isDatoPago4Modified()) {
				stmt.setString( index++, dto.getDatoPago4() );
			}
		
			if (dto.isIdBancoOperacionModified()) {
				if (dto.isIdBancoOperacionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdBancoOperacion() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdSmsCompraBitacora( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsCompraBitacoraDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sms_compra_bitacora table.
	 */
	public void update(SmsCompraBitacoraPk pk, SmsCompraBitacora dto) throws SmsCompraBitacoraDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdSmsCompraBitacoraModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_compra_bitacora=?" );
				modified=true;
			}
		
			if (dto.isIsAutoServicioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_auto_servicio=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_empresa=?" );
				modified=true;
			}
		
			if (dto.isFechaHrModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr=?" );
				modified=true;
			}
		
			if (dto.isIdSmsPaquetePrecioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_paquete_precio=?" );
				modified=true;
			}
		
			if (dto.isCantidadAgregadaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "cantidad_agregada=?" );
				modified=true;
			}
		
			if (dto.isCantidadRestadaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "cantidad_restada=?" );
				modified=true;
			}
		
			if (dto.isObservacionesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "observaciones=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioPretoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_usuario_preto=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioVentasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_usuario_ventas=?" );
				modified=true;
			}
		
			if (dto.isDatoPago1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "dato_pago_1=?" );
				modified=true;
			}
		
			if (dto.isDatoPago2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "dato_pago_2=?" );
				modified=true;
			}
		
			if (dto.isDatoPago3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "dato_pago_3=?" );
				modified=true;
			}
		
			if (dto.isDatoPago4Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "dato_pago_4=?" );
				modified=true;
			}
		
			if (dto.isIdBancoOperacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_banco_operacion=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_sms_compra_bitacora=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdSmsCompraBitacoraModified()) {
				stmt.setInt( index++, dto.getIdSmsCompraBitacora() );
			}
		
			if (dto.isIsAutoServicioModified()) {
				stmt.setInt( index++, dto.getIsAutoServicio() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isFechaHrModified()) {
				stmt.setTimestamp(index++, dto.getFechaHr()==null ? null : new java.sql.Timestamp( dto.getFechaHr().getTime() ) );
			}
		
			if (dto.isIdSmsPaquetePrecioModified()) {
				if (dto.isIdSmsPaquetePrecioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsPaquetePrecio() );
				}
		
			}
		
			if (dto.isCantidadAgregadaModified()) {
				if (dto.isCantidadAgregadaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCantidadAgregada() );
				}
		
			}
		
			if (dto.isCantidadRestadaModified()) {
				if (dto.isCantidadRestadaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCantidadRestada() );
				}
		
			}
		
			if (dto.isObservacionesModified()) {
				stmt.setString( index++, dto.getObservaciones() );
			}
		
			if (dto.isIdUsuarioPretoModified()) {
				if (dto.isIdUsuarioPretoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioPreto() );
				}
		
			}
		
			if (dto.isIdUsuarioVentasModified()) {
				if (dto.isIdUsuarioVentasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVentas() );
				}
		
			}
		
			if (dto.isDatoPago1Modified()) {
				stmt.setString( index++, dto.getDatoPago1() );
			}
		
			if (dto.isDatoPago2Modified()) {
				stmt.setString( index++, dto.getDatoPago2() );
			}
		
			if (dto.isDatoPago3Modified()) {
				stmt.setString( index++, dto.getDatoPago3() );
			}
		
			if (dto.isDatoPago4Modified()) {
				stmt.setString( index++, dto.getDatoPago4() );
			}
		
			if (dto.isIdBancoOperacionModified()) {
				if (dto.isIdBancoOperacionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdBancoOperacion() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdSmsCompraBitacora() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsCompraBitacoraDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sms_compra_bitacora table.
	 */
	public void delete(SmsCompraBitacoraPk pk) throws SmsCompraBitacoraDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdSmsCompraBitacora() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsCompraBitacoraDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sms_compra_bitacora table that matches the specified primary-key value.
	 */
	public SmsCompraBitacora findByPrimaryKey(SmsCompraBitacoraPk pk) throws SmsCompraBitacoraDaoException
	{
		return findByPrimaryKey( pk.getIdSmsCompraBitacora() );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'id_sms_compra_bitacora = :idSmsCompraBitacora'.
	 */
	public SmsCompraBitacora findByPrimaryKey(int idSmsCompraBitacora) throws SmsCompraBitacoraDaoException
	{
		SmsCompraBitacora ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_sms_compra_bitacora = ?", new Object[] {  new Integer(idSmsCompraBitacora) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria ''.
	 */
	public SmsCompraBitacora[] findAll() throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_sms_compra_bitacora", null );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'id_sms_compra_bitacora = :idSmsCompraBitacora'.
	 */
	public SmsCompraBitacora[] findWhereIdSmsCompraBitacoraEquals(int idSmsCompraBitacora) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_compra_bitacora = ? ORDER BY id_sms_compra_bitacora", new Object[] {  new Integer(idSmsCompraBitacora) } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'is_auto_servicio = :isAutoServicio'.
	 */
	public SmsCompraBitacora[] findWhereIsAutoServicioEquals(int isAutoServicio) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_auto_servicio = ? ORDER BY is_auto_servicio", new Object[] {  new Integer(isAutoServicio) } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public SmsCompraBitacora[] findWhereIdEmpresaEquals(int idEmpresa) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_empresa = ? ORDER BY id_empresa", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'fecha_hr = :fechaHr'.
	 */
	public SmsCompraBitacora[] findWhereFechaHrEquals(Date fechaHr) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr = ? ORDER BY fecha_hr", new Object[] { fechaHr==null ? null : new java.sql.Timestamp( fechaHr.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'id_sms_paquete_precio = :idSmsPaquetePrecio'.
	 */
	public SmsCompraBitacora[] findWhereIdSmsPaquetePrecioEquals(int idSmsPaquetePrecio) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_paquete_precio = ? ORDER BY id_sms_paquete_precio", new Object[] {  new Integer(idSmsPaquetePrecio) } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'cantidad_agregada = :cantidadAgregada'.
	 */
	public SmsCompraBitacora[] findWhereCantidadAgregadaEquals(int cantidadAgregada) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cantidad_agregada = ? ORDER BY cantidad_agregada", new Object[] {  new Integer(cantidadAgregada) } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'cantidad_restada = :cantidadRestada'.
	 */
	public SmsCompraBitacora[] findWhereCantidadRestadaEquals(int cantidadRestada) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cantidad_restada = ? ORDER BY cantidad_restada", new Object[] {  new Integer(cantidadRestada) } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'observaciones = :observaciones'.
	 */
	public SmsCompraBitacora[] findWhereObservacionesEquals(String observaciones) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE observaciones = ? ORDER BY observaciones", new Object[] { observaciones } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'id_usuario_preto = :idUsuarioPreto'.
	 */
	public SmsCompraBitacora[] findWhereIdUsuarioPretoEquals(int idUsuarioPreto) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_usuario_preto = ? ORDER BY id_usuario_preto", new Object[] {  new Integer(idUsuarioPreto) } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'id_usuario_ventas = :idUsuarioVentas'.
	 */
	public SmsCompraBitacora[] findWhereIdUsuarioVentasEquals(int idUsuarioVentas) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_usuario_ventas = ? ORDER BY id_usuario_ventas", new Object[] {  new Integer(idUsuarioVentas) } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'dato_pago_1 = :datoPago1'.
	 */
	public SmsCompraBitacora[] findWhereDatoPago1Equals(String datoPago1) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dato_pago_1 = ? ORDER BY dato_pago_1", new Object[] { datoPago1 } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'dato_pago_2 = :datoPago2'.
	 */
	public SmsCompraBitacora[] findWhereDatoPago2Equals(String datoPago2) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dato_pago_2 = ? ORDER BY dato_pago_2", new Object[] { datoPago2 } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'dato_pago_3 = :datoPago3'.
	 */
	public SmsCompraBitacora[] findWhereDatoPago3Equals(String datoPago3) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dato_pago_3 = ? ORDER BY dato_pago_3", new Object[] { datoPago3 } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'dato_pago_4 = :datoPago4'.
	 */
	public SmsCompraBitacora[] findWhereDatoPago4Equals(String datoPago4) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dato_pago_4 = ? ORDER BY dato_pago_4", new Object[] { datoPago4 } );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the criteria 'id_banco_operacion = :idBancoOperacion'.
	 */
	public SmsCompraBitacora[] findWhereIdBancoOperacionEquals(int idBancoOperacion) throws SmsCompraBitacoraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_banco_operacion = ? ORDER BY id_banco_operacion", new Object[] {  new Integer(idBancoOperacion) } );
	}

	/**
	 * Method 'SmsCompraBitacoraDaoImpl'
	 * 
	 */
	public SmsCompraBitacoraDaoImpl()
	{
	}

	/**
	 * Method 'SmsCompraBitacoraDaoImpl'
	 * 
	 * @param userConn
	 */
	public SmsCompraBitacoraDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sms_compra_bitacora";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SmsCompraBitacora fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SmsCompraBitacora dto = new SmsCompraBitacora();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SmsCompraBitacora[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SmsCompraBitacora dto = new SmsCompraBitacora();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SmsCompraBitacora ret[] = new SmsCompraBitacora[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SmsCompraBitacora dto, ResultSet rs) throws SQLException
	{
		dto.setIdSmsCompraBitacora( rs.getInt( COLUMN_ID_SMS_COMPRA_BITACORA ) );
		dto.setIsAutoServicio( rs.getInt( COLUMN_IS_AUTO_SERVICIO ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setFechaHr( rs.getTimestamp(COLUMN_FECHA_HR ) );
		dto.setIdSmsPaquetePrecio( rs.getInt( COLUMN_ID_SMS_PAQUETE_PRECIO ) );
		if (rs.wasNull()) {
			dto.setIdSmsPaquetePrecioNull( true );
		}
		
		dto.setCantidadAgregada( rs.getInt( COLUMN_CANTIDAD_AGREGADA ) );
		if (rs.wasNull()) {
			dto.setCantidadAgregadaNull( true );
		}
		
		dto.setCantidadRestada( rs.getInt( COLUMN_CANTIDAD_RESTADA ) );
		if (rs.wasNull()) {
			dto.setCantidadRestadaNull( true );
		}
		
		dto.setObservaciones( rs.getString( COLUMN_OBSERVACIONES ) );
		dto.setIdUsuarioPreto( rs.getInt( COLUMN_ID_USUARIO_PRETO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioPretoNull( true );
		}
		
		dto.setIdUsuarioVentas( rs.getInt( COLUMN_ID_USUARIO_VENTAS ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioVentasNull( true );
		}
		
		dto.setDatoPago1( rs.getString( COLUMN_DATO_PAGO1 ) );
		dto.setDatoPago2( rs.getString( COLUMN_DATO_PAGO2 ) );
		dto.setDatoPago3( rs.getString( COLUMN_DATO_PAGO3 ) );
		dto.setDatoPago4( rs.getString( COLUMN_DATO_PAGO4 ) );
		dto.setIdBancoOperacion( rs.getInt( COLUMN_ID_BANCO_OPERACION ) );
		if (rs.wasNull()) {
			dto.setIdBancoOperacionNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SmsCompraBitacora dto)
	{
		dto.setIdSmsCompraBitacoraModified( false );
		dto.setIsAutoServicioModified( false );
		dto.setIdEmpresaModified( false );
		dto.setFechaHrModified( false );
		dto.setIdSmsPaquetePrecioModified( false );
		dto.setCantidadAgregadaModified( false );
		dto.setCantidadRestadaModified( false );
		dto.setObservacionesModified( false );
		dto.setIdUsuarioPretoModified( false );
		dto.setIdUsuarioVentasModified( false );
		dto.setDatoPago1Modified( false );
		dto.setDatoPago2Modified( false );
		dto.setDatoPago3Modified( false );
		dto.setDatoPago4Modified( false );
		dto.setIdBancoOperacionModified( false );
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the specified arbitrary SQL statement
	 */
	public SmsCompraBitacora[] findByDynamicSelect(String sql, Object[] sqlParams) throws SmsCompraBitacoraDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsCompraBitacoraDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sms_compra_bitacora table that match the specified arbitrary SQL statement
	 */
	public SmsCompraBitacora[] findByDynamicWhere(String sql, Object[] sqlParams) throws SmsCompraBitacoraDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsCompraBitacoraDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
