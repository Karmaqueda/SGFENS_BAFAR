/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class FoliosDaoImpl extends AbstractDAO implements FoliosDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_FOLIO, ID_EMPRESA, FOLIO_DESDE, FOLIO_HASTA, ULTIMO_FOLIO, ID_TIPO_COMPROBANTE, SERIE, NO_APROBACION, ANIO_APROBACION, ID_ESTATUS, FECHA_GENERACION, FECHA_VIGENCIA, SECOFI, NUMERO_FACTURA, FACTURACION_MOVIL FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_FOLIO, ID_EMPRESA, FOLIO_DESDE, FOLIO_HASTA, ULTIMO_FOLIO, ID_TIPO_COMPROBANTE, SERIE, NO_APROBACION, ANIO_APROBACION, ID_ESTATUS, FECHA_GENERACION, FECHA_VIGENCIA, SECOFI, NUMERO_FACTURA, FACTURACION_MOVIL ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_FOLIO = ?, ID_EMPRESA = ?, FOLIO_DESDE = ?, FOLIO_HASTA = ?, ULTIMO_FOLIO = ?, ID_TIPO_COMPROBANTE = ?, SERIE = ?, NO_APROBACION = ?, ANIO_APROBACION = ?, ID_ESTATUS = ?, FECHA_GENERACION = ?, FECHA_VIGENCIA = ?, SECOFI = ?, NUMERO_FACTURA = ?, FACTURACION_MOVIL = ? WHERE ID_FOLIO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_FOLIO = ?";

	/** 
	 * Index of column ID_FOLIO
	 */
	protected static final int COLUMN_ID_FOLIO = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column FOLIO_DESDE
	 */
	protected static final int COLUMN_FOLIO_DESDE = 3;

	/** 
	 * Index of column FOLIO_HASTA
	 */
	protected static final int COLUMN_FOLIO_HASTA = 4;

	/** 
	 * Index of column ULTIMO_FOLIO
	 */
	protected static final int COLUMN_ULTIMO_FOLIO = 5;

	/** 
	 * Index of column ID_TIPO_COMPROBANTE
	 */
	protected static final int COLUMN_ID_TIPO_COMPROBANTE = 6;

	/** 
	 * Index of column SERIE
	 */
	protected static final int COLUMN_SERIE = 7;

	/** 
	 * Index of column NO_APROBACION
	 */
	protected static final int COLUMN_NO_APROBACION = 8;

	/** 
	 * Index of column ANIO_APROBACION
	 */
	protected static final int COLUMN_ANIO_APROBACION = 9;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 10;

	/** 
	 * Index of column FECHA_GENERACION
	 */
	protected static final int COLUMN_FECHA_GENERACION = 11;

	/** 
	 * Index of column FECHA_VIGENCIA
	 */
	protected static final int COLUMN_FECHA_VIGENCIA = 12;

	/** 
	 * Index of column SECOFI
	 */
	protected static final int COLUMN_SECOFI = 13;

	/** 
	 * Index of column NUMERO_FACTURA
	 */
	protected static final int COLUMN_NUMERO_FACTURA = 14;

	/** 
	 * Index of column FACTURACION_MOVIL
	 */
	protected static final int COLUMN_FACTURACION_MOVIL = 15;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 15;

	/** 
	 * Index of primary-key column ID_FOLIO
	 */
	protected static final int PK_COLUMN_ID_FOLIO = 1;

	/** 
	 * Inserts a new row in the folios table.
	 */
	public FoliosPk insert(Folios dto) throws FoliosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdFolioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_FOLIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioDesdeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIO_DESDE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioHastaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIO_HASTA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUltimoFolioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ULTIMO_FOLIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdTipoComprobanteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_TIPO_COMPROBANTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSerieModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SERIE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNoAprobacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NO_APROBACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAnioAprobacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ANIO_APROBACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaGeneracionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_GENERACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaVigenciaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_VIGENCIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSecofiModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SECOFI" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumeroFacturaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUMERO_FACTURA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFacturacionMovilModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FACTURACION_MOVIL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdFolioModified()) {
				stmt.setInt( index++, dto.getIdFolio() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isFolioDesdeModified()) {
				stmt.setInt( index++, dto.getFolioDesde() );
			}
		
			if (dto.isFolioHastaModified()) {
				stmt.setInt( index++, dto.getFolioHasta() );
			}
		
			if (dto.isUltimoFolioModified()) {
				stmt.setInt( index++, dto.getUltimoFolio() );
			}
		
			if (dto.isIdTipoComprobanteModified()) {
				stmt.setInt( index++, dto.getIdTipoComprobante() );
			}
		
			if (dto.isSerieModified()) {
				stmt.setString( index++, dto.getSerie() );
			}
		
			if (dto.isNoAprobacionModified()) {
				stmt.setString( index++, dto.getNoAprobacion() );
			}
		
			if (dto.isAnioAprobacionModified()) {
				stmt.setString( index++, dto.getAnioAprobacion() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isFechaGeneracionModified()) {
				stmt.setTimestamp(index++, dto.getFechaGeneracion()==null ? null : new java.sql.Timestamp( dto.getFechaGeneracion().getTime() ) );
			}
		
			if (dto.isFechaVigenciaModified()) {
				stmt.setString( index++, dto.getFechaVigencia() );
			}
		
			if (dto.isSecofiModified()) {
				stmt.setString( index++, dto.getSecofi() );
			}
		
			if (dto.isNumeroFacturaModified()) {
				stmt.setString( index++, dto.getNumeroFactura() );
			}
		
			if (dto.isFacturacionMovilModified()) {
				if (dto.isFacturacionMovilNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getFacturacionMovil() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FoliosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the folios table.
	 */
	public void update(FoliosPk pk, Folios dto) throws FoliosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdFolioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_FOLIO=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isFolioDesdeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIO_DESDE=?" );
				modified=true;
			}
		
			if (dto.isFolioHastaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIO_HASTA=?" );
				modified=true;
			}
		
			if (dto.isUltimoFolioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ULTIMO_FOLIO=?" );
				modified=true;
			}
		
			if (dto.isIdTipoComprobanteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_TIPO_COMPROBANTE=?" );
				modified=true;
			}
		
			if (dto.isSerieModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SERIE=?" );
				modified=true;
			}
		
			if (dto.isNoAprobacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NO_APROBACION=?" );
				modified=true;
			}
		
			if (dto.isAnioAprobacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ANIO_APROBACION=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isFechaGeneracionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_GENERACION=?" );
				modified=true;
			}
		
			if (dto.isFechaVigenciaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_VIGENCIA=?" );
				modified=true;
			}
		
			if (dto.isSecofiModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SECOFI=?" );
				modified=true;
			}
		
			if (dto.isNumeroFacturaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUMERO_FACTURA=?" );
				modified=true;
			}
		
			if (dto.isFacturacionMovilModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FACTURACION_MOVIL=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_FOLIO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdFolioModified()) {
				stmt.setInt( index++, dto.getIdFolio() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isFolioDesdeModified()) {
				stmt.setInt( index++, dto.getFolioDesde() );
			}
		
			if (dto.isFolioHastaModified()) {
				stmt.setInt( index++, dto.getFolioHasta() );
			}
		
			if (dto.isUltimoFolioModified()) {
				stmt.setInt( index++, dto.getUltimoFolio() );
			}
		
			if (dto.isIdTipoComprobanteModified()) {
				stmt.setInt( index++, dto.getIdTipoComprobante() );
			}
		
			if (dto.isSerieModified()) {
				stmt.setString( index++, dto.getSerie() );
			}
		
			if (dto.isNoAprobacionModified()) {
				stmt.setString( index++, dto.getNoAprobacion() );
			}
		
			if (dto.isAnioAprobacionModified()) {
				stmt.setString( index++, dto.getAnioAprobacion() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isFechaGeneracionModified()) {
				stmt.setTimestamp(index++, dto.getFechaGeneracion()==null ? null : new java.sql.Timestamp( dto.getFechaGeneracion().getTime() ) );
			}
		
			if (dto.isFechaVigenciaModified()) {
				stmt.setString( index++, dto.getFechaVigencia() );
			}
		
			if (dto.isSecofiModified()) {
				stmt.setString( index++, dto.getSecofi() );
			}
		
			if (dto.isNumeroFacturaModified()) {
				stmt.setString( index++, dto.getNumeroFactura() );
			}
		
			if (dto.isFacturacionMovilModified()) {
				if (dto.isFacturacionMovilNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getFacturacionMovil() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdFolio() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FoliosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the folios table.
	 */
	public void delete(FoliosPk pk) throws FoliosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdFolio() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FoliosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the folios table that matches the specified primary-key value.
	 */
	public Folios findByPrimaryKey(FoliosPk pk) throws FoliosDaoException
	{
		return findByPrimaryKey( pk.getIdFolio() );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'ID_FOLIO = :idFolio'.
	 */
	public Folios findByPrimaryKey(int idFolio) throws FoliosDaoException
	{
		Folios ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_FOLIO = ?", new Object[] {  new Integer(idFolio) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the folios table that match the criteria ''.
	 */
	public Folios[] findAll() throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_FOLIO", null );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'ID_FOLIO = :idFolio'.
	 */
	public Folios[] findWhereIdFolioEquals(int idFolio) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_FOLIO = ? ORDER BY ID_FOLIO", new Object[] {  new Integer(idFolio) } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Folios[] findWhereIdEmpresaEquals(int idEmpresa) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'FOLIO_DESDE = :folioDesde'.
	 */
	public Folios[] findWhereFolioDesdeEquals(int folioDesde) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_DESDE = ? ORDER BY FOLIO_DESDE", new Object[] {  new Integer(folioDesde) } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'FOLIO_HASTA = :folioHasta'.
	 */
	public Folios[] findWhereFolioHastaEquals(int folioHasta) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_HASTA = ? ORDER BY FOLIO_HASTA", new Object[] {  new Integer(folioHasta) } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'ULTIMO_FOLIO = :ultimoFolio'.
	 */
	public Folios[] findWhereUltimoFolioEquals(int ultimoFolio) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ULTIMO_FOLIO = ? ORDER BY ULTIMO_FOLIO", new Object[] {  new Integer(ultimoFolio) } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'ID_TIPO_COMPROBANTE = :idTipoComprobante'.
	 */
	public Folios[] findWhereIdTipoComprobanteEquals(int idTipoComprobante) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TIPO_COMPROBANTE = ? ORDER BY ID_TIPO_COMPROBANTE", new Object[] {  new Integer(idTipoComprobante) } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'SERIE = :serie'.
	 */
	public Folios[] findWhereSerieEquals(String serie) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SERIE = ? ORDER BY SERIE", new Object[] { serie } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'NO_APROBACION = :noAprobacion'.
	 */
	public Folios[] findWhereNoAprobacionEquals(String noAprobacion) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NO_APROBACION = ? ORDER BY NO_APROBACION", new Object[] { noAprobacion } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'ANIO_APROBACION = :anioAprobacion'.
	 */
	public Folios[] findWhereAnioAprobacionEquals(String anioAprobacion) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANIO_APROBACION = ? ORDER BY ANIO_APROBACION", new Object[] { anioAprobacion } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Folios[] findWhereIdEstatusEquals(int idEstatus) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'FECHA_GENERACION = :fechaGeneracion'.
	 */
	public Folios[] findWhereFechaGeneracionEquals(Date fechaGeneracion) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_GENERACION = ? ORDER BY FECHA_GENERACION", new Object[] { fechaGeneracion==null ? null : new java.sql.Timestamp( fechaGeneracion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'FECHA_VIGENCIA = :fechaVigencia'.
	 */
	public Folios[] findWhereFechaVigenciaEquals(String fechaVigencia) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_VIGENCIA = ? ORDER BY FECHA_VIGENCIA", new Object[] { fechaVigencia } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'SECOFI = :secofi'.
	 */
	public Folios[] findWhereSecofiEquals(String secofi) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SECOFI = ? ORDER BY SECOFI", new Object[] { secofi } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'NUMERO_FACTURA = :numeroFactura'.
	 */
	public Folios[] findWhereNumeroFacturaEquals(String numeroFactura) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMERO_FACTURA = ? ORDER BY NUMERO_FACTURA", new Object[] { numeroFactura } );
	}

	/** 
	 * Returns all rows from the folios table that match the criteria 'FACTURACION_MOVIL = :facturacionMovil'.
	 */
	public Folios[] findWhereFacturacionMovilEquals(int facturacionMovil) throws FoliosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FACTURACION_MOVIL = ? ORDER BY FACTURACION_MOVIL", new Object[] {  new Integer(facturacionMovil) } );
	}

	/**
	 * Method 'FoliosDaoImpl'
	 * 
	 */
	public FoliosDaoImpl()
	{
	}

	/**
	 * Method 'FoliosDaoImpl'
	 * 
	 * @param userConn
	 */
	public FoliosDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "FOLIOS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Folios fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Folios dto = new Folios();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Folios[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Folios dto = new Folios();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Folios ret[] = new Folios[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Folios dto, ResultSet rs) throws SQLException
	{
		dto.setIdFolio( rs.getInt( COLUMN_ID_FOLIO ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setFolioDesde( rs.getInt( COLUMN_FOLIO_DESDE ) );
		dto.setFolioHasta( rs.getInt( COLUMN_FOLIO_HASTA ) );
		dto.setUltimoFolio( rs.getInt( COLUMN_ULTIMO_FOLIO ) );
		dto.setIdTipoComprobante( rs.getInt( COLUMN_ID_TIPO_COMPROBANTE ) );
		dto.setSerie( rs.getString( COLUMN_SERIE ) );
		dto.setNoAprobacion( rs.getString( COLUMN_NO_APROBACION ) );
		dto.setAnioAprobacion( rs.getString( COLUMN_ANIO_APROBACION ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setFechaGeneracion( rs.getTimestamp(COLUMN_FECHA_GENERACION ) );
		dto.setFechaVigencia( rs.getString( COLUMN_FECHA_VIGENCIA ) );
		dto.setSecofi( rs.getString( COLUMN_SECOFI ) );
		dto.setNumeroFactura( rs.getString( COLUMN_NUMERO_FACTURA ) );
		dto.setFacturacionMovil( rs.getInt( COLUMN_FACTURACION_MOVIL ) );
		if (rs.wasNull()) {
			dto.setFacturacionMovilNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Folios dto)
	{
		dto.setIdFolioModified( false );
		dto.setIdEmpresaModified( false );
		dto.setFolioDesdeModified( false );
		dto.setFolioHastaModified( false );
		dto.setUltimoFolioModified( false );
		dto.setIdTipoComprobanteModified( false );
		dto.setSerieModified( false );
		dto.setNoAprobacionModified( false );
		dto.setAnioAprobacionModified( false );
		dto.setIdEstatusModified( false );
		dto.setFechaGeneracionModified( false );
		dto.setFechaVigenciaModified( false );
		dto.setSecofiModified( false );
		dto.setNumeroFacturaModified( false );
		dto.setFacturacionMovilModified( false );
	}

	/** 
	 * Returns all rows from the folios table that match the specified arbitrary SQL statement
	 */
	public Folios[] findByDynamicSelect(String sql, Object[] sqlParams) throws FoliosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FoliosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the folios table that match the specified arbitrary SQL statement
	 */
	public Folios[] findByDynamicWhere(String sql, Object[] sqlParams) throws FoliosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FoliosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
        
        protected final String SQL_SELECT_MAX = "SELECT ID_FOLIO, ID_EMPRESA, FOLIO_DESDE, FOLIO_HASTA, ULTIMO_FOLIO, ID_TIPO_COMPROBANTE, SERIE, NO_APROBACION, ANIO_APROBACION, ID_ESTATUS, FECHA_GENERACION, FECHA_VIGENCIA, SECOFI, NUMERO_FACTURA, FACTURACION_MOVIL FROM " + getTableName() + " ORDER BY ID_FOLIO DESC LIMIT 1 ";
                
        public Folios findLast() throws FoliosDaoException{
		Folios ret[] = findByDynamicSelect( SQL_SELECT_MAX , new Object[0] );
		return ret.length==0 ? null : ret[0];
	}

}
