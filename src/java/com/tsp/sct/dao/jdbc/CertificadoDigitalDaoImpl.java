/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CertificadoDigitalDaoImpl extends AbstractDAO implements CertificadoDigitalDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_CERTIFICADO_DIGITAL, ID_EMPRESA, NOMBRE_CER, NOMBRE_KEY, PASSWORD, FECHA_CADUCIDAD, NO_CERTIFICADO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_CERTIFICADO_DIGITAL, ID_EMPRESA, NOMBRE_CER, NOMBRE_KEY, PASSWORD, FECHA_CADUCIDAD, NO_CERTIFICADO ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_CERTIFICADO_DIGITAL = ?, ID_EMPRESA = ?, NOMBRE_CER = ?, NOMBRE_KEY = ?, PASSWORD = ?, FECHA_CADUCIDAD = ?, NO_CERTIFICADO = ? WHERE ID_CERTIFICADO_DIGITAL = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_CERTIFICADO_DIGITAL = ?";

	/** 
	 * Index of column ID_CERTIFICADO_DIGITAL
	 */
	protected static final int COLUMN_ID_CERTIFICADO_DIGITAL = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column NOMBRE_CER
	 */
	protected static final int COLUMN_NOMBRE_CER = 3;

	/** 
	 * Index of column NOMBRE_KEY
	 */
	protected static final int COLUMN_NOMBRE_KEY = 4;

	/** 
	 * Index of column PASSWORD
	 */
	protected static final int COLUMN_PASSWORD = 5;

	/** 
	 * Index of column FECHA_CADUCIDAD
	 */
	protected static final int COLUMN_FECHA_CADUCIDAD = 6;

	/** 
	 * Index of column NO_CERTIFICADO
	 */
	protected static final int COLUMN_NO_CERTIFICADO = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column ID_CERTIFICADO_DIGITAL
	 */
	protected static final int PK_COLUMN_ID_CERTIFICADO_DIGITAL = 1;

	/** 
	 * Inserts a new row in the certificado_digital table.
	 */
	public CertificadoDigitalPk insert(CertificadoDigital dto) throws CertificadoDigitalDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getIdCertificadoDigital() );
			stmt.setInt( index++, dto.getIdEmpresa() );
			stmt.setString( index++, dto.getNombreCer() );
			stmt.setString( index++, dto.getNombreKey() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setDate(index++, dto.getFechaCaducidad()==null ? null : new java.sql.Date( dto.getFechaCaducidad().getTime() ) );
			stmt.setString( index++, dto.getNoCertificado() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CertificadoDigitalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the certificado_digital table.
	 */
	public void update(CertificadoDigitalPk pk, CertificadoDigital dto) throws CertificadoDigitalDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdCertificadoDigital() );
			stmt.setInt( index++, dto.getIdEmpresa() );
			stmt.setString( index++, dto.getNombreCer() );
			stmt.setString( index++, dto.getNombreKey() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setDate(index++, dto.getFechaCaducidad()==null ? null : new java.sql.Date( dto.getFechaCaducidad().getTime() ) );
			stmt.setString( index++, dto.getNoCertificado() );
			stmt.setInt( 8, pk.getIdCertificadoDigital() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CertificadoDigitalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the certificado_digital table.
	 */
	public void delete(CertificadoDigitalPk pk) throws CertificadoDigitalDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdCertificadoDigital() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CertificadoDigitalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the certificado_digital table that matches the specified primary-key value.
	 */
	public CertificadoDigital findByPrimaryKey(CertificadoDigitalPk pk) throws CertificadoDigitalDaoException
	{
		return findByPrimaryKey( pk.getIdCertificadoDigital() );
	}

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'ID_CERTIFICADO_DIGITAL = :idCertificadoDigital'.
	 */
	public CertificadoDigital findByPrimaryKey(int idCertificadoDigital) throws CertificadoDigitalDaoException
	{
		CertificadoDigital ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_CERTIFICADO_DIGITAL = ?", new Object[] {  new Integer(idCertificadoDigital) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria ''.
	 */
	public CertificadoDigital[] findAll() throws CertificadoDigitalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_CERTIFICADO_DIGITAL", null );
	}

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'ID_CERTIFICADO_DIGITAL = :idCertificadoDigital'.
	 */
	public CertificadoDigital[] findWhereIdCertificadoDigitalEquals(int idCertificadoDigital) throws CertificadoDigitalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CERTIFICADO_DIGITAL = ? ORDER BY ID_CERTIFICADO_DIGITAL", new Object[] {  new Integer(idCertificadoDigital) } );
	}

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public CertificadoDigital[] findWhereIdEmpresaEquals(int idEmpresa) throws CertificadoDigitalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'NOMBRE_CER = :nombreCer'.
	 */
	public CertificadoDigital[] findWhereNombreCerEquals(String nombreCer) throws CertificadoDigitalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_CER = ? ORDER BY NOMBRE_CER", new Object[] { nombreCer } );
	}

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'NOMBRE_KEY = :nombreKey'.
	 */
	public CertificadoDigital[] findWhereNombreKeyEquals(String nombreKey) throws CertificadoDigitalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_KEY = ? ORDER BY NOMBRE_KEY", new Object[] { nombreKey } );
	}

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'PASSWORD = :password'.
	 */
	public CertificadoDigital[] findWherePasswordEquals(String password) throws CertificadoDigitalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PASSWORD = ? ORDER BY PASSWORD", new Object[] { password } );
	}

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'FECHA_CADUCIDAD = :fechaCaducidad'.
	 */
	public CertificadoDigital[] findWhereFechaCaducidadEquals(Date fechaCaducidad) throws CertificadoDigitalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_CADUCIDAD = ? ORDER BY FECHA_CADUCIDAD", new Object[] { fechaCaducidad==null ? null : new java.sql.Date( fechaCaducidad.getTime() ) } );
	}

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'NO_CERTIFICADO = :noCertificado'.
	 */
	public CertificadoDigital[] findWhereNoCertificadoEquals(String noCertificado) throws CertificadoDigitalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NO_CERTIFICADO = ? ORDER BY NO_CERTIFICADO", new Object[] { noCertificado } );
	}

	/**
	 * Method 'CertificadoDigitalDaoImpl'
	 * 
	 */
	public CertificadoDigitalDaoImpl()
	{
	}

	/**
	 * Method 'CertificadoDigitalDaoImpl'
	 * 
	 * @param userConn
	 */
	public CertificadoDigitalDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CERTIFICADO_DIGITAL";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CertificadoDigital fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CertificadoDigital dto = new CertificadoDigital();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CertificadoDigital[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CertificadoDigital dto = new CertificadoDigital();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CertificadoDigital ret[] = new CertificadoDigital[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CertificadoDigital dto, ResultSet rs) throws SQLException
	{
		dto.setIdCertificadoDigital( rs.getInt( COLUMN_ID_CERTIFICADO_DIGITAL ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setNombreCer( rs.getString( COLUMN_NOMBRE_CER ) );
		dto.setNombreKey( rs.getString( COLUMN_NOMBRE_KEY ) );
		dto.setPassword( rs.getString( COLUMN_PASSWORD ) );
		dto.setFechaCaducidad( rs.getDate(COLUMN_FECHA_CADUCIDAD ) );
		dto.setNoCertificado( rs.getString( COLUMN_NO_CERTIFICADO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CertificadoDigital dto)
	{
	}

	/** 
	 * Returns all rows from the certificado_digital table that match the specified arbitrary SQL statement
	 */
	public CertificadoDigital[] findByDynamicSelect(String sql, Object[] sqlParams) throws CertificadoDigitalDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CertificadoDigitalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the certificado_digital table that match the specified arbitrary SQL statement
	 */
	public CertificadoDigital[] findByDynamicWhere(String sql, Object[] sqlParams) throws CertificadoDigitalDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CertificadoDigitalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
        
         protected final String SQL_SELECT_MAX = "SELECT ID_CERTIFICADO_DIGITAL, ID_EMPRESA, NOMBRE_CER, NOMBRE_KEY, PASSWORD, FECHA_CADUCIDAD, NO_CERTIFICADO FROM " + getTableName() + " ORDER BY ID_CERTIFICADO_DIGITAL DESC LIMIT 1 ";
                
        public CertificadoDigital findLast() throws CertificadoDigitalDaoException	{
		CertificadoDigital ret[] = findByDynamicSelect( SQL_SELECT_MAX , new Object[0] );
		return ret.length==0 ? null : ret[0];
	}

}
