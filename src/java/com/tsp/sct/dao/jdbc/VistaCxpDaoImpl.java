/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class VistaCxpDaoImpl extends AbstractDAO implements VistaCxpDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_CXP_COMPROBANTE_FISCAL, cf_id_empresa, ID_VALIDACION, EMISOR_RFC, EMISOR_NOMBRE, SERIE, FOLIO, TOTAL, cf_importe_pagado, cf_fecha_hora_captura, FECHA_HORA_SELLO, cf_fecha_tentativa_pago, SELLO_EMISOR, CFDI_UUID, cf_id_estatus, ID_CXP_VALE_AZUL, ID_EMPRESA, ID_FOLIO, FOLIO_GENERADO, IMPORTE, IMPORTE_PAGADO, CONCEPTO, FECHA_HORA_CAPTURA, FECHA_HORA_CONTROL, FECHA_TENTATIVA_PAGO, ID_ESTATUS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column ID_CXP_COMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_ID_CXP_COMPROBANTE_FISCAL = 1;

	/** 
	 * Index of column cf_id_empresa
	 */
	protected static final int COLUMN_CF_ID_EMPRESA = 2;

	/** 
	 * Index of column ID_VALIDACION
	 */
	protected static final int COLUMN_ID_VALIDACION = 3;

	/** 
	 * Index of column EMISOR_RFC
	 */
	protected static final int COLUMN_EMISOR_RFC = 4;

	/** 
	 * Index of column EMISOR_NOMBRE
	 */
	protected static final int COLUMN_EMISOR_NOMBRE = 5;

	/** 
	 * Index of column SERIE
	 */
	protected static final int COLUMN_SERIE = 6;

	/** 
	 * Index of column FOLIO
	 */
	protected static final int COLUMN_FOLIO = 7;

	/** 
	 * Index of column TOTAL
	 */
	protected static final int COLUMN_TOTAL = 8;

	/** 
	 * Index of column cf_importe_pagado
	 */
	protected static final int COLUMN_CF_IMPORTE_PAGADO = 9;

	/** 
	 * Index of column cf_fecha_hora_captura
	 */
	protected static final int COLUMN_CF_FECHA_HORA_CAPTURA = 10;

	/** 
	 * Index of column FECHA_HORA_SELLO
	 */
	protected static final int COLUMN_FECHA_HORA_SELLO = 11;

	/** 
	 * Index of column cf_fecha_tentativa_pago
	 */
	protected static final int COLUMN_CF_FECHA_TENTATIVA_PAGO = 12;

	/** 
	 * Index of column SELLO_EMISOR
	 */
	protected static final int COLUMN_SELLO_EMISOR = 13;

	/** 
	 * Index of column CFDI_UUID
	 */
	protected static final int COLUMN_CFDI_UUID = 14;

	/** 
	 * Index of column cf_id_estatus
	 */
	protected static final int COLUMN_CF_ID_ESTATUS = 15;

	/** 
	 * Index of column ID_CXP_VALE_AZUL
	 */
	protected static final int COLUMN_ID_CXP_VALE_AZUL = 16;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 17;

	/** 
	 * Index of column ID_FOLIO
	 */
	protected static final int COLUMN_ID_FOLIO = 18;

	/** 
	 * Index of column FOLIO_GENERADO
	 */
	protected static final int COLUMN_FOLIO_GENERADO = 19;

	/** 
	 * Index of column IMPORTE
	 */
	protected static final int COLUMN_IMPORTE = 20;

	/** 
	 * Index of column IMPORTE_PAGADO
	 */
	protected static final int COLUMN_IMPORTE_PAGADO = 21;

	/** 
	 * Index of column CONCEPTO
	 */
	protected static final int COLUMN_CONCEPTO = 22;

	/** 
	 * Index of column FECHA_HORA_CAPTURA
	 */
	protected static final int COLUMN_FECHA_HORA_CAPTURA = 23;

	/** 
	 * Index of column FECHA_HORA_CONTROL
	 */
	protected static final int COLUMN_FECHA_HORA_CONTROL = 24;

	/** 
	 * Index of column FECHA_TENTATIVA_PAGO
	 */
	protected static final int COLUMN_FECHA_TENTATIVA_PAGO = 25;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 26;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 26;

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria ''.
	 */
	public VistaCxp[] findAll() throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'ID_CXP_COMPROBANTE_FISCAL = :idCxpComprobanteFiscal'.
	 */
	public VistaCxp[] findWhereIdCxpComprobanteFiscalEquals(int idCxpComprobanteFiscal) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CXP_COMPROBANTE_FISCAL = ? ORDER BY ID_CXP_COMPROBANTE_FISCAL", new Object[] {  new Integer(idCxpComprobanteFiscal) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'cf_id_empresa = :cfIdEmpresa'.
	 */
	public VistaCxp[] findWhereCfIdEmpresaEquals(int cfIdEmpresa) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cf_id_empresa = ? ORDER BY cf_id_empresa", new Object[] {  new Integer(cfIdEmpresa) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'ID_VALIDACION = :idValidacion'.
	 */
	public VistaCxp[] findWhereIdValidacionEquals(int idValidacion) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_VALIDACION = ? ORDER BY ID_VALIDACION", new Object[] {  new Integer(idValidacion) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'EMISOR_RFC = :emisorRfc'.
	 */
	public VistaCxp[] findWhereEmisorRfcEquals(String emisorRfc) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMISOR_RFC = ? ORDER BY EMISOR_RFC", new Object[] { emisorRfc } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'EMISOR_NOMBRE = :emisorNombre'.
	 */
	public VistaCxp[] findWhereEmisorNombreEquals(String emisorNombre) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMISOR_NOMBRE = ? ORDER BY EMISOR_NOMBRE", new Object[] { emisorNombre } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'SERIE = :serie'.
	 */
	public VistaCxp[] findWhereSerieEquals(String serie) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SERIE = ? ORDER BY SERIE", new Object[] { serie } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'FOLIO = :folio'.
	 */
	public VistaCxp[] findWhereFolioEquals(String folio) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO = ? ORDER BY FOLIO", new Object[] { folio } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'TOTAL = :total'.
	 */
	public VistaCxp[] findWhereTotalEquals(double total) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TOTAL = ? ORDER BY TOTAL", new Object[] {  new Double(total) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'cf_importe_pagado = :cfImportePagado'.
	 */
	public VistaCxp[] findWhereCfImportePagadoEquals(double cfImportePagado) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cf_importe_pagado = ? ORDER BY cf_importe_pagado", new Object[] {  new Double(cfImportePagado) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'cf_fecha_hora_captura = :cfFechaHoraCaptura'.
	 */
	public VistaCxp[] findWhereCfFechaHoraCapturaEquals(Date cfFechaHoraCaptura) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cf_fecha_hora_captura = ? ORDER BY cf_fecha_hora_captura", new Object[] { cfFechaHoraCaptura==null ? null : new java.sql.Timestamp( cfFechaHoraCaptura.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'FECHA_HORA_SELLO = :fechaHoraSello'.
	 */
	public VistaCxp[] findWhereFechaHoraSelloEquals(Date fechaHoraSello) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_HORA_SELLO = ? ORDER BY FECHA_HORA_SELLO", new Object[] { fechaHoraSello==null ? null : new java.sql.Timestamp( fechaHoraSello.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'cf_fecha_tentativa_pago = :cfFechaTentativaPago'.
	 */
	public VistaCxp[] findWhereCfFechaTentativaPagoEquals(Date cfFechaTentativaPago) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cf_fecha_tentativa_pago = ? ORDER BY cf_fecha_tentativa_pago", new Object[] { cfFechaTentativaPago==null ? null : new java.sql.Timestamp( cfFechaTentativaPago.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'SELLO_EMISOR = :selloEmisor'.
	 */
	public VistaCxp[] findWhereSelloEmisorEquals(String selloEmisor) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SELLO_EMISOR = ? ORDER BY SELLO_EMISOR", new Object[] { selloEmisor } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'CFDI_UUID = :cfdiUuid'.
	 */
	public VistaCxp[] findWhereCfdiUuidEquals(String cfdiUuid) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CFDI_UUID = ? ORDER BY CFDI_UUID", new Object[] { cfdiUuid } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'cf_id_estatus = :cfIdEstatus'.
	 */
	public VistaCxp[] findWhereCfIdEstatusEquals(int cfIdEstatus) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cf_id_estatus = ? ORDER BY cf_id_estatus", new Object[] {  new Integer(cfIdEstatus) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'ID_CXP_VALE_AZUL = :idCxpValeAzul'.
	 */
	public VistaCxp[] findWhereIdCxpValeAzulEquals(int idCxpValeAzul) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CXP_VALE_AZUL = ? ORDER BY ID_CXP_VALE_AZUL", new Object[] {  new Integer(idCxpValeAzul) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public VistaCxp[] findWhereIdEmpresaEquals(int idEmpresa) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'ID_FOLIO = :idFolio'.
	 */
	public VistaCxp[] findWhereIdFolioEquals(int idFolio) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_FOLIO = ? ORDER BY ID_FOLIO", new Object[] {  new Integer(idFolio) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'FOLIO_GENERADO = :folioGenerado'.
	 */
	public VistaCxp[] findWhereFolioGeneradoEquals(String folioGenerado) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_GENERADO = ? ORDER BY FOLIO_GENERADO", new Object[] { folioGenerado } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'IMPORTE = :importe'.
	 */
	public VistaCxp[] findWhereImporteEquals(double importe) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPORTE = ? ORDER BY IMPORTE", new Object[] {  new Double(importe) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'IMPORTE_PAGADO = :importePagado'.
	 */
	public VistaCxp[] findWhereImportePagadoEquals(double importePagado) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPORTE_PAGADO = ? ORDER BY IMPORTE_PAGADO", new Object[] {  new Double(importePagado) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'CONCEPTO = :concepto'.
	 */
	public VistaCxp[] findWhereConceptoEquals(String concepto) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONCEPTO = ? ORDER BY CONCEPTO", new Object[] { concepto } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'FECHA_HORA_CAPTURA = :fechaHoraCaptura'.
	 */
	public VistaCxp[] findWhereFechaHoraCapturaEquals(Date fechaHoraCaptura) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_HORA_CAPTURA = ? ORDER BY FECHA_HORA_CAPTURA", new Object[] { fechaHoraCaptura==null ? null : new java.sql.Timestamp( fechaHoraCaptura.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'FECHA_HORA_CONTROL = :fechaHoraControl'.
	 */
	public VistaCxp[] findWhereFechaHoraControlEquals(Date fechaHoraControl) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_HORA_CONTROL = ? ORDER BY FECHA_HORA_CONTROL", new Object[] { fechaHoraControl==null ? null : new java.sql.Timestamp( fechaHoraControl.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'FECHA_TENTATIVA_PAGO = :fechaTentativaPago'.
	 */
	public VistaCxp[] findWhereFechaTentativaPagoEquals(Date fechaTentativaPago) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_TENTATIVA_PAGO = ? ORDER BY FECHA_TENTATIVA_PAGO", new Object[] { fechaTentativaPago==null ? null : new java.sql.Timestamp( fechaTentativaPago.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public VistaCxp[] findWhereIdEstatusEquals(int idEstatus) throws VistaCxpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/**
	 * Method 'VistaCxpDaoImpl'
	 * 
	 */
	public VistaCxpDaoImpl()
	{
	}

	/**
	 * Method 'VistaCxpDaoImpl'
	 * 
	 * @param userConn
	 */
	public VistaCxpDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "vista_cxp";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected VistaCxp fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			VistaCxp dto = new VistaCxp();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected VistaCxp[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			VistaCxp dto = new VistaCxp();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		VistaCxp ret[] = new VistaCxp[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(VistaCxp dto, ResultSet rs) throws SQLException
	{
		dto.setIdCxpComprobanteFiscal( rs.getInt( COLUMN_ID_CXP_COMPROBANTE_FISCAL ) );
		if (rs.wasNull()) {
			dto.setIdCxpComprobanteFiscalNull( true );
		}
		
		dto.setCfIdEmpresa( rs.getInt( COLUMN_CF_ID_EMPRESA ) );
		if (rs.wasNull()) {
			dto.setCfIdEmpresaNull( true );
		}
		
		dto.setIdValidacion( rs.getInt( COLUMN_ID_VALIDACION ) );
		if (rs.wasNull()) {
			dto.setIdValidacionNull( true );
		}
		
		dto.setEmisorRfc( rs.getString( COLUMN_EMISOR_RFC ) );
		dto.setEmisorNombre( rs.getString( COLUMN_EMISOR_NOMBRE ) );
		dto.setSerie( rs.getString( COLUMN_SERIE ) );
		dto.setFolio( rs.getString( COLUMN_FOLIO ) );
		dto.setTotal( rs.getDouble( COLUMN_TOTAL ) );
		if (rs.wasNull()) {
			dto.setTotalNull( true );
		}
		
		dto.setCfImportePagado( rs.getDouble( COLUMN_CF_IMPORTE_PAGADO ) );
		if (rs.wasNull()) {
			dto.setCfImportePagadoNull( true );
		}
		
		dto.setCfFechaHoraCaptura( rs.getTimestamp(COLUMN_CF_FECHA_HORA_CAPTURA ) );
		dto.setFechaHoraSello( rs.getTimestamp(COLUMN_FECHA_HORA_SELLO ) );
		dto.setCfFechaTentativaPago( rs.getTimestamp(COLUMN_CF_FECHA_TENTATIVA_PAGO ) );
		dto.setSelloEmisor( rs.getString( COLUMN_SELLO_EMISOR ) );
		dto.setCfdiUuid( rs.getString( COLUMN_CFDI_UUID ) );
		dto.setCfIdEstatus( rs.getInt( COLUMN_CF_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setCfIdEstatusNull( true );
		}
		
		dto.setIdCxpValeAzul( rs.getInt( COLUMN_ID_CXP_VALE_AZUL ) );
		if (rs.wasNull()) {
			dto.setIdCxpValeAzulNull( true );
		}
		
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		if (rs.wasNull()) {
			dto.setIdEmpresaNull( true );
		}
		
		dto.setIdFolio( rs.getInt( COLUMN_ID_FOLIO ) );
		if (rs.wasNull()) {
			dto.setIdFolioNull( true );
		}
		
		dto.setFolioGenerado( rs.getString( COLUMN_FOLIO_GENERADO ) );
		dto.setImporte( rs.getDouble( COLUMN_IMPORTE ) );
		if (rs.wasNull()) {
			dto.setImporteNull( true );
		}
		
		dto.setImportePagado( rs.getDouble( COLUMN_IMPORTE_PAGADO ) );
		if (rs.wasNull()) {
			dto.setImportePagadoNull( true );
		}
		
		dto.setConcepto( rs.getString( COLUMN_CONCEPTO ) );
		dto.setFechaHoraCaptura( rs.getTimestamp(COLUMN_FECHA_HORA_CAPTURA ) );
		dto.setFechaHoraControl( rs.getTimestamp(COLUMN_FECHA_HORA_CONTROL ) );
		dto.setFechaTentativaPago( rs.getTimestamp(COLUMN_FECHA_TENTATIVA_PAGO ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(VistaCxp dto)
	{
		dto.setIdCxpComprobanteFiscalModified( false );
		dto.setCfIdEmpresaModified( false );
		dto.setIdValidacionModified( false );
		dto.setEmisorRfcModified( false );
		dto.setEmisorNombreModified( false );
		dto.setSerieModified( false );
		dto.setFolioModified( false );
		dto.setTotalModified( false );
		dto.setCfImportePagadoModified( false );
		dto.setCfFechaHoraCapturaModified( false );
		dto.setFechaHoraSelloModified( false );
		dto.setCfFechaTentativaPagoModified( false );
		dto.setSelloEmisorModified( false );
		dto.setCfdiUuidModified( false );
		dto.setCfIdEstatusModified( false );
		dto.setIdCxpValeAzulModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdFolioModified( false );
		dto.setFolioGeneradoModified( false );
		dto.setImporteModified( false );
		dto.setImportePagadoModified( false );
		dto.setConceptoModified( false );
		dto.setFechaHoraCapturaModified( false );
		dto.setFechaHoraControlModified( false );
		dto.setFechaTentativaPagoModified( false );
		dto.setIdEstatusModified( false );
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the specified arbitrary SQL statement
	 */
	public VistaCxp[] findByDynamicSelect(String sql, Object[] sqlParams) throws VistaCxpDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VistaCxpDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the vista_cxp table that match the specified arbitrary SQL statement
	 */
	public VistaCxp[] findByDynamicWhere(String sql, Object[] sqlParams) throws VistaCxpDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VistaCxpDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
