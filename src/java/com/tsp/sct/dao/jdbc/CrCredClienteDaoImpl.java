/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CrCredClienteDaoImpl extends AbstractDAO implements CrCredClienteDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_cred_cliente, id_formulario_evento, id_estatus, id_empresa, fecha_hr_creacion, fecha_hr_edicion, id_usuario_edicion, rfc, nombre_primer, nombre_segundo, apellido_paterno, apellido_materno, latitud, longitud, correos_electronicos, id_cliente_s_tercero, id_credito_s_tercero, fecha_inicio_credito, fecha_fin_credito, plazo_meses, plazo_vencimiento, vencimiento, monto_prestado, monto_adeudado, dias_mora, saldo_vencido, importe_pagar_vencimiento, fecha_hora_agenda, num_pagos_realizados_vencimiento, suma_monto_pagado_vencimiento, cuotas_devengadas, cuotas_pagadas, cuotas_vencidas FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_cred_cliente, id_formulario_evento, id_estatus, id_empresa, fecha_hr_creacion, fecha_hr_edicion, id_usuario_edicion, rfc, nombre_primer, nombre_segundo, apellido_paterno, apellido_materno, latitud, longitud, correos_electronicos, id_cliente_s_tercero, id_credito_s_tercero, fecha_inicio_credito, fecha_fin_credito, plazo_meses, plazo_vencimiento, vencimiento, monto_prestado, monto_adeudado, dias_mora, saldo_vencido, importe_pagar_vencimiento, fecha_hora_agenda, num_pagos_realizados_vencimiento, suma_monto_pagado_vencimiento, cuotas_devengadas, cuotas_pagadas, cuotas_vencidas ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_cred_cliente = ?, id_formulario_evento = ?, id_estatus = ?, id_empresa = ?, fecha_hr_creacion = ?, fecha_hr_edicion = ?, id_usuario_edicion = ?, rfc = ?, nombre_primer = ?, nombre_segundo = ?, apellido_paterno = ?, apellido_materno = ?, latitud = ?, longitud = ?, correos_electronicos = ?, id_cliente_s_tercero = ?, id_credito_s_tercero = ?, fecha_inicio_credito = ?, fecha_fin_credito = ?, plazo_meses = ?, plazo_vencimiento = ?, vencimiento = ?, monto_prestado = ?, monto_adeudado = ?, dias_mora = ?, saldo_vencido = ?, importe_pagar_vencimiento = ?, fecha_hora_agenda = ?, num_pagos_realizados_vencimiento = ?, suma_monto_pagado_vencimiento = ?, cuotas_devengadas = ?, cuotas_pagadas = ?, cuotas_vencidas = ? WHERE id_cred_cliente = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_cred_cliente = ?";

	/** 
	 * Index of column id_cred_cliente
	 */
	protected static final int COLUMN_ID_CRED_CLIENTE = 1;

	/** 
	 * Index of column id_formulario_evento
	 */
	protected static final int COLUMN_ID_FORMULARIO_EVENTO = 2;

	/** 
	 * Index of column id_estatus
	 */
	protected static final int COLUMN_ID_ESTATUS = 3;

	/** 
	 * Index of column id_empresa
	 */
	protected static final int COLUMN_ID_EMPRESA = 4;

	/** 
	 * Index of column fecha_hr_creacion
	 */
	protected static final int COLUMN_FECHA_HR_CREACION = 5;

	/** 
	 * Index of column fecha_hr_edicion
	 */
	protected static final int COLUMN_FECHA_HR_EDICION = 6;

	/** 
	 * Index of column id_usuario_edicion
	 */
	protected static final int COLUMN_ID_USUARIO_EDICION = 7;

	/** 
	 * Index of column rfc
	 */
	protected static final int COLUMN_RFC = 8;

	/** 
	 * Index of column nombre_primer
	 */
	protected static final int COLUMN_NOMBRE_PRIMER = 9;

	/** 
	 * Index of column nombre_segundo
	 */
	protected static final int COLUMN_NOMBRE_SEGUNDO = 10;

	/** 
	 * Index of column apellido_paterno
	 */
	protected static final int COLUMN_APELLIDO_PATERNO = 11;

	/** 
	 * Index of column apellido_materno
	 */
	protected static final int COLUMN_APELLIDO_MATERNO = 12;

	/** 
	 * Index of column latitud
	 */
	protected static final int COLUMN_LATITUD = 13;

	/** 
	 * Index of column longitud
	 */
	protected static final int COLUMN_LONGITUD = 14;

	/** 
	 * Index of column correos_electronicos
	 */
	protected static final int COLUMN_CORREOS_ELECTRONICOS = 15;

	/** 
	 * Index of column id_cliente_s_tercero
	 */
	protected static final int COLUMN_ID_CLIENTE_S_TERCERO = 16;

	/** 
	 * Index of column id_credito_s_tercero
	 */
	protected static final int COLUMN_ID_CREDITO_S_TERCERO = 17;

	/** 
	 * Index of column fecha_inicio_credito
	 */
	protected static final int COLUMN_FECHA_INICIO_CREDITO = 18;

	/** 
	 * Index of column fecha_fin_credito
	 */
	protected static final int COLUMN_FECHA_FIN_CREDITO = 19;

	/** 
	 * Index of column plazo_meses
	 */
	protected static final int COLUMN_PLAZO_MESES = 20;

	/** 
	 * Index of column plazo_vencimiento
	 */
	protected static final int COLUMN_PLAZO_VENCIMIENTO = 21;

	/** 
	 * Index of column vencimiento
	 */
	protected static final int COLUMN_VENCIMIENTO = 22;

	/** 
	 * Index of column monto_prestado
	 */
	protected static final int COLUMN_MONTO_PRESTADO = 23;

	/** 
	 * Index of column monto_adeudado
	 */
	protected static final int COLUMN_MONTO_ADEUDADO = 24;

	/** 
	 * Index of column dias_mora
	 */
	protected static final int COLUMN_DIAS_MORA = 25;

	/** 
	 * Index of column saldo_vencido
	 */
	protected static final int COLUMN_SALDO_VENCIDO = 26;

	/** 
	 * Index of column importe_pagar_vencimiento
	 */
	protected static final int COLUMN_IMPORTE_PAGAR_VENCIMIENTO = 27;

	/** 
	 * Index of column fecha_hora_agenda
	 */
	protected static final int COLUMN_FECHA_HORA_AGENDA = 28;

	/** 
	 * Index of column num_pagos_realizados_vencimiento
	 */
	protected static final int COLUMN_NUM_PAGOS_REALIZADOS_VENCIMIENTO = 29;

	/** 
	 * Index of column suma_monto_pagado_vencimiento
	 */
	protected static final int COLUMN_SUMA_MONTO_PAGADO_VENCIMIENTO = 30;

	/** 
	 * Index of column cuotas_devengadas
	 */
	protected static final int COLUMN_CUOTAS_DEVENGADAS = 31;

	/** 
	 * Index of column cuotas_pagadas
	 */
	protected static final int COLUMN_CUOTAS_PAGADAS = 32;

	/** 
	 * Index of column cuotas_vencidas
	 */
	protected static final int COLUMN_CUOTAS_VENCIDAS = 33;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 33;

	/** 
	 * Index of primary-key column id_cred_cliente
	 */
	protected static final int PK_COLUMN_ID_CRED_CLIENTE = 1;

	/** 
	 * Inserts a new row in the cr_cred_cliente table.
	 */
	public CrCredClientePk insert(CrCredCliente dto) throws CrCredClienteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdCredClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_cred_cliente" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdFormularioEventoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_formulario_evento" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_estatus" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_empresa" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrCreacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_creacion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrEdicionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_edicion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioEdicionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_usuario_edicion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRfcModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "rfc" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombrePrimerModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "nombre_primer" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreSegundoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "nombre_segundo" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isApellidoPaternoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "apellido_paterno" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isApellidoMaternoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "apellido_materno" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLatitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "latitud" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLongitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "longitud" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCorreosElectronicosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "correos_electronicos" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdClienteSTerceroModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_cliente_s_tercero" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdCreditoSTerceroModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_credito_s_tercero" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaInicioCreditoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_inicio_credito" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaFinCreditoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_fin_credito" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPlazoMesesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "plazo_meses" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPlazoVencimientoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "plazo_vencimiento" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isVencimientoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "vencimiento" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMontoPrestadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "monto_prestado" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMontoAdeudadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "monto_adeudado" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDiasMoraModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "dias_mora" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSaldoVencidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "saldo_vencido" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isImportePagarVencimientoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "importe_pagar_vencimiento" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHoraAgendaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hora_agenda" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumPagosRealizadosVencimientoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "num_pagos_realizados_vencimiento" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSumaMontoPagadoVencimientoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "suma_monto_pagado_vencimiento" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCuotasDevengadasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "cuotas_devengadas" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCuotasPagadasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "cuotas_pagadas" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCuotasVencidasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "cuotas_vencidas" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdCredClienteModified()) {
				stmt.setInt( index++, dto.getIdCredCliente() );
			}
		
			if (dto.isIdFormularioEventoModified()) {
				if (dto.isIdFormularioEventoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFormularioEvento() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isFechaHrCreacionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaHrCreacion().getTime() ) );
			}
		
			if (dto.isFechaHrEdicionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrEdicion()==null ? null : new java.sql.Timestamp( dto.getFechaHrEdicion().getTime() ) );
			}
		
			if (dto.isIdUsuarioEdicionModified()) {
				if (dto.isIdUsuarioEdicionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioEdicion() );
				}
		
			}
		
			if (dto.isRfcModified()) {
				stmt.setString( index++, dto.getRfc() );
			}
		
			if (dto.isNombrePrimerModified()) {
				stmt.setString( index++, dto.getNombrePrimer() );
			}
		
			if (dto.isNombreSegundoModified()) {
				stmt.setString( index++, dto.getNombreSegundo() );
			}
		
			if (dto.isApellidoPaternoModified()) {
				stmt.setString( index++, dto.getApellidoPaterno() );
			}
		
			if (dto.isApellidoMaternoModified()) {
				stmt.setString( index++, dto.getApellidoMaterno() );
			}
		
			if (dto.isLatitudModified()) {
				if (dto.isLatitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLatitud() );
				}
		
			}
		
			if (dto.isLongitudModified()) {
				if (dto.isLongitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLongitud() );
				}
		
			}
		
			if (dto.isCorreosElectronicosModified()) {
				stmt.setString( index++, dto.getCorreosElectronicos() );
			}
		
			if (dto.isIdClienteSTerceroModified()) {
				stmt.setString( index++, dto.getIdClienteSTercero() );
			}
		
			if (dto.isIdCreditoSTerceroModified()) {
				stmt.setString( index++, dto.getIdCreditoSTercero() );
			}
		
			if (dto.isFechaInicioCreditoModified()) {
				stmt.setDate(index++, dto.getFechaInicioCredito()==null ? null : new java.sql.Date( dto.getFechaInicioCredito().getTime() ) );
			}
		
			if (dto.isFechaFinCreditoModified()) {
				stmt.setDate(index++, dto.getFechaFinCredito()==null ? null : new java.sql.Date( dto.getFechaFinCredito().getTime() ) );
			}
		
			if (dto.isPlazoMesesModified()) {
				if (dto.isPlazoMesesNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPlazoMeses() );
				}
		
			}
		
			if (dto.isPlazoVencimientoModified()) {
				if (dto.isPlazoVencimientoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPlazoVencimiento() );
				}
		
			}
		
			if (dto.isVencimientoModified()) {
				stmt.setString( index++, dto.getVencimiento() );
			}
		
			if (dto.isMontoPrestadoModified()) {
				if (dto.isMontoPrestadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMontoPrestado() );
				}
		
			}
		
			if (dto.isMontoAdeudadoModified()) {
				if (dto.isMontoAdeudadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMontoAdeudado() );
				}
		
			}
		
			if (dto.isDiasMoraModified()) {
				if (dto.isDiasMoraNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDiasMora() );
				}
		
			}
		
			if (dto.isSaldoVencidoModified()) {
				if (dto.isSaldoVencidoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSaldoVencido() );
				}
		
			}
		
			if (dto.isImportePagarVencimientoModified()) {
				if (dto.isImportePagarVencimientoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getImportePagarVencimiento() );
				}
		
			}
		
			if (dto.isFechaHoraAgendaModified()) {
				stmt.setTimestamp(index++, dto.getFechaHoraAgenda()==null ? null : new java.sql.Timestamp( dto.getFechaHoraAgenda().getTime() ) );
			}
		
			if (dto.isNumPagosRealizadosVencimientoModified()) {
				if (dto.isNumPagosRealizadosVencimientoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getNumPagosRealizadosVencimiento() );
				}
		
			}
		
			if (dto.isSumaMontoPagadoVencimientoModified()) {
				if (dto.isSumaMontoPagadoVencimientoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSumaMontoPagadoVencimiento() );
				}
		
			}
		
			if (dto.isCuotasDevengadasModified()) {
				if (dto.isCuotasDevengadasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCuotasDevengadas() );
				}
		
			}
		
			if (dto.isCuotasPagadasModified()) {
				if (dto.isCuotasPagadasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCuotasPagadas() );
				}
		
			}
		
			if (dto.isCuotasVencidasModified()) {
				if (dto.isCuotasVencidasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCuotasVencidas() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdCredCliente( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrCredClienteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the cr_cred_cliente table.
	 */
	public void update(CrCredClientePk pk, CrCredCliente dto) throws CrCredClienteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdCredClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_cred_cliente=?" );
				modified=true;
			}
		
			if (dto.isIdFormularioEventoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_formulario_evento=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_estatus=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_empresa=?" );
				modified=true;
			}
		
			if (dto.isFechaHrCreacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_creacion=?" );
				modified=true;
			}
		
			if (dto.isFechaHrEdicionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_edicion=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioEdicionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_usuario_edicion=?" );
				modified=true;
			}
		
			if (dto.isRfcModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "rfc=?" );
				modified=true;
			}
		
			if (dto.isNombrePrimerModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "nombre_primer=?" );
				modified=true;
			}
		
			if (dto.isNombreSegundoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "nombre_segundo=?" );
				modified=true;
			}
		
			if (dto.isApellidoPaternoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "apellido_paterno=?" );
				modified=true;
			}
		
			if (dto.isApellidoMaternoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "apellido_materno=?" );
				modified=true;
			}
		
			if (dto.isLatitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "latitud=?" );
				modified=true;
			}
		
			if (dto.isLongitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "longitud=?" );
				modified=true;
			}
		
			if (dto.isCorreosElectronicosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "correos_electronicos=?" );
				modified=true;
			}
		
			if (dto.isIdClienteSTerceroModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_cliente_s_tercero=?" );
				modified=true;
			}
		
			if (dto.isIdCreditoSTerceroModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_credito_s_tercero=?" );
				modified=true;
			}
		
			if (dto.isFechaInicioCreditoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_inicio_credito=?" );
				modified=true;
			}
		
			if (dto.isFechaFinCreditoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_fin_credito=?" );
				modified=true;
			}
		
			if (dto.isPlazoMesesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "plazo_meses=?" );
				modified=true;
			}
		
			if (dto.isPlazoVencimientoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "plazo_vencimiento=?" );
				modified=true;
			}
		
			if (dto.isVencimientoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "vencimiento=?" );
				modified=true;
			}
		
			if (dto.isMontoPrestadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "monto_prestado=?" );
				modified=true;
			}
		
			if (dto.isMontoAdeudadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "monto_adeudado=?" );
				modified=true;
			}
		
			if (dto.isDiasMoraModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "dias_mora=?" );
				modified=true;
			}
		
			if (dto.isSaldoVencidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "saldo_vencido=?" );
				modified=true;
			}
		
			if (dto.isImportePagarVencimientoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "importe_pagar_vencimiento=?" );
				modified=true;
			}
		
			if (dto.isFechaHoraAgendaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hora_agenda=?" );
				modified=true;
			}
		
			if (dto.isNumPagosRealizadosVencimientoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "num_pagos_realizados_vencimiento=?" );
				modified=true;
			}
		
			if (dto.isSumaMontoPagadoVencimientoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "suma_monto_pagado_vencimiento=?" );
				modified=true;
			}
		
			if (dto.isCuotasDevengadasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "cuotas_devengadas=?" );
				modified=true;
			}
		
			if (dto.isCuotasPagadasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "cuotas_pagadas=?" );
				modified=true;
			}
		
			if (dto.isCuotasVencidasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "cuotas_vencidas=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_cred_cliente=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdCredClienteModified()) {
				stmt.setInt( index++, dto.getIdCredCliente() );
			}
		
			if (dto.isIdFormularioEventoModified()) {
				if (dto.isIdFormularioEventoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFormularioEvento() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isFechaHrCreacionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaHrCreacion().getTime() ) );
			}
		
			if (dto.isFechaHrEdicionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrEdicion()==null ? null : new java.sql.Timestamp( dto.getFechaHrEdicion().getTime() ) );
			}
		
			if (dto.isIdUsuarioEdicionModified()) {
				if (dto.isIdUsuarioEdicionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioEdicion() );
				}
		
			}
		
			if (dto.isRfcModified()) {
				stmt.setString( index++, dto.getRfc() );
			}
		
			if (dto.isNombrePrimerModified()) {
				stmt.setString( index++, dto.getNombrePrimer() );
			}
		
			if (dto.isNombreSegundoModified()) {
				stmt.setString( index++, dto.getNombreSegundo() );
			}
		
			if (dto.isApellidoPaternoModified()) {
				stmt.setString( index++, dto.getApellidoPaterno() );
			}
		
			if (dto.isApellidoMaternoModified()) {
				stmt.setString( index++, dto.getApellidoMaterno() );
			}
		
			if (dto.isLatitudModified()) {
				if (dto.isLatitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLatitud() );
				}
		
			}
		
			if (dto.isLongitudModified()) {
				if (dto.isLongitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLongitud() );
				}
		
			}
		
			if (dto.isCorreosElectronicosModified()) {
				stmt.setString( index++, dto.getCorreosElectronicos() );
			}
		
			if (dto.isIdClienteSTerceroModified()) {
				stmt.setString( index++, dto.getIdClienteSTercero() );
			}
		
			if (dto.isIdCreditoSTerceroModified()) {
				stmt.setString( index++, dto.getIdCreditoSTercero() );
			}
		
			if (dto.isFechaInicioCreditoModified()) {
				stmt.setDate(index++, dto.getFechaInicioCredito()==null ? null : new java.sql.Date( dto.getFechaInicioCredito().getTime() ) );
			}
		
			if (dto.isFechaFinCreditoModified()) {
				stmt.setDate(index++, dto.getFechaFinCredito()==null ? null : new java.sql.Date( dto.getFechaFinCredito().getTime() ) );
			}
		
			if (dto.isPlazoMesesModified()) {
				if (dto.isPlazoMesesNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPlazoMeses() );
				}
		
			}
		
			if (dto.isPlazoVencimientoModified()) {
				if (dto.isPlazoVencimientoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPlazoVencimiento() );
				}
		
			}
		
			if (dto.isVencimientoModified()) {
				stmt.setString( index++, dto.getVencimiento() );
			}
		
			if (dto.isMontoPrestadoModified()) {
				if (dto.isMontoPrestadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMontoPrestado() );
				}
		
			}
		
			if (dto.isMontoAdeudadoModified()) {
				if (dto.isMontoAdeudadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMontoAdeudado() );
				}
		
			}
		
			if (dto.isDiasMoraModified()) {
				if (dto.isDiasMoraNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDiasMora() );
				}
		
			}
		
			if (dto.isSaldoVencidoModified()) {
				if (dto.isSaldoVencidoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSaldoVencido() );
				}
		
			}
		
			if (dto.isImportePagarVencimientoModified()) {
				if (dto.isImportePagarVencimientoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getImportePagarVencimiento() );
				}
		
			}
		
			if (dto.isFechaHoraAgendaModified()) {
				stmt.setTimestamp(index++, dto.getFechaHoraAgenda()==null ? null : new java.sql.Timestamp( dto.getFechaHoraAgenda().getTime() ) );
			}
		
			if (dto.isNumPagosRealizadosVencimientoModified()) {
				if (dto.isNumPagosRealizadosVencimientoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getNumPagosRealizadosVencimiento() );
				}
		
			}
		
			if (dto.isSumaMontoPagadoVencimientoModified()) {
				if (dto.isSumaMontoPagadoVencimientoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSumaMontoPagadoVencimiento() );
				}
		
			}
		
			if (dto.isCuotasDevengadasModified()) {
				if (dto.isCuotasDevengadasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCuotasDevengadas() );
				}
		
			}
		
			if (dto.isCuotasPagadasModified()) {
				if (dto.isCuotasPagadasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCuotasPagadas() );
				}
		
			}
		
			if (dto.isCuotasVencidasModified()) {
				if (dto.isCuotasVencidasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCuotasVencidas() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdCredCliente() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrCredClienteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the cr_cred_cliente table.
	 */
	public void delete(CrCredClientePk pk) throws CrCredClienteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdCredCliente() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrCredClienteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the cr_cred_cliente table that matches the specified primary-key value.
	 */
	public CrCredCliente findByPrimaryKey(CrCredClientePk pk) throws CrCredClienteDaoException
	{
		return findByPrimaryKey( pk.getIdCredCliente() );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'id_cred_cliente = :idCredCliente'.
	 */
	public CrCredCliente findByPrimaryKey(int idCredCliente) throws CrCredClienteDaoException
	{
		CrCredCliente ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_cred_cliente = ?", new Object[] {  new Integer(idCredCliente) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria ''.
	 */
	public CrCredCliente[] findAll() throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_cred_cliente", null );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'id_cred_cliente = :idCredCliente'.
	 */
	public CrCredCliente[] findWhereIdCredClienteEquals(int idCredCliente) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_cred_cliente = ? ORDER BY id_cred_cliente", new Object[] {  new Integer(idCredCliente) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'id_formulario_evento = :idFormularioEvento'.
	 */
	public CrCredCliente[] findWhereIdFormularioEventoEquals(int idFormularioEvento) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_formulario_evento = ? ORDER BY id_formulario_evento", new Object[] {  new Integer(idFormularioEvento) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public CrCredCliente[] findWhereIdEstatusEquals(int idEstatus) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_estatus = ? ORDER BY id_estatus", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public CrCredCliente[] findWhereIdEmpresaEquals(int idEmpresa) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_empresa = ? ORDER BY id_empresa", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'fecha_hr_creacion = :fechaHrCreacion'.
	 */
	public CrCredCliente[] findWhereFechaHrCreacionEquals(Date fechaHrCreacion) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_creacion = ? ORDER BY fecha_hr_creacion", new Object[] { fechaHrCreacion==null ? null : new java.sql.Timestamp( fechaHrCreacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'fecha_hr_edicion = :fechaHrEdicion'.
	 */
	public CrCredCliente[] findWhereFechaHrEdicionEquals(Date fechaHrEdicion) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_edicion = ? ORDER BY fecha_hr_edicion", new Object[] { fechaHrEdicion==null ? null : new java.sql.Timestamp( fechaHrEdicion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'id_usuario_edicion = :idUsuarioEdicion'.
	 */
	public CrCredCliente[] findWhereIdUsuarioEdicionEquals(int idUsuarioEdicion) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_usuario_edicion = ? ORDER BY id_usuario_edicion", new Object[] {  new Integer(idUsuarioEdicion) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'rfc = :rfc'.
	 */
	public CrCredCliente[] findWhereRfcEquals(String rfc) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE rfc = ? ORDER BY rfc", new Object[] { rfc } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'nombre_primer = :nombrePrimer'.
	 */
	public CrCredCliente[] findWhereNombrePrimerEquals(String nombrePrimer) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nombre_primer = ? ORDER BY nombre_primer", new Object[] { nombrePrimer } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'nombre_segundo = :nombreSegundo'.
	 */
	public CrCredCliente[] findWhereNombreSegundoEquals(String nombreSegundo) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nombre_segundo = ? ORDER BY nombre_segundo", new Object[] { nombreSegundo } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'apellido_paterno = :apellidoPaterno'.
	 */
	public CrCredCliente[] findWhereApellidoPaternoEquals(String apellidoPaterno) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE apellido_paterno = ? ORDER BY apellido_paterno", new Object[] { apellidoPaterno } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'apellido_materno = :apellidoMaterno'.
	 */
	public CrCredCliente[] findWhereApellidoMaternoEquals(String apellidoMaterno) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE apellido_materno = ? ORDER BY apellido_materno", new Object[] { apellidoMaterno } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'latitud = :latitud'.
	 */
	public CrCredCliente[] findWhereLatitudEquals(double latitud) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE latitud = ? ORDER BY latitud", new Object[] {  new Double(latitud) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'longitud = :longitud'.
	 */
	public CrCredCliente[] findWhereLongitudEquals(double longitud) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE longitud = ? ORDER BY longitud", new Object[] {  new Double(longitud) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'correos_electronicos = :correosElectronicos'.
	 */
	public CrCredCliente[] findWhereCorreosElectronicosEquals(String correosElectronicos) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE correos_electronicos = ? ORDER BY correos_electronicos", new Object[] { correosElectronicos } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'id_cliente_s_tercero = :idClienteSTercero'.
	 */
	public CrCredCliente[] findWhereIdClienteSTerceroEquals(String idClienteSTercero) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_cliente_s_tercero = ? ORDER BY id_cliente_s_tercero", new Object[] { idClienteSTercero } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'id_credito_s_tercero = :idCreditoSTercero'.
	 */
	public CrCredCliente[] findWhereIdCreditoSTerceroEquals(String idCreditoSTercero) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_credito_s_tercero = ? ORDER BY id_credito_s_tercero", new Object[] { idCreditoSTercero } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'fecha_inicio_credito = :fechaInicioCredito'.
	 */
	public CrCredCliente[] findWhereFechaInicioCreditoEquals(Date fechaInicioCredito) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_inicio_credito = ? ORDER BY fecha_inicio_credito", new Object[] { fechaInicioCredito==null ? null : new java.sql.Date( fechaInicioCredito.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'fecha_fin_credito = :fechaFinCredito'.
	 */
	public CrCredCliente[] findWhereFechaFinCreditoEquals(Date fechaFinCredito) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_fin_credito = ? ORDER BY fecha_fin_credito", new Object[] { fechaFinCredito==null ? null : new java.sql.Date( fechaFinCredito.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'plazo_meses = :plazoMeses'.
	 */
	public CrCredCliente[] findWherePlazoMesesEquals(int plazoMeses) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE plazo_meses = ? ORDER BY plazo_meses", new Object[] {  new Integer(plazoMeses) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'plazo_vencimiento = :plazoVencimiento'.
	 */
	public CrCredCliente[] findWherePlazoVencimientoEquals(int plazoVencimiento) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE plazo_vencimiento = ? ORDER BY plazo_vencimiento", new Object[] {  new Integer(plazoVencimiento) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'vencimiento = :vencimiento'.
	 */
	public CrCredCliente[] findWhereVencimientoEquals(String vencimiento) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE vencimiento = ? ORDER BY vencimiento", new Object[] { vencimiento } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'monto_prestado = :montoPrestado'.
	 */
	public CrCredCliente[] findWhereMontoPrestadoEquals(double montoPrestado) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE monto_prestado = ? ORDER BY monto_prestado", new Object[] {  new Double(montoPrestado) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'monto_adeudado = :montoAdeudado'.
	 */
	public CrCredCliente[] findWhereMontoAdeudadoEquals(double montoAdeudado) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE monto_adeudado = ? ORDER BY monto_adeudado", new Object[] {  new Double(montoAdeudado) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'dias_mora = :diasMora'.
	 */
	public CrCredCliente[] findWhereDiasMoraEquals(int diasMora) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dias_mora = ? ORDER BY dias_mora", new Object[] {  new Integer(diasMora) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'saldo_vencido = :saldoVencido'.
	 */
	public CrCredCliente[] findWhereSaldoVencidoEquals(double saldoVencido) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE saldo_vencido = ? ORDER BY saldo_vencido", new Object[] {  new Double(saldoVencido) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'importe_pagar_vencimiento = :importePagarVencimiento'.
	 */
	public CrCredCliente[] findWhereImportePagarVencimientoEquals(double importePagarVencimiento) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE importe_pagar_vencimiento = ? ORDER BY importe_pagar_vencimiento", new Object[] {  new Double(importePagarVencimiento) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'fecha_hora_agenda = :fechaHoraAgenda'.
	 */
	public CrCredCliente[] findWhereFechaHoraAgendaEquals(Date fechaHoraAgenda) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hora_agenda = ? ORDER BY fecha_hora_agenda", new Object[] { fechaHoraAgenda==null ? null : new java.sql.Timestamp( fechaHoraAgenda.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'num_pagos_realizados_vencimiento = :numPagosRealizadosVencimiento'.
	 */
	public CrCredCliente[] findWhereNumPagosRealizadosVencimientoEquals(int numPagosRealizadosVencimiento) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE num_pagos_realizados_vencimiento = ? ORDER BY num_pagos_realizados_vencimiento", new Object[] {  new Integer(numPagosRealizadosVencimiento) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'suma_monto_pagado_vencimiento = :sumaMontoPagadoVencimiento'.
	 */
	public CrCredCliente[] findWhereSumaMontoPagadoVencimientoEquals(double sumaMontoPagadoVencimiento) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE suma_monto_pagado_vencimiento = ? ORDER BY suma_monto_pagado_vencimiento", new Object[] {  new Double(sumaMontoPagadoVencimiento) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'cuotas_devengadas = :cuotasDevengadas'.
	 */
	public CrCredCliente[] findWhereCuotasDevengadasEquals(int cuotasDevengadas) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cuotas_devengadas = ? ORDER BY cuotas_devengadas", new Object[] {  new Integer(cuotasDevengadas) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'cuotas_pagadas = :cuotasPagadas'.
	 */
	public CrCredCliente[] findWhereCuotasPagadasEquals(int cuotasPagadas) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cuotas_pagadas = ? ORDER BY cuotas_pagadas", new Object[] {  new Integer(cuotasPagadas) } );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the criteria 'cuotas_vencidas = :cuotasVencidas'.
	 */
	public CrCredCliente[] findWhereCuotasVencidasEquals(int cuotasVencidas) throws CrCredClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cuotas_vencidas = ? ORDER BY cuotas_vencidas", new Object[] {  new Integer(cuotasVencidas) } );
	}

	/**
	 * Method 'CrCredClienteDaoImpl'
	 * 
	 */
	public CrCredClienteDaoImpl()
	{
	}

	/**
	 * Method 'CrCredClienteDaoImpl'
	 * 
	 * @param userConn
	 */
	public CrCredClienteDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "cr_cred_cliente";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CrCredCliente fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CrCredCliente dto = new CrCredCliente();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CrCredCliente[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CrCredCliente dto = new CrCredCliente();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CrCredCliente ret[] = new CrCredCliente[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CrCredCliente dto, ResultSet rs) throws SQLException
	{
		dto.setIdCredCliente( rs.getInt( COLUMN_ID_CRED_CLIENTE ) );
		dto.setIdFormularioEvento( rs.getInt( COLUMN_ID_FORMULARIO_EVENTO ) );
		if (rs.wasNull()) {
			dto.setIdFormularioEventoNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setFechaHrCreacion( rs.getTimestamp(COLUMN_FECHA_HR_CREACION ) );
		dto.setFechaHrEdicion( rs.getTimestamp(COLUMN_FECHA_HR_EDICION ) );
		dto.setIdUsuarioEdicion( rs.getInt( COLUMN_ID_USUARIO_EDICION ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioEdicionNull( true );
		}
		
		dto.setRfc( rs.getString( COLUMN_RFC ) );
		dto.setNombrePrimer( rs.getString( COLUMN_NOMBRE_PRIMER ) );
		dto.setNombreSegundo( rs.getString( COLUMN_NOMBRE_SEGUNDO ) );
		dto.setApellidoPaterno( rs.getString( COLUMN_APELLIDO_PATERNO ) );
		dto.setApellidoMaterno( rs.getString( COLUMN_APELLIDO_MATERNO ) );
		dto.setLatitud( rs.getDouble( COLUMN_LATITUD ) );
		if (rs.wasNull()) {
			dto.setLatitudNull( true );
		}
		
		dto.setLongitud( rs.getDouble( COLUMN_LONGITUD ) );
		if (rs.wasNull()) {
			dto.setLongitudNull( true );
		}
		
		dto.setCorreosElectronicos( rs.getString( COLUMN_CORREOS_ELECTRONICOS ) );
		dto.setIdClienteSTercero( rs.getString( COLUMN_ID_CLIENTE_S_TERCERO ) );
		dto.setIdCreditoSTercero( rs.getString( COLUMN_ID_CREDITO_S_TERCERO ) );
		dto.setFechaInicioCredito( rs.getDate(COLUMN_FECHA_INICIO_CREDITO ) );
		dto.setFechaFinCredito( rs.getDate(COLUMN_FECHA_FIN_CREDITO ) );
		dto.setPlazoMeses( rs.getInt( COLUMN_PLAZO_MESES ) );
		if (rs.wasNull()) {
			dto.setPlazoMesesNull( true );
		}
		
		dto.setPlazoVencimiento( rs.getInt( COLUMN_PLAZO_VENCIMIENTO ) );
		if (rs.wasNull()) {
			dto.setPlazoVencimientoNull( true );
		}
		
		dto.setVencimiento( rs.getString( COLUMN_VENCIMIENTO ) );
		dto.setMontoPrestado( rs.getDouble( COLUMN_MONTO_PRESTADO ) );
		if (rs.wasNull()) {
			dto.setMontoPrestadoNull( true );
		}
		
		dto.setMontoAdeudado( rs.getDouble( COLUMN_MONTO_ADEUDADO ) );
		if (rs.wasNull()) {
			dto.setMontoAdeudadoNull( true );
		}
		
		dto.setDiasMora( rs.getInt( COLUMN_DIAS_MORA ) );
		if (rs.wasNull()) {
			dto.setDiasMoraNull( true );
		}
		
		dto.setSaldoVencido( rs.getDouble( COLUMN_SALDO_VENCIDO ) );
		if (rs.wasNull()) {
			dto.setSaldoVencidoNull( true );
		}
		
		dto.setImportePagarVencimiento( rs.getDouble( COLUMN_IMPORTE_PAGAR_VENCIMIENTO ) );
		if (rs.wasNull()) {
			dto.setImportePagarVencimientoNull( true );
		}
		
		dto.setFechaHoraAgenda( rs.getTimestamp(COLUMN_FECHA_HORA_AGENDA ) );
		dto.setNumPagosRealizadosVencimiento( rs.getInt( COLUMN_NUM_PAGOS_REALIZADOS_VENCIMIENTO ) );
		if (rs.wasNull()) {
			dto.setNumPagosRealizadosVencimientoNull( true );
		}
		
		dto.setSumaMontoPagadoVencimiento( rs.getDouble( COLUMN_SUMA_MONTO_PAGADO_VENCIMIENTO ) );
		if (rs.wasNull()) {
			dto.setSumaMontoPagadoVencimientoNull( true );
		}
		
		dto.setCuotasDevengadas( rs.getInt( COLUMN_CUOTAS_DEVENGADAS ) );
		if (rs.wasNull()) {
			dto.setCuotasDevengadasNull( true );
		}
		
		dto.setCuotasPagadas( rs.getInt( COLUMN_CUOTAS_PAGADAS ) );
		if (rs.wasNull()) {
			dto.setCuotasPagadasNull( true );
		}
		
		dto.setCuotasVencidas( rs.getInt( COLUMN_CUOTAS_VENCIDAS ) );
		if (rs.wasNull()) {
			dto.setCuotasVencidasNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CrCredCliente dto)
	{
		dto.setIdCredClienteModified( false );
		dto.setIdFormularioEventoModified( false );
		dto.setIdEstatusModified( false );
		dto.setIdEmpresaModified( false );
		dto.setFechaHrCreacionModified( false );
		dto.setFechaHrEdicionModified( false );
		dto.setIdUsuarioEdicionModified( false );
		dto.setRfcModified( false );
		dto.setNombrePrimerModified( false );
		dto.setNombreSegundoModified( false );
		dto.setApellidoPaternoModified( false );
		dto.setApellidoMaternoModified( false );
		dto.setLatitudModified( false );
		dto.setLongitudModified( false );
		dto.setCorreosElectronicosModified( false );
		dto.setIdClienteSTerceroModified( false );
		dto.setIdCreditoSTerceroModified( false );
		dto.setFechaInicioCreditoModified( false );
		dto.setFechaFinCreditoModified( false );
		dto.setPlazoMesesModified( false );
		dto.setPlazoVencimientoModified( false );
		dto.setVencimientoModified( false );
		dto.setMontoPrestadoModified( false );
		dto.setMontoAdeudadoModified( false );
		dto.setDiasMoraModified( false );
		dto.setSaldoVencidoModified( false );
		dto.setImportePagarVencimientoModified( false );
		dto.setFechaHoraAgendaModified( false );
		dto.setNumPagosRealizadosVencimientoModified( false );
		dto.setSumaMontoPagadoVencimientoModified( false );
		dto.setCuotasDevengadasModified( false );
		dto.setCuotasPagadasModified( false );
		dto.setCuotasVencidasModified( false );
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the specified arbitrary SQL statement
	 */
	public CrCredCliente[] findByDynamicSelect(String sql, Object[] sqlParams) throws CrCredClienteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrCredClienteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the cr_cred_cliente table that match the specified arbitrary SQL statement
	 */
	public CrCredCliente[] findByDynamicWhere(String sql, Object[] sqlParams) throws CrCredClienteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrCredClienteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
