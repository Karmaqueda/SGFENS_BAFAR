/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CuentaEfectivoDaoImpl extends AbstractDAO implements CuentaEfectivoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_CUENTA_EFECTIVO, ID_EMPLEADO, FECHA_HORA, BILLETE_1000, BILLETE_500, BILLETE_200, BILLETE_100, BILLETE_50, BILLETE_20, MONEDA_20, MONEDA_10, MONEDA_5, MONEDA_2, MONEDA_1, MONEDA_0_50, MONEDA_0_20, MONEDA_0_10 FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_CUENTA_EFECTIVO, ID_EMPLEADO, FECHA_HORA, BILLETE_1000, BILLETE_500, BILLETE_200, BILLETE_100, BILLETE_50, BILLETE_20, MONEDA_20, MONEDA_10, MONEDA_5, MONEDA_2, MONEDA_1, MONEDA_0_50, MONEDA_0_20, MONEDA_0_10 ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_CUENTA_EFECTIVO = ?, ID_EMPLEADO = ?, FECHA_HORA = ?, BILLETE_1000 = ?, BILLETE_500 = ?, BILLETE_200 = ?, BILLETE_100 = ?, BILLETE_50 = ?, BILLETE_20 = ?, MONEDA_20 = ?, MONEDA_10 = ?, MONEDA_5 = ?, MONEDA_2 = ?, MONEDA_1 = ?, MONEDA_0_50 = ?, MONEDA_0_20 = ?, MONEDA_0_10 = ? WHERE ID_CUENTA_EFECTIVO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_CUENTA_EFECTIVO = ?";

	/** 
	 * Index of column ID_CUENTA_EFECTIVO
	 */
	protected static final int COLUMN_ID_CUENTA_EFECTIVO = 1;

	/** 
	 * Index of column ID_EMPLEADO
	 */
	protected static final int COLUMN_ID_EMPLEADO = 2;

	/** 
	 * Index of column FECHA_HORA
	 */
	protected static final int COLUMN_FECHA_HORA = 3;

	/** 
	 * Index of column BILLETE_1000
	 */
	protected static final int COLUMN_BILLETE1000 = 4;

	/** 
	 * Index of column BILLETE_500
	 */
	protected static final int COLUMN_BILLETE500 = 5;

	/** 
	 * Index of column BILLETE_200
	 */
	protected static final int COLUMN_BILLETE200 = 6;

	/** 
	 * Index of column BILLETE_100
	 */
	protected static final int COLUMN_BILLETE100 = 7;

	/** 
	 * Index of column BILLETE_50
	 */
	protected static final int COLUMN_BILLETE50 = 8;

	/** 
	 * Index of column BILLETE_20
	 */
	protected static final int COLUMN_BILLETE20 = 9;

	/** 
	 * Index of column MONEDA_20
	 */
	protected static final int COLUMN_MONEDA20 = 10;

	/** 
	 * Index of column MONEDA_10
	 */
	protected static final int COLUMN_MONEDA10 = 11;

	/** 
	 * Index of column MONEDA_5
	 */
	protected static final int COLUMN_MONEDA5 = 12;

	/** 
	 * Index of column MONEDA_2
	 */
	protected static final int COLUMN_MONEDA2 = 13;

	/** 
	 * Index of column MONEDA_1
	 */
	protected static final int COLUMN_MONEDA1 = 14;

	/** 
	 * Index of column MONEDA_0_50
	 */
	protected static final int COLUMN_MONEDA050 = 15;

	/** 
	 * Index of column MONEDA_0_20
	 */
	protected static final int COLUMN_MONEDA020 = 16;

	/** 
	 * Index of column MONEDA_0_10
	 */
	protected static final int COLUMN_MONEDA010 = 17;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 17;

	/** 
	 * Index of primary-key column ID_CUENTA_EFECTIVO
	 */
	protected static final int PK_COLUMN_ID_CUENTA_EFECTIVO = 1;

	/** 
	 * Inserts a new row in the cuenta_efectivo table.
	 */
	public CuentaEfectivoPk insert(CuentaEfectivo dto) throws CuentaEfectivoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdCuentaEfectivoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CUENTA_EFECTIVO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpleadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPLEADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHoraModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_HORA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isBillete1000Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "BILLETE_1000" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isBillete500Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "BILLETE_500" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isBillete200Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "BILLETE_200" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isBillete100Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "BILLETE_100" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isBillete50Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "BILLETE_50" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isBillete20Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "BILLETE_20" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMoneda20Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MONEDA_20" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMoneda10Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MONEDA_10" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMoneda5Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MONEDA_5" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMoneda2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MONEDA_2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMoneda1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MONEDA_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMoneda050Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MONEDA_0_50" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMoneda020Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MONEDA_0_20" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMoneda010Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MONEDA_0_10" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdCuentaEfectivoModified()) {
				stmt.setInt( index++, dto.getIdCuentaEfectivo() );
			}
		
			if (dto.isIdEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdEmpleado() );
			}
		
			if (dto.isFechaHoraModified()) {
				stmt.setTimestamp(index++, dto.getFechaHora()==null ? null : new java.sql.Timestamp( dto.getFechaHora().getTime() ) );
			}
		
			if (dto.isBillete1000Modified()) {
				if (dto.isBillete1000Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getBillete1000() );
				}
		
			}
		
			if (dto.isBillete500Modified()) {
				if (dto.isBillete500Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getBillete500() );
				}
		
			}
		
			if (dto.isBillete200Modified()) {
				if (dto.isBillete200Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getBillete200() );
				}
		
			}
		
			if (dto.isBillete100Modified()) {
				if (dto.isBillete100Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getBillete100() );
				}
		
			}
		
			if (dto.isBillete50Modified()) {
				if (dto.isBillete50Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getBillete50() );
				}
		
			}
		
			if (dto.isBillete20Modified()) {
				if (dto.isBillete20Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getBillete20() );
				}
		
			}
		
			if (dto.isMoneda20Modified()) {
				if (dto.isMoneda20Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda20() );
				}
		
			}
		
			if (dto.isMoneda10Modified()) {
				if (dto.isMoneda10Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda10() );
				}
		
			}
		
			if (dto.isMoneda5Modified()) {
				if (dto.isMoneda5Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda5() );
				}
		
			}
		
			if (dto.isMoneda2Modified()) {
				if (dto.isMoneda2Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda2() );
				}
		
			}
		
			if (dto.isMoneda1Modified()) {
				if (dto.isMoneda1Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda1() );
				}
		
			}
		
			if (dto.isMoneda050Modified()) {
				if (dto.isMoneda050Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda050() );
				}
		
			}
		
			if (dto.isMoneda020Modified()) {
				if (dto.isMoneda020Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda020() );
				}
		
			}
		
			if (dto.isMoneda010Modified()) {
				if (dto.isMoneda010Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda010() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdCuentaEfectivo( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaEfectivoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the cuenta_efectivo table.
	 */
	public void update(CuentaEfectivoPk pk, CuentaEfectivo dto) throws CuentaEfectivoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdCuentaEfectivoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CUENTA_EFECTIVO=?" );
				modified=true;
			}
		
			if (dto.isIdEmpleadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPLEADO=?" );
				modified=true;
			}
		
			if (dto.isFechaHoraModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_HORA=?" );
				modified=true;
			}
		
			if (dto.isBillete1000Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "BILLETE_1000=?" );
				modified=true;
			}
		
			if (dto.isBillete500Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "BILLETE_500=?" );
				modified=true;
			}
		
			if (dto.isBillete200Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "BILLETE_200=?" );
				modified=true;
			}
		
			if (dto.isBillete100Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "BILLETE_100=?" );
				modified=true;
			}
		
			if (dto.isBillete50Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "BILLETE_50=?" );
				modified=true;
			}
		
			if (dto.isBillete20Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "BILLETE_20=?" );
				modified=true;
			}
		
			if (dto.isMoneda20Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MONEDA_20=?" );
				modified=true;
			}
		
			if (dto.isMoneda10Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MONEDA_10=?" );
				modified=true;
			}
		
			if (dto.isMoneda5Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MONEDA_5=?" );
				modified=true;
			}
		
			if (dto.isMoneda2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MONEDA_2=?" );
				modified=true;
			}
		
			if (dto.isMoneda1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MONEDA_1=?" );
				modified=true;
			}
		
			if (dto.isMoneda050Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MONEDA_0_50=?" );
				modified=true;
			}
		
			if (dto.isMoneda020Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MONEDA_0_20=?" );
				modified=true;
			}
		
			if (dto.isMoneda010Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MONEDA_0_10=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_CUENTA_EFECTIVO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdCuentaEfectivoModified()) {
				stmt.setInt( index++, dto.getIdCuentaEfectivo() );
			}
		
			if (dto.isIdEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdEmpleado() );
			}
		
			if (dto.isFechaHoraModified()) {
				stmt.setTimestamp(index++, dto.getFechaHora()==null ? null : new java.sql.Timestamp( dto.getFechaHora().getTime() ) );
			}
		
			if (dto.isBillete1000Modified()) {
				if (dto.isBillete1000Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getBillete1000() );
				}
		
			}
		
			if (dto.isBillete500Modified()) {
				if (dto.isBillete500Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getBillete500() );
				}
		
			}
		
			if (dto.isBillete200Modified()) {
				if (dto.isBillete200Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getBillete200() );
				}
		
			}
		
			if (dto.isBillete100Modified()) {
				if (dto.isBillete100Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getBillete100() );
				}
		
			}
		
			if (dto.isBillete50Modified()) {
				if (dto.isBillete50Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getBillete50() );
				}
		
			}
		
			if (dto.isBillete20Modified()) {
				if (dto.isBillete20Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getBillete20() );
				}
		
			}
		
			if (dto.isMoneda20Modified()) {
				if (dto.isMoneda20Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda20() );
				}
		
			}
		
			if (dto.isMoneda10Modified()) {
				if (dto.isMoneda10Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda10() );
				}
		
			}
		
			if (dto.isMoneda5Modified()) {
				if (dto.isMoneda5Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda5() );
				}
		
			}
		
			if (dto.isMoneda2Modified()) {
				if (dto.isMoneda2Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda2() );
				}
		
			}
		
			if (dto.isMoneda1Modified()) {
				if (dto.isMoneda1Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda1() );
				}
		
			}
		
			if (dto.isMoneda050Modified()) {
				if (dto.isMoneda050Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda050() );
				}
		
			}
		
			if (dto.isMoneda020Modified()) {
				if (dto.isMoneda020Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda020() );
				}
		
			}
		
			if (dto.isMoneda010Modified()) {
				if (dto.isMoneda010Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMoneda010() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdCuentaEfectivo() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaEfectivoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the cuenta_efectivo table.
	 */
	public void delete(CuentaEfectivoPk pk) throws CuentaEfectivoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdCuentaEfectivo() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaEfectivoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the cuenta_efectivo table that matches the specified primary-key value.
	 */
	public CuentaEfectivo findByPrimaryKey(CuentaEfectivoPk pk) throws CuentaEfectivoDaoException
	{
		return findByPrimaryKey( pk.getIdCuentaEfectivo() );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'ID_CUENTA_EFECTIVO = :idCuentaEfectivo'.
	 */
	public CuentaEfectivo findByPrimaryKey(int idCuentaEfectivo) throws CuentaEfectivoDaoException
	{
		CuentaEfectivo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_CUENTA_EFECTIVO = ?", new Object[] {  new Integer(idCuentaEfectivo) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria ''.
	 */
	public CuentaEfectivo[] findAll() throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_CUENTA_EFECTIVO", null );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'ID_CUENTA_EFECTIVO = :idCuentaEfectivo'.
	 */
	public CuentaEfectivo[] findWhereIdCuentaEfectivoEquals(int idCuentaEfectivo) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CUENTA_EFECTIVO = ? ORDER BY ID_CUENTA_EFECTIVO", new Object[] {  new Integer(idCuentaEfectivo) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public CuentaEfectivo[] findWhereIdEmpleadoEquals(int idEmpleado) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPLEADO = ? ORDER BY ID_EMPLEADO", new Object[] {  new Integer(idEmpleado) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'FECHA_HORA = :fechaHora'.
	 */
	public CuentaEfectivo[] findWhereFechaHoraEquals(Date fechaHora) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_HORA = ? ORDER BY FECHA_HORA", new Object[] { fechaHora==null ? null : new java.sql.Timestamp( fechaHora.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'BILLETE_1000 = :billete1000'.
	 */
	public CuentaEfectivo[] findWhereBillete1000Equals(int billete1000) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BILLETE_1000 = ? ORDER BY BILLETE_1000", new Object[] {  new Integer(billete1000) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'BILLETE_500 = :billete500'.
	 */
	public CuentaEfectivo[] findWhereBillete500Equals(int billete500) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BILLETE_500 = ? ORDER BY BILLETE_500", new Object[] {  new Integer(billete500) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'BILLETE_200 = :billete200'.
	 */
	public CuentaEfectivo[] findWhereBillete200Equals(int billete200) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BILLETE_200 = ? ORDER BY BILLETE_200", new Object[] {  new Integer(billete200) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'BILLETE_100 = :billete100'.
	 */
	public CuentaEfectivo[] findWhereBillete100Equals(int billete100) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BILLETE_100 = ? ORDER BY BILLETE_100", new Object[] {  new Integer(billete100) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'BILLETE_50 = :billete50'.
	 */
	public CuentaEfectivo[] findWhereBillete50Equals(int billete50) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BILLETE_50 = ? ORDER BY BILLETE_50", new Object[] {  new Integer(billete50) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'BILLETE_20 = :billete20'.
	 */
	public CuentaEfectivo[] findWhereBillete20Equals(int billete20) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BILLETE_20 = ? ORDER BY BILLETE_20", new Object[] {  new Integer(billete20) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'MONEDA_20 = :moneda20'.
	 */
	public CuentaEfectivo[] findWhereMoneda20Equals(int moneda20) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONEDA_20 = ? ORDER BY MONEDA_20", new Object[] {  new Integer(moneda20) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'MONEDA_10 = :moneda10'.
	 */
	public CuentaEfectivo[] findWhereMoneda10Equals(int moneda10) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONEDA_10 = ? ORDER BY MONEDA_10", new Object[] {  new Integer(moneda10) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'MONEDA_5 = :moneda5'.
	 */
	public CuentaEfectivo[] findWhereMoneda5Equals(int moneda5) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONEDA_5 = ? ORDER BY MONEDA_5", new Object[] {  new Integer(moneda5) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'MONEDA_2 = :moneda2'.
	 */
	public CuentaEfectivo[] findWhereMoneda2Equals(int moneda2) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONEDA_2 = ? ORDER BY MONEDA_2", new Object[] {  new Integer(moneda2) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'MONEDA_1 = :moneda1'.
	 */
	public CuentaEfectivo[] findWhereMoneda1Equals(int moneda1) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONEDA_1 = ? ORDER BY MONEDA_1", new Object[] {  new Integer(moneda1) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'MONEDA_0_50 = :moneda050'.
	 */
	public CuentaEfectivo[] findWhereMoneda050Equals(int moneda050) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONEDA_0_50 = ? ORDER BY MONEDA_0_50", new Object[] {  new Integer(moneda050) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'MONEDA_0_20 = :moneda020'.
	 */
	public CuentaEfectivo[] findWhereMoneda020Equals(int moneda020) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONEDA_0_20 = ? ORDER BY MONEDA_0_20", new Object[] {  new Integer(moneda020) } );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the criteria 'MONEDA_0_10 = :moneda010'.
	 */
	public CuentaEfectivo[] findWhereMoneda010Equals(int moneda010) throws CuentaEfectivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONEDA_0_10 = ? ORDER BY MONEDA_0_10", new Object[] {  new Integer(moneda010) } );
	}

	/**
	 * Method 'CuentaEfectivoDaoImpl'
	 * 
	 */
	public CuentaEfectivoDaoImpl()
	{
	}

	/**
	 * Method 'CuentaEfectivoDaoImpl'
	 * 
	 * @param userConn
	 */
	public CuentaEfectivoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "cuenta_efectivo";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CuentaEfectivo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CuentaEfectivo dto = new CuentaEfectivo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CuentaEfectivo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CuentaEfectivo dto = new CuentaEfectivo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CuentaEfectivo ret[] = new CuentaEfectivo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CuentaEfectivo dto, ResultSet rs) throws SQLException
	{
		dto.setIdCuentaEfectivo( rs.getInt( COLUMN_ID_CUENTA_EFECTIVO ) );
		dto.setIdEmpleado( rs.getInt( COLUMN_ID_EMPLEADO ) );
		dto.setFechaHora( rs.getTimestamp(COLUMN_FECHA_HORA ) );
		dto.setBillete1000( rs.getInt( COLUMN_BILLETE1000 ) );
		if (rs.wasNull()) {
			dto.setBillete1000Null( true );
		}
		
		dto.setBillete500( rs.getInt( COLUMN_BILLETE500 ) );
		if (rs.wasNull()) {
			dto.setBillete500Null( true );
		}
		
		dto.setBillete200( rs.getInt( COLUMN_BILLETE200 ) );
		if (rs.wasNull()) {
			dto.setBillete200Null( true );
		}
		
		dto.setBillete100( rs.getInt( COLUMN_BILLETE100 ) );
		if (rs.wasNull()) {
			dto.setBillete100Null( true );
		}
		
		dto.setBillete50( rs.getInt( COLUMN_BILLETE50 ) );
		if (rs.wasNull()) {
			dto.setBillete50Null( true );
		}
		
		dto.setBillete20( rs.getInt( COLUMN_BILLETE20 ) );
		if (rs.wasNull()) {
			dto.setBillete20Null( true );
		}
		
		dto.setMoneda20( rs.getInt( COLUMN_MONEDA20 ) );
		if (rs.wasNull()) {
			dto.setMoneda20Null( true );
		}
		
		dto.setMoneda10( rs.getInt( COLUMN_MONEDA10 ) );
		if (rs.wasNull()) {
			dto.setMoneda10Null( true );
		}
		
		dto.setMoneda5( rs.getInt( COLUMN_MONEDA5 ) );
		if (rs.wasNull()) {
			dto.setMoneda5Null( true );
		}
		
		dto.setMoneda2( rs.getInt( COLUMN_MONEDA2 ) );
		if (rs.wasNull()) {
			dto.setMoneda2Null( true );
		}
		
		dto.setMoneda1( rs.getInt( COLUMN_MONEDA1 ) );
		if (rs.wasNull()) {
			dto.setMoneda1Null( true );
		}
		
		dto.setMoneda050( rs.getInt( COLUMN_MONEDA050 ) );
		if (rs.wasNull()) {
			dto.setMoneda050Null( true );
		}
		
		dto.setMoneda020( rs.getInt( COLUMN_MONEDA020 ) );
		if (rs.wasNull()) {
			dto.setMoneda020Null( true );
		}
		
		dto.setMoneda010( rs.getInt( COLUMN_MONEDA010 ) );
		if (rs.wasNull()) {
			dto.setMoneda010Null( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CuentaEfectivo dto)
	{
		dto.setIdCuentaEfectivoModified( false );
		dto.setIdEmpleadoModified( false );
		dto.setFechaHoraModified( false );
		dto.setBillete1000Modified( false );
		dto.setBillete500Modified( false );
		dto.setBillete200Modified( false );
		dto.setBillete100Modified( false );
		dto.setBillete50Modified( false );
		dto.setBillete20Modified( false );
		dto.setMoneda20Modified( false );
		dto.setMoneda10Modified( false );
		dto.setMoneda5Modified( false );
		dto.setMoneda2Modified( false );
		dto.setMoneda1Modified( false );
		dto.setMoneda050Modified( false );
		dto.setMoneda020Modified( false );
		dto.setMoneda010Modified( false );
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the specified arbitrary SQL statement
	 */
	public CuentaEfectivo[] findByDynamicSelect(String sql, Object[] sqlParams) throws CuentaEfectivoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaEfectivoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the cuenta_efectivo table that match the specified arbitrary SQL statement
	 */
	public CuentaEfectivo[] findByDynamicWhere(String sql, Object[] sqlParams) throws CuentaEfectivoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaEfectivoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
