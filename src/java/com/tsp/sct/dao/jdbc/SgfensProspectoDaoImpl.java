/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SgfensProspectoDaoImpl extends AbstractDAO implements SgfensProspectoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_PROSPECTO, ID_EMPRESA, RAZON_SOCIAL, LADA, TELEFONO, CELULAR, CORREO, CONTACTO, ID_ESTATUS, DESCRIPCION, LATITUD, LONGITUD, DIRECCION, NOMBRE_IMAGEN_PROSPECTO, ID_USUARIO_VENDEDOR, FECHA_REGISTRO, DIR_NUMERO_EXTERIOR, DIR_NUMERO_INTERIOR, DIR_CODIGO_POSTAL, DIR_COLONIA FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_PROSPECTO, ID_EMPRESA, RAZON_SOCIAL, LADA, TELEFONO, CELULAR, CORREO, CONTACTO, ID_ESTATUS, DESCRIPCION, LATITUD, LONGITUD, DIRECCION, NOMBRE_IMAGEN_PROSPECTO, ID_USUARIO_VENDEDOR, FECHA_REGISTRO, DIR_NUMERO_EXTERIOR, DIR_NUMERO_INTERIOR, DIR_CODIGO_POSTAL, DIR_COLONIA ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_PROSPECTO = ?, ID_EMPRESA = ?, RAZON_SOCIAL = ?, LADA = ?, TELEFONO = ?, CELULAR = ?, CORREO = ?, CONTACTO = ?, ID_ESTATUS = ?, DESCRIPCION = ?, LATITUD = ?, LONGITUD = ?, DIRECCION = ?, NOMBRE_IMAGEN_PROSPECTO = ?, ID_USUARIO_VENDEDOR = ?, FECHA_REGISTRO = ?, DIR_NUMERO_EXTERIOR = ?, DIR_NUMERO_INTERIOR = ?, DIR_CODIGO_POSTAL = ?, DIR_COLONIA = ? WHERE ID_PROSPECTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_PROSPECTO = ?";

	/** 
	 * Index of column ID_PROSPECTO
	 */
	protected static final int COLUMN_ID_PROSPECTO = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column RAZON_SOCIAL
	 */
	protected static final int COLUMN_RAZON_SOCIAL = 3;

	/** 
	 * Index of column LADA
	 */
	protected static final int COLUMN_LADA = 4;

	/** 
	 * Index of column TELEFONO
	 */
	protected static final int COLUMN_TELEFONO = 5;

	/** 
	 * Index of column CELULAR
	 */
	protected static final int COLUMN_CELULAR = 6;

	/** 
	 * Index of column CORREO
	 */
	protected static final int COLUMN_CORREO = 7;

	/** 
	 * Index of column CONTACTO
	 */
	protected static final int COLUMN_CONTACTO = 8;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 9;

	/** 
	 * Index of column DESCRIPCION
	 */
	protected static final int COLUMN_DESCRIPCION = 10;

	/** 
	 * Index of column LATITUD
	 */
	protected static final int COLUMN_LATITUD = 11;

	/** 
	 * Index of column LONGITUD
	 */
	protected static final int COLUMN_LONGITUD = 12;

	/** 
	 * Index of column DIRECCION
	 */
	protected static final int COLUMN_DIRECCION = 13;

	/** 
	 * Index of column NOMBRE_IMAGEN_PROSPECTO
	 */
	protected static final int COLUMN_NOMBRE_IMAGEN_PROSPECTO = 14;

	/** 
	 * Index of column ID_USUARIO_VENDEDOR
	 */
	protected static final int COLUMN_ID_USUARIO_VENDEDOR = 15;

	/** 
	 * Index of column FECHA_REGISTRO
	 */
	protected static final int COLUMN_FECHA_REGISTRO = 16;

	/** 
	 * Index of column DIR_NUMERO_EXTERIOR
	 */
	protected static final int COLUMN_DIR_NUMERO_EXTERIOR = 17;

	/** 
	 * Index of column DIR_NUMERO_INTERIOR
	 */
	protected static final int COLUMN_DIR_NUMERO_INTERIOR = 18;

	/** 
	 * Index of column DIR_CODIGO_POSTAL
	 */
	protected static final int COLUMN_DIR_CODIGO_POSTAL = 19;

	/** 
	 * Index of column DIR_COLONIA
	 */
	protected static final int COLUMN_DIR_COLONIA = 20;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 20;

	/** 
	 * Index of primary-key column ID_PROSPECTO
	 */
	protected static final int PK_COLUMN_ID_PROSPECTO = 1;

	/** 
	 * Inserts a new row in the sgfens_prospecto table.
	 */
	public SgfensProspectoPk insert(SgfensProspecto dto) throws SgfensProspectoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdProspectoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PROSPECTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRazonSocialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RAZON_SOCIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLadaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LADA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTelefonoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TELEFONO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCelularModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CELULAR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCorreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CORREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CONTACTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCRIPCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLatitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LATITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLongitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LONGITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDireccionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DIRECCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreImagenProspectoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_IMAGEN_PROSPECTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_USUARIO_VENDEDOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaRegistroModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_REGISTRO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDirNumeroExteriorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DIR_NUMERO_EXTERIOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDirNumeroInteriorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DIR_NUMERO_INTERIOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDirCodigoPostalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DIR_CODIGO_POSTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDirColoniaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DIR_COLONIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdProspectoModified()) {
				stmt.setInt( index++, dto.getIdProspecto() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isRazonSocialModified()) {
				stmt.setString( index++, dto.getRazonSocial() );
			}
		
			if (dto.isLadaModified()) {
				stmt.setString( index++, dto.getLada() );
			}
		
			if (dto.isTelefonoModified()) {
				stmt.setString( index++, dto.getTelefono() );
			}
		
			if (dto.isCelularModified()) {
				stmt.setString( index++, dto.getCelular() );
			}
		
			if (dto.isCorreoModified()) {
				stmt.setString( index++, dto.getCorreo() );
			}
		
			if (dto.isContactoModified()) {
				stmt.setString( index++, dto.getContacto() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isLatitudModified()) {
				stmt.setDouble( index++, dto.getLatitud() );
			}
		
			if (dto.isLongitudModified()) {
				stmt.setDouble( index++, dto.getLongitud() );
			}
		
			if (dto.isDireccionModified()) {
				stmt.setString( index++, dto.getDireccion() );
			}
		
			if (dto.isNombreImagenProspectoModified()) {
				stmt.setString( index++, dto.getNombreImagenProspecto() );
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				stmt.setInt( index++, dto.getIdUsuarioVendedor() );
			}
		
			if (dto.isFechaRegistroModified()) {
				stmt.setTimestamp(index++, dto.getFechaRegistro()==null ? null : new java.sql.Timestamp( dto.getFechaRegistro().getTime() ) );
			}
		
			if (dto.isDirNumeroExteriorModified()) {
				stmt.setString( index++, dto.getDirNumeroExterior() );
			}
		
			if (dto.isDirNumeroInteriorModified()) {
				stmt.setString( index++, dto.getDirNumeroInterior() );
			}
		
			if (dto.isDirCodigoPostalModified()) {
				stmt.setString( index++, dto.getDirCodigoPostal() );
			}
		
			if (dto.isDirColoniaModified()) {
				stmt.setString( index++, dto.getDirColonia() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdProspecto( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensProspectoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sgfens_prospecto table.
	 */
	public void update(SgfensProspectoPk pk, SgfensProspecto dto) throws SgfensProspectoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdProspectoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PROSPECTO=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isRazonSocialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RAZON_SOCIAL=?" );
				modified=true;
			}
		
			if (dto.isLadaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LADA=?" );
				modified=true;
			}
		
			if (dto.isTelefonoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TELEFONO=?" );
				modified=true;
			}
		
			if (dto.isCelularModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CELULAR=?" );
				modified=true;
			}
		
			if (dto.isCorreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CORREO=?" );
				modified=true;
			}
		
			if (dto.isContactoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONTACTO=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCRIPCION=?" );
				modified=true;
			}
		
			if (dto.isLatitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LATITUD=?" );
				modified=true;
			}
		
			if (dto.isLongitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LONGITUD=?" );
				modified=true;
			}
		
			if (dto.isDireccionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DIRECCION=?" );
				modified=true;
			}
		
			if (dto.isNombreImagenProspectoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_IMAGEN_PROSPECTO=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_USUARIO_VENDEDOR=?" );
				modified=true;
			}
		
			if (dto.isFechaRegistroModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_REGISTRO=?" );
				modified=true;
			}
		
			if (dto.isDirNumeroExteriorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DIR_NUMERO_EXTERIOR=?" );
				modified=true;
			}
		
			if (dto.isDirNumeroInteriorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DIR_NUMERO_INTERIOR=?" );
				modified=true;
			}
		
			if (dto.isDirCodigoPostalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DIR_CODIGO_POSTAL=?" );
				modified=true;
			}
		
			if (dto.isDirColoniaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DIR_COLONIA=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_PROSPECTO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdProspectoModified()) {
				stmt.setInt( index++, dto.getIdProspecto() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isRazonSocialModified()) {
				stmt.setString( index++, dto.getRazonSocial() );
			}
		
			if (dto.isLadaModified()) {
				stmt.setString( index++, dto.getLada() );
			}
		
			if (dto.isTelefonoModified()) {
				stmt.setString( index++, dto.getTelefono() );
			}
		
			if (dto.isCelularModified()) {
				stmt.setString( index++, dto.getCelular() );
			}
		
			if (dto.isCorreoModified()) {
				stmt.setString( index++, dto.getCorreo() );
			}
		
			if (dto.isContactoModified()) {
				stmt.setString( index++, dto.getContacto() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isLatitudModified()) {
				stmt.setDouble( index++, dto.getLatitud() );
			}
		
			if (dto.isLongitudModified()) {
				stmt.setDouble( index++, dto.getLongitud() );
			}
		
			if (dto.isDireccionModified()) {
				stmt.setString( index++, dto.getDireccion() );
			}
		
			if (dto.isNombreImagenProspectoModified()) {
				stmt.setString( index++, dto.getNombreImagenProspecto() );
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				stmt.setInt( index++, dto.getIdUsuarioVendedor() );
			}
		
			if (dto.isFechaRegistroModified()) {
				stmt.setTimestamp(index++, dto.getFechaRegistro()==null ? null : new java.sql.Timestamp( dto.getFechaRegistro().getTime() ) );
			}
		
			if (dto.isDirNumeroExteriorModified()) {
				stmt.setString( index++, dto.getDirNumeroExterior() );
			}
		
			if (dto.isDirNumeroInteriorModified()) {
				stmt.setString( index++, dto.getDirNumeroInterior() );
			}
		
			if (dto.isDirCodigoPostalModified()) {
				stmt.setString( index++, dto.getDirCodigoPostal() );
			}
		
			if (dto.isDirColoniaModified()) {
				stmt.setString( index++, dto.getDirColonia() );
			}
		
			stmt.setInt( index++, pk.getIdProspecto() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensProspectoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sgfens_prospecto table.
	 */
	public void delete(SgfensProspectoPk pk) throws SgfensProspectoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdProspecto() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensProspectoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sgfens_prospecto table that matches the specified primary-key value.
	 */
	public SgfensProspecto findByPrimaryKey(SgfensProspectoPk pk) throws SgfensProspectoDaoException
	{
		return findByPrimaryKey( pk.getIdProspecto() );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'ID_PROSPECTO = :idProspecto'.
	 */
	public SgfensProspecto findByPrimaryKey(int idProspecto) throws SgfensProspectoDaoException
	{
		SgfensProspecto ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_PROSPECTO = ?", new Object[] {  new Integer(idProspecto) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria ''.
	 */
	public SgfensProspecto[] findAll() throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_PROSPECTO", null );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'ID_PROSPECTO = :idProspecto'.
	 */
	public SgfensProspecto[] findWhereIdProspectoEquals(int idProspecto) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PROSPECTO = ? ORDER BY ID_PROSPECTO", new Object[] {  new Integer(idProspecto) } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public SgfensProspecto[] findWhereIdEmpresaEquals(int idEmpresa) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'RAZON_SOCIAL = :razonSocial'.
	 */
	public SgfensProspecto[] findWhereRazonSocialEquals(String razonSocial) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RAZON_SOCIAL = ? ORDER BY RAZON_SOCIAL", new Object[] { razonSocial } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'LADA = :lada'.
	 */
	public SgfensProspecto[] findWhereLadaEquals(String lada) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LADA = ? ORDER BY LADA", new Object[] { lada } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'TELEFONO = :telefono'.
	 */
	public SgfensProspecto[] findWhereTelefonoEquals(String telefono) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TELEFONO = ? ORDER BY TELEFONO", new Object[] { telefono } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'CELULAR = :celular'.
	 */
	public SgfensProspecto[] findWhereCelularEquals(String celular) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CELULAR = ? ORDER BY CELULAR", new Object[] { celular } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'CORREO = :correo'.
	 */
	public SgfensProspecto[] findWhereCorreoEquals(String correo) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CORREO = ? ORDER BY CORREO", new Object[] { correo } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'CONTACTO = :contacto'.
	 */
	public SgfensProspecto[] findWhereContactoEquals(String contacto) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTACTO = ? ORDER BY CONTACTO", new Object[] { contacto } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public SgfensProspecto[] findWhereIdEstatusEquals(int idEstatus) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public SgfensProspecto[] findWhereDescripcionEquals(String descripcion) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION = ? ORDER BY DESCRIPCION", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'LATITUD = :latitud'.
	 */
	public SgfensProspecto[] findWhereLatitudEquals(double latitud) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATITUD = ? ORDER BY LATITUD", new Object[] {  new Double(latitud) } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'LONGITUD = :longitud'.
	 */
	public SgfensProspecto[] findWhereLongitudEquals(double longitud) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LONGITUD = ? ORDER BY LONGITUD", new Object[] {  new Double(longitud) } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'DIRECCION = :direccion'.
	 */
	public SgfensProspecto[] findWhereDireccionEquals(String direccion) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIRECCION = ? ORDER BY DIRECCION", new Object[] { direccion } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'NOMBRE_IMAGEN_PROSPECTO = :nombreImagenProspecto'.
	 */
	public SgfensProspecto[] findWhereNombreImagenProspectoEquals(String nombreImagenProspecto) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_IMAGEN_PROSPECTO = ? ORDER BY NOMBRE_IMAGEN_PROSPECTO", new Object[] { nombreImagenProspecto } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'ID_USUARIO_VENDEDOR = :idUsuarioVendedor'.
	 */
	public SgfensProspecto[] findWhereIdUsuarioVendedorEquals(int idUsuarioVendedor) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO_VENDEDOR = ? ORDER BY ID_USUARIO_VENDEDOR", new Object[] {  new Integer(idUsuarioVendedor) } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'FECHA_REGISTRO = :fechaRegistro'.
	 */
	public SgfensProspecto[] findWhereFechaRegistroEquals(Date fechaRegistro) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_REGISTRO = ? ORDER BY FECHA_REGISTRO", new Object[] { fechaRegistro==null ? null : new java.sql.Timestamp( fechaRegistro.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'DIR_NUMERO_EXTERIOR = :dirNumeroExterior'.
	 */
	public SgfensProspecto[] findWhereDirNumeroExteriorEquals(String dirNumeroExterior) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIR_NUMERO_EXTERIOR = ? ORDER BY DIR_NUMERO_EXTERIOR", new Object[] { dirNumeroExterior } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'DIR_NUMERO_INTERIOR = :dirNumeroInterior'.
	 */
	public SgfensProspecto[] findWhereDirNumeroInteriorEquals(String dirNumeroInterior) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIR_NUMERO_INTERIOR = ? ORDER BY DIR_NUMERO_INTERIOR", new Object[] { dirNumeroInterior } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'DIR_CODIGO_POSTAL = :dirCodigoPostal'.
	 */
	public SgfensProspecto[] findWhereDirCodigoPostalEquals(String dirCodigoPostal) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIR_CODIGO_POSTAL = ? ORDER BY DIR_CODIGO_POSTAL", new Object[] { dirCodigoPostal } );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the criteria 'DIR_COLONIA = :dirColonia'.
	 */
	public SgfensProspecto[] findWhereDirColoniaEquals(String dirColonia) throws SgfensProspectoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIR_COLONIA = ? ORDER BY DIR_COLONIA", new Object[] { dirColonia } );
	}

	/**
	 * Method 'SgfensProspectoDaoImpl'
	 * 
	 */
	public SgfensProspectoDaoImpl()
	{
	}

	/**
	 * Method 'SgfensProspectoDaoImpl'
	 * 
	 * @param userConn
	 */
	public SgfensProspectoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sgfens_prospecto";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SgfensProspecto fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SgfensProspecto dto = new SgfensProspecto();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SgfensProspecto[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SgfensProspecto dto = new SgfensProspecto();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SgfensProspecto ret[] = new SgfensProspecto[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SgfensProspecto dto, ResultSet rs) throws SQLException
	{
		dto.setIdProspecto( rs.getInt( COLUMN_ID_PROSPECTO ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setRazonSocial( rs.getString( COLUMN_RAZON_SOCIAL ) );
		dto.setLada( rs.getString( COLUMN_LADA ) );
		dto.setTelefono( rs.getString( COLUMN_TELEFONO ) );
		dto.setCelular( rs.getString( COLUMN_CELULAR ) );
		dto.setCorreo( rs.getString( COLUMN_CORREO ) );
		dto.setContacto( rs.getString( COLUMN_CONTACTO ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setLatitud( rs.getDouble( COLUMN_LATITUD ) );
		dto.setLongitud( rs.getDouble( COLUMN_LONGITUD ) );
		dto.setDireccion( rs.getString( COLUMN_DIRECCION ) );
		dto.setNombreImagenProspecto( rs.getString( COLUMN_NOMBRE_IMAGEN_PROSPECTO ) );
		dto.setIdUsuarioVendedor( rs.getInt( COLUMN_ID_USUARIO_VENDEDOR ) );
		dto.setFechaRegistro( rs.getTimestamp(COLUMN_FECHA_REGISTRO ) );
		dto.setDirNumeroExterior( rs.getString( COLUMN_DIR_NUMERO_EXTERIOR ) );
		dto.setDirNumeroInterior( rs.getString( COLUMN_DIR_NUMERO_INTERIOR ) );
		dto.setDirCodigoPostal( rs.getString( COLUMN_DIR_CODIGO_POSTAL ) );
		dto.setDirColonia( rs.getString( COLUMN_DIR_COLONIA ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SgfensProspecto dto)
	{
		dto.setIdProspectoModified( false );
		dto.setIdEmpresaModified( false );
		dto.setRazonSocialModified( false );
		dto.setLadaModified( false );
		dto.setTelefonoModified( false );
		dto.setCelularModified( false );
		dto.setCorreoModified( false );
		dto.setContactoModified( false );
		dto.setIdEstatusModified( false );
		dto.setDescripcionModified( false );
		dto.setLatitudModified( false );
		dto.setLongitudModified( false );
		dto.setDireccionModified( false );
		dto.setNombreImagenProspectoModified( false );
		dto.setIdUsuarioVendedorModified( false );
		dto.setFechaRegistroModified( false );
		dto.setDirNumeroExteriorModified( false );
		dto.setDirNumeroInteriorModified( false );
		dto.setDirCodigoPostalModified( false );
		dto.setDirColoniaModified( false );
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the specified arbitrary SQL statement
	 */
	public SgfensProspecto[] findByDynamicSelect(String sql, Object[] sqlParams) throws SgfensProspectoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensProspectoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sgfens_prospecto table that match the specified arbitrary SQL statement
	 */
	public SgfensProspecto[] findByDynamicWhere(String sql, Object[] sqlParams) throws SgfensProspectoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensProspectoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
