/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class VistaResumenFacturasPorSucursalDaoImpl extends AbstractDAO implements VistaResumenFacturasPorSucursalDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_EMPRESA, NUMERO_COMPROBANTES, SUMA_SUBTOTALES, SUMA_TOTALES, ID_ESTATUS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 1;

	/** 
	 * Index of column NUMERO_COMPROBANTES
	 */
	protected static final int COLUMN_NUMERO_COMPROBANTES = 2;

	/** 
	 * Index of column SUMA_SUBTOTALES
	 */
	protected static final int COLUMN_SUMA_SUBTOTALES = 3;

	/** 
	 * Index of column SUMA_TOTALES
	 */
	protected static final int COLUMN_SUMA_TOTALES = 4;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Returns all rows from the VISTA_RESUMEN_FACTURAS_POR_SUCURSAL table that match the criteria ''.
	 */
	public VistaResumenFacturasPorSucursal[] findAll() throws VistaResumenFacturasPorSucursalDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the VISTA_RESUMEN_FACTURAS_POR_SUCURSAL table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public VistaResumenFacturasPorSucursal[] findWhereIdEmpresaEquals(int idEmpresa) throws VistaResumenFacturasPorSucursalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the VISTA_RESUMEN_FACTURAS_POR_SUCURSAL table that match the criteria 'NUMERO_COMPROBANTES = :numeroComprobantes'.
	 */
	public VistaResumenFacturasPorSucursal[] findWhereNumeroComprobantesEquals(long numeroComprobantes) throws VistaResumenFacturasPorSucursalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMERO_COMPROBANTES = ? ORDER BY NUMERO_COMPROBANTES", new Object[] {  new Long(numeroComprobantes) } );
	}

	/** 
	 * Returns all rows from the VISTA_RESUMEN_FACTURAS_POR_SUCURSAL table that match the criteria 'SUMA_SUBTOTALES = :sumaSubtotales'.
	 */
	public VistaResumenFacturasPorSucursal[] findWhereSumaSubtotalesEquals(float sumaSubtotales) throws VistaResumenFacturasPorSucursalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUMA_SUBTOTALES = ? ORDER BY SUMA_SUBTOTALES", new Object[] {  new Float(sumaSubtotales) } );
	}

	/** 
	 * Returns all rows from the VISTA_RESUMEN_FACTURAS_POR_SUCURSAL table that match the criteria 'SUMA_TOTALES = :sumaTotales'.
	 */
	public VistaResumenFacturasPorSucursal[] findWhereSumaTotalesEquals(float sumaTotales) throws VistaResumenFacturasPorSucursalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUMA_TOTALES = ? ORDER BY SUMA_TOTALES", new Object[] {  new Float(sumaTotales) } );
	}

	/** 
	 * Returns all rows from the VISTA_RESUMEN_FACTURAS_POR_SUCURSAL table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public VistaResumenFacturasPorSucursal[] findWhereIdEstatusEquals(int idEstatus) throws VistaResumenFacturasPorSucursalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/**
	 * Method 'VistaResumenFacturasPorSucursalDaoImpl'
	 * 
	 */
	public VistaResumenFacturasPorSucursalDaoImpl()
	{
	}

	/**
	 * Method 'VistaResumenFacturasPorSucursalDaoImpl'
	 * 
	 * @param userConn
	 */
	public VistaResumenFacturasPorSucursalDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "VISTA_RESUMEN_FACTURAS_POR_SUCURSAL";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected VistaResumenFacturasPorSucursal fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			VistaResumenFacturasPorSucursal dto = new VistaResumenFacturasPorSucursal();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected VistaResumenFacturasPorSucursal[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			VistaResumenFacturasPorSucursal dto = new VistaResumenFacturasPorSucursal();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		VistaResumenFacturasPorSucursal ret[] = new VistaResumenFacturasPorSucursal[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(VistaResumenFacturasPorSucursal dto, ResultSet rs) throws SQLException
	{
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setNumeroComprobantes( rs.getLong( COLUMN_NUMERO_COMPROBANTES ) );
		dto.setSumaSubtotales( rs.getFloat( COLUMN_SUMA_SUBTOTALES ) );
		if (rs.wasNull()) {
			dto.setSumaSubtotalesNull( true );
		}
		
		dto.setSumaTotales( rs.getFloat( COLUMN_SUMA_TOTALES ) );
		if (rs.wasNull()) {
			dto.setSumaTotalesNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(VistaResumenFacturasPorSucursal dto)
	{
		dto.setIdEmpresaModified( false );
		dto.setNumeroComprobantesModified( false );
		dto.setSumaSubtotalesModified( false );
		dto.setSumaTotalesModified( false );
		dto.setIdEstatusModified( false );
	}

	/** 
	 * Returns all rows from the VISTA_RESUMEN_FACTURAS_POR_SUCURSAL table that match the specified arbitrary SQL statement
	 */
	public VistaResumenFacturasPorSucursal[] findByDynamicSelect(String sql, Object[] sqlParams) throws VistaResumenFacturasPorSucursalDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VistaResumenFacturasPorSucursalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the VISTA_RESUMEN_FACTURAS_POR_SUCURSAL table that match the specified arbitrary SQL statement
	 */
	public VistaResumenFacturasPorSucursal[] findByDynamicWhere(String sql, Object[] sqlParams) throws VistaResumenFacturasPorSucursalDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VistaResumenFacturasPorSucursalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
