/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class FoliosMovilEmpleadoDaoImpl extends AbstractDAO implements FoliosMovilEmpleadoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_FOLIO_MOVIL_EMPLEADO, ID_EMPRESA, FOLIO_DESDE, FOLIO_HASTA, ULTIMO_FOLIO, SERIE, ID_ESTATUS, FECHA_GENERACION, TIPO_FOLIO_MOVIL FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_FOLIO_MOVIL_EMPLEADO, ID_EMPRESA, FOLIO_DESDE, FOLIO_HASTA, ULTIMO_FOLIO, SERIE, ID_ESTATUS, FECHA_GENERACION, TIPO_FOLIO_MOVIL ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_FOLIO_MOVIL_EMPLEADO = ?, ID_EMPRESA = ?, FOLIO_DESDE = ?, FOLIO_HASTA = ?, ULTIMO_FOLIO = ?, SERIE = ?, ID_ESTATUS = ?, FECHA_GENERACION = ?, TIPO_FOLIO_MOVIL = ? WHERE ID_FOLIO_MOVIL_EMPLEADO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_FOLIO_MOVIL_EMPLEADO = ?";

	/** 
	 * Index of column ID_FOLIO_MOVIL_EMPLEADO
	 */
	protected static final int COLUMN_ID_FOLIO_MOVIL_EMPLEADO = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column FOLIO_DESDE
	 */
	protected static final int COLUMN_FOLIO_DESDE = 3;

	/** 
	 * Index of column FOLIO_HASTA
	 */
	protected static final int COLUMN_FOLIO_HASTA = 4;

	/** 
	 * Index of column ULTIMO_FOLIO
	 */
	protected static final int COLUMN_ULTIMO_FOLIO = 5;

	/** 
	 * Index of column SERIE
	 */
	protected static final int COLUMN_SERIE = 6;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 7;

	/** 
	 * Index of column FECHA_GENERACION
	 */
	protected static final int COLUMN_FECHA_GENERACION = 8;

	/** 
	 * Index of column TIPO_FOLIO_MOVIL
	 */
	protected static final int COLUMN_TIPO_FOLIO_MOVIL = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column ID_FOLIO_MOVIL_EMPLEADO
	 */
	protected static final int PK_COLUMN_ID_FOLIO_MOVIL_EMPLEADO = 1;

	/** 
	 * Inserts a new row in the folios_movil_empleado table.
	 */
	public FoliosMovilEmpleadoPk insert(FoliosMovilEmpleado dto) throws FoliosMovilEmpleadoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdFolioMovilEmpleadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_FOLIO_MOVIL_EMPLEADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioDesdeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIO_DESDE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioHastaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIO_HASTA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUltimoFolioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ULTIMO_FOLIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSerieModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SERIE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaGeneracionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_GENERACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoFolioMovilModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIPO_FOLIO_MOVIL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdFolioMovilEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdFolioMovilEmpleado() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isFolioDesdeModified()) {
				stmt.setInt( index++, dto.getFolioDesde() );
			}
		
			if (dto.isFolioHastaModified()) {
				stmt.setInt( index++, dto.getFolioHasta() );
			}
		
			if (dto.isUltimoFolioModified()) {
				stmt.setInt( index++, dto.getUltimoFolio() );
			}
		
			if (dto.isSerieModified()) {
				stmt.setString( index++, dto.getSerie() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isFechaGeneracionModified()) {
				stmt.setTimestamp(index++, dto.getFechaGeneracion()==null ? null : new java.sql.Timestamp( dto.getFechaGeneracion().getTime() ) );
			}
		
			if (dto.isTipoFolioMovilModified()) {
				if (dto.isTipoFolioMovilNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoFolioMovil() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdFolioMovilEmpleado( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FoliosMovilEmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the folios_movil_empleado table.
	 */
	public void update(FoliosMovilEmpleadoPk pk, FoliosMovilEmpleado dto) throws FoliosMovilEmpleadoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdFolioMovilEmpleadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_FOLIO_MOVIL_EMPLEADO=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isFolioDesdeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIO_DESDE=?" );
				modified=true;
			}
		
			if (dto.isFolioHastaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIO_HASTA=?" );
				modified=true;
			}
		
			if (dto.isUltimoFolioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ULTIMO_FOLIO=?" );
				modified=true;
			}
		
			if (dto.isSerieModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SERIE=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isFechaGeneracionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_GENERACION=?" );
				modified=true;
			}
		
			if (dto.isTipoFolioMovilModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIPO_FOLIO_MOVIL=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_FOLIO_MOVIL_EMPLEADO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdFolioMovilEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdFolioMovilEmpleado() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isFolioDesdeModified()) {
				stmt.setInt( index++, dto.getFolioDesde() );
			}
		
			if (dto.isFolioHastaModified()) {
				stmt.setInt( index++, dto.getFolioHasta() );
			}
		
			if (dto.isUltimoFolioModified()) {
				stmt.setInt( index++, dto.getUltimoFolio() );
			}
		
			if (dto.isSerieModified()) {
				stmt.setString( index++, dto.getSerie() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isFechaGeneracionModified()) {
				stmt.setTimestamp(index++, dto.getFechaGeneracion()==null ? null : new java.sql.Timestamp( dto.getFechaGeneracion().getTime() ) );
			}
		
			if (dto.isTipoFolioMovilModified()) {
				if (dto.isTipoFolioMovilNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoFolioMovil() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdFolioMovilEmpleado() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FoliosMovilEmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the folios_movil_empleado table.
	 */
	public void delete(FoliosMovilEmpleadoPk pk) throws FoliosMovilEmpleadoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdFolioMovilEmpleado() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FoliosMovilEmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the folios_movil_empleado table that matches the specified primary-key value.
	 */
	public FoliosMovilEmpleado findByPrimaryKey(FoliosMovilEmpleadoPk pk) throws FoliosMovilEmpleadoDaoException
	{
		return findByPrimaryKey( pk.getIdFolioMovilEmpleado() );
	}

	/** 
	 * Returns all rows from the folios_movil_empleado table that match the criteria 'ID_FOLIO_MOVIL_EMPLEADO = :idFolioMovilEmpleado'.
	 */
	public FoliosMovilEmpleado findByPrimaryKey(int idFolioMovilEmpleado) throws FoliosMovilEmpleadoDaoException
	{
		FoliosMovilEmpleado ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_FOLIO_MOVIL_EMPLEADO = ?", new Object[] {  new Integer(idFolioMovilEmpleado) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the folios_movil_empleado table that match the criteria ''.
	 */
	public FoliosMovilEmpleado[] findAll() throws FoliosMovilEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_FOLIO_MOVIL_EMPLEADO", null );
	}

	/** 
	 * Returns all rows from the folios_movil_empleado table that match the criteria 'ID_FOLIO_MOVIL_EMPLEADO = :idFolioMovilEmpleado'.
	 */
	public FoliosMovilEmpleado[] findWhereIdFolioMovilEmpleadoEquals(int idFolioMovilEmpleado) throws FoliosMovilEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_FOLIO_MOVIL_EMPLEADO = ? ORDER BY ID_FOLIO_MOVIL_EMPLEADO", new Object[] {  new Integer(idFolioMovilEmpleado) } );
	}

	/** 
	 * Returns all rows from the folios_movil_empleado table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public FoliosMovilEmpleado[] findWhereIdEmpresaEquals(int idEmpresa) throws FoliosMovilEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the folios_movil_empleado table that match the criteria 'FOLIO_DESDE = :folioDesde'.
	 */
	public FoliosMovilEmpleado[] findWhereFolioDesdeEquals(int folioDesde) throws FoliosMovilEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_DESDE = ? ORDER BY FOLIO_DESDE", new Object[] {  new Integer(folioDesde) } );
	}

	/** 
	 * Returns all rows from the folios_movil_empleado table that match the criteria 'FOLIO_HASTA = :folioHasta'.
	 */
	public FoliosMovilEmpleado[] findWhereFolioHastaEquals(int folioHasta) throws FoliosMovilEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_HASTA = ? ORDER BY FOLIO_HASTA", new Object[] {  new Integer(folioHasta) } );
	}

	/** 
	 * Returns all rows from the folios_movil_empleado table that match the criteria 'ULTIMO_FOLIO = :ultimoFolio'.
	 */
	public FoliosMovilEmpleado[] findWhereUltimoFolioEquals(int ultimoFolio) throws FoliosMovilEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ULTIMO_FOLIO = ? ORDER BY ULTIMO_FOLIO", new Object[] {  new Integer(ultimoFolio) } );
	}

	/** 
	 * Returns all rows from the folios_movil_empleado table that match the criteria 'SERIE = :serie'.
	 */
	public FoliosMovilEmpleado[] findWhereSerieEquals(String serie) throws FoliosMovilEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SERIE = ? ORDER BY SERIE", new Object[] { serie } );
	}

	/** 
	 * Returns all rows from the folios_movil_empleado table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public FoliosMovilEmpleado[] findWhereIdEstatusEquals(int idEstatus) throws FoliosMovilEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the folios_movil_empleado table that match the criteria 'FECHA_GENERACION = :fechaGeneracion'.
	 */
	public FoliosMovilEmpleado[] findWhereFechaGeneracionEquals(Date fechaGeneracion) throws FoliosMovilEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_GENERACION = ? ORDER BY FECHA_GENERACION", new Object[] { fechaGeneracion==null ? null : new java.sql.Timestamp( fechaGeneracion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the folios_movil_empleado table that match the criteria 'TIPO_FOLIO_MOVIL = :tipoFolioMovil'.
	 */
	public FoliosMovilEmpleado[] findWhereTipoFolioMovilEquals(int tipoFolioMovil) throws FoliosMovilEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_FOLIO_MOVIL = ? ORDER BY TIPO_FOLIO_MOVIL", new Object[] {  new Integer(tipoFolioMovil) } );
	}

	/**
	 * Method 'FoliosMovilEmpleadoDaoImpl'
	 * 
	 */
	public FoliosMovilEmpleadoDaoImpl()
	{
	}

	/**
	 * Method 'FoliosMovilEmpleadoDaoImpl'
	 * 
	 * @param userConn
	 */
	public FoliosMovilEmpleadoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "folios_movil_empleado";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected FoliosMovilEmpleado fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			FoliosMovilEmpleado dto = new FoliosMovilEmpleado();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected FoliosMovilEmpleado[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			FoliosMovilEmpleado dto = new FoliosMovilEmpleado();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		FoliosMovilEmpleado ret[] = new FoliosMovilEmpleado[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(FoliosMovilEmpleado dto, ResultSet rs) throws SQLException
	{
		dto.setIdFolioMovilEmpleado( rs.getInt( COLUMN_ID_FOLIO_MOVIL_EMPLEADO ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setFolioDesde( rs.getInt( COLUMN_FOLIO_DESDE ) );
		dto.setFolioHasta( rs.getInt( COLUMN_FOLIO_HASTA ) );
		dto.setUltimoFolio( rs.getInt( COLUMN_ULTIMO_FOLIO ) );
		dto.setSerie( rs.getString( COLUMN_SERIE ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setFechaGeneracion( rs.getTimestamp(COLUMN_FECHA_GENERACION ) );
		dto.setTipoFolioMovil( rs.getInt( COLUMN_TIPO_FOLIO_MOVIL ) );
		if (rs.wasNull()) {
			dto.setTipoFolioMovilNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(FoliosMovilEmpleado dto)
	{
		dto.setIdFolioMovilEmpleadoModified( false );
		dto.setIdEmpresaModified( false );
		dto.setFolioDesdeModified( false );
		dto.setFolioHastaModified( false );
		dto.setUltimoFolioModified( false );
		dto.setSerieModified( false );
		dto.setIdEstatusModified( false );
		dto.setFechaGeneracionModified( false );
		dto.setTipoFolioMovilModified( false );
	}

	/** 
	 * Returns all rows from the folios_movil_empleado table that match the specified arbitrary SQL statement
	 */
	public FoliosMovilEmpleado[] findByDynamicSelect(String sql, Object[] sqlParams) throws FoliosMovilEmpleadoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FoliosMovilEmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the folios_movil_empleado table that match the specified arbitrary SQL statement
	 */
	public FoliosMovilEmpleado[] findByDynamicWhere(String sql, Object[] sqlParams) throws FoliosMovilEmpleadoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FoliosMovilEmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
