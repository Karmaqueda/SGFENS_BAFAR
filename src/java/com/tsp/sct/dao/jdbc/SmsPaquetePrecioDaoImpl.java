/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SmsPaquetePrecioDaoImpl extends AbstractDAO implements SmsPaquetePrecioDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_sms_paquete_precio, nombre_paquete, descripcion_paquete, is_rango, rango_min, rango_max, rango_precio_unitario, paquete_cantidad, paquete_precio_total, id_estatus FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_sms_paquete_precio, nombre_paquete, descripcion_paquete, is_rango, rango_min, rango_max, rango_precio_unitario, paquete_cantidad, paquete_precio_total, id_estatus ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_sms_paquete_precio = ?, nombre_paquete = ?, descripcion_paquete = ?, is_rango = ?, rango_min = ?, rango_max = ?, rango_precio_unitario = ?, paquete_cantidad = ?, paquete_precio_total = ?, id_estatus = ? WHERE id_sms_paquete_precio = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_sms_paquete_precio = ?";

	/** 
	 * Index of column id_sms_paquete_precio
	 */
	protected static final int COLUMN_ID_SMS_PAQUETE_PRECIO = 1;

	/** 
	 * Index of column nombre_paquete
	 */
	protected static final int COLUMN_NOMBRE_PAQUETE = 2;

	/** 
	 * Index of column descripcion_paquete
	 */
	protected static final int COLUMN_DESCRIPCION_PAQUETE = 3;

	/** 
	 * Index of column is_rango
	 */
	protected static final int COLUMN_IS_RANGO = 4;

	/** 
	 * Index of column rango_min
	 */
	protected static final int COLUMN_RANGO_MIN = 5;

	/** 
	 * Index of column rango_max
	 */
	protected static final int COLUMN_RANGO_MAX = 6;

	/** 
	 * Index of column rango_precio_unitario
	 */
	protected static final int COLUMN_RANGO_PRECIO_UNITARIO = 7;

	/** 
	 * Index of column paquete_cantidad
	 */
	protected static final int COLUMN_PAQUETE_CANTIDAD = 8;

	/** 
	 * Index of column paquete_precio_total
	 */
	protected static final int COLUMN_PAQUETE_PRECIO_TOTAL = 9;

	/** 
	 * Index of column id_estatus
	 */
	protected static final int COLUMN_ID_ESTATUS = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column id_sms_paquete_precio
	 */
	protected static final int PK_COLUMN_ID_SMS_PAQUETE_PRECIO = 1;

	/** 
	 * Inserts a new row in the sms_paquete_precio table.
	 */
	public SmsPaquetePrecioPk insert(SmsPaquetePrecio dto) throws SmsPaquetePrecioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdSmsPaquetePrecioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_paquete_precio" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombrePaqueteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "nombre_paquete" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescripcionPaqueteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "descripcion_paquete" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsRangoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_rango" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRangoMinModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "rango_min" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRangoMaxModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "rango_max" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRangoPrecioUnitarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "rango_precio_unitario" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPaqueteCantidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "paquete_cantidad" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPaquetePrecioTotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "paquete_precio_total" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_estatus" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdSmsPaquetePrecioModified()) {
				stmt.setInt( index++, dto.getIdSmsPaquetePrecio() );
			}
		
			if (dto.isNombrePaqueteModified()) {
				stmt.setString( index++, dto.getNombrePaquete() );
			}
		
			if (dto.isDescripcionPaqueteModified()) {
				stmt.setString( index++, dto.getDescripcionPaquete() );
			}
		
			if (dto.isIsRangoModified()) {
				stmt.setInt( index++, dto.getIsRango() );
			}
		
			if (dto.isRangoMinModified()) {
				if (dto.isRangoMinNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getRangoMin() );
				}
		
			}
		
			if (dto.isRangoMaxModified()) {
				if (dto.isRangoMaxNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getRangoMax() );
				}
		
			}
		
			if (dto.isRangoPrecioUnitarioModified()) {
				if (dto.isRangoPrecioUnitarioNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getRangoPrecioUnitario() );
				}
		
			}
		
			if (dto.isPaqueteCantidadModified()) {
				if (dto.isPaqueteCantidadNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPaqueteCantidad() );
				}
		
			}
		
			if (dto.isPaquetePrecioTotalModified()) {
				if (dto.isPaquetePrecioTotalNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPaquetePrecioTotal() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdSmsPaquetePrecio( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsPaquetePrecioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sms_paquete_precio table.
	 */
	public void update(SmsPaquetePrecioPk pk, SmsPaquetePrecio dto) throws SmsPaquetePrecioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdSmsPaquetePrecioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_paquete_precio=?" );
				modified=true;
			}
		
			if (dto.isNombrePaqueteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "nombre_paquete=?" );
				modified=true;
			}
		
			if (dto.isDescripcionPaqueteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "descripcion_paquete=?" );
				modified=true;
			}
		
			if (dto.isIsRangoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_rango=?" );
				modified=true;
			}
		
			if (dto.isRangoMinModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "rango_min=?" );
				modified=true;
			}
		
			if (dto.isRangoMaxModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "rango_max=?" );
				modified=true;
			}
		
			if (dto.isRangoPrecioUnitarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "rango_precio_unitario=?" );
				modified=true;
			}
		
			if (dto.isPaqueteCantidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "paquete_cantidad=?" );
				modified=true;
			}
		
			if (dto.isPaquetePrecioTotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "paquete_precio_total=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_estatus=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_sms_paquete_precio=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdSmsPaquetePrecioModified()) {
				stmt.setInt( index++, dto.getIdSmsPaquetePrecio() );
			}
		
			if (dto.isNombrePaqueteModified()) {
				stmt.setString( index++, dto.getNombrePaquete() );
			}
		
			if (dto.isDescripcionPaqueteModified()) {
				stmt.setString( index++, dto.getDescripcionPaquete() );
			}
		
			if (dto.isIsRangoModified()) {
				stmt.setInt( index++, dto.getIsRango() );
			}
		
			if (dto.isRangoMinModified()) {
				if (dto.isRangoMinNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getRangoMin() );
				}
		
			}
		
			if (dto.isRangoMaxModified()) {
				if (dto.isRangoMaxNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getRangoMax() );
				}
		
			}
		
			if (dto.isRangoPrecioUnitarioModified()) {
				if (dto.isRangoPrecioUnitarioNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getRangoPrecioUnitario() );
				}
		
			}
		
			if (dto.isPaqueteCantidadModified()) {
				if (dto.isPaqueteCantidadNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPaqueteCantidad() );
				}
		
			}
		
			if (dto.isPaquetePrecioTotalModified()) {
				if (dto.isPaquetePrecioTotalNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPaquetePrecioTotal() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			stmt.setInt( index++, pk.getIdSmsPaquetePrecio() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsPaquetePrecioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sms_paquete_precio table.
	 */
	public void delete(SmsPaquetePrecioPk pk) throws SmsPaquetePrecioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdSmsPaquetePrecio() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsPaquetePrecioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sms_paquete_precio table that matches the specified primary-key value.
	 */
	public SmsPaquetePrecio findByPrimaryKey(SmsPaquetePrecioPk pk) throws SmsPaquetePrecioDaoException
	{
		return findByPrimaryKey( pk.getIdSmsPaquetePrecio() );
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the criteria 'id_sms_paquete_precio = :idSmsPaquetePrecio'.
	 */
	public SmsPaquetePrecio findByPrimaryKey(int idSmsPaquetePrecio) throws SmsPaquetePrecioDaoException
	{
		SmsPaquetePrecio ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_sms_paquete_precio = ?", new Object[] {  new Integer(idSmsPaquetePrecio) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the criteria ''.
	 */
	public SmsPaquetePrecio[] findAll() throws SmsPaquetePrecioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_sms_paquete_precio", null );
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the criteria 'id_sms_paquete_precio = :idSmsPaquetePrecio'.
	 */
	public SmsPaquetePrecio[] findWhereIdSmsPaquetePrecioEquals(int idSmsPaquetePrecio) throws SmsPaquetePrecioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_paquete_precio = ? ORDER BY id_sms_paquete_precio", new Object[] {  new Integer(idSmsPaquetePrecio) } );
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the criteria 'nombre_paquete = :nombrePaquete'.
	 */
	public SmsPaquetePrecio[] findWhereNombrePaqueteEquals(String nombrePaquete) throws SmsPaquetePrecioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nombre_paquete = ? ORDER BY nombre_paquete", new Object[] { nombrePaquete } );
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the criteria 'descripcion_paquete = :descripcionPaquete'.
	 */
	public SmsPaquetePrecio[] findWhereDescripcionPaqueteEquals(String descripcionPaquete) throws SmsPaquetePrecioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE descripcion_paquete = ? ORDER BY descripcion_paquete", new Object[] { descripcionPaquete } );
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the criteria 'is_rango = :isRango'.
	 */
	public SmsPaquetePrecio[] findWhereIsRangoEquals(int isRango) throws SmsPaquetePrecioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_rango = ? ORDER BY is_rango", new Object[] {  new Integer(isRango) } );
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the criteria 'rango_min = :rangoMin'.
	 */
	public SmsPaquetePrecio[] findWhereRangoMinEquals(int rangoMin) throws SmsPaquetePrecioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE rango_min = ? ORDER BY rango_min", new Object[] {  new Integer(rangoMin) } );
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the criteria 'rango_max = :rangoMax'.
	 */
	public SmsPaquetePrecio[] findWhereRangoMaxEquals(int rangoMax) throws SmsPaquetePrecioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE rango_max = ? ORDER BY rango_max", new Object[] {  new Integer(rangoMax) } );
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the criteria 'rango_precio_unitario = :rangoPrecioUnitario'.
	 */
	public SmsPaquetePrecio[] findWhereRangoPrecioUnitarioEquals(double rangoPrecioUnitario) throws SmsPaquetePrecioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE rango_precio_unitario = ? ORDER BY rango_precio_unitario", new Object[] {  new Double(rangoPrecioUnitario) } );
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the criteria 'paquete_cantidad = :paqueteCantidad'.
	 */
	public SmsPaquetePrecio[] findWherePaqueteCantidadEquals(int paqueteCantidad) throws SmsPaquetePrecioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE paquete_cantidad = ? ORDER BY paquete_cantidad", new Object[] {  new Integer(paqueteCantidad) } );
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the criteria 'paquete_precio_total = :paquetePrecioTotal'.
	 */
	public SmsPaquetePrecio[] findWherePaquetePrecioTotalEquals(double paquetePrecioTotal) throws SmsPaquetePrecioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE paquete_precio_total = ? ORDER BY paquete_precio_total", new Object[] {  new Double(paquetePrecioTotal) } );
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public SmsPaquetePrecio[] findWhereIdEstatusEquals(int idEstatus) throws SmsPaquetePrecioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_estatus = ? ORDER BY id_estatus", new Object[] {  new Integer(idEstatus) } );
	}

	/**
	 * Method 'SmsPaquetePrecioDaoImpl'
	 * 
	 */
	public SmsPaquetePrecioDaoImpl()
	{
	}

	/**
	 * Method 'SmsPaquetePrecioDaoImpl'
	 * 
	 * @param userConn
	 */
	public SmsPaquetePrecioDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sms_paquete_precio";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SmsPaquetePrecio fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SmsPaquetePrecio dto = new SmsPaquetePrecio();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SmsPaquetePrecio[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SmsPaquetePrecio dto = new SmsPaquetePrecio();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SmsPaquetePrecio ret[] = new SmsPaquetePrecio[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SmsPaquetePrecio dto, ResultSet rs) throws SQLException
	{
		dto.setIdSmsPaquetePrecio( rs.getInt( COLUMN_ID_SMS_PAQUETE_PRECIO ) );
		dto.setNombrePaquete( rs.getString( COLUMN_NOMBRE_PAQUETE ) );
		dto.setDescripcionPaquete( rs.getString( COLUMN_DESCRIPCION_PAQUETE ) );
		dto.setIsRango( rs.getInt( COLUMN_IS_RANGO ) );
		dto.setRangoMin( rs.getInt( COLUMN_RANGO_MIN ) );
		if (rs.wasNull()) {
			dto.setRangoMinNull( true );
		}
		
		dto.setRangoMax( rs.getInt( COLUMN_RANGO_MAX ) );
		if (rs.wasNull()) {
			dto.setRangoMaxNull( true );
		}
		
		dto.setRangoPrecioUnitario( rs.getDouble( COLUMN_RANGO_PRECIO_UNITARIO ) );
		if (rs.wasNull()) {
			dto.setRangoPrecioUnitarioNull( true );
		}
		
		dto.setPaqueteCantidad( rs.getInt( COLUMN_PAQUETE_CANTIDAD ) );
		if (rs.wasNull()) {
			dto.setPaqueteCantidadNull( true );
		}
		
		dto.setPaquetePrecioTotal( rs.getDouble( COLUMN_PAQUETE_PRECIO_TOTAL ) );
		if (rs.wasNull()) {
			dto.setPaquetePrecioTotalNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SmsPaquetePrecio dto)
	{
		dto.setIdSmsPaquetePrecioModified( false );
		dto.setNombrePaqueteModified( false );
		dto.setDescripcionPaqueteModified( false );
		dto.setIsRangoModified( false );
		dto.setRangoMinModified( false );
		dto.setRangoMaxModified( false );
		dto.setRangoPrecioUnitarioModified( false );
		dto.setPaqueteCantidadModified( false );
		dto.setPaquetePrecioTotalModified( false );
		dto.setIdEstatusModified( false );
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the specified arbitrary SQL statement
	 */
	public SmsPaquetePrecio[] findByDynamicSelect(String sql, Object[] sqlParams) throws SmsPaquetePrecioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsPaquetePrecioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sms_paquete_precio table that match the specified arbitrary SQL statement
	 */
	public SmsPaquetePrecio[] findByDynamicWhere(String sql, Object[] sqlParams) throws SmsPaquetePrecioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsPaquetePrecioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
