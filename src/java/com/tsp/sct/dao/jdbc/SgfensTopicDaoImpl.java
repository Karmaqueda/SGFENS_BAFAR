/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SgfensTopicDaoImpl extends AbstractDAO implements SgfensTopicDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_topic, title_topic, description_topic, order_topic, url_topic, is_public_topic, id_parent_topic, is_active_topic FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_topic, title_topic, description_topic, order_topic, url_topic, is_public_topic, id_parent_topic, is_active_topic ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_topic = ?, title_topic = ?, description_topic = ?, order_topic = ?, url_topic = ?, is_public_topic = ?, id_parent_topic = ?, is_active_topic = ? WHERE id_topic = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_topic = ?";

	/** 
	 * Index of column id_topic
	 */
	protected static final int COLUMN_ID_TOPIC = 1;

	/** 
	 * Index of column title_topic
	 */
	protected static final int COLUMN_TITLE_TOPIC = 2;

	/** 
	 * Index of column description_topic
	 */
	protected static final int COLUMN_DESCRIPTION_TOPIC = 3;

	/** 
	 * Index of column order_topic
	 */
	protected static final int COLUMN_ORDER_TOPIC = 4;

	/** 
	 * Index of column url_topic
	 */
	protected static final int COLUMN_URL_TOPIC = 5;

	/** 
	 * Index of column is_public_topic
	 */
	protected static final int COLUMN_IS_PUBLIC_TOPIC = 6;

	/** 
	 * Index of column id_parent_topic
	 */
	protected static final int COLUMN_ID_PARENT_TOPIC = 7;

	/** 
	 * Index of column is_active_topic
	 */
	protected static final int COLUMN_IS_ACTIVE_TOPIC = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column id_topic
	 */
	protected static final int PK_COLUMN_ID_TOPIC = 1;

	/** 
	 * Inserts a new row in the SGFENS_TOPIC table.
	 */
	public SgfensTopicPk insert(SgfensTopic dto) throws SgfensTopicDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdTopicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_topic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTitleTopicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "title_topic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescriptionTopicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "description_topic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isOrderTopicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "order_topic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUrlTopicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "url_topic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPublicTopicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_public_topic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdParentTopicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_parent_topic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsActiveTopicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_active_topic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdTopicModified()) {
				stmt.setLong( index++, dto.getIdTopic() );
			}
		
			if (dto.isTitleTopicModified()) {
				stmt.setString( index++, dto.getTitleTopic() );
			}
		
			if (dto.isDescriptionTopicModified()) {
				stmt.setString( index++, dto.getDescriptionTopic() );
			}
		
			if (dto.isOrderTopicModified()) {
				stmt.setString( index++, dto.getOrderTopic() );
			}
		
			if (dto.isUrlTopicModified()) {
				stmt.setString( index++, dto.getUrlTopic() );
			}
		
			if (dto.isIsPublicTopicModified()) {
				if (dto.isIsPublicTopicNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getIsPublicTopic() );
				}
		
			}
		
			if (dto.isIdParentTopicModified()) {
				if (dto.isIdParentTopicNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setLong( index++, dto.getIdParentTopic() );
				}
		
			}
		
			if (dto.isIsActiveTopicModified()) {
				if (dto.isIsActiveTopicNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getIsActiveTopic() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdTopic( rs.getLong( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensTopicDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the SGFENS_TOPIC table.
	 */
	public void update(SgfensTopicPk pk, SgfensTopic dto) throws SgfensTopicDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdTopicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_topic=?" );
				modified=true;
			}
		
			if (dto.isTitleTopicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "title_topic=?" );
				modified=true;
			}
		
			if (dto.isDescriptionTopicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "description_topic=?" );
				modified=true;
			}
		
			if (dto.isOrderTopicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "order_topic=?" );
				modified=true;
			}
		
			if (dto.isUrlTopicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "url_topic=?" );
				modified=true;
			}
		
			if (dto.isIsPublicTopicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_public_topic=?" );
				modified=true;
			}
		
			if (dto.isIdParentTopicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_parent_topic=?" );
				modified=true;
			}
		
			if (dto.isIsActiveTopicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_active_topic=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_topic=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdTopicModified()) {
				stmt.setLong( index++, dto.getIdTopic() );
			}
		
			if (dto.isTitleTopicModified()) {
				stmt.setString( index++, dto.getTitleTopic() );
			}
		
			if (dto.isDescriptionTopicModified()) {
				stmt.setString( index++, dto.getDescriptionTopic() );
			}
		
			if (dto.isOrderTopicModified()) {
				stmt.setString( index++, dto.getOrderTopic() );
			}
		
			if (dto.isUrlTopicModified()) {
				stmt.setString( index++, dto.getUrlTopic() );
			}
		
			if (dto.isIsPublicTopicModified()) {
				if (dto.isIsPublicTopicNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getIsPublicTopic() );
				}
		
			}
		
			if (dto.isIdParentTopicModified()) {
				if (dto.isIdParentTopicNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setLong( index++, dto.getIdParentTopic() );
				}
		
			}
		
			if (dto.isIsActiveTopicModified()) {
				if (dto.isIsActiveTopicNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getIsActiveTopic() );
				}
		
			}
		
			stmt.setLong( index++, pk.getIdTopic() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensTopicDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the SGFENS_TOPIC table.
	 */
	public void delete(SgfensTopicPk pk) throws SgfensTopicDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getIdTopic() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensTopicDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the SGFENS_TOPIC table that matches the specified primary-key value.
	 */
	public SgfensTopic findByPrimaryKey(SgfensTopicPk pk) throws SgfensTopicDaoException
	{
		return findByPrimaryKey( pk.getIdTopic() );
	}

	/** 
	 * Returns all rows from the SGFENS_TOPIC table that match the criteria 'id_topic = :idTopic'.
	 */
	public SgfensTopic findByPrimaryKey(long idTopic) throws SgfensTopicDaoException
	{
		SgfensTopic ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_topic = ?", new Object[] {  new Long(idTopic) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the SGFENS_TOPIC table that match the criteria ''.
	 */
	public SgfensTopic[] findAll() throws SgfensTopicDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_topic", null );
	}

	/** 
	 * Returns all rows from the SGFENS_TOPIC table that match the criteria 'id_topic = :idTopic'.
	 */
	public SgfensTopic[] findWhereIdTopicEquals(long idTopic) throws SgfensTopicDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_topic = ? ORDER BY id_topic", new Object[] {  new Long(idTopic) } );
	}

	/** 
	 * Returns all rows from the SGFENS_TOPIC table that match the criteria 'title_topic = :titleTopic'.
	 */
	public SgfensTopic[] findWhereTitleTopicEquals(String titleTopic) throws SgfensTopicDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE title_topic = ? ORDER BY title_topic", new Object[] { titleTopic } );
	}

	/** 
	 * Returns all rows from the SGFENS_TOPIC table that match the criteria 'description_topic = :descriptionTopic'.
	 */
	public SgfensTopic[] findWhereDescriptionTopicEquals(String descriptionTopic) throws SgfensTopicDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE description_topic = ? ORDER BY description_topic", new Object[] { descriptionTopic } );
	}

	/** 
	 * Returns all rows from the SGFENS_TOPIC table that match the criteria 'order_topic = :orderTopic'.
	 */
	public SgfensTopic[] findWhereOrderTopicEquals(String orderTopic) throws SgfensTopicDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE order_topic = ? ORDER BY order_topic", new Object[] { orderTopic } );
	}

	/** 
	 * Returns all rows from the SGFENS_TOPIC table that match the criteria 'url_topic = :urlTopic'.
	 */
	public SgfensTopic[] findWhereUrlTopicEquals(String urlTopic) throws SgfensTopicDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE url_topic = ? ORDER BY url_topic", new Object[] { urlTopic } );
	}

	/** 
	 * Returns all rows from the SGFENS_TOPIC table that match the criteria 'is_public_topic = :isPublicTopic'.
	 */
	public SgfensTopic[] findWhereIsPublicTopicEquals(short isPublicTopic) throws SgfensTopicDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_public_topic = ? ORDER BY is_public_topic", new Object[] {  new Short(isPublicTopic) } );
	}

	/** 
	 * Returns all rows from the SGFENS_TOPIC table that match the criteria 'id_parent_topic = :idParentTopic'.
	 */
	public SgfensTopic[] findWhereIdParentTopicEquals(long idParentTopic) throws SgfensTopicDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_parent_topic = ? ORDER BY id_parent_topic", new Object[] {  new Long(idParentTopic) } );
	}

	/** 
	 * Returns all rows from the SGFENS_TOPIC table that match the criteria 'is_active_topic = :isActiveTopic'.
	 */
	public SgfensTopic[] findWhereIsActiveTopicEquals(short isActiveTopic) throws SgfensTopicDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_active_topic = ? ORDER BY is_active_topic", new Object[] {  new Short(isActiveTopic) } );
	}

	/**
	 * Method 'SgfensTopicDaoImpl'
	 * 
	 */
	public SgfensTopicDaoImpl()
	{
	}

	/**
	 * Method 'SgfensTopicDaoImpl'
	 * 
	 * @param userConn
	 */
	public SgfensTopicDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "SGFENS_TOPIC";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SgfensTopic fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SgfensTopic dto = new SgfensTopic();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SgfensTopic[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SgfensTopic dto = new SgfensTopic();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SgfensTopic ret[] = new SgfensTopic[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SgfensTopic dto, ResultSet rs) throws SQLException
	{
		dto.setIdTopic( rs.getLong( COLUMN_ID_TOPIC ) );
		dto.setTitleTopic( rs.getString( COLUMN_TITLE_TOPIC ) );
		dto.setDescriptionTopic( rs.getString( COLUMN_DESCRIPTION_TOPIC ) );
		dto.setOrderTopic( rs.getString( COLUMN_ORDER_TOPIC ) );
		dto.setUrlTopic( rs.getString( COLUMN_URL_TOPIC ) );
		dto.setIsPublicTopic( rs.getShort( COLUMN_IS_PUBLIC_TOPIC ) );
		if (rs.wasNull()) {
			dto.setIsPublicTopicNull( true );
		}
		
		dto.setIdParentTopic( rs.getLong( COLUMN_ID_PARENT_TOPIC ) );
		if (rs.wasNull()) {
			dto.setIdParentTopicNull( true );
		}
		
		dto.setIsActiveTopic( rs.getShort( COLUMN_IS_ACTIVE_TOPIC ) );
		if (rs.wasNull()) {
			dto.setIsActiveTopicNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SgfensTopic dto)
	{
		dto.setIdTopicModified( false );
		dto.setTitleTopicModified( false );
		dto.setDescriptionTopicModified( false );
		dto.setOrderTopicModified( false );
		dto.setUrlTopicModified( false );
		dto.setIsPublicTopicModified( false );
		dto.setIdParentTopicModified( false );
		dto.setIsActiveTopicModified( false );
	}

	/** 
	 * Returns all rows from the SGFENS_TOPIC table that match the specified arbitrary SQL statement
	 */
	public SgfensTopic[] findByDynamicSelect(String sql, Object[] sqlParams) throws SgfensTopicDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensTopicDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the SGFENS_TOPIC table that match the specified arbitrary SQL statement
	 */
	public SgfensTopic[] findByDynamicWhere(String sql, Object[] sqlParams) throws SgfensTopicDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensTopicDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
