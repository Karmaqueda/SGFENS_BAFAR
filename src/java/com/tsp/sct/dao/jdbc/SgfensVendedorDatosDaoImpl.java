/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SgfensVendedorDatosDaoImpl extends AbstractDAO implements SgfensVendedorDatosDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_USUARIO, SUELDO_MENSUAL, PORCENTAJE_COMISIONES FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_USUARIO, SUELDO_MENSUAL, PORCENTAJE_COMISIONES ) VALUES ( ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_USUARIO = ?, SUELDO_MENSUAL = ?, PORCENTAJE_COMISIONES = ? WHERE ID_USUARIO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_USUARIO = ?";

	/** 
	 * Index of column ID_USUARIO
	 */
	protected static final int COLUMN_ID_USUARIO = 1;

	/** 
	 * Index of column SUELDO_MENSUAL
	 */
	protected static final int COLUMN_SUELDO_MENSUAL = 2;

	/** 
	 * Index of column PORCENTAJE_COMISIONES
	 */
	protected static final int COLUMN_PORCENTAJE_COMISIONES = 3;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 3;

	/** 
	 * Index of primary-key column ID_USUARIO
	 */
	protected static final int PK_COLUMN_ID_USUARIO = 1;

	/** 
	 * Inserts a new row in the SGFENS_VENDEDOR_DATOS table.
	 */
	public SgfensVendedorDatosPk insert(SgfensVendedorDatos dto) throws SgfensVendedorDatosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdUsuarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_USUARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSueldoMensualModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SUELDO_MENSUAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPorcentajeComisionesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PORCENTAJE_COMISIONES" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdUsuarioModified()) {
				stmt.setInt( index++, dto.getIdUsuario() );
			}
		
			if (dto.isSueldoMensualModified()) {
				stmt.setDouble( index++, dto.getSueldoMensual() );
			}
		
			if (dto.isPorcentajeComisionesModified()) {
				stmt.setDouble( index++, dto.getPorcentajeComisiones() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensVendedorDatosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the SGFENS_VENDEDOR_DATOS table.
	 */
	public void update(SgfensVendedorDatosPk pk, SgfensVendedorDatos dto) throws SgfensVendedorDatosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdUsuarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_USUARIO=?" );
				modified=true;
			}
		
			if (dto.isSueldoMensualModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SUELDO_MENSUAL=?" );
				modified=true;
			}
		
			if (dto.isPorcentajeComisionesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PORCENTAJE_COMISIONES=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_USUARIO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdUsuarioModified()) {
				stmt.setInt( index++, dto.getIdUsuario() );
			}
		
			if (dto.isSueldoMensualModified()) {
				stmt.setDouble( index++, dto.getSueldoMensual() );
			}
		
			if (dto.isPorcentajeComisionesModified()) {
				stmt.setDouble( index++, dto.getPorcentajeComisiones() );
			}
		
			stmt.setInt( index++, pk.getIdUsuario() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensVendedorDatosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the SGFENS_VENDEDOR_DATOS table.
	 */
	public void delete(SgfensVendedorDatosPk pk) throws SgfensVendedorDatosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdUsuario() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensVendedorDatosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the SGFENS_VENDEDOR_DATOS table that matches the specified primary-key value.
	 */
	public SgfensVendedorDatos findByPrimaryKey(SgfensVendedorDatosPk pk) throws SgfensVendedorDatosDaoException
	{
		return findByPrimaryKey( pk.getIdUsuario() );
	}

	/** 
	 * Returns all rows from the SGFENS_VENDEDOR_DATOS table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public SgfensVendedorDatos findByPrimaryKey(int idUsuario) throws SgfensVendedorDatosDaoException
	{
		SgfensVendedorDatos ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO = ?", new Object[] {  new Integer(idUsuario) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the SGFENS_VENDEDOR_DATOS table that match the criteria ''.
	 */
	public SgfensVendedorDatos[] findAll() throws SgfensVendedorDatosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_USUARIO", null );
	}

	/** 
	 * Returns all rows from the SGFENS_VENDEDOR_DATOS table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public SgfensVendedorDatos[] findWhereIdUsuarioEquals(int idUsuario) throws SgfensVendedorDatosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO = ? ORDER BY ID_USUARIO", new Object[] {  new Integer(idUsuario) } );
	}

	/** 
	 * Returns all rows from the SGFENS_VENDEDOR_DATOS table that match the criteria 'SUELDO_MENSUAL = :sueldoMensual'.
	 */
	public SgfensVendedorDatos[] findWhereSueldoMensualEquals(double sueldoMensual) throws SgfensVendedorDatosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUELDO_MENSUAL = ? ORDER BY SUELDO_MENSUAL", new Object[] {  new Double(sueldoMensual) } );
	}

	/** 
	 * Returns all rows from the SGFENS_VENDEDOR_DATOS table that match the criteria 'PORCENTAJE_COMISIONES = :porcentajeComisiones'.
	 */
	public SgfensVendedorDatos[] findWherePorcentajeComisionesEquals(double porcentajeComisiones) throws SgfensVendedorDatosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PORCENTAJE_COMISIONES = ? ORDER BY PORCENTAJE_COMISIONES", new Object[] {  new Double(porcentajeComisiones) } );
	}

	/**
	 * Method 'SgfensVendedorDatosDaoImpl'
	 * 
	 */
	public SgfensVendedorDatosDaoImpl()
	{
	}

	/**
	 * Method 'SgfensVendedorDatosDaoImpl'
	 * 
	 * @param userConn
	 */
	public SgfensVendedorDatosDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "SGFENS_VENDEDOR_DATOS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SgfensVendedorDatos fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SgfensVendedorDatos dto = new SgfensVendedorDatos();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SgfensVendedorDatos[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SgfensVendedorDatos dto = new SgfensVendedorDatos();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SgfensVendedorDatos ret[] = new SgfensVendedorDatos[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SgfensVendedorDatos dto, ResultSet rs) throws SQLException
	{
		dto.setIdUsuario( rs.getInt( COLUMN_ID_USUARIO ) );
		dto.setSueldoMensual( rs.getDouble( COLUMN_SUELDO_MENSUAL ) );
		dto.setPorcentajeComisiones( rs.getDouble( COLUMN_PORCENTAJE_COMISIONES ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SgfensVendedorDatos dto)
	{
		dto.setIdUsuarioModified( false );
		dto.setSueldoMensualModified( false );
		dto.setPorcentajeComisionesModified( false );
	}

	/** 
	 * Returns all rows from the SGFENS_VENDEDOR_DATOS table that match the specified arbitrary SQL statement
	 */
	public SgfensVendedorDatos[] findByDynamicSelect(String sql, Object[] sqlParams) throws SgfensVendedorDatosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensVendedorDatosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the SGFENS_VENDEDOR_DATOS table that match the specified arbitrary SQL statement
	 */
	public SgfensVendedorDatos[] findByDynamicWhere(String sql, Object[] sqlParams) throws SgfensVendedorDatosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensVendedorDatosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
