/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ValidacionXmlDaoImpl extends AbstractDAO implements ValidacionXmlDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_VALIDACION, ID_EMPRESA, NOMBRE_ARCHIVO, VERSION_COMPROBANTE, CADENA_ORIGINAL, COMPROBANTE_VALIDO, SELLO_EMISOR_VALIDO, TIMBRE_FISCAL, MENSAJES_ERROR FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_VALIDACION, ID_EMPRESA, NOMBRE_ARCHIVO, VERSION_COMPROBANTE, CADENA_ORIGINAL, COMPROBANTE_VALIDO, SELLO_EMISOR_VALIDO, TIMBRE_FISCAL, MENSAJES_ERROR ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_VALIDACION = ?, ID_EMPRESA = ?, NOMBRE_ARCHIVO = ?, VERSION_COMPROBANTE = ?, CADENA_ORIGINAL = ?, COMPROBANTE_VALIDO = ?, SELLO_EMISOR_VALIDO = ?, TIMBRE_FISCAL = ?, MENSAJES_ERROR = ? WHERE ID_VALIDACION = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_VALIDACION = ?";

	/** 
	 * Index of column ID_VALIDACION
	 */
	protected static final int COLUMN_ID_VALIDACION = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column NOMBRE_ARCHIVO
	 */
	protected static final int COLUMN_NOMBRE_ARCHIVO = 3;

	/** 
	 * Index of column VERSION_COMPROBANTE
	 */
	protected static final int COLUMN_VERSION_COMPROBANTE = 4;

	/** 
	 * Index of column CADENA_ORIGINAL
	 */
	protected static final int COLUMN_CADENA_ORIGINAL = 5;

	/** 
	 * Index of column COMPROBANTE_VALIDO
	 */
	protected static final int COLUMN_COMPROBANTE_VALIDO = 6;

	/** 
	 * Index of column SELLO_EMISOR_VALIDO
	 */
	protected static final int COLUMN_SELLO_EMISOR_VALIDO = 7;

	/** 
	 * Index of column TIMBRE_FISCAL
	 */
	protected static final int COLUMN_TIMBRE_FISCAL = 8;

	/** 
	 * Index of column MENSAJES_ERROR
	 */
	protected static final int COLUMN_MENSAJES_ERROR = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column ID_VALIDACION
	 */
	protected static final int PK_COLUMN_ID_VALIDACION = 1;

	/** 
	 * Inserts a new row in the validacion_xml table.
	 */
	public ValidacionXmlPk insert(ValidacionXml dto) throws ValidacionXmlDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdValidacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_VALIDACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreArchivoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_ARCHIVO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isVersionComprobanteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "VERSION_COMPROBANTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCadenaOriginalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CADENA_ORIGINAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isComprobanteValidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "COMPROBANTE_VALIDO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSelloEmisorValidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SELLO_EMISOR_VALIDO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTimbreFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIMBRE_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajesErrorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MENSAJES_ERROR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdValidacionModified()) {
				stmt.setInt( index++, dto.getIdValidacion() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isNombreArchivoModified()) {
				stmt.setString( index++, dto.getNombreArchivo() );
			}
		
			if (dto.isVersionComprobanteModified()) {
				stmt.setString( index++, dto.getVersionComprobante() );
			}
		
			if (dto.isCadenaOriginalModified()) {
				stmt.setString( index++, dto.getCadenaOriginal() );
			}
		
			if (dto.isComprobanteValidoModified()) {
				if (dto.isComprobanteValidoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getComprobanteValido() );
				}
		
			}
		
			if (dto.isSelloEmisorValidoModified()) {
				if (dto.isSelloEmisorValidoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getSelloEmisorValido() );
				}
		
			}
		
			if (dto.isTimbreFiscalModified()) {
				stmt.setString( index++, dto.getTimbreFiscal() );
			}
		
			if (dto.isMensajesErrorModified()) {
				stmt.setString( index++, dto.getMensajesError() );
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdValidacion( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new ValidacionXmlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the validacion_xml table.
	 */
	public void update(ValidacionXmlPk pk, ValidacionXml dto) throws ValidacionXmlDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdValidacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_VALIDACION=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isNombreArchivoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_ARCHIVO=?" );
				modified=true;
			}
		
			if (dto.isVersionComprobanteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "VERSION_COMPROBANTE=?" );
				modified=true;
			}
		
			if (dto.isCadenaOriginalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CADENA_ORIGINAL=?" );
				modified=true;
			}
		
			if (dto.isComprobanteValidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "COMPROBANTE_VALIDO=?" );
				modified=true;
			}
		
			if (dto.isSelloEmisorValidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SELLO_EMISOR_VALIDO=?" );
				modified=true;
			}
		
			if (dto.isTimbreFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIMBRE_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isMensajesErrorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MENSAJES_ERROR=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_VALIDACION=?" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdValidacionModified()) {
				stmt.setInt( index++, dto.getIdValidacion() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isNombreArchivoModified()) {
				stmt.setString( index++, dto.getNombreArchivo() );
			}
		
			if (dto.isVersionComprobanteModified()) {
				stmt.setString( index++, dto.getVersionComprobante() );
			}
		
			if (dto.isCadenaOriginalModified()) {
				stmt.setString( index++, dto.getCadenaOriginal() );
			}
		
			if (dto.isComprobanteValidoModified()) {
				if (dto.isComprobanteValidoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getComprobanteValido() );
				}
		
			}
		
			if (dto.isSelloEmisorValidoModified()) {
				if (dto.isSelloEmisorValidoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getSelloEmisorValido() );
				}
		
			}
		
			if (dto.isTimbreFiscalModified()) {
				stmt.setString( index++, dto.getTimbreFiscal() );
			}
		
			if (dto.isMensajesErrorModified()) {
				stmt.setString( index++, dto.getMensajesError() );
			}
		
			stmt.setInt( index++, pk.getIdValidacion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ValidacionXmlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the validacion_xml table.
	 */
	public void delete(ValidacionXmlPk pk) throws ValidacionXmlDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdValidacion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ValidacionXmlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the validacion_xml table that matches the specified primary-key value.
	 */
	public ValidacionXml findByPrimaryKey(ValidacionXmlPk pk) throws ValidacionXmlDaoException
	{
		return findByPrimaryKey( pk.getIdValidacion() );
	}

	/** 
	 * Returns all rows from the validacion_xml table that match the criteria 'ID_VALIDACION = :idValidacion'.
	 */
	public ValidacionXml findByPrimaryKey(int idValidacion) throws ValidacionXmlDaoException
	{
		ValidacionXml ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_VALIDACION = ?", new Object[] {  new Integer(idValidacion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the validacion_xml table that match the criteria ''.
	 */
	public ValidacionXml[] findAll() throws ValidacionXmlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_VALIDACION", null );
	}

	/** 
	 * Returns all rows from the validacion_xml table that match the criteria 'ID_VALIDACION = :idValidacion'.
	 */
	public ValidacionXml[] findWhereIdValidacionEquals(int idValidacion) throws ValidacionXmlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_VALIDACION = ? ORDER BY ID_VALIDACION", new Object[] {  new Integer(idValidacion) } );
	}

	/** 
	 * Returns all rows from the validacion_xml table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public ValidacionXml[] findWhereIdEmpresaEquals(int idEmpresa) throws ValidacionXmlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the validacion_xml table that match the criteria 'NOMBRE_ARCHIVO = :nombreArchivo'.
	 */
	public ValidacionXml[] findWhereNombreArchivoEquals(String nombreArchivo) throws ValidacionXmlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_ARCHIVO = ? ORDER BY NOMBRE_ARCHIVO", new Object[] { nombreArchivo } );
	}

	/** 
	 * Returns all rows from the validacion_xml table that match the criteria 'VERSION_COMPROBANTE = :versionComprobante'.
	 */
	public ValidacionXml[] findWhereVersionComprobanteEquals(String versionComprobante) throws ValidacionXmlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VERSION_COMPROBANTE = ? ORDER BY VERSION_COMPROBANTE", new Object[] { versionComprobante } );
	}

	/** 
	 * Returns all rows from the validacion_xml table that match the criteria 'CADENA_ORIGINAL = :cadenaOriginal'.
	 */
	public ValidacionXml[] findWhereCadenaOriginalEquals(String cadenaOriginal) throws ValidacionXmlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CADENA_ORIGINAL = ? ORDER BY CADENA_ORIGINAL", new Object[] { cadenaOriginal } );
	}

	/** 
	 * Returns all rows from the validacion_xml table that match the criteria 'COMPROBANTE_VALIDO = :comprobanteValido'.
	 */
	public ValidacionXml[] findWhereComprobanteValidoEquals(int comprobanteValido) throws ValidacionXmlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMPROBANTE_VALIDO = ? ORDER BY COMPROBANTE_VALIDO", new Object[] {  new Integer(comprobanteValido) } );
	}

	/** 
	 * Returns all rows from the validacion_xml table that match the criteria 'SELLO_EMISOR_VALIDO = :selloEmisorValido'.
	 */
	public ValidacionXml[] findWhereSelloEmisorValidoEquals(int selloEmisorValido) throws ValidacionXmlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SELLO_EMISOR_VALIDO = ? ORDER BY SELLO_EMISOR_VALIDO", new Object[] {  new Integer(selloEmisorValido) } );
	}

	/** 
	 * Returns all rows from the validacion_xml table that match the criteria 'TIMBRE_FISCAL = :timbreFiscal'.
	 */
	public ValidacionXml[] findWhereTimbreFiscalEquals(String timbreFiscal) throws ValidacionXmlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIMBRE_FISCAL = ? ORDER BY TIMBRE_FISCAL", new Object[] { timbreFiscal } );
	}

	/** 
	 * Returns all rows from the validacion_xml table that match the criteria 'MENSAJES_ERROR = :mensajesError'.
	 */
	public ValidacionXml[] findWhereMensajesErrorEquals(String mensajesError) throws ValidacionXmlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MENSAJES_ERROR = ? ORDER BY MENSAJES_ERROR", new Object[] { mensajesError } );
	}

	/**
	 * Method 'ValidacionXmlDaoImpl'
	 * 
	 */
	public ValidacionXmlDaoImpl()
	{
	}

	/**
	 * Method 'ValidacionXmlDaoImpl'
	 * 
	 * @param userConn
	 */
	public ValidacionXmlDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "validacion_xml";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ValidacionXml fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ValidacionXml dto = new ValidacionXml();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ValidacionXml[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ValidacionXml dto = new ValidacionXml();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ValidacionXml ret[] = new ValidacionXml[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ValidacionXml dto, ResultSet rs) throws SQLException
	{
		dto.setIdValidacion( rs.getInt( COLUMN_ID_VALIDACION ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setNombreArchivo( rs.getString( COLUMN_NOMBRE_ARCHIVO ) );
		dto.setVersionComprobante( rs.getString( COLUMN_VERSION_COMPROBANTE ) );
		dto.setCadenaOriginal( rs.getString( COLUMN_CADENA_ORIGINAL ) );
		dto.setComprobanteValido( rs.getInt( COLUMN_COMPROBANTE_VALIDO ) );
		if (rs.wasNull()) {
			dto.setComprobanteValidoNull( true );
		}
		
		dto.setSelloEmisorValido( rs.getInt( COLUMN_SELLO_EMISOR_VALIDO ) );
		if (rs.wasNull()) {
			dto.setSelloEmisorValidoNull( true );
		}
		
		dto.setTimbreFiscal( rs.getString( COLUMN_TIMBRE_FISCAL ) );
		dto.setMensajesError( rs.getString( COLUMN_MENSAJES_ERROR ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ValidacionXml dto)
	{
		dto.setIdValidacionModified( false );
		dto.setIdEmpresaModified( false );
		dto.setNombreArchivoModified( false );
		dto.setVersionComprobanteModified( false );
		dto.setCadenaOriginalModified( false );
		dto.setComprobanteValidoModified( false );
		dto.setSelloEmisorValidoModified( false );
		dto.setTimbreFiscalModified( false );
		dto.setMensajesErrorModified( false );
	}

	/** 
	 * Returns all rows from the validacion_xml table that match the specified arbitrary SQL statement
	 */
	public ValidacionXml[] findByDynamicSelect(String sql, Object[] sqlParams) throws ValidacionXmlDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ValidacionXmlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the validacion_xml table that match the specified arbitrary SQL statement
	 */
	public ValidacionXml[] findByDynamicWhere(String sql, Object[] sqlParams) throws ValidacionXmlDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ValidacionXmlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
