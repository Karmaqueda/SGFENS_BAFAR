/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EmpresaPermisoAplicacionDaoImpl extends AbstractDAO implements EmpresaPermisoAplicacionDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_EMPRESA, ACCESO_SGFENS_PRETORIANO, ID_TPV_TIPO_SERVICIO, ID_PRETO_CARACTERISTICA_PRODUCTO_ADQUIRIDO, REVISION_CANTIDAD_PRODUCTO, ACCESO_SGFENS_NOMINA, ACCESO_SGFENS_CBB, ACCESO_SGFENS_FACTURACION, ACCESO_SGFENS_COBROTARJETA, ACCESO_SGFENS_PRETOMOVIL, ACCESO_SGFENS_VALIDACIONXML, ACCESO_SGFENS_NUM_LICENCIAS_MOVILES, ACCESO_CREDITOS_EMERGENCIA, CREDITOS_EMERGENCIA_X_PAGAR, ACCESO_MODULO_SAR, TIPO_CONSUMO_SERVICIO, ID_PRETO_LICENCIA, MAX_NUM_USUARIOS, WS_SINCRONIZACION_ACCESO, WS_SINCRONIZACION_TOKEN, RFC_POR_NIP_CODIGO, MOSTRAR_GUIA, ACCESO_MODULO_SMS, ACCESO_MODULO_COMODATO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_EMPRESA, ACCESO_SGFENS_PRETORIANO, ID_TPV_TIPO_SERVICIO, ID_PRETO_CARACTERISTICA_PRODUCTO_ADQUIRIDO, REVISION_CANTIDAD_PRODUCTO, ACCESO_SGFENS_NOMINA, ACCESO_SGFENS_CBB, ACCESO_SGFENS_FACTURACION, ACCESO_SGFENS_COBROTARJETA, ACCESO_SGFENS_PRETOMOVIL, ACCESO_SGFENS_VALIDACIONXML, ACCESO_SGFENS_NUM_LICENCIAS_MOVILES, ACCESO_CREDITOS_EMERGENCIA, CREDITOS_EMERGENCIA_X_PAGAR, ACCESO_MODULO_SAR, TIPO_CONSUMO_SERVICIO, ID_PRETO_LICENCIA, MAX_NUM_USUARIOS, WS_SINCRONIZACION_ACCESO, WS_SINCRONIZACION_TOKEN, RFC_POR_NIP_CODIGO, MOSTRAR_GUIA, ACCESO_MODULO_SMS, ACCESO_MODULO_COMODATO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_EMPRESA = ?, ACCESO_SGFENS_PRETORIANO = ?, ID_TPV_TIPO_SERVICIO = ?, ID_PRETO_CARACTERISTICA_PRODUCTO_ADQUIRIDO = ?, REVISION_CANTIDAD_PRODUCTO = ?, ACCESO_SGFENS_NOMINA = ?, ACCESO_SGFENS_CBB = ?, ACCESO_SGFENS_FACTURACION = ?, ACCESO_SGFENS_COBROTARJETA = ?, ACCESO_SGFENS_PRETOMOVIL = ?, ACCESO_SGFENS_VALIDACIONXML = ?, ACCESO_SGFENS_NUM_LICENCIAS_MOVILES = ?, ACCESO_CREDITOS_EMERGENCIA = ?, CREDITOS_EMERGENCIA_X_PAGAR = ?, ACCESO_MODULO_SAR = ?, TIPO_CONSUMO_SERVICIO = ?, ID_PRETO_LICENCIA = ?, MAX_NUM_USUARIOS = ?, WS_SINCRONIZACION_ACCESO = ?, WS_SINCRONIZACION_TOKEN = ?, RFC_POR_NIP_CODIGO = ?, MOSTRAR_GUIA = ?, ACCESO_MODULO_SMS = ?, ACCESO_MODULO_COMODATO = ? WHERE ID_EMPRESA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_EMPRESA = ?";

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 1;

	/** 
	 * Index of column ACCESO_SGFENS_PRETORIANO
	 */
	protected static final int COLUMN_ACCESO_SGFENS_PRETORIANO = 2;

	/** 
	 * Index of column ID_TPV_TIPO_SERVICIO
	 */
	protected static final int COLUMN_ID_TPV_TIPO_SERVICIO = 3;

	/** 
	 * Index of column ID_PRETO_CARACTERISTICA_PRODUCTO_ADQUIRIDO
	 */
	protected static final int COLUMN_ID_PRETO_CARACTERISTICA_PRODUCTO_ADQUIRIDO = 4;

	/** 
	 * Index of column REVISION_CANTIDAD_PRODUCTO
	 */
	protected static final int COLUMN_REVISION_CANTIDAD_PRODUCTO = 5;

	/** 
	 * Index of column ACCESO_SGFENS_NOMINA
	 */
	protected static final int COLUMN_ACCESO_SGFENS_NOMINA = 6;

	/** 
	 * Index of column ACCESO_SGFENS_CBB
	 */
	protected static final int COLUMN_ACCESO_SGFENS_CBB = 7;

	/** 
	 * Index of column ACCESO_SGFENS_FACTURACION
	 */
	protected static final int COLUMN_ACCESO_SGFENS_FACTURACION = 8;

	/** 
	 * Index of column ACCESO_SGFENS_COBROTARJETA
	 */
	protected static final int COLUMN_ACCESO_SGFENS_COBROTARJETA = 9;

	/** 
	 * Index of column ACCESO_SGFENS_PRETOMOVIL
	 */
	protected static final int COLUMN_ACCESO_SGFENS_PRETOMOVIL = 10;

	/** 
	 * Index of column ACCESO_SGFENS_VALIDACIONXML
	 */
	protected static final int COLUMN_ACCESO_SGFENS_VALIDACIONXML = 11;

	/** 
	 * Index of column ACCESO_SGFENS_NUM_LICENCIAS_MOVILES
	 */
	protected static final int COLUMN_ACCESO_SGFENS_NUM_LICENCIAS_MOVILES = 12;

	/** 
	 * Index of column ACCESO_CREDITOS_EMERGENCIA
	 */
	protected static final int COLUMN_ACCESO_CREDITOS_EMERGENCIA = 13;

	/** 
	 * Index of column CREDITOS_EMERGENCIA_X_PAGAR
	 */
	protected static final int COLUMN_CREDITOS_EMERGENCIA_X_PAGAR = 14;

	/** 
	 * Index of column ACCESO_MODULO_SAR
	 */
	protected static final int COLUMN_ACCESO_MODULO_SAR = 15;

	/** 
	 * Index of column TIPO_CONSUMO_SERVICIO
	 */
	protected static final int COLUMN_TIPO_CONSUMO_SERVICIO = 16;

	/** 
	 * Index of column ID_PRETO_LICENCIA
	 */
	protected static final int COLUMN_ID_PRETO_LICENCIA = 17;

	/** 
	 * Index of column MAX_NUM_USUARIOS
	 */
	protected static final int COLUMN_MAX_NUM_USUARIOS = 18;

	/** 
	 * Index of column WS_SINCRONIZACION_ACCESO
	 */
	protected static final int COLUMN_WS_SINCRONIZACION_ACCESO = 19;

	/** 
	 * Index of column WS_SINCRONIZACION_TOKEN
	 */
	protected static final int COLUMN_WS_SINCRONIZACION_TOKEN = 20;

	/** 
	 * Index of column RFC_POR_NIP_CODIGO
	 */
	protected static final int COLUMN_RFC_POR_NIP_CODIGO = 21;

	/** 
	 * Index of column MOSTRAR_GUIA
	 */
	protected static final int COLUMN_MOSTRAR_GUIA = 22;

	/** 
	 * Index of column ACCESO_MODULO_SMS
	 */
	protected static final int COLUMN_ACCESO_MODULO_SMS = 23;

	/** 
	 * Index of column ACCESO_MODULO_COMODATO
	 */
	protected static final int COLUMN_ACCESO_MODULO_COMODATO = 24;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 24;

	/** 
	 * Index of primary-key column ID_EMPRESA
	 */
	protected static final int PK_COLUMN_ID_EMPRESA = 1;

	/** 
	 * Inserts a new row in the empresa_permiso_aplicacion table.
	 */
	public EmpresaPermisoAplicacionPk insert(EmpresaPermisoAplicacion dto) throws EmpresaPermisoAplicacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAccesoSgfensPretorianoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_PRETORIANO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdTpvTipoServicioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_TPV_TIPO_SERVICIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdPretoCaracteristicaProductoAdquiridoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PRETO_CARACTERISTICA_PRODUCTO_ADQUIRIDO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRevisionCantidadProductoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "REVISION_CANTIDAD_PRODUCTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAccesoSgfensNominaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_NOMINA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAccesoSgfensCbbModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_CBB" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAccesoSgfensFacturacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_FACTURACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAccesoSgfensCobrotarjetaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_COBROTARJETA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAccesoSgfensPretomovilModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_PRETOMOVIL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAccesoSgfensValidacionxmlModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_VALIDACIONXML" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAccesoSgfensNumLicenciasMovilesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_NUM_LICENCIAS_MOVILES" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAccesoCreditosEmergenciaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACCESO_CREDITOS_EMERGENCIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCreditosEmergenciaXPagarModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CREDITOS_EMERGENCIA_X_PAGAR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAccesoModuloSarModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACCESO_MODULO_SAR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoConsumoServicioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIPO_CONSUMO_SERVICIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdPretoLicenciaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PRETO_LICENCIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMaxNumUsuariosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MAX_NUM_USUARIOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isWsSincronizacionAccesoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "WS_SINCRONIZACION_ACCESO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isWsSincronizacionTokenModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "WS_SINCRONIZACION_TOKEN" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRfcPorNipCodigoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RFC_POR_NIP_CODIGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMostrarGuiaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MOSTRAR_GUIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAccesoModuloSmsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACCESO_MODULO_SMS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAccesoModuloComodatoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACCESO_MODULO_COMODATO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isAccesoSgfensPretorianoModified()) {
				stmt.setShort( index++, dto.getAccesoSgfensPretoriano() );
			}
		
			if (dto.isIdTpvTipoServicioModified()) {
				if (dto.isIdTpvTipoServicioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdTpvTipoServicio() );
				}
		
			}
		
			if (dto.isIdPretoCaracteristicaProductoAdquiridoModified()) {
				if (dto.isIdPretoCaracteristicaProductoAdquiridoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPretoCaracteristicaProductoAdquirido() );
				}
		
			}
		
			if (dto.isRevisionCantidadProductoModified()) {
				if (dto.isRevisionCantidadProductoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getRevisionCantidadProducto() );
				}
		
			}
		
			if (dto.isAccesoSgfensNominaModified()) {
				if (dto.isAccesoSgfensNominaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensNomina() );
				}
		
			}
		
			if (dto.isAccesoSgfensCbbModified()) {
				if (dto.isAccesoSgfensCbbNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensCbb() );
				}
		
			}
		
			if (dto.isAccesoSgfensFacturacionModified()) {
				if (dto.isAccesoSgfensFacturacionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensFacturacion() );
				}
		
			}
		
			if (dto.isAccesoSgfensCobrotarjetaModified()) {
				if (dto.isAccesoSgfensCobrotarjetaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensCobrotarjeta() );
				}
		
			}
		
			if (dto.isAccesoSgfensPretomovilModified()) {
				if (dto.isAccesoSgfensPretomovilNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensPretomovil() );
				}
		
			}
		
			if (dto.isAccesoSgfensValidacionxmlModified()) {
				if (dto.isAccesoSgfensValidacionxmlNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensValidacionxml() );
				}
		
			}
		
			if (dto.isAccesoSgfensNumLicenciasMovilesModified()) {
				if (dto.isAccesoSgfensNumLicenciasMovilesNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensNumLicenciasMoviles() );
				}
		
			}
		
			if (dto.isAccesoCreditosEmergenciaModified()) {
				if (dto.isAccesoCreditosEmergenciaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoCreditosEmergencia() );
				}
		
			}
		
			if (dto.isCreditosEmergenciaXPagarModified()) {
				if (dto.isCreditosEmergenciaXPagarNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreditosEmergenciaXPagar() );
				}
		
			}
		
			if (dto.isAccesoModuloSarModified()) {
				if (dto.isAccesoModuloSarNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoModuloSar() );
				}
		
			}
		
			if (dto.isTipoConsumoServicioModified()) {
				if (dto.isTipoConsumoServicioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoConsumoServicio() );
				}
		
			}
		
			if (dto.isIdPretoLicenciaModified()) {
				if (dto.isIdPretoLicenciaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPretoLicencia() );
				}
		
			}
		
			if (dto.isMaxNumUsuariosModified()) {
				if (dto.isMaxNumUsuariosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMaxNumUsuarios() );
				}
		
			}
		
			if (dto.isWsSincronizacionAccesoModified()) {
				if (dto.isWsSincronizacionAccesoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getWsSincronizacionAcceso() );
				}
		
			}
		
			if (dto.isWsSincronizacionTokenModified()) {
				stmt.setString( index++, dto.getWsSincronizacionToken() );
			}
		
			if (dto.isRfcPorNipCodigoModified()) {
				if (dto.isRfcPorNipCodigoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getRfcPorNipCodigo() );
				}
		
			}
		
			if (dto.isMostrarGuiaModified()) {
				if (dto.isMostrarGuiaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMostrarGuia() );
				}
		
			}
		
			if (dto.isAccesoModuloSmsModified()) {
				if (dto.isAccesoModuloSmsNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoModuloSms() );
				}
		
			}
		
			if (dto.isAccesoModuloComodatoModified()) {
				if (dto.isAccesoModuloComodatoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoModuloComodato() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaPermisoAplicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the empresa_permiso_aplicacion table.
	 */
	public void update(EmpresaPermisoAplicacionPk pk, EmpresaPermisoAplicacion dto) throws EmpresaPermisoAplicacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isAccesoSgfensPretorianoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_PRETORIANO=?" );
				modified=true;
			}
		
			if (dto.isIdTpvTipoServicioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_TPV_TIPO_SERVICIO=?" );
				modified=true;
			}
		
			if (dto.isIdPretoCaracteristicaProductoAdquiridoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PRETO_CARACTERISTICA_PRODUCTO_ADQUIRIDO=?" );
				modified=true;
			}
		
			if (dto.isRevisionCantidadProductoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "REVISION_CANTIDAD_PRODUCTO=?" );
				modified=true;
			}
		
			if (dto.isAccesoSgfensNominaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_NOMINA=?" );
				modified=true;
			}
		
			if (dto.isAccesoSgfensCbbModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_CBB=?" );
				modified=true;
			}
		
			if (dto.isAccesoSgfensFacturacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_FACTURACION=?" );
				modified=true;
			}
		
			if (dto.isAccesoSgfensCobrotarjetaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_COBROTARJETA=?" );
				modified=true;
			}
		
			if (dto.isAccesoSgfensPretomovilModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_PRETOMOVIL=?" );
				modified=true;
			}
		
			if (dto.isAccesoSgfensValidacionxmlModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_VALIDACIONXML=?" );
				modified=true;
			}
		
			if (dto.isAccesoSgfensNumLicenciasMovilesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACCESO_SGFENS_NUM_LICENCIAS_MOVILES=?" );
				modified=true;
			}
		
			if (dto.isAccesoCreditosEmergenciaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACCESO_CREDITOS_EMERGENCIA=?" );
				modified=true;
			}
		
			if (dto.isCreditosEmergenciaXPagarModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CREDITOS_EMERGENCIA_X_PAGAR=?" );
				modified=true;
			}
		
			if (dto.isAccesoModuloSarModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACCESO_MODULO_SAR=?" );
				modified=true;
			}
		
			if (dto.isTipoConsumoServicioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIPO_CONSUMO_SERVICIO=?" );
				modified=true;
			}
		
			if (dto.isIdPretoLicenciaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PRETO_LICENCIA=?" );
				modified=true;
			}
		
			if (dto.isMaxNumUsuariosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MAX_NUM_USUARIOS=?" );
				modified=true;
			}
		
			if (dto.isWsSincronizacionAccesoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "WS_SINCRONIZACION_ACCESO=?" );
				modified=true;
			}
		
			if (dto.isWsSincronizacionTokenModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "WS_SINCRONIZACION_TOKEN=?" );
				modified=true;
			}
		
			if (dto.isRfcPorNipCodigoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RFC_POR_NIP_CODIGO=?" );
				modified=true;
			}
		
			if (dto.isMostrarGuiaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MOSTRAR_GUIA=?" );
				modified=true;
			}
		
			if (dto.isAccesoModuloSmsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACCESO_MODULO_SMS=?" );
				modified=true;
			}
		
			if (dto.isAccesoModuloComodatoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACCESO_MODULO_COMODATO=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_EMPRESA=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isAccesoSgfensPretorianoModified()) {
				stmt.setShort( index++, dto.getAccesoSgfensPretoriano() );
			}
		
			if (dto.isIdTpvTipoServicioModified()) {
				if (dto.isIdTpvTipoServicioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdTpvTipoServicio() );
				}
		
			}
		
			if (dto.isIdPretoCaracteristicaProductoAdquiridoModified()) {
				if (dto.isIdPretoCaracteristicaProductoAdquiridoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPretoCaracteristicaProductoAdquirido() );
				}
		
			}
		
			if (dto.isRevisionCantidadProductoModified()) {
				if (dto.isRevisionCantidadProductoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getRevisionCantidadProducto() );
				}
		
			}
		
			if (dto.isAccesoSgfensNominaModified()) {
				if (dto.isAccesoSgfensNominaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensNomina() );
				}
		
			}
		
			if (dto.isAccesoSgfensCbbModified()) {
				if (dto.isAccesoSgfensCbbNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensCbb() );
				}
		
			}
		
			if (dto.isAccesoSgfensFacturacionModified()) {
				if (dto.isAccesoSgfensFacturacionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensFacturacion() );
				}
		
			}
		
			if (dto.isAccesoSgfensCobrotarjetaModified()) {
				if (dto.isAccesoSgfensCobrotarjetaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensCobrotarjeta() );
				}
		
			}
		
			if (dto.isAccesoSgfensPretomovilModified()) {
				if (dto.isAccesoSgfensPretomovilNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensPretomovil() );
				}
		
			}
		
			if (dto.isAccesoSgfensValidacionxmlModified()) {
				if (dto.isAccesoSgfensValidacionxmlNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensValidacionxml() );
				}
		
			}
		
			if (dto.isAccesoSgfensNumLicenciasMovilesModified()) {
				if (dto.isAccesoSgfensNumLicenciasMovilesNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoSgfensNumLicenciasMoviles() );
				}
		
			}
		
			if (dto.isAccesoCreditosEmergenciaModified()) {
				if (dto.isAccesoCreditosEmergenciaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoCreditosEmergencia() );
				}
		
			}
		
			if (dto.isCreditosEmergenciaXPagarModified()) {
				if (dto.isCreditosEmergenciaXPagarNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreditosEmergenciaXPagar() );
				}
		
			}
		
			if (dto.isAccesoModuloSarModified()) {
				if (dto.isAccesoModuloSarNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoModuloSar() );
				}
		
			}
		
			if (dto.isTipoConsumoServicioModified()) {
				if (dto.isTipoConsumoServicioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoConsumoServicio() );
				}
		
			}
		
			if (dto.isIdPretoLicenciaModified()) {
				if (dto.isIdPretoLicenciaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPretoLicencia() );
				}
		
			}
		
			if (dto.isMaxNumUsuariosModified()) {
				if (dto.isMaxNumUsuariosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMaxNumUsuarios() );
				}
		
			}
		
			if (dto.isWsSincronizacionAccesoModified()) {
				if (dto.isWsSincronizacionAccesoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getWsSincronizacionAcceso() );
				}
		
			}
		
			if (dto.isWsSincronizacionTokenModified()) {
				stmt.setString( index++, dto.getWsSincronizacionToken() );
			}
		
			if (dto.isRfcPorNipCodigoModified()) {
				if (dto.isRfcPorNipCodigoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getRfcPorNipCodigo() );
				}
		
			}
		
			if (dto.isMostrarGuiaModified()) {
				if (dto.isMostrarGuiaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMostrarGuia() );
				}
		
			}
		
			if (dto.isAccesoModuloSmsModified()) {
				if (dto.isAccesoModuloSmsNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoModuloSms() );
				}
		
			}
		
			if (dto.isAccesoModuloComodatoModified()) {
				if (dto.isAccesoModuloComodatoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAccesoModuloComodato() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdEmpresa() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaPermisoAplicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the empresa_permiso_aplicacion table.
	 */
	public void delete(EmpresaPermisoAplicacionPk pk) throws EmpresaPermisoAplicacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdEmpresa() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaPermisoAplicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the empresa_permiso_aplicacion table that matches the specified primary-key value.
	 */
	public EmpresaPermisoAplicacion findByPrimaryKey(EmpresaPermisoAplicacionPk pk) throws EmpresaPermisoAplicacionDaoException
	{
		return findByPrimaryKey( pk.getIdEmpresa() );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public EmpresaPermisoAplicacion findByPrimaryKey(int idEmpresa) throws EmpresaPermisoAplicacionDaoException
	{
		EmpresaPermisoAplicacion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ?", new Object[] {  new Integer(idEmpresa) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria ''.
	 */
	public EmpresaPermisoAplicacion[] findAll() throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_EMPRESA", null );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public EmpresaPermisoAplicacion[] findWhereIdEmpresaEquals(int idEmpresa) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ACCESO_SGFENS_PRETORIANO = :accesoSgfensPretoriano'.
	 */
	public EmpresaPermisoAplicacion[] findWhereAccesoSgfensPretorianoEquals(short accesoSgfensPretoriano) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCESO_SGFENS_PRETORIANO = ? ORDER BY ACCESO_SGFENS_PRETORIANO", new Object[] {  new Short(accesoSgfensPretoriano) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ID_TPV_TIPO_SERVICIO = :idTpvTipoServicio'.
	 */
	public EmpresaPermisoAplicacion[] findWhereIdTpvTipoServicioEquals(int idTpvTipoServicio) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TPV_TIPO_SERVICIO = ? ORDER BY ID_TPV_TIPO_SERVICIO", new Object[] {  new Integer(idTpvTipoServicio) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ID_PRETO_CARACTERISTICA_PRODUCTO_ADQUIRIDO = :idPretoCaracteristicaProductoAdquirido'.
	 */
	public EmpresaPermisoAplicacion[] findWhereIdPretoCaracteristicaProductoAdquiridoEquals(int idPretoCaracteristicaProductoAdquirido) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PRETO_CARACTERISTICA_PRODUCTO_ADQUIRIDO = ? ORDER BY ID_PRETO_CARACTERISTICA_PRODUCTO_ADQUIRIDO", new Object[] {  new Integer(idPretoCaracteristicaProductoAdquirido) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'REVISION_CANTIDAD_PRODUCTO = :revisionCantidadProducto'.
	 */
	public EmpresaPermisoAplicacion[] findWhereRevisionCantidadProductoEquals(int revisionCantidadProducto) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REVISION_CANTIDAD_PRODUCTO = ? ORDER BY REVISION_CANTIDAD_PRODUCTO", new Object[] {  new Integer(revisionCantidadProducto) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ACCESO_SGFENS_NOMINA = :accesoSgfensNomina'.
	 */
	public EmpresaPermisoAplicacion[] findWhereAccesoSgfensNominaEquals(int accesoSgfensNomina) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCESO_SGFENS_NOMINA = ? ORDER BY ACCESO_SGFENS_NOMINA", new Object[] {  new Integer(accesoSgfensNomina) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ACCESO_SGFENS_CBB = :accesoSgfensCbb'.
	 */
	public EmpresaPermisoAplicacion[] findWhereAccesoSgfensCbbEquals(int accesoSgfensCbb) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCESO_SGFENS_CBB = ? ORDER BY ACCESO_SGFENS_CBB", new Object[] {  new Integer(accesoSgfensCbb) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ACCESO_SGFENS_FACTURACION = :accesoSgfensFacturacion'.
	 */
	public EmpresaPermisoAplicacion[] findWhereAccesoSgfensFacturacionEquals(int accesoSgfensFacturacion) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCESO_SGFENS_FACTURACION = ? ORDER BY ACCESO_SGFENS_FACTURACION", new Object[] {  new Integer(accesoSgfensFacturacion) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ACCESO_SGFENS_COBROTARJETA = :accesoSgfensCobrotarjeta'.
	 */
	public EmpresaPermisoAplicacion[] findWhereAccesoSgfensCobrotarjetaEquals(int accesoSgfensCobrotarjeta) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCESO_SGFENS_COBROTARJETA = ? ORDER BY ACCESO_SGFENS_COBROTARJETA", new Object[] {  new Integer(accesoSgfensCobrotarjeta) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ACCESO_SGFENS_PRETOMOVIL = :accesoSgfensPretomovil'.
	 */
	public EmpresaPermisoAplicacion[] findWhereAccesoSgfensPretomovilEquals(int accesoSgfensPretomovil) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCESO_SGFENS_PRETOMOVIL = ? ORDER BY ACCESO_SGFENS_PRETOMOVIL", new Object[] {  new Integer(accesoSgfensPretomovil) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ACCESO_SGFENS_VALIDACIONXML = :accesoSgfensValidacionxml'.
	 */
	public EmpresaPermisoAplicacion[] findWhereAccesoSgfensValidacionxmlEquals(int accesoSgfensValidacionxml) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCESO_SGFENS_VALIDACIONXML = ? ORDER BY ACCESO_SGFENS_VALIDACIONXML", new Object[] {  new Integer(accesoSgfensValidacionxml) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ACCESO_SGFENS_NUM_LICENCIAS_MOVILES = :accesoSgfensNumLicenciasMoviles'.
	 */
	public EmpresaPermisoAplicacion[] findWhereAccesoSgfensNumLicenciasMovilesEquals(int accesoSgfensNumLicenciasMoviles) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCESO_SGFENS_NUM_LICENCIAS_MOVILES = ? ORDER BY ACCESO_SGFENS_NUM_LICENCIAS_MOVILES", new Object[] {  new Integer(accesoSgfensNumLicenciasMoviles) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ACCESO_CREDITOS_EMERGENCIA = :accesoCreditosEmergencia'.
	 */
	public EmpresaPermisoAplicacion[] findWhereAccesoCreditosEmergenciaEquals(int accesoCreditosEmergencia) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCESO_CREDITOS_EMERGENCIA = ? ORDER BY ACCESO_CREDITOS_EMERGENCIA", new Object[] {  new Integer(accesoCreditosEmergencia) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'CREDITOS_EMERGENCIA_X_PAGAR = :creditosEmergenciaXPagar'.
	 */
	public EmpresaPermisoAplicacion[] findWhereCreditosEmergenciaXPagarEquals(int creditosEmergenciaXPagar) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREDITOS_EMERGENCIA_X_PAGAR = ? ORDER BY CREDITOS_EMERGENCIA_X_PAGAR", new Object[] {  new Integer(creditosEmergenciaXPagar) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ACCESO_MODULO_SAR = :accesoModuloSar'.
	 */
	public EmpresaPermisoAplicacion[] findWhereAccesoModuloSarEquals(int accesoModuloSar) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCESO_MODULO_SAR = ? ORDER BY ACCESO_MODULO_SAR", new Object[] {  new Integer(accesoModuloSar) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'TIPO_CONSUMO_SERVICIO = :tipoConsumoServicio'.
	 */
	public EmpresaPermisoAplicacion[] findWhereTipoConsumoServicioEquals(int tipoConsumoServicio) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_CONSUMO_SERVICIO = ? ORDER BY TIPO_CONSUMO_SERVICIO", new Object[] {  new Integer(tipoConsumoServicio) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ID_PRETO_LICENCIA = :idPretoLicencia'.
	 */
	public EmpresaPermisoAplicacion[] findWhereIdPretoLicenciaEquals(int idPretoLicencia) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PRETO_LICENCIA = ? ORDER BY ID_PRETO_LICENCIA", new Object[] {  new Integer(idPretoLicencia) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'MAX_NUM_USUARIOS = :maxNumUsuarios'.
	 */
	public EmpresaPermisoAplicacion[] findWhereMaxNumUsuariosEquals(int maxNumUsuarios) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MAX_NUM_USUARIOS = ? ORDER BY MAX_NUM_USUARIOS", new Object[] {  new Integer(maxNumUsuarios) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'WS_SINCRONIZACION_ACCESO = :wsSincronizacionAcceso'.
	 */
	public EmpresaPermisoAplicacion[] findWhereWsSincronizacionAccesoEquals(int wsSincronizacionAcceso) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE WS_SINCRONIZACION_ACCESO = ? ORDER BY WS_SINCRONIZACION_ACCESO", new Object[] {  new Integer(wsSincronizacionAcceso) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'WS_SINCRONIZACION_TOKEN = :wsSincronizacionToken'.
	 */
	public EmpresaPermisoAplicacion[] findWhereWsSincronizacionTokenEquals(String wsSincronizacionToken) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE WS_SINCRONIZACION_TOKEN = ? ORDER BY WS_SINCRONIZACION_TOKEN", new Object[] { wsSincronizacionToken } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'RFC_POR_NIP_CODIGO = :rfcPorNipCodigo'.
	 */
	public EmpresaPermisoAplicacion[] findWhereRfcPorNipCodigoEquals(int rfcPorNipCodigo) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC_POR_NIP_CODIGO = ? ORDER BY RFC_POR_NIP_CODIGO", new Object[] {  new Integer(rfcPorNipCodigo) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'MOSTRAR_GUIA = :mostrarGuia'.
	 */
	public EmpresaPermisoAplicacion[] findWhereMostrarGuiaEquals(int mostrarGuia) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOSTRAR_GUIA = ? ORDER BY MOSTRAR_GUIA", new Object[] {  new Integer(mostrarGuia) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ACCESO_MODULO_SMS = :accesoModuloSms'.
	 */
	public EmpresaPermisoAplicacion[] findWhereAccesoModuloSmsEquals(int accesoModuloSms) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCESO_MODULO_SMS = ? ORDER BY ACCESO_MODULO_SMS", new Object[] {  new Integer(accesoModuloSms) } );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the criteria 'ACCESO_MODULO_COMODATO = :accesoModuloComodato'.
	 */
	public EmpresaPermisoAplicacion[] findWhereAccesoModuloComodatoEquals(int accesoModuloComodato) throws EmpresaPermisoAplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCESO_MODULO_COMODATO = ? ORDER BY ACCESO_MODULO_COMODATO", new Object[] {  new Integer(accesoModuloComodato) } );
	}

	/**
	 * Method 'EmpresaPermisoAplicacionDaoImpl'
	 * 
	 */
	public EmpresaPermisoAplicacionDaoImpl()
	{
	}

	/**
	 * Method 'EmpresaPermisoAplicacionDaoImpl'
	 * 
	 * @param userConn
	 */
	public EmpresaPermisoAplicacionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "empresa_permiso_aplicacion";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected EmpresaPermisoAplicacion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			EmpresaPermisoAplicacion dto = new EmpresaPermisoAplicacion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected EmpresaPermisoAplicacion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			EmpresaPermisoAplicacion dto = new EmpresaPermisoAplicacion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		EmpresaPermisoAplicacion ret[] = new EmpresaPermisoAplicacion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(EmpresaPermisoAplicacion dto, ResultSet rs) throws SQLException
	{
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setAccesoSgfensPretoriano( rs.getShort( COLUMN_ACCESO_SGFENS_PRETORIANO ) );
		dto.setIdTpvTipoServicio( rs.getInt( COLUMN_ID_TPV_TIPO_SERVICIO ) );
		if (rs.wasNull()) {
			dto.setIdTpvTipoServicioNull( true );
		}
		
		dto.setIdPretoCaracteristicaProductoAdquirido( rs.getInt( COLUMN_ID_PRETO_CARACTERISTICA_PRODUCTO_ADQUIRIDO ) );
		if (rs.wasNull()) {
			dto.setIdPretoCaracteristicaProductoAdquiridoNull( true );
		}
		
		dto.setRevisionCantidadProducto( rs.getInt( COLUMN_REVISION_CANTIDAD_PRODUCTO ) );
		if (rs.wasNull()) {
			dto.setRevisionCantidadProductoNull( true );
		}
		
		dto.setAccesoSgfensNomina( rs.getInt( COLUMN_ACCESO_SGFENS_NOMINA ) );
		if (rs.wasNull()) {
			dto.setAccesoSgfensNominaNull( true );
		}
		
		dto.setAccesoSgfensCbb( rs.getInt( COLUMN_ACCESO_SGFENS_CBB ) );
		if (rs.wasNull()) {
			dto.setAccesoSgfensCbbNull( true );
		}
		
		dto.setAccesoSgfensFacturacion( rs.getInt( COLUMN_ACCESO_SGFENS_FACTURACION ) );
		if (rs.wasNull()) {
			dto.setAccesoSgfensFacturacionNull( true );
		}
		
		dto.setAccesoSgfensCobrotarjeta( rs.getInt( COLUMN_ACCESO_SGFENS_COBROTARJETA ) );
		if (rs.wasNull()) {
			dto.setAccesoSgfensCobrotarjetaNull( true );
		}
		
		dto.setAccesoSgfensPretomovil( rs.getInt( COLUMN_ACCESO_SGFENS_PRETOMOVIL ) );
		if (rs.wasNull()) {
			dto.setAccesoSgfensPretomovilNull( true );
		}
		
		dto.setAccesoSgfensValidacionxml( rs.getInt( COLUMN_ACCESO_SGFENS_VALIDACIONXML ) );
		if (rs.wasNull()) {
			dto.setAccesoSgfensValidacionxmlNull( true );
		}
		
		dto.setAccesoSgfensNumLicenciasMoviles( rs.getInt( COLUMN_ACCESO_SGFENS_NUM_LICENCIAS_MOVILES ) );
		if (rs.wasNull()) {
			dto.setAccesoSgfensNumLicenciasMovilesNull( true );
		}
		
		dto.setAccesoCreditosEmergencia( rs.getInt( COLUMN_ACCESO_CREDITOS_EMERGENCIA ) );
		if (rs.wasNull()) {
			dto.setAccesoCreditosEmergenciaNull( true );
		}
		
		dto.setCreditosEmergenciaXPagar( rs.getInt( COLUMN_CREDITOS_EMERGENCIA_X_PAGAR ) );
		if (rs.wasNull()) {
			dto.setCreditosEmergenciaXPagarNull( true );
		}
		
		dto.setAccesoModuloSar( rs.getInt( COLUMN_ACCESO_MODULO_SAR ) );
		if (rs.wasNull()) {
			dto.setAccesoModuloSarNull( true );
		}
		
		dto.setTipoConsumoServicio( rs.getInt( COLUMN_TIPO_CONSUMO_SERVICIO ) );
		if (rs.wasNull()) {
			dto.setTipoConsumoServicioNull( true );
		}
		
		dto.setIdPretoLicencia( rs.getInt( COLUMN_ID_PRETO_LICENCIA ) );
		if (rs.wasNull()) {
			dto.setIdPretoLicenciaNull( true );
		}
		
		dto.setMaxNumUsuarios( rs.getInt( COLUMN_MAX_NUM_USUARIOS ) );
		if (rs.wasNull()) {
			dto.setMaxNumUsuariosNull( true );
		}
		
		dto.setWsSincronizacionAcceso( rs.getInt( COLUMN_WS_SINCRONIZACION_ACCESO ) );
		if (rs.wasNull()) {
			dto.setWsSincronizacionAccesoNull( true );
		}
		
		dto.setWsSincronizacionToken( rs.getString( COLUMN_WS_SINCRONIZACION_TOKEN ) );
		dto.setRfcPorNipCodigo( rs.getInt( COLUMN_RFC_POR_NIP_CODIGO ) );
		if (rs.wasNull()) {
			dto.setRfcPorNipCodigoNull( true );
		}
		
		dto.setMostrarGuia( rs.getInt( COLUMN_MOSTRAR_GUIA ) );
		if (rs.wasNull()) {
			dto.setMostrarGuiaNull( true );
		}
		
		dto.setAccesoModuloSms( rs.getInt( COLUMN_ACCESO_MODULO_SMS ) );
		if (rs.wasNull()) {
			dto.setAccesoModuloSmsNull( true );
		}
		
		dto.setAccesoModuloComodato( rs.getInt( COLUMN_ACCESO_MODULO_COMODATO ) );
		if (rs.wasNull()) {
			dto.setAccesoModuloComodatoNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(EmpresaPermisoAplicacion dto)
	{
		dto.setIdEmpresaModified( false );
		dto.setAccesoSgfensPretorianoModified( false );
		dto.setIdTpvTipoServicioModified( false );
		dto.setIdPretoCaracteristicaProductoAdquiridoModified( false );
		dto.setRevisionCantidadProductoModified( false );
		dto.setAccesoSgfensNominaModified( false );
		dto.setAccesoSgfensCbbModified( false );
		dto.setAccesoSgfensFacturacionModified( false );
		dto.setAccesoSgfensCobrotarjetaModified( false );
		dto.setAccesoSgfensPretomovilModified( false );
		dto.setAccesoSgfensValidacionxmlModified( false );
		dto.setAccesoSgfensNumLicenciasMovilesModified( false );
		dto.setAccesoCreditosEmergenciaModified( false );
		dto.setCreditosEmergenciaXPagarModified( false );
		dto.setAccesoModuloSarModified( false );
		dto.setTipoConsumoServicioModified( false );
		dto.setIdPretoLicenciaModified( false );
		dto.setMaxNumUsuariosModified( false );
		dto.setWsSincronizacionAccesoModified( false );
		dto.setWsSincronizacionTokenModified( false );
		dto.setRfcPorNipCodigoModified( false );
		dto.setMostrarGuiaModified( false );
		dto.setAccesoModuloSmsModified( false );
		dto.setAccesoModuloComodatoModified( false );
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the specified arbitrary SQL statement
	 */
	public EmpresaPermisoAplicacion[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmpresaPermisoAplicacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaPermisoAplicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the empresa_permiso_aplicacion table that match the specified arbitrary SQL statement
	 */
	public EmpresaPermisoAplicacion[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmpresaPermisoAplicacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaPermisoAplicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
