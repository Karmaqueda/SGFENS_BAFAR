/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CrFrmEventoSolicitudDaoImpl extends AbstractDAO implements CrFrmEventoSolicitudDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_frm_evento_solicitud, id_formulario_evento, id_producto_credito, fecha_hr_creacion, id_usuario_edicion, id_estado_solicitud, id_usuario_verificador, sap_bp, sap_no_contrato, sap_fecha_apertura, sap_fecha_amortizacion, sap_fecha_fin_credito, sap_inf_plazo_contrato, sap_inf_fecha_corte, sap_inf_fecha_pago, sap_tabla_amortizacion, monto_solicitado, monto_aprobado, fecha_solicitado, fecha_aprobado, plazo_meses, plazo_vencimiento, tipo_vencimiento, sap_orden_pago, cuota_regular, sap_monto_total_pagar FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_frm_evento_solicitud, id_formulario_evento, id_producto_credito, fecha_hr_creacion, id_usuario_edicion, id_estado_solicitud, id_usuario_verificador, sap_bp, sap_no_contrato, sap_fecha_apertura, sap_fecha_amortizacion, sap_fecha_fin_credito, sap_inf_plazo_contrato, sap_inf_fecha_corte, sap_inf_fecha_pago, sap_tabla_amortizacion, monto_solicitado, monto_aprobado, fecha_solicitado, fecha_aprobado, plazo_meses, plazo_vencimiento, tipo_vencimiento, sap_orden_pago, cuota_regular, sap_monto_total_pagar ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_frm_evento_solicitud = ?, id_formulario_evento = ?, id_producto_credito = ?, fecha_hr_creacion = ?, id_usuario_edicion = ?, id_estado_solicitud = ?, id_usuario_verificador = ?, sap_bp = ?, sap_no_contrato = ?, sap_fecha_apertura = ?, sap_fecha_amortizacion = ?, sap_fecha_fin_credito = ?, sap_inf_plazo_contrato = ?, sap_inf_fecha_corte = ?, sap_inf_fecha_pago = ?, sap_tabla_amortizacion = ?, monto_solicitado = ?, monto_aprobado = ?, fecha_solicitado = ?, fecha_aprobado = ?, plazo_meses = ?, plazo_vencimiento = ?, tipo_vencimiento = ?, sap_orden_pago = ?, cuota_regular = ?, sap_monto_total_pagar = ? WHERE id_frm_evento_solicitud = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_frm_evento_solicitud = ?";

	/** 
	 * Index of column id_frm_evento_solicitud
	 */
	protected static final int COLUMN_ID_FRM_EVENTO_SOLICITUD = 1;

	/** 
	 * Index of column id_formulario_evento
	 */
	protected static final int COLUMN_ID_FORMULARIO_EVENTO = 2;

	/** 
	 * Index of column id_producto_credito
	 */
	protected static final int COLUMN_ID_PRODUCTO_CREDITO = 3;

	/** 
	 * Index of column fecha_hr_creacion
	 */
	protected static final int COLUMN_FECHA_HR_CREACION = 4;

	/** 
	 * Index of column id_usuario_edicion
	 */
	protected static final int COLUMN_ID_USUARIO_EDICION = 5;

	/** 
	 * Index of column id_estado_solicitud
	 */
	protected static final int COLUMN_ID_ESTADO_SOLICITUD = 6;

	/** 
	 * Index of column id_usuario_verificador
	 */
	protected static final int COLUMN_ID_USUARIO_VERIFICADOR = 7;

	/** 
	 * Index of column sap_bp
	 */
	protected static final int COLUMN_SAP_BP = 8;

	/** 
	 * Index of column sap_no_contrato
	 */
	protected static final int COLUMN_SAP_NO_CONTRATO = 9;

	/** 
	 * Index of column sap_fecha_apertura
	 */
	protected static final int COLUMN_SAP_FECHA_APERTURA = 10;

	/** 
	 * Index of column sap_fecha_amortizacion
	 */
	protected static final int COLUMN_SAP_FECHA_AMORTIZACION = 11;

	/** 
	 * Index of column sap_fecha_fin_credito
	 */
	protected static final int COLUMN_SAP_FECHA_FIN_CREDITO = 12;

	/** 
	 * Index of column sap_inf_plazo_contrato
	 */
	protected static final int COLUMN_SAP_INF_PLAZO_CONTRATO = 13;

	/** 
	 * Index of column sap_inf_fecha_corte
	 */
	protected static final int COLUMN_SAP_INF_FECHA_CORTE = 14;

	/** 
	 * Index of column sap_inf_fecha_pago
	 */
	protected static final int COLUMN_SAP_INF_FECHA_PAGO = 15;

	/** 
	 * Index of column sap_tabla_amortizacion
	 */
	protected static final int COLUMN_SAP_TABLA_AMORTIZACION = 16;

	/** 
	 * Index of column monto_solicitado
	 */
	protected static final int COLUMN_MONTO_SOLICITADO = 17;

	/** 
	 * Index of column monto_aprobado
	 */
	protected static final int COLUMN_MONTO_APROBADO = 18;

	/** 
	 * Index of column fecha_solicitado
	 */
	protected static final int COLUMN_FECHA_SOLICITADO = 19;

	/** 
	 * Index of column fecha_aprobado
	 */
	protected static final int COLUMN_FECHA_APROBADO = 20;

	/** 
	 * Index of column plazo_meses
	 */
	protected static final int COLUMN_PLAZO_MESES = 21;

	/** 
	 * Index of column plazo_vencimiento
	 */
	protected static final int COLUMN_PLAZO_VENCIMIENTO = 22;

	/** 
	 * Index of column tipo_vencimiento
	 */
	protected static final int COLUMN_TIPO_VENCIMIENTO = 23;

	/** 
	 * Index of column sap_orden_pago
	 */
	protected static final int COLUMN_SAP_ORDEN_PAGO = 24;

	/** 
	 * Index of column cuota_regular
	 */
	protected static final int COLUMN_CUOTA_REGULAR = 25;

	/** 
	 * Index of column sap_monto_total_pagar
	 */
	protected static final int COLUMN_SAP_MONTO_TOTAL_PAGAR = 26;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 26;

	/** 
	 * Index of primary-key column id_frm_evento_solicitud
	 */
	protected static final int PK_COLUMN_ID_FRM_EVENTO_SOLICITUD = 1;

	/** 
	 * Inserts a new row in the cr_frm_evento_solicitud table.
	 */
	public CrFrmEventoSolicitudPk insert(CrFrmEventoSolicitud dto) throws CrFrmEventoSolicitudDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdFrmEventoSolicitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_frm_evento_solicitud" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdFormularioEventoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_formulario_evento" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdProductoCreditoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_producto_credito" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrCreacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_creacion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioEdicionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_usuario_edicion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstadoSolicitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_estado_solicitud" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioVerificadorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_usuario_verificador" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSapBpModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "sap_bp" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSapNoContratoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "sap_no_contrato" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSapFechaAperturaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "sap_fecha_apertura" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSapFechaAmortizacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "sap_fecha_amortizacion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSapFechaFinCreditoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "sap_fecha_fin_credito" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSapInfPlazoContratoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "sap_inf_plazo_contrato" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSapInfFechaCorteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "sap_inf_fecha_corte" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSapInfFechaPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "sap_inf_fecha_pago" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSapTablaAmortizacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "sap_tabla_amortizacion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMontoSolicitadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "monto_solicitado" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMontoAprobadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "monto_aprobado" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaSolicitadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_solicitado" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaAprobadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_aprobado" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPlazoMesesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "plazo_meses" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPlazoVencimientoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "plazo_vencimiento" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoVencimientoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "tipo_vencimiento" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSapOrdenPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "sap_orden_pago" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCuotaRegularModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "cuota_regular" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSapMontoTotalPagarModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "sap_monto_total_pagar" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdFrmEventoSolicitudModified()) {
				stmt.setInt( index++, dto.getIdFrmEventoSolicitud() );
			}
		
			if (dto.isIdFormularioEventoModified()) {
				stmt.setInt( index++, dto.getIdFormularioEvento() );
			}
		
			if (dto.isIdProductoCreditoModified()) {
				stmt.setInt( index++, dto.getIdProductoCredito() );
			}
		
			if (dto.isFechaHrCreacionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaHrCreacion().getTime() ) );
			}
		
			if (dto.isIdUsuarioEdicionModified()) {
				stmt.setInt( index++, dto.getIdUsuarioEdicion() );
			}
		
			if (dto.isIdEstadoSolicitudModified()) {
				stmt.setInt( index++, dto.getIdEstadoSolicitud() );
			}
		
			if (dto.isIdUsuarioVerificadorModified()) {
				if (dto.isIdUsuarioVerificadorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVerificador() );
				}
		
			}
		
			if (dto.isSapBpModified()) {
				stmt.setString( index++, dto.getSapBp() );
			}
		
			if (dto.isSapNoContratoModified()) {
				stmt.setString( index++, dto.getSapNoContrato() );
			}
		
			if (dto.isSapFechaAperturaModified()) {
				stmt.setDate(index++, dto.getSapFechaApertura()==null ? null : new java.sql.Date( dto.getSapFechaApertura().getTime() ) );
			}
		
			if (dto.isSapFechaAmortizacionModified()) {
				stmt.setDate(index++, dto.getSapFechaAmortizacion()==null ? null : new java.sql.Date( dto.getSapFechaAmortizacion().getTime() ) );
			}
		
			if (dto.isSapFechaFinCreditoModified()) {
				stmt.setDate(index++, dto.getSapFechaFinCredito()==null ? null : new java.sql.Date( dto.getSapFechaFinCredito().getTime() ) );
			}
		
			if (dto.isSapInfPlazoContratoModified()) {
				stmt.setString( index++, dto.getSapInfPlazoContrato() );
			}
		
			if (dto.isSapInfFechaCorteModified()) {
				stmt.setString( index++, dto.getSapInfFechaCorte() );
			}
		
			if (dto.isSapInfFechaPagoModified()) {
				stmt.setString( index++, dto.getSapInfFechaPago() );
			}
		
			if (dto.isSapTablaAmortizacionModified()) {
				stmt.setString( index++, dto.getSapTablaAmortizacion() );
			}
		
			if (dto.isMontoSolicitadoModified()) {
				if (dto.isMontoSolicitadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMontoSolicitado() );
				}
		
			}
		
			if (dto.isMontoAprobadoModified()) {
				if (dto.isMontoAprobadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMontoAprobado() );
				}
		
			}
		
			if (dto.isFechaSolicitadoModified()) {
				stmt.setTimestamp(index++, dto.getFechaSolicitado()==null ? null : new java.sql.Timestamp( dto.getFechaSolicitado().getTime() ) );
			}
		
			if (dto.isFechaAprobadoModified()) {
				stmt.setTimestamp(index++, dto.getFechaAprobado()==null ? null : new java.sql.Timestamp( dto.getFechaAprobado().getTime() ) );
			}
		
			if (dto.isPlazoMesesModified()) {
				if (dto.isPlazoMesesNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPlazoMeses() );
				}
		
			}
		
			if (dto.isPlazoVencimientoModified()) {
				if (dto.isPlazoVencimientoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPlazoVencimiento() );
				}
		
			}
		
			if (dto.isTipoVencimientoModified()) {
				stmt.setString( index++, dto.getTipoVencimiento() );
			}
		
			if (dto.isSapOrdenPagoModified()) {
				stmt.setString( index++, dto.getSapOrdenPago() );
			}
		
			if (dto.isCuotaRegularModified()) {
				if (dto.isCuotaRegularNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCuotaRegular() );
				}
		
			}
		
			if (dto.isSapMontoTotalPagarModified()) {
				if (dto.isSapMontoTotalPagarNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSapMontoTotalPagar() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdFrmEventoSolicitud( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFrmEventoSolicitudDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the cr_frm_evento_solicitud table.
	 */
	public void update(CrFrmEventoSolicitudPk pk, CrFrmEventoSolicitud dto) throws CrFrmEventoSolicitudDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdFrmEventoSolicitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_frm_evento_solicitud=?" );
				modified=true;
			}
		
			if (dto.isIdFormularioEventoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_formulario_evento=?" );
				modified=true;
			}
		
			if (dto.isIdProductoCreditoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_producto_credito=?" );
				modified=true;
			}
		
			if (dto.isFechaHrCreacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_creacion=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioEdicionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_usuario_edicion=?" );
				modified=true;
			}
		
			if (dto.isIdEstadoSolicitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_estado_solicitud=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioVerificadorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_usuario_verificador=?" );
				modified=true;
			}
		
			if (dto.isSapBpModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "sap_bp=?" );
				modified=true;
			}
		
			if (dto.isSapNoContratoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "sap_no_contrato=?" );
				modified=true;
			}
		
			if (dto.isSapFechaAperturaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "sap_fecha_apertura=?" );
				modified=true;
			}
		
			if (dto.isSapFechaAmortizacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "sap_fecha_amortizacion=?" );
				modified=true;
			}
		
			if (dto.isSapFechaFinCreditoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "sap_fecha_fin_credito=?" );
				modified=true;
			}
		
			if (dto.isSapInfPlazoContratoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "sap_inf_plazo_contrato=?" );
				modified=true;
			}
		
			if (dto.isSapInfFechaCorteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "sap_inf_fecha_corte=?" );
				modified=true;
			}
		
			if (dto.isSapInfFechaPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "sap_inf_fecha_pago=?" );
				modified=true;
			}
		
			if (dto.isSapTablaAmortizacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "sap_tabla_amortizacion=?" );
				modified=true;
			}
		
			if (dto.isMontoSolicitadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "monto_solicitado=?" );
				modified=true;
			}
		
			if (dto.isMontoAprobadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "monto_aprobado=?" );
				modified=true;
			}
		
			if (dto.isFechaSolicitadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_solicitado=?" );
				modified=true;
			}
		
			if (dto.isFechaAprobadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_aprobado=?" );
				modified=true;
			}
		
			if (dto.isPlazoMesesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "plazo_meses=?" );
				modified=true;
			}
		
			if (dto.isPlazoVencimientoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "plazo_vencimiento=?" );
				modified=true;
			}
		
			if (dto.isTipoVencimientoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "tipo_vencimiento=?" );
				modified=true;
			}
		
			if (dto.isSapOrdenPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "sap_orden_pago=?" );
				modified=true;
			}
		
			if (dto.isCuotaRegularModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "cuota_regular=?" );
				modified=true;
			}
		
			if (dto.isSapMontoTotalPagarModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "sap_monto_total_pagar=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_frm_evento_solicitud=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdFrmEventoSolicitudModified()) {
				stmt.setInt( index++, dto.getIdFrmEventoSolicitud() );
			}
		
			if (dto.isIdFormularioEventoModified()) {
				stmt.setInt( index++, dto.getIdFormularioEvento() );
			}
		
			if (dto.isIdProductoCreditoModified()) {
				stmt.setInt( index++, dto.getIdProductoCredito() );
			}
		
			if (dto.isFechaHrCreacionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaHrCreacion().getTime() ) );
			}
		
			if (dto.isIdUsuarioEdicionModified()) {
				stmt.setInt( index++, dto.getIdUsuarioEdicion() );
			}
		
			if (dto.isIdEstadoSolicitudModified()) {
				stmt.setInt( index++, dto.getIdEstadoSolicitud() );
			}
		
			if (dto.isIdUsuarioVerificadorModified()) {
				if (dto.isIdUsuarioVerificadorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVerificador() );
				}
		
			}
		
			if (dto.isSapBpModified()) {
				stmt.setString( index++, dto.getSapBp() );
			}
		
			if (dto.isSapNoContratoModified()) {
				stmt.setString( index++, dto.getSapNoContrato() );
			}
		
			if (dto.isSapFechaAperturaModified()) {
				stmt.setDate(index++, dto.getSapFechaApertura()==null ? null : new java.sql.Date( dto.getSapFechaApertura().getTime() ) );
			}
		
			if (dto.isSapFechaAmortizacionModified()) {
				stmt.setDate(index++, dto.getSapFechaAmortizacion()==null ? null : new java.sql.Date( dto.getSapFechaAmortizacion().getTime() ) );
			}
		
			if (dto.isSapFechaFinCreditoModified()) {
				stmt.setDate(index++, dto.getSapFechaFinCredito()==null ? null : new java.sql.Date( dto.getSapFechaFinCredito().getTime() ) );
			}
		
			if (dto.isSapInfPlazoContratoModified()) {
				stmt.setString( index++, dto.getSapInfPlazoContrato() );
			}
		
			if (dto.isSapInfFechaCorteModified()) {
				stmt.setString( index++, dto.getSapInfFechaCorte() );
			}
		
			if (dto.isSapInfFechaPagoModified()) {
				stmt.setString( index++, dto.getSapInfFechaPago() );
			}
		
			if (dto.isSapTablaAmortizacionModified()) {
				stmt.setString( index++, dto.getSapTablaAmortizacion() );
			}
		
			if (dto.isMontoSolicitadoModified()) {
				if (dto.isMontoSolicitadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMontoSolicitado() );
				}
		
			}
		
			if (dto.isMontoAprobadoModified()) {
				if (dto.isMontoAprobadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMontoAprobado() );
				}
		
			}
		
			if (dto.isFechaSolicitadoModified()) {
				stmt.setTimestamp(index++, dto.getFechaSolicitado()==null ? null : new java.sql.Timestamp( dto.getFechaSolicitado().getTime() ) );
			}
		
			if (dto.isFechaAprobadoModified()) {
				stmt.setTimestamp(index++, dto.getFechaAprobado()==null ? null : new java.sql.Timestamp( dto.getFechaAprobado().getTime() ) );
			}
		
			if (dto.isPlazoMesesModified()) {
				if (dto.isPlazoMesesNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPlazoMeses() );
				}
		
			}
		
			if (dto.isPlazoVencimientoModified()) {
				if (dto.isPlazoVencimientoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPlazoVencimiento() );
				}
		
			}
		
			if (dto.isTipoVencimientoModified()) {
				stmt.setString( index++, dto.getTipoVencimiento() );
			}
		
			if (dto.isSapOrdenPagoModified()) {
				stmt.setString( index++, dto.getSapOrdenPago() );
			}
		
			if (dto.isCuotaRegularModified()) {
				if (dto.isCuotaRegularNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCuotaRegular() );
				}
		
			}
		
			if (dto.isSapMontoTotalPagarModified()) {
				if (dto.isSapMontoTotalPagarNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSapMontoTotalPagar() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdFrmEventoSolicitud() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFrmEventoSolicitudDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the cr_frm_evento_solicitud table.
	 */
	public void delete(CrFrmEventoSolicitudPk pk) throws CrFrmEventoSolicitudDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdFrmEventoSolicitud() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFrmEventoSolicitudDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the cr_frm_evento_solicitud table that matches the specified primary-key value.
	 */
	public CrFrmEventoSolicitud findByPrimaryKey(CrFrmEventoSolicitudPk pk) throws CrFrmEventoSolicitudDaoException
	{
		return findByPrimaryKey( pk.getIdFrmEventoSolicitud() );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'id_frm_evento_solicitud = :idFrmEventoSolicitud'.
	 */
	public CrFrmEventoSolicitud findByPrimaryKey(int idFrmEventoSolicitud) throws CrFrmEventoSolicitudDaoException
	{
		CrFrmEventoSolicitud ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_frm_evento_solicitud = ?", new Object[] {  new Integer(idFrmEventoSolicitud) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria ''.
	 */
	public CrFrmEventoSolicitud[] findAll() throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_frm_evento_solicitud", null );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'id_frm_evento_solicitud = :idFrmEventoSolicitud'.
	 */
	public CrFrmEventoSolicitud[] findWhereIdFrmEventoSolicitudEquals(int idFrmEventoSolicitud) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_frm_evento_solicitud = ? ORDER BY id_frm_evento_solicitud", new Object[] {  new Integer(idFrmEventoSolicitud) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'id_formulario_evento = :idFormularioEvento'.
	 */
	public CrFrmEventoSolicitud[] findWhereIdFormularioEventoEquals(int idFormularioEvento) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_formulario_evento = ? ORDER BY id_formulario_evento", new Object[] {  new Integer(idFormularioEvento) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'id_producto_credito = :idProductoCredito'.
	 */
	public CrFrmEventoSolicitud[] findWhereIdProductoCreditoEquals(int idProductoCredito) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_producto_credito = ? ORDER BY id_producto_credito", new Object[] {  new Integer(idProductoCredito) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'fecha_hr_creacion = :fechaHrCreacion'.
	 */
	public CrFrmEventoSolicitud[] findWhereFechaHrCreacionEquals(Date fechaHrCreacion) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_creacion = ? ORDER BY fecha_hr_creacion", new Object[] { fechaHrCreacion==null ? null : new java.sql.Timestamp( fechaHrCreacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'id_usuario_edicion = :idUsuarioEdicion'.
	 */
	public CrFrmEventoSolicitud[] findWhereIdUsuarioEdicionEquals(int idUsuarioEdicion) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_usuario_edicion = ? ORDER BY id_usuario_edicion", new Object[] {  new Integer(idUsuarioEdicion) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'id_estado_solicitud = :idEstadoSolicitud'.
	 */
	public CrFrmEventoSolicitud[] findWhereIdEstadoSolicitudEquals(int idEstadoSolicitud) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_estado_solicitud = ? ORDER BY id_estado_solicitud", new Object[] {  new Integer(idEstadoSolicitud) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'id_usuario_verificador = :idUsuarioVerificador'.
	 */
	public CrFrmEventoSolicitud[] findWhereIdUsuarioVerificadorEquals(int idUsuarioVerificador) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_usuario_verificador = ? ORDER BY id_usuario_verificador", new Object[] {  new Integer(idUsuarioVerificador) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'sap_bp = :sapBp'.
	 */
	public CrFrmEventoSolicitud[] findWhereSapBpEquals(String sapBp) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sap_bp = ? ORDER BY sap_bp", new Object[] { sapBp } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'sap_no_contrato = :sapNoContrato'.
	 */
	public CrFrmEventoSolicitud[] findWhereSapNoContratoEquals(String sapNoContrato) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sap_no_contrato = ? ORDER BY sap_no_contrato", new Object[] { sapNoContrato } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'sap_fecha_apertura = :sapFechaApertura'.
	 */
	public CrFrmEventoSolicitud[] findWhereSapFechaAperturaEquals(Date sapFechaApertura) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sap_fecha_apertura = ? ORDER BY sap_fecha_apertura", new Object[] { sapFechaApertura==null ? null : new java.sql.Date( sapFechaApertura.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'sap_fecha_amortizacion = :sapFechaAmortizacion'.
	 */
	public CrFrmEventoSolicitud[] findWhereSapFechaAmortizacionEquals(Date sapFechaAmortizacion) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sap_fecha_amortizacion = ? ORDER BY sap_fecha_amortizacion", new Object[] { sapFechaAmortizacion==null ? null : new java.sql.Date( sapFechaAmortizacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'sap_fecha_fin_credito = :sapFechaFinCredito'.
	 */
	public CrFrmEventoSolicitud[] findWhereSapFechaFinCreditoEquals(Date sapFechaFinCredito) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sap_fecha_fin_credito = ? ORDER BY sap_fecha_fin_credito", new Object[] { sapFechaFinCredito==null ? null : new java.sql.Date( sapFechaFinCredito.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'sap_inf_plazo_contrato = :sapInfPlazoContrato'.
	 */
	public CrFrmEventoSolicitud[] findWhereSapInfPlazoContratoEquals(String sapInfPlazoContrato) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sap_inf_plazo_contrato = ? ORDER BY sap_inf_plazo_contrato", new Object[] { sapInfPlazoContrato } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'sap_inf_fecha_corte = :sapInfFechaCorte'.
	 */
	public CrFrmEventoSolicitud[] findWhereSapInfFechaCorteEquals(String sapInfFechaCorte) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sap_inf_fecha_corte = ? ORDER BY sap_inf_fecha_corte", new Object[] { sapInfFechaCorte } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'sap_inf_fecha_pago = :sapInfFechaPago'.
	 */
	public CrFrmEventoSolicitud[] findWhereSapInfFechaPagoEquals(String sapInfFechaPago) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sap_inf_fecha_pago = ? ORDER BY sap_inf_fecha_pago", new Object[] { sapInfFechaPago } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'sap_tabla_amortizacion = :sapTablaAmortizacion'.
	 */
	public CrFrmEventoSolicitud[] findWhereSapTablaAmortizacionEquals(String sapTablaAmortizacion) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sap_tabla_amortizacion = ? ORDER BY sap_tabla_amortizacion", new Object[] { sapTablaAmortizacion } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'monto_solicitado = :montoSolicitado'.
	 */
	public CrFrmEventoSolicitud[] findWhereMontoSolicitadoEquals(double montoSolicitado) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE monto_solicitado = ? ORDER BY monto_solicitado", new Object[] {  new Double(montoSolicitado) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'monto_aprobado = :montoAprobado'.
	 */
	public CrFrmEventoSolicitud[] findWhereMontoAprobadoEquals(double montoAprobado) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE monto_aprobado = ? ORDER BY monto_aprobado", new Object[] {  new Double(montoAprobado) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'fecha_solicitado = :fechaSolicitado'.
	 */
	public CrFrmEventoSolicitud[] findWhereFechaSolicitadoEquals(Date fechaSolicitado) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_solicitado = ? ORDER BY fecha_solicitado", new Object[] { fechaSolicitado==null ? null : new java.sql.Timestamp( fechaSolicitado.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'fecha_aprobado = :fechaAprobado'.
	 */
	public CrFrmEventoSolicitud[] findWhereFechaAprobadoEquals(Date fechaAprobado) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_aprobado = ? ORDER BY fecha_aprobado", new Object[] { fechaAprobado==null ? null : new java.sql.Timestamp( fechaAprobado.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'plazo_meses = :plazoMeses'.
	 */
	public CrFrmEventoSolicitud[] findWherePlazoMesesEquals(int plazoMeses) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE plazo_meses = ? ORDER BY plazo_meses", new Object[] {  new Integer(plazoMeses) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'plazo_vencimiento = :plazoVencimiento'.
	 */
	public CrFrmEventoSolicitud[] findWherePlazoVencimientoEquals(int plazoVencimiento) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE plazo_vencimiento = ? ORDER BY plazo_vencimiento", new Object[] {  new Integer(plazoVencimiento) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'tipo_vencimiento = :tipoVencimiento'.
	 */
	public CrFrmEventoSolicitud[] findWhereTipoVencimientoEquals(String tipoVencimiento) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipo_vencimiento = ? ORDER BY tipo_vencimiento", new Object[] { tipoVencimiento } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'sap_orden_pago = :sapOrdenPago'.
	 */
	public CrFrmEventoSolicitud[] findWhereSapOrdenPagoEquals(String sapOrdenPago) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sap_orden_pago = ? ORDER BY sap_orden_pago", new Object[] { sapOrdenPago } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'cuota_regular = :cuotaRegular'.
	 */
	public CrFrmEventoSolicitud[] findWhereCuotaRegularEquals(double cuotaRegular) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cuota_regular = ? ORDER BY cuota_regular", new Object[] {  new Double(cuotaRegular) } );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the criteria 'sap_monto_total_pagar = :sapMontoTotalPagar'.
	 */
	public CrFrmEventoSolicitud[] findWhereSapMontoTotalPagarEquals(double sapMontoTotalPagar) throws CrFrmEventoSolicitudDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sap_monto_total_pagar = ? ORDER BY sap_monto_total_pagar", new Object[] {  new Double(sapMontoTotalPagar) } );
	}

	/**
	 * Method 'CrFrmEventoSolicitudDaoImpl'
	 * 
	 */
	public CrFrmEventoSolicitudDaoImpl()
	{
	}

	/**
	 * Method 'CrFrmEventoSolicitudDaoImpl'
	 * 
	 * @param userConn
	 */
	public CrFrmEventoSolicitudDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "cr_frm_evento_solicitud";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CrFrmEventoSolicitud fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CrFrmEventoSolicitud dto = new CrFrmEventoSolicitud();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CrFrmEventoSolicitud[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CrFrmEventoSolicitud dto = new CrFrmEventoSolicitud();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CrFrmEventoSolicitud ret[] = new CrFrmEventoSolicitud[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CrFrmEventoSolicitud dto, ResultSet rs) throws SQLException
	{
		dto.setIdFrmEventoSolicitud( rs.getInt( COLUMN_ID_FRM_EVENTO_SOLICITUD ) );
		dto.setIdFormularioEvento( rs.getInt( COLUMN_ID_FORMULARIO_EVENTO ) );
		dto.setIdProductoCredito( rs.getInt( COLUMN_ID_PRODUCTO_CREDITO ) );
		dto.setFechaHrCreacion( rs.getTimestamp(COLUMN_FECHA_HR_CREACION ) );
		dto.setIdUsuarioEdicion( rs.getInt( COLUMN_ID_USUARIO_EDICION ) );
		dto.setIdEstadoSolicitud( rs.getInt( COLUMN_ID_ESTADO_SOLICITUD ) );
		dto.setIdUsuarioVerificador( rs.getInt( COLUMN_ID_USUARIO_VERIFICADOR ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioVerificadorNull( true );
		}
		
		dto.setSapBp( rs.getString( COLUMN_SAP_BP ) );
		dto.setSapNoContrato( rs.getString( COLUMN_SAP_NO_CONTRATO ) );
		dto.setSapFechaApertura( rs.getDate(COLUMN_SAP_FECHA_APERTURA ) );
		dto.setSapFechaAmortizacion( rs.getDate(COLUMN_SAP_FECHA_AMORTIZACION ) );
		dto.setSapFechaFinCredito( rs.getDate(COLUMN_SAP_FECHA_FIN_CREDITO ) );
		dto.setSapInfPlazoContrato( rs.getString( COLUMN_SAP_INF_PLAZO_CONTRATO ) );
		dto.setSapInfFechaCorte( rs.getString( COLUMN_SAP_INF_FECHA_CORTE ) );
		dto.setSapInfFechaPago( rs.getString( COLUMN_SAP_INF_FECHA_PAGO ) );
		dto.setSapTablaAmortizacion( rs.getString( COLUMN_SAP_TABLA_AMORTIZACION ) );
		dto.setMontoSolicitado( rs.getDouble( COLUMN_MONTO_SOLICITADO ) );
		if (rs.wasNull()) {
			dto.setMontoSolicitadoNull( true );
		}
		
		dto.setMontoAprobado( rs.getDouble( COLUMN_MONTO_APROBADO ) );
		if (rs.wasNull()) {
			dto.setMontoAprobadoNull( true );
		}
		
		dto.setFechaSolicitado( rs.getTimestamp(COLUMN_FECHA_SOLICITADO ) );
		dto.setFechaAprobado( rs.getTimestamp(COLUMN_FECHA_APROBADO ) );
		dto.setPlazoMeses( rs.getInt( COLUMN_PLAZO_MESES ) );
		if (rs.wasNull()) {
			dto.setPlazoMesesNull( true );
		}
		
		dto.setPlazoVencimiento( rs.getInt( COLUMN_PLAZO_VENCIMIENTO ) );
		if (rs.wasNull()) {
			dto.setPlazoVencimientoNull( true );
		}
		
		dto.setTipoVencimiento( rs.getString( COLUMN_TIPO_VENCIMIENTO ) );
		dto.setSapOrdenPago( rs.getString( COLUMN_SAP_ORDEN_PAGO ) );
		dto.setCuotaRegular( rs.getDouble( COLUMN_CUOTA_REGULAR ) );
		if (rs.wasNull()) {
			dto.setCuotaRegularNull( true );
		}
		
		dto.setSapMontoTotalPagar( rs.getDouble( COLUMN_SAP_MONTO_TOTAL_PAGAR ) );
		if (rs.wasNull()) {
			dto.setSapMontoTotalPagarNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CrFrmEventoSolicitud dto)
	{
		dto.setIdFrmEventoSolicitudModified( false );
		dto.setIdFormularioEventoModified( false );
		dto.setIdProductoCreditoModified( false );
		dto.setFechaHrCreacionModified( false );
		dto.setIdUsuarioEdicionModified( false );
		dto.setIdEstadoSolicitudModified( false );
		dto.setIdUsuarioVerificadorModified( false );
		dto.setSapBpModified( false );
		dto.setSapNoContratoModified( false );
		dto.setSapFechaAperturaModified( false );
		dto.setSapFechaAmortizacionModified( false );
		dto.setSapFechaFinCreditoModified( false );
		dto.setSapInfPlazoContratoModified( false );
		dto.setSapInfFechaCorteModified( false );
		dto.setSapInfFechaPagoModified( false );
		dto.setSapTablaAmortizacionModified( false );
		dto.setMontoSolicitadoModified( false );
		dto.setMontoAprobadoModified( false );
		dto.setFechaSolicitadoModified( false );
		dto.setFechaAprobadoModified( false );
		dto.setPlazoMesesModified( false );
		dto.setPlazoVencimientoModified( false );
		dto.setTipoVencimientoModified( false );
		dto.setSapOrdenPagoModified( false );
		dto.setCuotaRegularModified( false );
		dto.setSapMontoTotalPagarModified( false );
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the specified arbitrary SQL statement
	 */
	public CrFrmEventoSolicitud[] findByDynamicSelect(String sql, Object[] sqlParams) throws CrFrmEventoSolicitudDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFrmEventoSolicitudDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the cr_frm_evento_solicitud table that match the specified arbitrary SQL statement
	 */
	public CrFrmEventoSolicitud[] findByDynamicWhere(String sql, Object[] sqlParams) throws CrFrmEventoSolicitudDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFrmEventoSolicitudDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
