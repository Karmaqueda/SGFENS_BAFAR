/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class AduanaDaoImpl extends AbstractDAO implements AduanaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_ADUANA, ID_COMPROBANTE_DESCRIPCION, ID_COMPROBANTE_FISCAL, NUM_DOCUMENTO, FECHA_EXPEDICION, ADUANA, ORDEN FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_ADUANA, ID_COMPROBANTE_DESCRIPCION, ID_COMPROBANTE_FISCAL, NUM_DOCUMENTO, FECHA_EXPEDICION, ADUANA, ORDEN ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_ADUANA = ?, ID_COMPROBANTE_DESCRIPCION = ?, ID_COMPROBANTE_FISCAL = ?, NUM_DOCUMENTO = ?, FECHA_EXPEDICION = ?, ADUANA = ?, ORDEN = ? WHERE ID_ADUANA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_ADUANA = ?";

	/** 
	 * Index of column ID_ADUANA
	 */
	protected static final int COLUMN_ID_ADUANA = 1;

	/** 
	 * Index of column ID_COMPROBANTE_DESCRIPCION
	 */
	protected static final int COLUMN_ID_COMPROBANTE_DESCRIPCION = 2;

	/** 
	 * Index of column ID_COMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_ID_COMPROBANTE_FISCAL = 3;

	/** 
	 * Index of column NUM_DOCUMENTO
	 */
	protected static final int COLUMN_NUM_DOCUMENTO = 4;

	/** 
	 * Index of column FECHA_EXPEDICION
	 */
	protected static final int COLUMN_FECHA_EXPEDICION = 5;

	/** 
	 * Index of column ADUANA
	 */
	protected static final int COLUMN_ADUANA = 6;

	/** 
	 * Index of column ORDEN
	 */
	protected static final int COLUMN_ORDEN = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column ID_ADUANA
	 */
	protected static final int PK_COLUMN_ID_ADUANA = 1;

	/** 
	 * Inserts a new row in the aduana table.
	 */
	public AduanaPk insert(Aduana dto) throws AduanaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdAduanaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ADUANA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdComprobanteDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_DESCRIPCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumDocumentoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUM_DOCUMENTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaExpedicionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_EXPEDICION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAduanaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ADUANA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isOrdenModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ORDEN" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdAduanaModified()) {
				stmt.setInt( index++, dto.getIdAduana() );
			}
		
			if (dto.isIdComprobanteDescripcionModified()) {
				stmt.setInt( index++, dto.getIdComprobanteDescripcion() );
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (dto.isIdComprobanteFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdComprobanteFiscal() );
				}
		
			}
		
			if (dto.isNumDocumentoModified()) {
				stmt.setString( index++, dto.getNumDocumento() );
			}
		
			if (dto.isFechaExpedicionModified()) {
				stmt.setDate(index++, dto.getFechaExpedicion()==null ? null : new java.sql.Date( dto.getFechaExpedicion().getTime() ) );
			}
		
			if (dto.isAduanaModified()) {
				stmt.setString( index++, dto.getAduana() );
			}
		
			if (dto.isOrdenModified()) {
				if (dto.isOrdenNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getOrden() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AduanaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the aduana table.
	 */
	public void update(AduanaPk pk, Aduana dto) throws AduanaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdAduanaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ADUANA=?" );
				modified=true;
			}
		
			if (dto.isIdComprobanteDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_DESCRIPCION=?" );
				modified=true;
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isNumDocumentoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUM_DOCUMENTO=?" );
				modified=true;
			}
		
			if (dto.isFechaExpedicionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_EXPEDICION=?" );
				modified=true;
			}
		
			if (dto.isAduanaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ADUANA=?" );
				modified=true;
			}
		
			if (dto.isOrdenModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ORDEN=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_ADUANA=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdAduanaModified()) {
				stmt.setInt( index++, dto.getIdAduana() );
			}
		
			if (dto.isIdComprobanteDescripcionModified()) {
				stmt.setInt( index++, dto.getIdComprobanteDescripcion() );
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (dto.isIdComprobanteFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdComprobanteFiscal() );
				}
		
			}
		
			if (dto.isNumDocumentoModified()) {
				stmt.setString( index++, dto.getNumDocumento() );
			}
		
			if (dto.isFechaExpedicionModified()) {
				stmt.setDate(index++, dto.getFechaExpedicion()==null ? null : new java.sql.Date( dto.getFechaExpedicion().getTime() ) );
			}
		
			if (dto.isAduanaModified()) {
				stmt.setString( index++, dto.getAduana() );
			}
		
			if (dto.isOrdenModified()) {
				if (dto.isOrdenNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getOrden() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdAduana() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AduanaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the aduana table.
	 */
	public void delete(AduanaPk pk) throws AduanaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdAduana() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AduanaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the aduana table that matches the specified primary-key value.
	 */
	public Aduana findByPrimaryKey(AduanaPk pk) throws AduanaDaoException
	{
		return findByPrimaryKey( pk.getIdAduana() );
	}

	/** 
	 * Returns all rows from the aduana table that match the criteria 'ID_ADUANA = :idAduana'.
	 */
	public Aduana findByPrimaryKey(int idAduana) throws AduanaDaoException
	{
		Aduana ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_ADUANA = ?", new Object[] {  new Integer(idAduana) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the aduana table that match the criteria ''.
	 */
	public Aduana[] findAll() throws AduanaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_ADUANA", null );
	}

	/** 
	 * Returns all rows from the aduana table that match the criteria 'ID_ADUANA = :idAduana'.
	 */
	public Aduana[] findWhereIdAduanaEquals(int idAduana) throws AduanaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ADUANA = ? ORDER BY ID_ADUANA", new Object[] {  new Integer(idAduana) } );
	}

	/** 
	 * Returns all rows from the aduana table that match the criteria 'ID_COMPROBANTE_DESCRIPCION = :idComprobanteDescripcion'.
	 */
	public Aduana[] findWhereIdComprobanteDescripcionEquals(int idComprobanteDescripcion) throws AduanaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_DESCRIPCION = ? ORDER BY ID_COMPROBANTE_DESCRIPCION", new Object[] {  new Integer(idComprobanteDescripcion) } );
	}

	/** 
	 * Returns all rows from the aduana table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public Aduana[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws AduanaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_FISCAL = ? ORDER BY ID_COMPROBANTE_FISCAL", new Object[] {  new Integer(idComprobanteFiscal) } );
	}

	/** 
	 * Returns all rows from the aduana table that match the criteria 'NUM_DOCUMENTO = :numDocumento'.
	 */
	public Aduana[] findWhereNumDocumentoEquals(String numDocumento) throws AduanaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUM_DOCUMENTO = ? ORDER BY NUM_DOCUMENTO", new Object[] { numDocumento } );
	}

	/** 
	 * Returns all rows from the aduana table that match the criteria 'FECHA_EXPEDICION = :fechaExpedicion'.
	 */
	public Aduana[] findWhereFechaExpedicionEquals(Date fechaExpedicion) throws AduanaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_EXPEDICION = ? ORDER BY FECHA_EXPEDICION", new Object[] { fechaExpedicion==null ? null : new java.sql.Date( fechaExpedicion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the aduana table that match the criteria 'ADUANA = :aduana'.
	 */
	public Aduana[] findWhereAduanaEquals(String aduana) throws AduanaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ADUANA = ? ORDER BY ADUANA", new Object[] { aduana } );
	}

	/** 
	 * Returns all rows from the aduana table that match the criteria 'ORDEN = :orden'.
	 */
	public Aduana[] findWhereOrdenEquals(int orden) throws AduanaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORDEN = ? ORDER BY ORDEN", new Object[] {  new Integer(orden) } );
	}

	/**
	 * Method 'AduanaDaoImpl'
	 * 
	 */
	public AduanaDaoImpl()
	{
	}

	/**
	 * Method 'AduanaDaoImpl'
	 * 
	 * @param userConn
	 */
	public AduanaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "aduana";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Aduana fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Aduana dto = new Aduana();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Aduana[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Aduana dto = new Aduana();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Aduana ret[] = new Aduana[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Aduana dto, ResultSet rs) throws SQLException
	{
		dto.setIdAduana( rs.getInt( COLUMN_ID_ADUANA ) );
		dto.setIdComprobanteDescripcion( rs.getInt( COLUMN_ID_COMPROBANTE_DESCRIPCION ) );
		dto.setIdComprobanteFiscal( rs.getInt( COLUMN_ID_COMPROBANTE_FISCAL ) );
		if (rs.wasNull()) {
			dto.setIdComprobanteFiscalNull( true );
		}
		
		dto.setNumDocumento( rs.getString( COLUMN_NUM_DOCUMENTO ) );
		dto.setFechaExpedicion( rs.getDate(COLUMN_FECHA_EXPEDICION ) );
		dto.setAduana( rs.getString( COLUMN_ADUANA ) );
		dto.setOrden( rs.getInt( COLUMN_ORDEN ) );
		if (rs.wasNull()) {
			dto.setOrdenNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Aduana dto)
	{
		dto.setIdAduanaModified( false );
		dto.setIdComprobanteDescripcionModified( false );
		dto.setIdComprobanteFiscalModified( false );
		dto.setNumDocumentoModified( false );
		dto.setFechaExpedicionModified( false );
		dto.setAduanaModified( false );
		dto.setOrdenModified( false );
	}

	/** 
	 * Returns all rows from the aduana table that match the specified arbitrary SQL statement
	 */
	public Aduana[] findByDynamicSelect(String sql, Object[] sqlParams) throws AduanaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AduanaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the aduana table that match the specified arbitrary SQL statement
	 */
	public Aduana[] findByDynamicWhere(String sql, Object[] sqlParams) throws AduanaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AduanaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
        
         protected final String SQL_SELECT_MAX = "SELECT ID_ADUANA, ID_COMPROBANTE_DESCRIPCION, ID_COMPROBANTE_FISCAL, NUM_DOCUMENTO, FECHA_EXPEDICION, ADUANA, ORDEN FROM " + getTableName() + " ORDER BY ID_ADUANA DESC LIMIT 1 ";
         
        public Aduana findLast() throws AduanaDaoException
	{
		Aduana ret[] = findByDynamicSelect( SQL_SELECT_MAX , new Object[0] );
		return ret.length==0 ? null : ret[0];
        }

}
