/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SgfensCotizacionDaoImpl extends AbstractDAO implements SgfensCotizacionDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_COTIZACION, ID_USUARIO_VENDEDOR, ID_EMPRESA, ID_CLIENTE, ID_PROSPECTO, CONSECUTIVO_COTIZACION, FOLIO_COTIZACION, FECHA_COTIZACION, TIPO_MONEDA, TIEMPO_ENTREGA_DIAS, COMENTARIOS, DESCUENTO_TASA, DESCUENTO_MONTO, SUBTOTAL, TOTAL, DESCUENTO_MOTIVO, ID_ESTATUS_COTIZACION, FOLIO_COTIZACION_MOVIL, IS_MODIFICADO_CONSOLA, LATITUD, LONGITUD FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_COTIZACION, ID_USUARIO_VENDEDOR, ID_EMPRESA, ID_CLIENTE, ID_PROSPECTO, CONSECUTIVO_COTIZACION, FOLIO_COTIZACION, FECHA_COTIZACION, TIPO_MONEDA, TIEMPO_ENTREGA_DIAS, COMENTARIOS, DESCUENTO_TASA, DESCUENTO_MONTO, SUBTOTAL, TOTAL, DESCUENTO_MOTIVO, ID_ESTATUS_COTIZACION, FOLIO_COTIZACION_MOVIL, IS_MODIFICADO_CONSOLA, LATITUD, LONGITUD ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_COTIZACION = ?, ID_USUARIO_VENDEDOR = ?, ID_EMPRESA = ?, ID_CLIENTE = ?, ID_PROSPECTO = ?, CONSECUTIVO_COTIZACION = ?, FOLIO_COTIZACION = ?, FECHA_COTIZACION = ?, TIPO_MONEDA = ?, TIEMPO_ENTREGA_DIAS = ?, COMENTARIOS = ?, DESCUENTO_TASA = ?, DESCUENTO_MONTO = ?, SUBTOTAL = ?, TOTAL = ?, DESCUENTO_MOTIVO = ?, ID_ESTATUS_COTIZACION = ?, FOLIO_COTIZACION_MOVIL = ?, IS_MODIFICADO_CONSOLA = ?, LATITUD = ?, LONGITUD = ? WHERE ID_COTIZACION = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_COTIZACION = ?";

	/** 
	 * Index of column ID_COTIZACION
	 */
	protected static final int COLUMN_ID_COTIZACION = 1;

	/** 
	 * Index of column ID_USUARIO_VENDEDOR
	 */
	protected static final int COLUMN_ID_USUARIO_VENDEDOR = 2;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 3;

	/** 
	 * Index of column ID_CLIENTE
	 */
	protected static final int COLUMN_ID_CLIENTE = 4;

	/** 
	 * Index of column ID_PROSPECTO
	 */
	protected static final int COLUMN_ID_PROSPECTO = 5;

	/** 
	 * Index of column CONSECUTIVO_COTIZACION
	 */
	protected static final int COLUMN_CONSECUTIVO_COTIZACION = 6;

	/** 
	 * Index of column FOLIO_COTIZACION
	 */
	protected static final int COLUMN_FOLIO_COTIZACION = 7;

	/** 
	 * Index of column FECHA_COTIZACION
	 */
	protected static final int COLUMN_FECHA_COTIZACION = 8;

	/** 
	 * Index of column TIPO_MONEDA
	 */
	protected static final int COLUMN_TIPO_MONEDA = 9;

	/** 
	 * Index of column TIEMPO_ENTREGA_DIAS
	 */
	protected static final int COLUMN_TIEMPO_ENTREGA_DIAS = 10;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 11;

	/** 
	 * Index of column DESCUENTO_TASA
	 */
	protected static final int COLUMN_DESCUENTO_TASA = 12;

	/** 
	 * Index of column DESCUENTO_MONTO
	 */
	protected static final int COLUMN_DESCUENTO_MONTO = 13;

	/** 
	 * Index of column SUBTOTAL
	 */
	protected static final int COLUMN_SUBTOTAL = 14;

	/** 
	 * Index of column TOTAL
	 */
	protected static final int COLUMN_TOTAL = 15;

	/** 
	 * Index of column DESCUENTO_MOTIVO
	 */
	protected static final int COLUMN_DESCUENTO_MOTIVO = 16;

	/** 
	 * Index of column ID_ESTATUS_COTIZACION
	 */
	protected static final int COLUMN_ID_ESTATUS_COTIZACION = 17;

	/** 
	 * Index of column FOLIO_COTIZACION_MOVIL
	 */
	protected static final int COLUMN_FOLIO_COTIZACION_MOVIL = 18;

	/** 
	 * Index of column IS_MODIFICADO_CONSOLA
	 */
	protected static final int COLUMN_IS_MODIFICADO_CONSOLA = 19;

	/** 
	 * Index of column LATITUD
	 */
	protected static final int COLUMN_LATITUD = 20;

	/** 
	 * Index of column LONGITUD
	 */
	protected static final int COLUMN_LONGITUD = 21;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 21;

	/** 
	 * Index of primary-key column ID_COTIZACION
	 */
	protected static final int PK_COLUMN_ID_COTIZACION = 1;

	/** 
	 * Inserts a new row in the sgfens_cotizacion table.
	 */
	public SgfensCotizacionPk insert(SgfensCotizacion dto) throws SgfensCotizacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdCotizacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_COTIZACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_USUARIO_VENDEDOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdProspectoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PROSPECTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isConsecutivoCotizacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CONSECUTIVO_COTIZACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioCotizacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIO_COTIZACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaCotizacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_COTIZACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoMonedaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIPO_MONEDA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTiempoEntregaDiasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIEMPO_ENTREGA_DIAS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isComentariosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "COMENTARIOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoTasaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_TASA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSubtotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SUBTOTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TOTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoMotivoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_MOTIVO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusCotizacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS_COTIZACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioCotizacionMovilModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIO_COTIZACION_MOVIL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsModificadoConsolaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IS_MODIFICADO_CONSOLA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLatitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LATITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLongitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LONGITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdCotizacionModified()) {
				stmt.setInt( index++, dto.getIdCotizacion() );
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				stmt.setInt( index++, dto.getIdUsuarioVendedor() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdClienteModified()) {
				if (dto.isIdClienteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCliente() );
				}
		
			}
		
			if (dto.isIdProspectoModified()) {
				if (dto.isIdProspectoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdProspecto() );
				}
		
			}
		
			if (dto.isConsecutivoCotizacionModified()) {
				stmt.setInt( index++, dto.getConsecutivoCotizacion() );
			}
		
			if (dto.isFolioCotizacionModified()) {
				stmt.setString( index++, dto.getFolioCotizacion() );
			}
		
			if (dto.isFechaCotizacionModified()) {
				stmt.setTimestamp(index++, dto.getFechaCotizacion()==null ? null : new java.sql.Timestamp( dto.getFechaCotizacion().getTime() ) );
			}
		
			if (dto.isTipoMonedaModified()) {
				stmt.setString( index++, dto.getTipoMoneda() );
			}
		
			if (dto.isTiempoEntregaDiasModified()) {
				stmt.setInt( index++, dto.getTiempoEntregaDias() );
			}
		
			if (dto.isComentariosModified()) {
				stmt.setString( index++, dto.getComentarios() );
			}
		
			if (dto.isDescuentoTasaModified()) {
				stmt.setDouble( index++, dto.getDescuentoTasa() );
			}
		
			if (dto.isDescuentoMontoModified()) {
				stmt.setDouble( index++, dto.getDescuentoMonto() );
			}
		
			if (dto.isSubtotalModified()) {
				stmt.setDouble( index++, dto.getSubtotal() );
			}
		
			if (dto.isTotalModified()) {
				stmt.setDouble( index++, dto.getTotal() );
			}
		
			if (dto.isDescuentoMotivoModified()) {
				stmt.setString( index++, dto.getDescuentoMotivo() );
			}
		
			if (dto.isIdEstatusCotizacionModified()) {
				if (dto.isIdEstatusCotizacionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getIdEstatusCotizacion() );
				}
		
			}
		
			if (dto.isFolioCotizacionMovilModified()) {
				stmt.setString( index++, dto.getFolioCotizacionMovil() );
			}
		
			if (dto.isIsModificadoConsolaModified()) {
				if (dto.isIsModificadoConsolaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getIsModificadoConsola() );
				}
		
			}
		
			if (dto.isLatitudModified()) {
				stmt.setDouble( index++, dto.getLatitud() );
			}
		
			if (dto.isLongitudModified()) {
				stmt.setDouble( index++, dto.getLongitud() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdCotizacion( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCotizacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sgfens_cotizacion table.
	 */
	public void update(SgfensCotizacionPk pk, SgfensCotizacion dto) throws SgfensCotizacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdCotizacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_COTIZACION=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_USUARIO_VENDEDOR=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isIdProspectoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PROSPECTO=?" );
				modified=true;
			}
		
			if (dto.isConsecutivoCotizacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONSECUTIVO_COTIZACION=?" );
				modified=true;
			}
		
			if (dto.isFolioCotizacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIO_COTIZACION=?" );
				modified=true;
			}
		
			if (dto.isFechaCotizacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_COTIZACION=?" );
				modified=true;
			}
		
			if (dto.isTipoMonedaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIPO_MONEDA=?" );
				modified=true;
			}
		
			if (dto.isTiempoEntregaDiasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIEMPO_ENTREGA_DIAS=?" );
				modified=true;
			}
		
			if (dto.isComentariosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "COMENTARIOS=?" );
				modified=true;
			}
		
			if (dto.isDescuentoTasaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_TASA=?" );
				modified=true;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO=?" );
				modified=true;
			}
		
			if (dto.isSubtotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SUBTOTAL=?" );
				modified=true;
			}
		
			if (dto.isTotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TOTAL=?" );
				modified=true;
			}
		
			if (dto.isDescuentoMotivoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_MOTIVO=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusCotizacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS_COTIZACION=?" );
				modified=true;
			}
		
			if (dto.isFolioCotizacionMovilModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIO_COTIZACION_MOVIL=?" );
				modified=true;
			}
		
			if (dto.isIsModificadoConsolaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IS_MODIFICADO_CONSOLA=?" );
				modified=true;
			}
		
			if (dto.isLatitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LATITUD=?" );
				modified=true;
			}
		
			if (dto.isLongitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LONGITUD=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_COTIZACION=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdCotizacionModified()) {
				stmt.setInt( index++, dto.getIdCotizacion() );
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				stmt.setInt( index++, dto.getIdUsuarioVendedor() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdClienteModified()) {
				if (dto.isIdClienteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCliente() );
				}
		
			}
		
			if (dto.isIdProspectoModified()) {
				if (dto.isIdProspectoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdProspecto() );
				}
		
			}
		
			if (dto.isConsecutivoCotizacionModified()) {
				stmt.setInt( index++, dto.getConsecutivoCotizacion() );
			}
		
			if (dto.isFolioCotizacionModified()) {
				stmt.setString( index++, dto.getFolioCotizacion() );
			}
		
			if (dto.isFechaCotizacionModified()) {
				stmt.setTimestamp(index++, dto.getFechaCotizacion()==null ? null : new java.sql.Timestamp( dto.getFechaCotizacion().getTime() ) );
			}
		
			if (dto.isTipoMonedaModified()) {
				stmt.setString( index++, dto.getTipoMoneda() );
			}
		
			if (dto.isTiempoEntregaDiasModified()) {
				stmt.setInt( index++, dto.getTiempoEntregaDias() );
			}
		
			if (dto.isComentariosModified()) {
				stmt.setString( index++, dto.getComentarios() );
			}
		
			if (dto.isDescuentoTasaModified()) {
				stmt.setDouble( index++, dto.getDescuentoTasa() );
			}
		
			if (dto.isDescuentoMontoModified()) {
				stmt.setDouble( index++, dto.getDescuentoMonto() );
			}
		
			if (dto.isSubtotalModified()) {
				stmt.setDouble( index++, dto.getSubtotal() );
			}
		
			if (dto.isTotalModified()) {
				stmt.setDouble( index++, dto.getTotal() );
			}
		
			if (dto.isDescuentoMotivoModified()) {
				stmt.setString( index++, dto.getDescuentoMotivo() );
			}
		
			if (dto.isIdEstatusCotizacionModified()) {
				if (dto.isIdEstatusCotizacionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getIdEstatusCotizacion() );
				}
		
			}
		
			if (dto.isFolioCotizacionMovilModified()) {
				stmt.setString( index++, dto.getFolioCotizacionMovil() );
			}
		
			if (dto.isIsModificadoConsolaModified()) {
				if (dto.isIsModificadoConsolaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getIsModificadoConsola() );
				}
		
			}
		
			if (dto.isLatitudModified()) {
				stmt.setDouble( index++, dto.getLatitud() );
			}
		
			if (dto.isLongitudModified()) {
				stmt.setDouble( index++, dto.getLongitud() );
			}
		
			stmt.setInt( index++, pk.getIdCotizacion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCotizacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sgfens_cotizacion table.
	 */
	public void delete(SgfensCotizacionPk pk) throws SgfensCotizacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdCotizacion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCotizacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sgfens_cotizacion table that matches the specified primary-key value.
	 */
	public SgfensCotizacion findByPrimaryKey(SgfensCotizacionPk pk) throws SgfensCotizacionDaoException
	{
		return findByPrimaryKey( pk.getIdCotizacion() );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'ID_COTIZACION = :idCotizacion'.
	 */
	public SgfensCotizacion findByPrimaryKey(int idCotizacion) throws SgfensCotizacionDaoException
	{
		SgfensCotizacion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_COTIZACION = ?", new Object[] {  new Integer(idCotizacion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria ''.
	 */
	public SgfensCotizacion[] findAll() throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_COTIZACION", null );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'ID_COTIZACION = :idCotizacion'.
	 */
	public SgfensCotizacion[] findWhereIdCotizacionEquals(int idCotizacion) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COTIZACION = ? ORDER BY ID_COTIZACION", new Object[] {  new Integer(idCotizacion) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'ID_USUARIO_VENDEDOR = :idUsuarioVendedor'.
	 */
	public SgfensCotizacion[] findWhereIdUsuarioVendedorEquals(int idUsuarioVendedor) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO_VENDEDOR = ? ORDER BY ID_USUARIO_VENDEDOR", new Object[] {  new Integer(idUsuarioVendedor) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public SgfensCotizacion[] findWhereIdEmpresaEquals(int idEmpresa) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public SgfensCotizacion[] findWhereIdClienteEquals(int idCliente) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CLIENTE = ? ORDER BY ID_CLIENTE", new Object[] {  new Integer(idCliente) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'ID_PROSPECTO = :idProspecto'.
	 */
	public SgfensCotizacion[] findWhereIdProspectoEquals(int idProspecto) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PROSPECTO = ? ORDER BY ID_PROSPECTO", new Object[] {  new Integer(idProspecto) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'CONSECUTIVO_COTIZACION = :consecutivoCotizacion'.
	 */
	public SgfensCotizacion[] findWhereConsecutivoCotizacionEquals(int consecutivoCotizacion) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONSECUTIVO_COTIZACION = ? ORDER BY CONSECUTIVO_COTIZACION", new Object[] {  new Integer(consecutivoCotizacion) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'FOLIO_COTIZACION = :folioCotizacion'.
	 */
	public SgfensCotizacion[] findWhereFolioCotizacionEquals(String folioCotizacion) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_COTIZACION = ? ORDER BY FOLIO_COTIZACION", new Object[] { folioCotizacion } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'FECHA_COTIZACION = :fechaCotizacion'.
	 */
	public SgfensCotizacion[] findWhereFechaCotizacionEquals(Date fechaCotizacion) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_COTIZACION = ? ORDER BY FECHA_COTIZACION", new Object[] { fechaCotizacion==null ? null : new java.sql.Timestamp( fechaCotizacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'TIPO_MONEDA = :tipoMoneda'.
	 */
	public SgfensCotizacion[] findWhereTipoMonedaEquals(String tipoMoneda) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_MONEDA = ? ORDER BY TIPO_MONEDA", new Object[] { tipoMoneda } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'TIEMPO_ENTREGA_DIAS = :tiempoEntregaDias'.
	 */
	public SgfensCotizacion[] findWhereTiempoEntregaDiasEquals(int tiempoEntregaDias) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIEMPO_ENTREGA_DIAS = ? ORDER BY TIEMPO_ENTREGA_DIAS", new Object[] {  new Integer(tiempoEntregaDias) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public SgfensCotizacion[] findWhereComentariosEquals(String comentarios) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'DESCUENTO_TASA = :descuentoTasa'.
	 */
	public SgfensCotizacion[] findWhereDescuentoTasaEquals(double descuentoTasa) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_TASA = ? ORDER BY DESCUENTO_TASA", new Object[] {  new Double(descuentoTasa) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'DESCUENTO_MONTO = :descuentoMonto'.
	 */
	public SgfensCotizacion[] findWhereDescuentoMontoEquals(double descuentoMonto) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_MONTO = ? ORDER BY DESCUENTO_MONTO", new Object[] {  new Double(descuentoMonto) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'SUBTOTAL = :subtotal'.
	 */
	public SgfensCotizacion[] findWhereSubtotalEquals(double subtotal) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUBTOTAL = ? ORDER BY SUBTOTAL", new Object[] {  new Double(subtotal) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'TOTAL = :total'.
	 */
	public SgfensCotizacion[] findWhereTotalEquals(double total) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TOTAL = ? ORDER BY TOTAL", new Object[] {  new Double(total) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'DESCUENTO_MOTIVO = :descuentoMotivo'.
	 */
	public SgfensCotizacion[] findWhereDescuentoMotivoEquals(String descuentoMotivo) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_MOTIVO = ? ORDER BY DESCUENTO_MOTIVO", new Object[] { descuentoMotivo } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'ID_ESTATUS_COTIZACION = :idEstatusCotizacion'.
	 */
	public SgfensCotizacion[] findWhereIdEstatusCotizacionEquals(short idEstatusCotizacion) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS_COTIZACION = ? ORDER BY ID_ESTATUS_COTIZACION", new Object[] {  new Short(idEstatusCotizacion) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'FOLIO_COTIZACION_MOVIL = :folioCotizacionMovil'.
	 */
	public SgfensCotizacion[] findWhereFolioCotizacionMovilEquals(String folioCotizacionMovil) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_COTIZACION_MOVIL = ? ORDER BY FOLIO_COTIZACION_MOVIL", new Object[] { folioCotizacionMovil } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'IS_MODIFICADO_CONSOLA = :isModificadoConsola'.
	 */
	public SgfensCotizacion[] findWhereIsModificadoConsolaEquals(short isModificadoConsola) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IS_MODIFICADO_CONSOLA = ? ORDER BY IS_MODIFICADO_CONSOLA", new Object[] {  new Short(isModificadoConsola) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'LATITUD = :latitud'.
	 */
	public SgfensCotizacion[] findWhereLatitudEquals(double latitud) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATITUD = ? ORDER BY LATITUD", new Object[] {  new Double(latitud) } );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the criteria 'LONGITUD = :longitud'.
	 */
	public SgfensCotizacion[] findWhereLongitudEquals(double longitud) throws SgfensCotizacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LONGITUD = ? ORDER BY LONGITUD", new Object[] {  new Double(longitud) } );
	}

	/**
	 * Method 'SgfensCotizacionDaoImpl'
	 * 
	 */
	public SgfensCotizacionDaoImpl()
	{
	}

	/**
	 * Method 'SgfensCotizacionDaoImpl'
	 * 
	 * @param userConn
	 */
	public SgfensCotizacionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sgfens_cotizacion";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SgfensCotizacion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SgfensCotizacion dto = new SgfensCotizacion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SgfensCotizacion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SgfensCotizacion dto = new SgfensCotizacion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SgfensCotizacion ret[] = new SgfensCotizacion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SgfensCotizacion dto, ResultSet rs) throws SQLException
	{
		dto.setIdCotizacion( rs.getInt( COLUMN_ID_COTIZACION ) );
		dto.setIdUsuarioVendedor( rs.getInt( COLUMN_ID_USUARIO_VENDEDOR ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdCliente( rs.getInt( COLUMN_ID_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setIdClienteNull( true );
		}
		
		dto.setIdProspecto( rs.getInt( COLUMN_ID_PROSPECTO ) );
		if (rs.wasNull()) {
			dto.setIdProspectoNull( true );
		}
		
		dto.setConsecutivoCotizacion( rs.getInt( COLUMN_CONSECUTIVO_COTIZACION ) );
		dto.setFolioCotizacion( rs.getString( COLUMN_FOLIO_COTIZACION ) );
		dto.setFechaCotizacion( rs.getTimestamp(COLUMN_FECHA_COTIZACION ) );
		dto.setTipoMoneda( rs.getString( COLUMN_TIPO_MONEDA ) );
		dto.setTiempoEntregaDias( rs.getInt( COLUMN_TIEMPO_ENTREGA_DIAS ) );
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setDescuentoTasa( rs.getDouble( COLUMN_DESCUENTO_TASA ) );
		dto.setDescuentoMonto( rs.getDouble( COLUMN_DESCUENTO_MONTO ) );
		dto.setSubtotal( rs.getDouble( COLUMN_SUBTOTAL ) );
		dto.setTotal( rs.getDouble( COLUMN_TOTAL ) );
		dto.setDescuentoMotivo( rs.getString( COLUMN_DESCUENTO_MOTIVO ) );
		dto.setIdEstatusCotizacion( rs.getShort( COLUMN_ID_ESTATUS_COTIZACION ) );
		if (rs.wasNull()) {
			dto.setIdEstatusCotizacionNull( true );
		}
		
		dto.setFolioCotizacionMovil( rs.getString( COLUMN_FOLIO_COTIZACION_MOVIL ) );
		dto.setIsModificadoConsola( rs.getShort( COLUMN_IS_MODIFICADO_CONSOLA ) );
		if (rs.wasNull()) {
			dto.setIsModificadoConsolaNull( true );
		}
		
		dto.setLatitud( rs.getDouble( COLUMN_LATITUD ) );
		dto.setLongitud( rs.getDouble( COLUMN_LONGITUD ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SgfensCotizacion dto)
	{
		dto.setIdCotizacionModified( false );
		dto.setIdUsuarioVendedorModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdClienteModified( false );
		dto.setIdProspectoModified( false );
		dto.setConsecutivoCotizacionModified( false );
		dto.setFolioCotizacionModified( false );
		dto.setFechaCotizacionModified( false );
		dto.setTipoMonedaModified( false );
		dto.setTiempoEntregaDiasModified( false );
		dto.setComentariosModified( false );
		dto.setDescuentoTasaModified( false );
		dto.setDescuentoMontoModified( false );
		dto.setSubtotalModified( false );
		dto.setTotalModified( false );
		dto.setDescuentoMotivoModified( false );
		dto.setIdEstatusCotizacionModified( false );
		dto.setFolioCotizacionMovilModified( false );
		dto.setIsModificadoConsolaModified( false );
		dto.setLatitudModified( false );
		dto.setLongitudModified( false );
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the specified arbitrary SQL statement
	 */
	public SgfensCotizacion[] findByDynamicSelect(String sql, Object[] sqlParams) throws SgfensCotizacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCotizacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sgfens_cotizacion table that match the specified arbitrary SQL statement
	 */
	public SgfensCotizacion[] findByDynamicWhere(String sql, Object[] sqlParams) throws SgfensCotizacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCotizacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
