/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SgfensCotizacionProductoDaoImpl extends AbstractDAO implements SgfensCotizacionProductoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_COTIZACION, ID_CONCEPTO, DESCRIPCION, UNIDAD, IDENTIFICACION, CANTIDAD, PRECIO_UNITARIO, DESCUENTO_PORCENTAJE, DESCUENTO_MONTO, SUBTOTAL FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_COTIZACION, ID_CONCEPTO, DESCRIPCION, UNIDAD, IDENTIFICACION, CANTIDAD, PRECIO_UNITARIO, DESCUENTO_PORCENTAJE, DESCUENTO_MONTO, SUBTOTAL ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_COTIZACION = ?, ID_CONCEPTO = ?, DESCRIPCION = ?, UNIDAD = ?, IDENTIFICACION = ?, CANTIDAD = ?, PRECIO_UNITARIO = ?, DESCUENTO_PORCENTAJE = ?, DESCUENTO_MONTO = ?, SUBTOTAL = ? WHERE ID_COTIZACION = ? AND ID_CONCEPTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_COTIZACION = ? AND ID_CONCEPTO = ?";

	/** 
	 * Index of column ID_COTIZACION
	 */
	protected static final int COLUMN_ID_COTIZACION = 1;

	/** 
	 * Index of column ID_CONCEPTO
	 */
	protected static final int COLUMN_ID_CONCEPTO = 2;

	/** 
	 * Index of column DESCRIPCION
	 */
	protected static final int COLUMN_DESCRIPCION = 3;

	/** 
	 * Index of column UNIDAD
	 */
	protected static final int COLUMN_UNIDAD = 4;

	/** 
	 * Index of column IDENTIFICACION
	 */
	protected static final int COLUMN_IDENTIFICACION = 5;

	/** 
	 * Index of column CANTIDAD
	 */
	protected static final int COLUMN_CANTIDAD = 6;

	/** 
	 * Index of column PRECIO_UNITARIO
	 */
	protected static final int COLUMN_PRECIO_UNITARIO = 7;

	/** 
	 * Index of column DESCUENTO_PORCENTAJE
	 */
	protected static final int COLUMN_DESCUENTO_PORCENTAJE = 8;

	/** 
	 * Index of column DESCUENTO_MONTO
	 */
	protected static final int COLUMN_DESCUENTO_MONTO = 9;

	/** 
	 * Index of column SUBTOTAL
	 */
	protected static final int COLUMN_SUBTOTAL = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column ID_COTIZACION
	 */
	protected static final int PK_COLUMN_ID_COTIZACION = 1;

	/** 
	 * Index of primary-key column ID_CONCEPTO
	 */
	protected static final int PK_COLUMN_ID_CONCEPTO = 2;

	/** 
	 * Inserts a new row in the SGFENS_COTIZACION_PRODUCTO table.
	 */
	public SgfensCotizacionProductoPk insert(SgfensCotizacionProducto dto) throws SgfensCotizacionProductoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdCotizacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_COTIZACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCRIPCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUnidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "UNIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdentificacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IDENTIFICACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CANTIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioUnitarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_PORCENTAJE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSubtotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SUBTOTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdCotizacionModified()) {
				stmt.setInt( index++, dto.getIdCotizacion() );
			}
		
			if (dto.isIdConceptoModified()) {
				stmt.setInt( index++, dto.getIdConcepto() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isUnidadModified()) {
				stmt.setString( index++, dto.getUnidad() );
			}
		
			if (dto.isIdentificacionModified()) {
				stmt.setString( index++, dto.getIdentificacion() );
			}
		
			if (dto.isCantidadModified()) {
				stmt.setDouble( index++, dto.getCantidad() );
			}
		
			if (dto.isPrecioUnitarioModified()) {
				stmt.setDouble( index++, dto.getPrecioUnitario() );
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (dto.isDescuentoPorcentajeNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoPorcentaje() );
				}
		
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (dto.isDescuentoMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoMonto() );
				}
		
			}
		
			if (dto.isSubtotalModified()) {
				stmt.setDouble( index++, dto.getSubtotal() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCotizacionProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the SGFENS_COTIZACION_PRODUCTO table.
	 */
	public void update(SgfensCotizacionProductoPk pk, SgfensCotizacionProducto dto) throws SgfensCotizacionProductoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdCotizacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_COTIZACION=?" );
				modified=true;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCRIPCION=?" );
				modified=true;
			}
		
			if (dto.isUnidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "UNIDAD=?" );
				modified=true;
			}
		
			if (dto.isIdentificacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IDENTIFICACION=?" );
				modified=true;
			}
		
			if (dto.isCantidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CANTIDAD=?" );
				modified=true;
			}
		
			if (dto.isPrecioUnitarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO=?" );
				modified=true;
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_PORCENTAJE=?" );
				modified=true;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO=?" );
				modified=true;
			}
		
			if (dto.isSubtotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SUBTOTAL=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_COTIZACION=? AND ID_CONCEPTO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdCotizacionModified()) {
				stmt.setInt( index++, dto.getIdCotizacion() );
			}
		
			if (dto.isIdConceptoModified()) {
				stmt.setInt( index++, dto.getIdConcepto() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isUnidadModified()) {
				stmt.setString( index++, dto.getUnidad() );
			}
		
			if (dto.isIdentificacionModified()) {
				stmt.setString( index++, dto.getIdentificacion() );
			}
		
			if (dto.isCantidadModified()) {
				stmt.setDouble( index++, dto.getCantidad() );
			}
		
			if (dto.isPrecioUnitarioModified()) {
				stmt.setDouble( index++, dto.getPrecioUnitario() );
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (dto.isDescuentoPorcentajeNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoPorcentaje() );
				}
		
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (dto.isDescuentoMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoMonto() );
				}
		
			}
		
			if (dto.isSubtotalModified()) {
				stmt.setDouble( index++, dto.getSubtotal() );
			}
		
			stmt.setInt( index++, pk.getIdCotizacion() );
			stmt.setInt( index++, pk.getIdConcepto() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCotizacionProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the SGFENS_COTIZACION_PRODUCTO table.
	 */
	public void delete(SgfensCotizacionProductoPk pk) throws SgfensCotizacionProductoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdCotizacion() );
			stmt.setInt( 2, pk.getIdConcepto() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCotizacionProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the SGFENS_COTIZACION_PRODUCTO table that matches the specified primary-key value.
	 */
	public SgfensCotizacionProducto findByPrimaryKey(SgfensCotizacionProductoPk pk) throws SgfensCotizacionProductoDaoException
	{
		return findByPrimaryKey( pk.getIdCotizacion(), pk.getIdConcepto() );
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the criteria 'ID_COTIZACION = :idCotizacion AND ID_CONCEPTO = :idConcepto'.
	 */
	public SgfensCotizacionProducto findByPrimaryKey(int idCotizacion, int idConcepto) throws SgfensCotizacionProductoDaoException
	{
		SgfensCotizacionProducto ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_COTIZACION = ? AND ID_CONCEPTO = ?", new Object[] {  new Integer(idCotizacion),  new Integer(idConcepto) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the criteria ''.
	 */
	public SgfensCotizacionProducto[] findAll() throws SgfensCotizacionProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_COTIZACION, ID_CONCEPTO", null );
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the criteria 'ID_COTIZACION = :idCotizacion'.
	 */
	public SgfensCotizacionProducto[] findWhereIdCotizacionEquals(int idCotizacion) throws SgfensCotizacionProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COTIZACION = ? ORDER BY ID_COTIZACION", new Object[] {  new Integer(idCotizacion) } );
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public SgfensCotizacionProducto[] findWhereIdConceptoEquals(int idConcepto) throws SgfensCotizacionProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO = ? ORDER BY ID_CONCEPTO", new Object[] {  new Integer(idConcepto) } );
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public SgfensCotizacionProducto[] findWhereDescripcionEquals(String descripcion) throws SgfensCotizacionProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION = ? ORDER BY DESCRIPCION", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the criteria 'UNIDAD = :unidad'.
	 */
	public SgfensCotizacionProducto[] findWhereUnidadEquals(String unidad) throws SgfensCotizacionProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UNIDAD = ? ORDER BY UNIDAD", new Object[] { unidad } );
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the criteria 'IDENTIFICACION = :identificacion'.
	 */
	public SgfensCotizacionProducto[] findWhereIdentificacionEquals(String identificacion) throws SgfensCotizacionProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDENTIFICACION = ? ORDER BY IDENTIFICACION", new Object[] { identificacion } );
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public SgfensCotizacionProducto[] findWhereCantidadEquals(double cantidad) throws SgfensCotizacionProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD = ? ORDER BY CANTIDAD", new Object[] {  new Double(cantidad) } );
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the criteria 'PRECIO_UNITARIO = :precioUnitario'.
	 */
	public SgfensCotizacionProducto[] findWherePrecioUnitarioEquals(double precioUnitario) throws SgfensCotizacionProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_UNITARIO = ? ORDER BY PRECIO_UNITARIO", new Object[] {  new Double(precioUnitario) } );
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the criteria 'DESCUENTO_PORCENTAJE = :descuentoPorcentaje'.
	 */
	public SgfensCotizacionProducto[] findWhereDescuentoPorcentajeEquals(double descuentoPorcentaje) throws SgfensCotizacionProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_PORCENTAJE = ? ORDER BY DESCUENTO_PORCENTAJE", new Object[] {  new Double(descuentoPorcentaje) } );
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the criteria 'DESCUENTO_MONTO = :descuentoMonto'.
	 */
	public SgfensCotizacionProducto[] findWhereDescuentoMontoEquals(double descuentoMonto) throws SgfensCotizacionProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_MONTO = ? ORDER BY DESCUENTO_MONTO", new Object[] {  new Double(descuentoMonto) } );
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the criteria 'SUBTOTAL = :subtotal'.
	 */
	public SgfensCotizacionProducto[] findWhereSubtotalEquals(double subtotal) throws SgfensCotizacionProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUBTOTAL = ? ORDER BY SUBTOTAL", new Object[] {  new Double(subtotal) } );
	}

	/**
	 * Method 'SgfensCotizacionProductoDaoImpl'
	 * 
	 */
	public SgfensCotizacionProductoDaoImpl()
	{
	}

	/**
	 * Method 'SgfensCotizacionProductoDaoImpl'
	 * 
	 * @param userConn
	 */
	public SgfensCotizacionProductoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "SGFENS_COTIZACION_PRODUCTO";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SgfensCotizacionProducto fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SgfensCotizacionProducto dto = new SgfensCotizacionProducto();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SgfensCotizacionProducto[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SgfensCotizacionProducto dto = new SgfensCotizacionProducto();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SgfensCotizacionProducto ret[] = new SgfensCotizacionProducto[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SgfensCotizacionProducto dto, ResultSet rs) throws SQLException
	{
		dto.setIdCotizacion( rs.getInt( COLUMN_ID_COTIZACION ) );
		dto.setIdConcepto( rs.getInt( COLUMN_ID_CONCEPTO ) );
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setUnidad( rs.getString( COLUMN_UNIDAD ) );
		dto.setIdentificacion( rs.getString( COLUMN_IDENTIFICACION ) );
		dto.setCantidad( rs.getDouble( COLUMN_CANTIDAD ) );
		dto.setPrecioUnitario( rs.getDouble( COLUMN_PRECIO_UNITARIO ) );
		dto.setDescuentoPorcentaje( rs.getDouble( COLUMN_DESCUENTO_PORCENTAJE ) );
		if (rs.wasNull()) {
			dto.setDescuentoPorcentajeNull( true );
		}
		
		dto.setDescuentoMonto( rs.getDouble( COLUMN_DESCUENTO_MONTO ) );
		if (rs.wasNull()) {
			dto.setDescuentoMontoNull( true );
		}
		
		dto.setSubtotal( rs.getDouble( COLUMN_SUBTOTAL ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SgfensCotizacionProducto dto)
	{
		dto.setIdCotizacionModified( false );
		dto.setIdConceptoModified( false );
		dto.setDescripcionModified( false );
		dto.setUnidadModified( false );
		dto.setIdentificacionModified( false );
		dto.setCantidadModified( false );
		dto.setPrecioUnitarioModified( false );
		dto.setDescuentoPorcentajeModified( false );
		dto.setDescuentoMontoModified( false );
		dto.setSubtotalModified( false );
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the specified arbitrary SQL statement
	 */
	public SgfensCotizacionProducto[] findByDynamicSelect(String sql, Object[] sqlParams) throws SgfensCotizacionProductoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCotizacionProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the SGFENS_COTIZACION_PRODUCTO table that match the specified arbitrary SQL statement
	 */
	public SgfensCotizacionProducto[] findByDynamicWhere(String sql, Object[] sqlParams) throws SgfensCotizacionProductoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCotizacionProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
