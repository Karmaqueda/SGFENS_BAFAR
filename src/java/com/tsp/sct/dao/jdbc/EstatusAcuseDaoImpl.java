/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EstatusAcuseDaoImpl extends AbstractDAO implements EstatusAcuseDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_ACUSE, TIPO_TIMBRADO, FECHA_EMISION, MONTO_FACTURA, UUID, RFC_EMISOR, RFC_RECEPTOR, FECHA_TIMBRADO, CODIGO, DESCRIPCION, TIPO, FECHA_ACUSE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_ACUSE, TIPO_TIMBRADO, FECHA_EMISION, MONTO_FACTURA, UUID, RFC_EMISOR, RFC_RECEPTOR, FECHA_TIMBRADO, CODIGO, DESCRIPCION, TIPO, FECHA_ACUSE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_ACUSE = ?, TIPO_TIMBRADO = ?, FECHA_EMISION = ?, MONTO_FACTURA = ?, UUID = ?, RFC_EMISOR = ?, RFC_RECEPTOR = ?, FECHA_TIMBRADO = ?, CODIGO = ?, DESCRIPCION = ?, TIPO = ?, FECHA_ACUSE = ? WHERE ID_ACUSE = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_ACUSE = ?";

	/** 
	 * Index of column ID_ACUSE
	 */
	protected static final int COLUMN_ID_ACUSE = 1;

	/** 
	 * Index of column TIPO_TIMBRADO
	 */
	protected static final int COLUMN_TIPO_TIMBRADO = 2;

	/** 
	 * Index of column FECHA_EMISION
	 */
	protected static final int COLUMN_FECHA_EMISION = 3;

	/** 
	 * Index of column MONTO_FACTURA
	 */
	protected static final int COLUMN_MONTO_FACTURA = 4;

	/** 
	 * Index of column UUID
	 */
	protected static final int COLUMN_UUID = 5;

	/** 
	 * Index of column RFC_EMISOR
	 */
	protected static final int COLUMN_RFC_EMISOR = 6;

	/** 
	 * Index of column RFC_RECEPTOR
	 */
	protected static final int COLUMN_RFC_RECEPTOR = 7;

	/** 
	 * Index of column FECHA_TIMBRADO
	 */
	protected static final int COLUMN_FECHA_TIMBRADO = 8;

	/** 
	 * Index of column CODIGO
	 */
	protected static final int COLUMN_CODIGO = 9;

	/** 
	 * Index of column DESCRIPCION
	 */
	protected static final int COLUMN_DESCRIPCION = 10;

	/** 
	 * Index of column TIPO
	 */
	protected static final int COLUMN_TIPO = 11;

	/** 
	 * Index of column FECHA_ACUSE
	 */
	protected static final int COLUMN_FECHA_ACUSE = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column ID_ACUSE
	 */
	protected static final int PK_COLUMN_ID_ACUSE = 1;

	/** 
	 * Inserts a new row in the estatus_acuse table.
	 */
	public EstatusAcusePk insert(EstatusAcuse dto) throws EstatusAcuseDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getIdAcuse() );
			stmt.setString( index++, dto.getTipoTimbrado() );
			stmt.setString( index++, dto.getFechaEmision() );
			stmt.setString( index++, dto.getMontoFactura() );
			stmt.setString( index++, dto.getUuid() );
			stmt.setString( index++, dto.getRfcEmisor() );
			stmt.setString( index++, dto.getRfcReceptor() );
			stmt.setString( index++, dto.getFechaTimbrado() );
			stmt.setString( index++, dto.getCodigo() );
			stmt.setString( index++, dto.getDescripcion() );
			stmt.setString( index++, dto.getTipo() );
			stmt.setString( index++, dto.getFechaAcuse() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdAcuse( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EstatusAcuseDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the estatus_acuse table.
	 */
	public void update(EstatusAcusePk pk, EstatusAcuse dto) throws EstatusAcuseDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdAcuse() );
			stmt.setString( index++, dto.getTipoTimbrado() );
			stmt.setString( index++, dto.getFechaEmision() );
			stmt.setString( index++, dto.getMontoFactura() );
			stmt.setString( index++, dto.getUuid() );
			stmt.setString( index++, dto.getRfcEmisor() );
			stmt.setString( index++, dto.getRfcReceptor() );
			stmt.setString( index++, dto.getFechaTimbrado() );
			stmt.setString( index++, dto.getCodigo() );
			stmt.setString( index++, dto.getDescripcion() );
			stmt.setString( index++, dto.getTipo() );
			stmt.setString( index++, dto.getFechaAcuse() );
			stmt.setInt( 13, pk.getIdAcuse() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EstatusAcuseDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the estatus_acuse table.
	 */
	public void delete(EstatusAcusePk pk) throws EstatusAcuseDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdAcuse() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EstatusAcuseDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the estatus_acuse table that matches the specified primary-key value.
	 */
	public EstatusAcuse findByPrimaryKey(EstatusAcusePk pk) throws EstatusAcuseDaoException
	{
		return findByPrimaryKey( pk.getIdAcuse() );
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria 'ID_ACUSE = :idAcuse'.
	 */
	public EstatusAcuse findByPrimaryKey(int idAcuse) throws EstatusAcuseDaoException
	{
		EstatusAcuse ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_ACUSE = ?", new Object[] {  new Integer(idAcuse) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria ''.
	 */
	public EstatusAcuse[] findAll() throws EstatusAcuseDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_ACUSE", null );
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria 'ID_ACUSE = :idAcuse'.
	 */
	public EstatusAcuse[] findWhereIdAcuseEquals(int idAcuse) throws EstatusAcuseDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ACUSE = ? ORDER BY ID_ACUSE", new Object[] {  new Integer(idAcuse) } );
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria 'TIPO_TIMBRADO = :tipoTimbrado'.
	 */
	public EstatusAcuse[] findWhereTipoTimbradoEquals(String tipoTimbrado) throws EstatusAcuseDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_TIMBRADO = ? ORDER BY TIPO_TIMBRADO", new Object[] { tipoTimbrado } );
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria 'FECHA_EMISION = :fechaEmision'.
	 */
	public EstatusAcuse[] findWhereFechaEmisionEquals(String fechaEmision) throws EstatusAcuseDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_EMISION = ? ORDER BY FECHA_EMISION", new Object[] { fechaEmision } );
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria 'MONTO_FACTURA = :montoFactura'.
	 */
	public EstatusAcuse[] findWhereMontoFacturaEquals(String montoFactura) throws EstatusAcuseDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONTO_FACTURA = ? ORDER BY MONTO_FACTURA", new Object[] { montoFactura } );
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria 'UUID = :uuid'.
	 */
	public EstatusAcuse[] findWhereUuidEquals(String uuid) throws EstatusAcuseDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UUID = ? ORDER BY UUID", new Object[] { uuid } );
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria 'RFC_EMISOR = :rfcEmisor'.
	 */
	public EstatusAcuse[] findWhereRfcEmisorEquals(String rfcEmisor) throws EstatusAcuseDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC_EMISOR = ? ORDER BY RFC_EMISOR", new Object[] { rfcEmisor } );
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria 'RFC_RECEPTOR = :rfcReceptor'.
	 */
	public EstatusAcuse[] findWhereRfcReceptorEquals(String rfcReceptor) throws EstatusAcuseDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC_RECEPTOR = ? ORDER BY RFC_RECEPTOR", new Object[] { rfcReceptor } );
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria 'FECHA_TIMBRADO = :fechaTimbrado'.
	 */
	public EstatusAcuse[] findWhereFechaTimbradoEquals(String fechaTimbrado) throws EstatusAcuseDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_TIMBRADO = ? ORDER BY FECHA_TIMBRADO", new Object[] { fechaTimbrado } );
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria 'CODIGO = :codigo'.
	 */
	public EstatusAcuse[] findWhereCodigoEquals(String codigo) throws EstatusAcuseDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGO = ? ORDER BY CODIGO", new Object[] { codigo } );
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public EstatusAcuse[] findWhereDescripcionEquals(String descripcion) throws EstatusAcuseDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION = ? ORDER BY DESCRIPCION", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria 'TIPO = :tipo'.
	 */
	public EstatusAcuse[] findWhereTipoEquals(String tipo) throws EstatusAcuseDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO = ? ORDER BY TIPO", new Object[] { tipo } );
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the criteria 'FECHA_ACUSE = :fechaAcuse'.
	 */
	public EstatusAcuse[] findWhereFechaAcuseEquals(String fechaAcuse) throws EstatusAcuseDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_ACUSE = ? ORDER BY FECHA_ACUSE", new Object[] { fechaAcuse } );
	}

	/**
	 * Method 'EstatusAcuseDaoImpl'
	 * 
	 */
	public EstatusAcuseDaoImpl()
	{
	}

	/**
	 * Method 'EstatusAcuseDaoImpl'
	 * 
	 * @param userConn
	 */
	public EstatusAcuseDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "ESTATUS_ACUSE";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected EstatusAcuse fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			EstatusAcuse dto = new EstatusAcuse();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected EstatusAcuse[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			EstatusAcuse dto = new EstatusAcuse();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		EstatusAcuse ret[] = new EstatusAcuse[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(EstatusAcuse dto, ResultSet rs) throws SQLException
	{
		dto.setIdAcuse( rs.getInt( COLUMN_ID_ACUSE ) );
		dto.setTipoTimbrado( rs.getString( COLUMN_TIPO_TIMBRADO ) );
		dto.setFechaEmision( rs.getString( COLUMN_FECHA_EMISION ) );
		dto.setMontoFactura( rs.getString( COLUMN_MONTO_FACTURA ) );
		dto.setUuid( rs.getString( COLUMN_UUID ) );
		dto.setRfcEmisor( rs.getString( COLUMN_RFC_EMISOR ) );
		dto.setRfcReceptor( rs.getString( COLUMN_RFC_RECEPTOR ) );
		dto.setFechaTimbrado( rs.getString( COLUMN_FECHA_TIMBRADO ) );
		dto.setCodigo( rs.getString( COLUMN_CODIGO ) );
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setTipo( rs.getString( COLUMN_TIPO ) );
		dto.setFechaAcuse( rs.getString( COLUMN_FECHA_ACUSE ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(EstatusAcuse dto)
	{
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the specified arbitrary SQL statement
	 */
	public EstatusAcuse[] findByDynamicSelect(String sql, Object[] sqlParams) throws EstatusAcuseDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EstatusAcuseDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the estatus_acuse table that match the specified arbitrary SQL statement
	 */
	public EstatusAcuse[] findByDynamicWhere(String sql, Object[] sqlParams) throws EstatusAcuseDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EstatusAcuseDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
