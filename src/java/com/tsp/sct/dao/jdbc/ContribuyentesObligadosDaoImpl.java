/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ContribuyentesObligadosDaoImpl extends AbstractDAO implements ContribuyentesObligadosDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_CONTRIBUYENTES_OBLIGADOS, RFC_CONTRIBUYENTE, VALIDEZ_OBLIGACIONES, ESTATUS_CERTIFICADO, NO_CERTIFICADO, FECHA_FINAL, FECHA_INICIO, FECHA_REGISTRO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_CONTRIBUYENTES_OBLIGADOS, RFC_CONTRIBUYENTE, VALIDEZ_OBLIGACIONES, ESTATUS_CERTIFICADO, NO_CERTIFICADO, FECHA_FINAL, FECHA_INICIO, FECHA_REGISTRO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_CONTRIBUYENTES_OBLIGADOS = ?, RFC_CONTRIBUYENTE = ?, VALIDEZ_OBLIGACIONES = ?, ESTATUS_CERTIFICADO = ?, NO_CERTIFICADO = ?, FECHA_FINAL = ?, FECHA_INICIO = ?, FECHA_REGISTRO = ? WHERE ID_CONTRIBUYENTES_OBLIGADOS = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_CONTRIBUYENTES_OBLIGADOS = ?";

	/** 
	 * Index of column ID_CONTRIBUYENTES_OBLIGADOS
	 */
	protected static final int COLUMN_ID_CONTRIBUYENTES_OBLIGADOS = 1;

	/** 
	 * Index of column RFC_CONTRIBUYENTE
	 */
	protected static final int COLUMN_RFC_CONTRIBUYENTE = 2;

	/** 
	 * Index of column VALIDEZ_OBLIGACIONES
	 */
	protected static final int COLUMN_VALIDEZ_OBLIGACIONES = 3;

	/** 
	 * Index of column ESTATUS_CERTIFICADO
	 */
	protected static final int COLUMN_ESTATUS_CERTIFICADO = 4;

	/** 
	 * Index of column NO_CERTIFICADO
	 */
	protected static final int COLUMN_NO_CERTIFICADO = 5;

	/** 
	 * Index of column FECHA_FINAL
	 */
	protected static final int COLUMN_FECHA_FINAL = 6;

	/** 
	 * Index of column FECHA_INICIO
	 */
	protected static final int COLUMN_FECHA_INICIO = 7;

	/** 
	 * Index of column FECHA_REGISTRO
	 */
	protected static final int COLUMN_FECHA_REGISTRO = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column ID_CONTRIBUYENTES_OBLIGADOS
	 */
	protected static final int PK_COLUMN_ID_CONTRIBUYENTES_OBLIGADOS = 1;

	/** 
	 * Inserts a new row in the contribuyentes_obligados table.
	 */
	public ContribuyentesObligadosPk insert(ContribuyentesObligados dto) throws ContribuyentesObligadosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getIdContribuyentesObligados() );
			stmt.setString( index++, dto.getRfcContribuyente() );
			if (dto.isValidezObligacionesNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getValidezObligaciones() );
			}
		
			stmt.setString( index++, dto.getEstatusCertificado() );
			stmt.setString( index++, dto.getNoCertificado() );
			stmt.setDate(index++, dto.getFechaFinal()==null ? null : new java.sql.Date( dto.getFechaFinal().getTime() ) );
			stmt.setDate(index++, dto.getFechaInicio()==null ? null : new java.sql.Date( dto.getFechaInicio().getTime() ) );
			stmt.setDate(index++, dto.getFechaRegistro()==null ? null : new java.sql.Date( dto.getFechaRegistro().getTime() ) );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdContribuyentesObligados( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContribuyentesObligadosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the contribuyentes_obligados table.
	 */
	public void update(ContribuyentesObligadosPk pk, ContribuyentesObligados dto) throws ContribuyentesObligadosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdContribuyentesObligados() );
			stmt.setString( index++, dto.getRfcContribuyente() );
			if (dto.isValidezObligacionesNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getValidezObligaciones() );
			}
		
			stmt.setString( index++, dto.getEstatusCertificado() );
			stmt.setString( index++, dto.getNoCertificado() );
			stmt.setDate(index++, dto.getFechaFinal()==null ? null : new java.sql.Date( dto.getFechaFinal().getTime() ) );
			stmt.setDate(index++, dto.getFechaInicio()==null ? null : new java.sql.Date( dto.getFechaInicio().getTime() ) );
			stmt.setDate(index++, dto.getFechaRegistro()==null ? null : new java.sql.Date( dto.getFechaRegistro().getTime() ) );
			stmt.setInt( 9, pk.getIdContribuyentesObligados() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContribuyentesObligadosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the contribuyentes_obligados table.
	 */
	public void delete(ContribuyentesObligadosPk pk) throws ContribuyentesObligadosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdContribuyentesObligados() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContribuyentesObligadosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the contribuyentes_obligados table that matches the specified primary-key value.
	 */
	public ContribuyentesObligados findByPrimaryKey(ContribuyentesObligadosPk pk) throws ContribuyentesObligadosDaoException
	{
		return findByPrimaryKey( pk.getIdContribuyentesObligados() );
	}

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'ID_CONTRIBUYENTES_OBLIGADOS = :idContribuyentesObligados'.
	 */
	public ContribuyentesObligados findByPrimaryKey(int idContribuyentesObligados) throws ContribuyentesObligadosDaoException
	{
		ContribuyentesObligados ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_CONTRIBUYENTES_OBLIGADOS = ?", new Object[] {  new Integer(idContribuyentesObligados) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria ''.
	 */
	public ContribuyentesObligados[] findAll() throws ContribuyentesObligadosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_CONTRIBUYENTES_OBLIGADOS", null );
	}

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'ID_CONTRIBUYENTES_OBLIGADOS = :idContribuyentesObligados'.
	 */
	public ContribuyentesObligados[] findWhereIdContribuyentesObligadosEquals(int idContribuyentesObligados) throws ContribuyentesObligadosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONTRIBUYENTES_OBLIGADOS = ? ORDER BY ID_CONTRIBUYENTES_OBLIGADOS", new Object[] {  new Integer(idContribuyentesObligados) } );
	}

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'RFC_CONTRIBUYENTE = :rfcContribuyente'.
	 */
	public ContribuyentesObligados[] findWhereRfcContribuyenteEquals(String rfcContribuyente) throws ContribuyentesObligadosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC_CONTRIBUYENTE = ? ORDER BY RFC_CONTRIBUYENTE", new Object[] { rfcContribuyente } );
	}

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'VALIDEZ_OBLIGACIONES = :validezObligaciones'.
	 */
	public ContribuyentesObligados[] findWhereValidezObligacionesEquals(int validezObligaciones) throws ContribuyentesObligadosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VALIDEZ_OBLIGACIONES = ? ORDER BY VALIDEZ_OBLIGACIONES", new Object[] {  new Integer(validezObligaciones) } );
	}

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'ESTATUS_CERTIFICADO = :estatusCertificado'.
	 */
	public ContribuyentesObligados[] findWhereEstatusCertificadoEquals(String estatusCertificado) throws ContribuyentesObligadosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTATUS_CERTIFICADO = ? ORDER BY ESTATUS_CERTIFICADO", new Object[] { estatusCertificado } );
	}

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'NO_CERTIFICADO = :noCertificado'.
	 */
	public ContribuyentesObligados[] findWhereNoCertificadoEquals(String noCertificado) throws ContribuyentesObligadosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NO_CERTIFICADO = ? ORDER BY NO_CERTIFICADO", new Object[] { noCertificado } );
	}

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'FECHA_FINAL = :fechaFinal'.
	 */
	public ContribuyentesObligados[] findWhereFechaFinalEquals(Date fechaFinal) throws ContribuyentesObligadosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_FINAL = ? ORDER BY FECHA_FINAL", new Object[] { fechaFinal==null ? null : new java.sql.Date( fechaFinal.getTime() ) } );
	}

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'FECHA_INICIO = :fechaInicio'.
	 */
	public ContribuyentesObligados[] findWhereFechaInicioEquals(Date fechaInicio) throws ContribuyentesObligadosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_INICIO = ? ORDER BY FECHA_INICIO", new Object[] { fechaInicio==null ? null : new java.sql.Date( fechaInicio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'FECHA_REGISTRO = :fechaRegistro'.
	 */
	public ContribuyentesObligados[] findWhereFechaRegistroEquals(Date fechaRegistro) throws ContribuyentesObligadosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_REGISTRO = ? ORDER BY FECHA_REGISTRO", new Object[] { fechaRegistro==null ? null : new java.sql.Date( fechaRegistro.getTime() ) } );
	}

	/**
	 * Method 'ContribuyentesObligadosDaoImpl'
	 * 
	 */
	public ContribuyentesObligadosDaoImpl()
	{
	}

	/**
	 * Method 'ContribuyentesObligadosDaoImpl'
	 * 
	 * @param userConn
	 */
	public ContribuyentesObligadosDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CONTRIBUYENTES_OBLIGADOS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ContribuyentesObligados fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ContribuyentesObligados dto = new ContribuyentesObligados();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ContribuyentesObligados[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ContribuyentesObligados dto = new ContribuyentesObligados();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ContribuyentesObligados ret[] = new ContribuyentesObligados[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ContribuyentesObligados dto, ResultSet rs) throws SQLException
	{
		dto.setIdContribuyentesObligados( rs.getInt( COLUMN_ID_CONTRIBUYENTES_OBLIGADOS ) );
		dto.setRfcContribuyente( rs.getString( COLUMN_RFC_CONTRIBUYENTE ) );
		dto.setValidezObligaciones( rs.getInt( COLUMN_VALIDEZ_OBLIGACIONES ) );
		if (rs.wasNull()) {
			dto.setValidezObligacionesNull( true );
		}
		
		dto.setEstatusCertificado( rs.getString( COLUMN_ESTATUS_CERTIFICADO ) );
		dto.setNoCertificado( rs.getString( COLUMN_NO_CERTIFICADO ) );
		dto.setFechaFinal( rs.getDate(COLUMN_FECHA_FINAL ) );
		dto.setFechaInicio( rs.getDate(COLUMN_FECHA_INICIO ) );
		dto.setFechaRegistro( rs.getDate(COLUMN_FECHA_REGISTRO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ContribuyentesObligados dto)
	{
	}

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the specified arbitrary SQL statement
	 */
	public ContribuyentesObligados[] findByDynamicSelect(String sql, Object[] sqlParams) throws ContribuyentesObligadosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContribuyentesObligadosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the specified arbitrary SQL statement
	 */
	public ContribuyentesObligados[] findByDynamicWhere(String sql, Object[] sqlParams) throws ContribuyentesObligadosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContribuyentesObligadosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
