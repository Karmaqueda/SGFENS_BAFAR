/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SmsEnvioDetalleDaoImpl extends AbstractDAO implements SmsEnvioDetalleDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_sms_envio_detalle, id_sms_envio_lote, fecha_hr_creacion, fecha_hr_envio, enviado, intentos_fallidos, asunto, mensaje, heredar_mensaje_lote, num_partes_sms, numero_celular, dest_id_cliente, dest_id_prospecto, dest_id_empleado, dest_id_empresa, dest_id_sms_agenda_dest, id_estatus, id_empresa, id_sms_dispositivo_ejecuto FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_sms_envio_detalle, id_sms_envio_lote, fecha_hr_creacion, fecha_hr_envio, enviado, intentos_fallidos, asunto, mensaje, heredar_mensaje_lote, num_partes_sms, numero_celular, dest_id_cliente, dest_id_prospecto, dest_id_empleado, dest_id_empresa, dest_id_sms_agenda_dest, id_estatus, id_empresa, id_sms_dispositivo_ejecuto ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_sms_envio_detalle = ?, id_sms_envio_lote = ?, fecha_hr_creacion = ?, fecha_hr_envio = ?, enviado = ?, intentos_fallidos = ?, asunto = ?, mensaje = ?, heredar_mensaje_lote = ?, num_partes_sms = ?, numero_celular = ?, dest_id_cliente = ?, dest_id_prospecto = ?, dest_id_empleado = ?, dest_id_empresa = ?, dest_id_sms_agenda_dest = ?, id_estatus = ?, id_empresa = ?, id_sms_dispositivo_ejecuto = ? WHERE id_sms_envio_detalle = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_sms_envio_detalle = ?";

	/** 
	 * Index of column id_sms_envio_detalle
	 */
	protected static final int COLUMN_ID_SMS_ENVIO_DETALLE = 1;

	/** 
	 * Index of column id_sms_envio_lote
	 */
	protected static final int COLUMN_ID_SMS_ENVIO_LOTE = 2;

	/** 
	 * Index of column fecha_hr_creacion
	 */
	protected static final int COLUMN_FECHA_HR_CREACION = 3;

	/** 
	 * Index of column fecha_hr_envio
	 */
	protected static final int COLUMN_FECHA_HR_ENVIO = 4;

	/** 
	 * Index of column enviado
	 */
	protected static final int COLUMN_ENVIADO = 5;

	/** 
	 * Index of column intentos_fallidos
	 */
	protected static final int COLUMN_INTENTOS_FALLIDOS = 6;

	/** 
	 * Index of column asunto
	 */
	protected static final int COLUMN_ASUNTO = 7;

	/** 
	 * Index of column mensaje
	 */
	protected static final int COLUMN_MENSAJE = 8;

	/** 
	 * Index of column heredar_mensaje_lote
	 */
	protected static final int COLUMN_HEREDAR_MENSAJE_LOTE = 9;

	/** 
	 * Index of column num_partes_sms
	 */
	protected static final int COLUMN_NUM_PARTES_SMS = 10;

	/** 
	 * Index of column numero_celular
	 */
	protected static final int COLUMN_NUMERO_CELULAR = 11;

	/** 
	 * Index of column dest_id_cliente
	 */
	protected static final int COLUMN_DEST_ID_CLIENTE = 12;

	/** 
	 * Index of column dest_id_prospecto
	 */
	protected static final int COLUMN_DEST_ID_PROSPECTO = 13;

	/** 
	 * Index of column dest_id_empleado
	 */
	protected static final int COLUMN_DEST_ID_EMPLEADO = 14;

	/** 
	 * Index of column dest_id_empresa
	 */
	protected static final int COLUMN_DEST_ID_EMPRESA = 15;

	/** 
	 * Index of column dest_id_sms_agenda_dest
	 */
	protected static final int COLUMN_DEST_ID_SMS_AGENDA_DEST = 16;

	/** 
	 * Index of column id_estatus
	 */
	protected static final int COLUMN_ID_ESTATUS = 17;

	/** 
	 * Index of column id_empresa
	 */
	protected static final int COLUMN_ID_EMPRESA = 18;

	/** 
	 * Index of column id_sms_dispositivo_ejecuto
	 */
	protected static final int COLUMN_ID_SMS_DISPOSITIVO_EJECUTO = 19;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 19;

	/** 
	 * Index of primary-key column id_sms_envio_detalle
	 */
	protected static final int PK_COLUMN_ID_SMS_ENVIO_DETALLE = 1;

	/** 
	 * Inserts a new row in the sms_envio_detalle table.
	 */
	public SmsEnvioDetallePk insert(SmsEnvioDetalle dto) throws SmsEnvioDetalleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdSmsEnvioDetalleModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_envio_detalle" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSmsEnvioLoteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_envio_lote" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrCreacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_creacion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrEnvioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_envio" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEnviadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "enviado" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIntentosFallidosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "intentos_fallidos" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAsuntoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "asunto" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isHeredarMensajeLoteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "heredar_mensaje_lote" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumPartesSmsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "num_partes_sms" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumeroCelularModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "numero_celular" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDestIdClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "dest_id_cliente" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDestIdProspectoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "dest_id_prospecto" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDestIdEmpleadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "dest_id_empleado" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDestIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "dest_id_empresa" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDestIdSmsAgendaDestModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "dest_id_sms_agenda_dest" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_estatus" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_empresa" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSmsDispositivoEjecutoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_dispositivo_ejecuto" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdSmsEnvioDetalleModified()) {
				stmt.setInt( index++, dto.getIdSmsEnvioDetalle() );
			}
		
			if (dto.isIdSmsEnvioLoteModified()) {
				if (dto.isIdSmsEnvioLoteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsEnvioLote() );
				}
		
			}
		
			if (dto.isFechaHrCreacionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaHrCreacion().getTime() ) );
			}
		
			if (dto.isFechaHrEnvioModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrEnvio()==null ? null : new java.sql.Timestamp( dto.getFechaHrEnvio().getTime() ) );
			}
		
			if (dto.isEnviadoModified()) {
				stmt.setInt( index++, dto.getEnviado() );
			}
		
			if (dto.isIntentosFallidosModified()) {
				stmt.setInt( index++, dto.getIntentosFallidos() );
			}
		
			if (dto.isAsuntoModified()) {
				stmt.setString( index++, dto.getAsunto() );
			}
		
			if (dto.isMensajeModified()) {
				stmt.setString( index++, dto.getMensaje() );
			}
		
			if (dto.isHeredarMensajeLoteModified()) {
				if (dto.isHeredarMensajeLoteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getHeredarMensajeLote() );
				}
		
			}
		
			if (dto.isNumPartesSmsModified()) {
				stmt.setInt( index++, dto.getNumPartesSms() );
			}
		
			if (dto.isNumeroCelularModified()) {
				stmt.setString( index++, dto.getNumeroCelular() );
			}
		
			if (dto.isDestIdClienteModified()) {
				if (dto.isDestIdClienteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDestIdCliente() );
				}
		
			}
		
			if (dto.isDestIdProspectoModified()) {
				if (dto.isDestIdProspectoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDestIdProspecto() );
				}
		
			}
		
			if (dto.isDestIdEmpleadoModified()) {
				if (dto.isDestIdEmpleadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDestIdEmpleado() );
				}
		
			}
		
			if (dto.isDestIdEmpresaModified()) {
				if (dto.isDestIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDestIdEmpresa() );
				}
		
			}
		
			if (dto.isDestIdSmsAgendaDestModified()) {
				if (dto.isDestIdSmsAgendaDestNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDestIdSmsAgendaDest() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdSmsDispositivoEjecutoModified()) {
				if (dto.isIdSmsDispositivoEjecutoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsDispositivoEjecuto() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdSmsEnvioDetalle( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEnvioDetalleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sms_envio_detalle table.
	 */
	public void update(SmsEnvioDetallePk pk, SmsEnvioDetalle dto) throws SmsEnvioDetalleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdSmsEnvioDetalleModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_envio_detalle=?" );
				modified=true;
			}
		
			if (dto.isIdSmsEnvioLoteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_envio_lote=?" );
				modified=true;
			}
		
			if (dto.isFechaHrCreacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_creacion=?" );
				modified=true;
			}
		
			if (dto.isFechaHrEnvioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_envio=?" );
				modified=true;
			}
		
			if (dto.isEnviadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "enviado=?" );
				modified=true;
			}
		
			if (dto.isIntentosFallidosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "intentos_fallidos=?" );
				modified=true;
			}
		
			if (dto.isAsuntoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "asunto=?" );
				modified=true;
			}
		
			if (dto.isMensajeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje=?" );
				modified=true;
			}
		
			if (dto.isHeredarMensajeLoteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "heredar_mensaje_lote=?" );
				modified=true;
			}
		
			if (dto.isNumPartesSmsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "num_partes_sms=?" );
				modified=true;
			}
		
			if (dto.isNumeroCelularModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "numero_celular=?" );
				modified=true;
			}
		
			if (dto.isDestIdClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "dest_id_cliente=?" );
				modified=true;
			}
		
			if (dto.isDestIdProspectoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "dest_id_prospecto=?" );
				modified=true;
			}
		
			if (dto.isDestIdEmpleadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "dest_id_empleado=?" );
				modified=true;
			}
		
			if (dto.isDestIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "dest_id_empresa=?" );
				modified=true;
			}
		
			if (dto.isDestIdSmsAgendaDestModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "dest_id_sms_agenda_dest=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_estatus=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_empresa=?" );
				modified=true;
			}
		
			if (dto.isIdSmsDispositivoEjecutoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_dispositivo_ejecuto=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_sms_envio_detalle=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdSmsEnvioDetalleModified()) {
				stmt.setInt( index++, dto.getIdSmsEnvioDetalle() );
			}
		
			if (dto.isIdSmsEnvioLoteModified()) {
				if (dto.isIdSmsEnvioLoteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsEnvioLote() );
				}
		
			}
		
			if (dto.isFechaHrCreacionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaHrCreacion().getTime() ) );
			}
		
			if (dto.isFechaHrEnvioModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrEnvio()==null ? null : new java.sql.Timestamp( dto.getFechaHrEnvio().getTime() ) );
			}
		
			if (dto.isEnviadoModified()) {
				stmt.setInt( index++, dto.getEnviado() );
			}
		
			if (dto.isIntentosFallidosModified()) {
				stmt.setInt( index++, dto.getIntentosFallidos() );
			}
		
			if (dto.isAsuntoModified()) {
				stmt.setString( index++, dto.getAsunto() );
			}
		
			if (dto.isMensajeModified()) {
				stmt.setString( index++, dto.getMensaje() );
			}
		
			if (dto.isHeredarMensajeLoteModified()) {
				if (dto.isHeredarMensajeLoteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getHeredarMensajeLote() );
				}
		
			}
		
			if (dto.isNumPartesSmsModified()) {
				stmt.setInt( index++, dto.getNumPartesSms() );
			}
		
			if (dto.isNumeroCelularModified()) {
				stmt.setString( index++, dto.getNumeroCelular() );
			}
		
			if (dto.isDestIdClienteModified()) {
				if (dto.isDestIdClienteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDestIdCliente() );
				}
		
			}
		
			if (dto.isDestIdProspectoModified()) {
				if (dto.isDestIdProspectoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDestIdProspecto() );
				}
		
			}
		
			if (dto.isDestIdEmpleadoModified()) {
				if (dto.isDestIdEmpleadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDestIdEmpleado() );
				}
		
			}
		
			if (dto.isDestIdEmpresaModified()) {
				if (dto.isDestIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDestIdEmpresa() );
				}
		
			}
		
			if (dto.isDestIdSmsAgendaDestModified()) {
				if (dto.isDestIdSmsAgendaDestNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDestIdSmsAgendaDest() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdSmsDispositivoEjecutoModified()) {
				if (dto.isIdSmsDispositivoEjecutoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsDispositivoEjecuto() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdSmsEnvioDetalle() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEnvioDetalleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sms_envio_detalle table.
	 */
	public void delete(SmsEnvioDetallePk pk) throws SmsEnvioDetalleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdSmsEnvioDetalle() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEnvioDetalleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sms_envio_detalle table that matches the specified primary-key value.
	 */
	public SmsEnvioDetalle findByPrimaryKey(SmsEnvioDetallePk pk) throws SmsEnvioDetalleDaoException
	{
		return findByPrimaryKey( pk.getIdSmsEnvioDetalle() );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'id_sms_envio_detalle = :idSmsEnvioDetalle'.
	 */
	public SmsEnvioDetalle findByPrimaryKey(int idSmsEnvioDetalle) throws SmsEnvioDetalleDaoException
	{
		SmsEnvioDetalle ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_sms_envio_detalle = ?", new Object[] {  new Integer(idSmsEnvioDetalle) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria ''.
	 */
	public SmsEnvioDetalle[] findAll() throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_sms_envio_detalle", null );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'id_sms_envio_detalle = :idSmsEnvioDetalle'.
	 */
	public SmsEnvioDetalle[] findWhereIdSmsEnvioDetalleEquals(int idSmsEnvioDetalle) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_envio_detalle = ? ORDER BY id_sms_envio_detalle", new Object[] {  new Integer(idSmsEnvioDetalle) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'id_sms_envio_lote = :idSmsEnvioLote'.
	 */
	public SmsEnvioDetalle[] findWhereIdSmsEnvioLoteEquals(int idSmsEnvioLote) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_envio_lote = ? ORDER BY id_sms_envio_lote", new Object[] {  new Integer(idSmsEnvioLote) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'fecha_hr_creacion = :fechaHrCreacion'.
	 */
	public SmsEnvioDetalle[] findWhereFechaHrCreacionEquals(Date fechaHrCreacion) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_creacion = ? ORDER BY fecha_hr_creacion", new Object[] { fechaHrCreacion==null ? null : new java.sql.Timestamp( fechaHrCreacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'fecha_hr_envio = :fechaHrEnvio'.
	 */
	public SmsEnvioDetalle[] findWhereFechaHrEnvioEquals(Date fechaHrEnvio) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_envio = ? ORDER BY fecha_hr_envio", new Object[] { fechaHrEnvio==null ? null : new java.sql.Timestamp( fechaHrEnvio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'enviado = :enviado'.
	 */
	public SmsEnvioDetalle[] findWhereEnviadoEquals(int enviado) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE enviado = ? ORDER BY enviado", new Object[] {  new Integer(enviado) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'intentos_fallidos = :intentosFallidos'.
	 */
	public SmsEnvioDetalle[] findWhereIntentosFallidosEquals(int intentosFallidos) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE intentos_fallidos = ? ORDER BY intentos_fallidos", new Object[] {  new Integer(intentosFallidos) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'asunto = :asunto'.
	 */
	public SmsEnvioDetalle[] findWhereAsuntoEquals(String asunto) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE asunto = ? ORDER BY asunto", new Object[] { asunto } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'mensaje = :mensaje'.
	 */
	public SmsEnvioDetalle[] findWhereMensajeEquals(String mensaje) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje = ? ORDER BY mensaje", new Object[] { mensaje } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'heredar_mensaje_lote = :heredarMensajeLote'.
	 */
	public SmsEnvioDetalle[] findWhereHeredarMensajeLoteEquals(int heredarMensajeLote) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE heredar_mensaje_lote = ? ORDER BY heredar_mensaje_lote", new Object[] {  new Integer(heredarMensajeLote) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'num_partes_sms = :numPartesSms'.
	 */
	public SmsEnvioDetalle[] findWhereNumPartesSmsEquals(int numPartesSms) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE num_partes_sms = ? ORDER BY num_partes_sms", new Object[] {  new Integer(numPartesSms) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'numero_celular = :numeroCelular'.
	 */
	public SmsEnvioDetalle[] findWhereNumeroCelularEquals(String numeroCelular) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE numero_celular = ? ORDER BY numero_celular", new Object[] { numeroCelular } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'dest_id_cliente = :destIdCliente'.
	 */
	public SmsEnvioDetalle[] findWhereDestIdClienteEquals(int destIdCliente) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dest_id_cliente = ? ORDER BY dest_id_cliente", new Object[] {  new Integer(destIdCliente) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'dest_id_prospecto = :destIdProspecto'.
	 */
	public SmsEnvioDetalle[] findWhereDestIdProspectoEquals(int destIdProspecto) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dest_id_prospecto = ? ORDER BY dest_id_prospecto", new Object[] {  new Integer(destIdProspecto) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'dest_id_empleado = :destIdEmpleado'.
	 */
	public SmsEnvioDetalle[] findWhereDestIdEmpleadoEquals(int destIdEmpleado) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dest_id_empleado = ? ORDER BY dest_id_empleado", new Object[] {  new Integer(destIdEmpleado) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'dest_id_empresa = :destIdEmpresa'.
	 */
	public SmsEnvioDetalle[] findWhereDestIdEmpresaEquals(int destIdEmpresa) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dest_id_empresa = ? ORDER BY dest_id_empresa", new Object[] {  new Integer(destIdEmpresa) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'dest_id_sms_agenda_dest = :destIdSmsAgendaDest'.
	 */
	public SmsEnvioDetalle[] findWhereDestIdSmsAgendaDestEquals(int destIdSmsAgendaDest) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dest_id_sms_agenda_dest = ? ORDER BY dest_id_sms_agenda_dest", new Object[] {  new Integer(destIdSmsAgendaDest) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public SmsEnvioDetalle[] findWhereIdEstatusEquals(int idEstatus) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_estatus = ? ORDER BY id_estatus", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public SmsEnvioDetalle[] findWhereIdEmpresaEquals(int idEmpresa) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_empresa = ? ORDER BY id_empresa", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the criteria 'id_sms_dispositivo_ejecuto = :idSmsDispositivoEjecuto'.
	 */
	public SmsEnvioDetalle[] findWhereIdSmsDispositivoEjecutoEquals(int idSmsDispositivoEjecuto) throws SmsEnvioDetalleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_dispositivo_ejecuto = ? ORDER BY id_sms_dispositivo_ejecuto", new Object[] {  new Integer(idSmsDispositivoEjecuto) } );
	}

	/**
	 * Method 'SmsEnvioDetalleDaoImpl'
	 * 
	 */
	public SmsEnvioDetalleDaoImpl()
	{
	}

	/**
	 * Method 'SmsEnvioDetalleDaoImpl'
	 * 
	 * @param userConn
	 */
	public SmsEnvioDetalleDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sms_envio_detalle";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SmsEnvioDetalle fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SmsEnvioDetalle dto = new SmsEnvioDetalle();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SmsEnvioDetalle[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SmsEnvioDetalle dto = new SmsEnvioDetalle();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SmsEnvioDetalle ret[] = new SmsEnvioDetalle[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SmsEnvioDetalle dto, ResultSet rs) throws SQLException
	{
		dto.setIdSmsEnvioDetalle( rs.getInt( COLUMN_ID_SMS_ENVIO_DETALLE ) );
		dto.setIdSmsEnvioLote( rs.getInt( COLUMN_ID_SMS_ENVIO_LOTE ) );
		if (rs.wasNull()) {
			dto.setIdSmsEnvioLoteNull( true );
		}
		
		dto.setFechaHrCreacion( rs.getTimestamp(COLUMN_FECHA_HR_CREACION ) );
		dto.setFechaHrEnvio( rs.getTimestamp(COLUMN_FECHA_HR_ENVIO ) );
		dto.setEnviado( rs.getInt( COLUMN_ENVIADO ) );
		dto.setIntentosFallidos( rs.getInt( COLUMN_INTENTOS_FALLIDOS ) );
		dto.setAsunto( rs.getString( COLUMN_ASUNTO ) );
		dto.setMensaje( rs.getString( COLUMN_MENSAJE ) );
		dto.setHeredarMensajeLote( rs.getInt( COLUMN_HEREDAR_MENSAJE_LOTE ) );
		if (rs.wasNull()) {
			dto.setHeredarMensajeLoteNull( true );
		}
		
		dto.setNumPartesSms( rs.getInt( COLUMN_NUM_PARTES_SMS ) );
		dto.setNumeroCelular( rs.getString( COLUMN_NUMERO_CELULAR ) );
		dto.setDestIdCliente( rs.getInt( COLUMN_DEST_ID_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setDestIdClienteNull( true );
		}
		
		dto.setDestIdProspecto( rs.getInt( COLUMN_DEST_ID_PROSPECTO ) );
		if (rs.wasNull()) {
			dto.setDestIdProspectoNull( true );
		}
		
		dto.setDestIdEmpleado( rs.getInt( COLUMN_DEST_ID_EMPLEADO ) );
		if (rs.wasNull()) {
			dto.setDestIdEmpleadoNull( true );
		}
		
		dto.setDestIdEmpresa( rs.getInt( COLUMN_DEST_ID_EMPRESA ) );
		if (rs.wasNull()) {
			dto.setDestIdEmpresaNull( true );
		}
		
		dto.setDestIdSmsAgendaDest( rs.getInt( COLUMN_DEST_ID_SMS_AGENDA_DEST ) );
		if (rs.wasNull()) {
			dto.setDestIdSmsAgendaDestNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		if (rs.wasNull()) {
			dto.setIdEmpresaNull( true );
		}
		
		dto.setIdSmsDispositivoEjecuto( rs.getInt( COLUMN_ID_SMS_DISPOSITIVO_EJECUTO ) );
		if (rs.wasNull()) {
			dto.setIdSmsDispositivoEjecutoNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SmsEnvioDetalle dto)
	{
		dto.setIdSmsEnvioDetalleModified( false );
		dto.setIdSmsEnvioLoteModified( false );
		dto.setFechaHrCreacionModified( false );
		dto.setFechaHrEnvioModified( false );
		dto.setEnviadoModified( false );
		dto.setIntentosFallidosModified( false );
		dto.setAsuntoModified( false );
		dto.setMensajeModified( false );
		dto.setHeredarMensajeLoteModified( false );
		dto.setNumPartesSmsModified( false );
		dto.setNumeroCelularModified( false );
		dto.setDestIdClienteModified( false );
		dto.setDestIdProspectoModified( false );
		dto.setDestIdEmpleadoModified( false );
		dto.setDestIdEmpresaModified( false );
		dto.setDestIdSmsAgendaDestModified( false );
		dto.setIdEstatusModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdSmsDispositivoEjecutoModified( false );
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the specified arbitrary SQL statement
	 */
	public SmsEnvioDetalle[] findByDynamicSelect(String sql, Object[] sqlParams) throws SmsEnvioDetalleDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEnvioDetalleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sms_envio_detalle table that match the specified arbitrary SQL statement
	 */
	public SmsEnvioDetalle[] findByDynamicWhere(String sql, Object[] sqlParams) throws SmsEnvioDetalleDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEnvioDetalleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
