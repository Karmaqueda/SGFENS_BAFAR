/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ComprobanteRecepcionDaoImpl extends AbstractDAO implements ComprobanteRecepcionDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_COMPROBANTE_RECEPCION, ID_EMPRESA, ID_PROVEEDORES, FOLIO, TOTAL, ARCHIVO_XML, FECHA_INGRESO, FECHA_EXPEDICION, V3 FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_COMPROBANTE_RECEPCION, ID_EMPRESA, ID_PROVEEDORES, FOLIO, TOTAL, ARCHIVO_XML, FECHA_INGRESO, FECHA_EXPEDICION, V3 ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_COMPROBANTE_RECEPCION = ?, ID_EMPRESA = ?, ID_PROVEEDORES = ?, FOLIO = ?, TOTAL = ?, ARCHIVO_XML = ?, FECHA_INGRESO = ?, FECHA_EXPEDICION = ?, V3 = ? WHERE ID_COMPROBANTE_RECEPCION = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_COMPROBANTE_RECEPCION = ?";

	/** 
	 * Index of column ID_COMPROBANTE_RECEPCION
	 */
	protected static final int COLUMN_ID_COMPROBANTE_RECEPCION = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column ID_PROVEEDORES
	 */
	protected static final int COLUMN_ID_PROVEEDORES = 3;

	/** 
	 * Index of column FOLIO
	 */
	protected static final int COLUMN_FOLIO = 4;

	/** 
	 * Index of column TOTAL
	 */
	protected static final int COLUMN_TOTAL = 5;

	/** 
	 * Index of column ARCHIVO_XML
	 */
	protected static final int COLUMN_ARCHIVO_XML = 6;

	/** 
	 * Index of column FECHA_INGRESO
	 */
	protected static final int COLUMN_FECHA_INGRESO = 7;

	/** 
	 * Index of column FECHA_EXPEDICION
	 */
	protected static final int COLUMN_FECHA_EXPEDICION = 8;

	/** 
	 * Index of column V3
	 */
	protected static final int COLUMN_V3 = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column ID_COMPROBANTE_RECEPCION
	 */
	protected static final int PK_COLUMN_ID_COMPROBANTE_RECEPCION = 1;

	/** 
	 * Inserts a new row in the comprobante_recepcion table.
	 */
	public ComprobanteRecepcionPk insert(ComprobanteRecepcion dto) throws ComprobanteRecepcionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getIdComprobanteRecepcion() );
			stmt.setInt( index++, dto.getIdEmpresa() );
			stmt.setInt( index++, dto.getIdProveedores() );
			stmt.setString( index++, dto.getFolio() );
			if (dto.isTotalNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getTotal() );
			}
		
			stmt.setString( index++, dto.getArchivoXml() );
			stmt.setDate(index++, dto.getFechaIngreso()==null ? null : new java.sql.Date( dto.getFechaIngreso().getTime() ) );
			stmt.setDate(index++, dto.getFechaExpedicion()==null ? null : new java.sql.Date( dto.getFechaExpedicion().getTime() ) );
			stmt.setString( index++, dto.getV3() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteRecepcionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the comprobante_recepcion table.
	 */
	public void update(ComprobanteRecepcionPk pk, ComprobanteRecepcion dto) throws ComprobanteRecepcionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdComprobanteRecepcion() );
			stmt.setInt( index++, dto.getIdEmpresa() );
			stmt.setInt( index++, dto.getIdProveedores() );
			stmt.setString( index++, dto.getFolio() );
			if (dto.isTotalNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getTotal() );
			}
		
			stmt.setString( index++, dto.getArchivoXml() );
			stmt.setDate(index++, dto.getFechaIngreso()==null ? null : new java.sql.Date( dto.getFechaIngreso().getTime() ) );
			stmt.setDate(index++, dto.getFechaExpedicion()==null ? null : new java.sql.Date( dto.getFechaExpedicion().getTime() ) );
			stmt.setString( index++, dto.getV3() );
			stmt.setInt( 10, pk.getIdComprobanteRecepcion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteRecepcionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the comprobante_recepcion table.
	 */
	public void delete(ComprobanteRecepcionPk pk) throws ComprobanteRecepcionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdComprobanteRecepcion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteRecepcionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the comprobante_recepcion table that matches the specified primary-key value.
	 */
	public ComprobanteRecepcion findByPrimaryKey(ComprobanteRecepcionPk pk) throws ComprobanteRecepcionDaoException
	{
		return findByPrimaryKey( pk.getIdComprobanteRecepcion() );
	}

	/** 
	 * Returns all rows from the comprobante_recepcion table that match the criteria 'ID_COMPROBANTE_RECEPCION = :idComprobanteRecepcion'.
	 */
	public ComprobanteRecepcion findByPrimaryKey(int idComprobanteRecepcion) throws ComprobanteRecepcionDaoException
	{
		ComprobanteRecepcion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_RECEPCION = ?", new Object[] {  new Integer(idComprobanteRecepcion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the comprobante_recepcion table that match the criteria ''.
	 */
	public ComprobanteRecepcion[] findAll() throws ComprobanteRecepcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_COMPROBANTE_RECEPCION", null );
	}

	/** 
	 * Returns all rows from the comprobante_recepcion table that match the criteria 'ID_COMPROBANTE_RECEPCION = :idComprobanteRecepcion'.
	 */
	public ComprobanteRecepcion[] findWhereIdComprobanteRecepcionEquals(int idComprobanteRecepcion) throws ComprobanteRecepcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_RECEPCION = ? ORDER BY ID_COMPROBANTE_RECEPCION", new Object[] {  new Integer(idComprobanteRecepcion) } );
	}

	/** 
	 * Returns all rows from the comprobante_recepcion table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public ComprobanteRecepcion[] findWhereIdEmpresaEquals(int idEmpresa) throws ComprobanteRecepcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the comprobante_recepcion table that match the criteria 'ID_PROVEEDORES = :idProveedores'.
	 */
	public ComprobanteRecepcion[] findWhereIdProveedoresEquals(int idProveedores) throws ComprobanteRecepcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PROVEEDORES = ? ORDER BY ID_PROVEEDORES", new Object[] {  new Integer(idProveedores) } );
	}

	/** 
	 * Returns all rows from the comprobante_recepcion table that match the criteria 'FOLIO = :folio'.
	 */
	public ComprobanteRecepcion[] findWhereFolioEquals(String folio) throws ComprobanteRecepcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO = ? ORDER BY FOLIO", new Object[] { folio } );
	}

	/** 
	 * Returns all rows from the comprobante_recepcion table that match the criteria 'TOTAL = :total'.
	 */
	public ComprobanteRecepcion[] findWhereTotalEquals(float total) throws ComprobanteRecepcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TOTAL = ? ORDER BY TOTAL", new Object[] {  new Float(total) } );
	}

	/** 
	 * Returns all rows from the comprobante_recepcion table that match the criteria 'ARCHIVO_XML = :archivoXml'.
	 */
	public ComprobanteRecepcion[] findWhereArchivoXmlEquals(String archivoXml) throws ComprobanteRecepcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ARCHIVO_XML = ? ORDER BY ARCHIVO_XML", new Object[] { archivoXml } );
	}

	/** 
	 * Returns all rows from the comprobante_recepcion table that match the criteria 'FECHA_INGRESO = :fechaIngreso'.
	 */
	public ComprobanteRecepcion[] findWhereFechaIngresoEquals(Date fechaIngreso) throws ComprobanteRecepcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_INGRESO = ? ORDER BY FECHA_INGRESO", new Object[] { fechaIngreso==null ? null : new java.sql.Date( fechaIngreso.getTime() ) } );
	}

	/** 
	 * Returns all rows from the comprobante_recepcion table that match the criteria 'FECHA_EXPEDICION = :fechaExpedicion'.
	 */
	public ComprobanteRecepcion[] findWhereFechaExpedicionEquals(Date fechaExpedicion) throws ComprobanteRecepcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_EXPEDICION = ? ORDER BY FECHA_EXPEDICION", new Object[] { fechaExpedicion==null ? null : new java.sql.Date( fechaExpedicion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the comprobante_recepcion table that match the criteria 'V3 = :v3'.
	 */
	public ComprobanteRecepcion[] findWhereV3Equals(String v3) throws ComprobanteRecepcionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE V3 = ? ORDER BY V3", new Object[] { v3 } );
	}

	/**
	 * Method 'ComprobanteRecepcionDaoImpl'
	 * 
	 */
	public ComprobanteRecepcionDaoImpl()
	{
	}

	/**
	 * Method 'ComprobanteRecepcionDaoImpl'
	 * 
	 * @param userConn
	 */
	public ComprobanteRecepcionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "COMPROBANTE_RECEPCION";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ComprobanteRecepcion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ComprobanteRecepcion dto = new ComprobanteRecepcion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ComprobanteRecepcion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ComprobanteRecepcion dto = new ComprobanteRecepcion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ComprobanteRecepcion ret[] = new ComprobanteRecepcion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ComprobanteRecepcion dto, ResultSet rs) throws SQLException
	{
		dto.setIdComprobanteRecepcion( rs.getInt( COLUMN_ID_COMPROBANTE_RECEPCION ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdProveedores( rs.getInt( COLUMN_ID_PROVEEDORES ) );
		dto.setFolio( rs.getString( COLUMN_FOLIO ) );
		dto.setTotal( rs.getFloat( COLUMN_TOTAL ) );
		if (rs.wasNull()) {
			dto.setTotalNull( true );
		}
		
		dto.setArchivoXml( rs.getString( COLUMN_ARCHIVO_XML ) );
		dto.setFechaIngreso( rs.getDate(COLUMN_FECHA_INGRESO ) );
		dto.setFechaExpedicion( rs.getDate(COLUMN_FECHA_EXPEDICION ) );
		dto.setV3( rs.getString( COLUMN_V3 ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ComprobanteRecepcion dto)
	{
	}

	/** 
	 * Returns all rows from the comprobante_recepcion table that match the specified arbitrary SQL statement
	 */
	public ComprobanteRecepcion[] findByDynamicSelect(String sql, Object[] sqlParams) throws ComprobanteRecepcionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteRecepcionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the comprobante_recepcion table that match the specified arbitrary SQL statement
	 */
	public ComprobanteRecepcion[] findByDynamicWhere(String sql, Object[] sqlParams) throws ComprobanteRecepcionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteRecepcionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
