/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SmsDispositivoMovilDaoImpl extends AbstractDAO implements SmsDispositivoMovilDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_sms_dispositivo_movil, id_estatus, alias, numero_celular, imei, marca, modelo, pct_pila, fecha_hr_ultima_com, fecha_hr_ultimo_envio, is_ocupado, id_sms_envio_lote_actual, usuario, password FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_sms_dispositivo_movil, id_estatus, alias, numero_celular, imei, marca, modelo, pct_pila, fecha_hr_ultima_com, fecha_hr_ultimo_envio, is_ocupado, id_sms_envio_lote_actual, usuario, password ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_sms_dispositivo_movil = ?, id_estatus = ?, alias = ?, numero_celular = ?, imei = ?, marca = ?, modelo = ?, pct_pila = ?, fecha_hr_ultima_com = ?, fecha_hr_ultimo_envio = ?, is_ocupado = ?, id_sms_envio_lote_actual = ?, usuario = ?, password = ? WHERE id_sms_dispositivo_movil = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_sms_dispositivo_movil = ?";

	/** 
	 * Index of column id_sms_dispositivo_movil
	 */
	protected static final int COLUMN_ID_SMS_DISPOSITIVO_MOVIL = 1;

	/** 
	 * Index of column id_estatus
	 */
	protected static final int COLUMN_ID_ESTATUS = 2;

	/** 
	 * Index of column alias
	 */
	protected static final int COLUMN_ALIAS = 3;

	/** 
	 * Index of column numero_celular
	 */
	protected static final int COLUMN_NUMERO_CELULAR = 4;

	/** 
	 * Index of column imei
	 */
	protected static final int COLUMN_IMEI = 5;

	/** 
	 * Index of column marca
	 */
	protected static final int COLUMN_MARCA = 6;

	/** 
	 * Index of column modelo
	 */
	protected static final int COLUMN_MODELO = 7;

	/** 
	 * Index of column pct_pila
	 */
	protected static final int COLUMN_PCT_PILA = 8;

	/** 
	 * Index of column fecha_hr_ultima_com
	 */
	protected static final int COLUMN_FECHA_HR_ULTIMA_COM = 9;

	/** 
	 * Index of column fecha_hr_ultimo_envio
	 */
	protected static final int COLUMN_FECHA_HR_ULTIMO_ENVIO = 10;

	/** 
	 * Index of column is_ocupado
	 */
	protected static final int COLUMN_IS_OCUPADO = 11;

	/** 
	 * Index of column id_sms_envio_lote_actual
	 */
	protected static final int COLUMN_ID_SMS_ENVIO_LOTE_ACTUAL = 12;

	/** 
	 * Index of column usuario
	 */
	protected static final int COLUMN_USUARIO = 13;

	/** 
	 * Index of column password
	 */
	protected static final int COLUMN_PASSWORD = 14;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 14;

	/** 
	 * Index of primary-key column id_sms_dispositivo_movil
	 */
	protected static final int PK_COLUMN_ID_SMS_DISPOSITIVO_MOVIL = 1;

	/** 
	 * Inserts a new row in the sms_dispositivo_movil table.
	 */
	public SmsDispositivoMovilPk insert(SmsDispositivoMovil dto) throws SmsDispositivoMovilDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdSmsDispositivoMovilModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_dispositivo_movil" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_estatus" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAliasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "alias" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumeroCelularModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "numero_celular" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isImeiModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "imei" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMarcaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "marca" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isModeloModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "modelo" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPctPilaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "pct_pila" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrUltimaComModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_ultima_com" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrUltimoEnvioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_ultimo_envio" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsOcupadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_ocupado" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSmsEnvioLoteActualModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_envio_lote_actual" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUsuarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "usuario" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPasswordModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "password" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdSmsDispositivoMovilModified()) {
				stmt.setInt( index++, dto.getIdSmsDispositivoMovil() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isAliasModified()) {
				stmt.setString( index++, dto.getAlias() );
			}
		
			if (dto.isNumeroCelularModified()) {
				stmt.setString( index++, dto.getNumeroCelular() );
			}
		
			if (dto.isImeiModified()) {
				stmt.setString( index++, dto.getImei() );
			}
		
			if (dto.isMarcaModified()) {
				stmt.setString( index++, dto.getMarca() );
			}
		
			if (dto.isModeloModified()) {
				stmt.setString( index++, dto.getModelo() );
			}
		
			if (dto.isPctPilaModified()) {
				stmt.setDouble( index++, dto.getPctPila() );
			}
		
			if (dto.isFechaHrUltimaComModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrUltimaCom()==null ? null : new java.sql.Timestamp( dto.getFechaHrUltimaCom().getTime() ) );
			}
		
			if (dto.isFechaHrUltimoEnvioModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrUltimoEnvio()==null ? null : new java.sql.Timestamp( dto.getFechaHrUltimoEnvio().getTime() ) );
			}
		
			if (dto.isIsOcupadoModified()) {
				if (dto.isIsOcupadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIsOcupado() );
				}
		
			}
		
			if (dto.isIdSmsEnvioLoteActualModified()) {
				if (dto.isIdSmsEnvioLoteActualNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsEnvioLoteActual() );
				}
		
			}
		
			if (dto.isUsuarioModified()) {
				stmt.setString( index++, dto.getUsuario() );
			}
		
			if (dto.isPasswordModified()) {
				stmt.setString( index++, dto.getPassword() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdSmsDispositivoMovil( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsDispositivoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sms_dispositivo_movil table.
	 */
	public void update(SmsDispositivoMovilPk pk, SmsDispositivoMovil dto) throws SmsDispositivoMovilDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdSmsDispositivoMovilModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_dispositivo_movil=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_estatus=?" );
				modified=true;
			}
		
			if (dto.isAliasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "alias=?" );
				modified=true;
			}
		
			if (dto.isNumeroCelularModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "numero_celular=?" );
				modified=true;
			}
		
			if (dto.isImeiModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "imei=?" );
				modified=true;
			}
		
			if (dto.isMarcaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "marca=?" );
				modified=true;
			}
		
			if (dto.isModeloModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "modelo=?" );
				modified=true;
			}
		
			if (dto.isPctPilaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "pct_pila=?" );
				modified=true;
			}
		
			if (dto.isFechaHrUltimaComModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_ultima_com=?" );
				modified=true;
			}
		
			if (dto.isFechaHrUltimoEnvioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_ultimo_envio=?" );
				modified=true;
			}
		
			if (dto.isIsOcupadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_ocupado=?" );
				modified=true;
			}
		
			if (dto.isIdSmsEnvioLoteActualModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_envio_lote_actual=?" );
				modified=true;
			}
		
			if (dto.isUsuarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "usuario=?" );
				modified=true;
			}
		
			if (dto.isPasswordModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "password=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_sms_dispositivo_movil=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdSmsDispositivoMovilModified()) {
				stmt.setInt( index++, dto.getIdSmsDispositivoMovil() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isAliasModified()) {
				stmt.setString( index++, dto.getAlias() );
			}
		
			if (dto.isNumeroCelularModified()) {
				stmt.setString( index++, dto.getNumeroCelular() );
			}
		
			if (dto.isImeiModified()) {
				stmt.setString( index++, dto.getImei() );
			}
		
			if (dto.isMarcaModified()) {
				stmt.setString( index++, dto.getMarca() );
			}
		
			if (dto.isModeloModified()) {
				stmt.setString( index++, dto.getModelo() );
			}
		
			if (dto.isPctPilaModified()) {
				stmt.setDouble( index++, dto.getPctPila() );
			}
		
			if (dto.isFechaHrUltimaComModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrUltimaCom()==null ? null : new java.sql.Timestamp( dto.getFechaHrUltimaCom().getTime() ) );
			}
		
			if (dto.isFechaHrUltimoEnvioModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrUltimoEnvio()==null ? null : new java.sql.Timestamp( dto.getFechaHrUltimoEnvio().getTime() ) );
			}
		
			if (dto.isIsOcupadoModified()) {
				if (dto.isIsOcupadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIsOcupado() );
				}
		
			}
		
			if (dto.isIdSmsEnvioLoteActualModified()) {
				if (dto.isIdSmsEnvioLoteActualNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsEnvioLoteActual() );
				}
		
			}
		
			if (dto.isUsuarioModified()) {
				stmt.setString( index++, dto.getUsuario() );
			}
		
			if (dto.isPasswordModified()) {
				stmt.setString( index++, dto.getPassword() );
			}
		
			stmt.setInt( index++, pk.getIdSmsDispositivoMovil() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsDispositivoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sms_dispositivo_movil table.
	 */
	public void delete(SmsDispositivoMovilPk pk) throws SmsDispositivoMovilDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdSmsDispositivoMovil() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsDispositivoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sms_dispositivo_movil table that matches the specified primary-key value.
	 */
	public SmsDispositivoMovil findByPrimaryKey(SmsDispositivoMovilPk pk) throws SmsDispositivoMovilDaoException
	{
		return findByPrimaryKey( pk.getIdSmsDispositivoMovil() );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'id_sms_dispositivo_movil = :idSmsDispositivoMovil'.
	 */
	public SmsDispositivoMovil findByPrimaryKey(int idSmsDispositivoMovil) throws SmsDispositivoMovilDaoException
	{
		SmsDispositivoMovil ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_sms_dispositivo_movil = ?", new Object[] {  new Integer(idSmsDispositivoMovil) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria ''.
	 */
	public SmsDispositivoMovil[] findAll() throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_sms_dispositivo_movil", null );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'id_sms_dispositivo_movil = :idSmsDispositivoMovil'.
	 */
	public SmsDispositivoMovil[] findWhereIdSmsDispositivoMovilEquals(int idSmsDispositivoMovil) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_dispositivo_movil = ? ORDER BY id_sms_dispositivo_movil", new Object[] {  new Integer(idSmsDispositivoMovil) } );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public SmsDispositivoMovil[] findWhereIdEstatusEquals(int idEstatus) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_estatus = ? ORDER BY id_estatus", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'alias = :alias'.
	 */
	public SmsDispositivoMovil[] findWhereAliasEquals(String alias) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE alias = ? ORDER BY alias", new Object[] { alias } );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'numero_celular = :numeroCelular'.
	 */
	public SmsDispositivoMovil[] findWhereNumeroCelularEquals(String numeroCelular) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE numero_celular = ? ORDER BY numero_celular", new Object[] { numeroCelular } );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'imei = :imei'.
	 */
	public SmsDispositivoMovil[] findWhereImeiEquals(String imei) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE imei = ? ORDER BY imei", new Object[] { imei } );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'marca = :marca'.
	 */
	public SmsDispositivoMovil[] findWhereMarcaEquals(String marca) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE marca = ? ORDER BY marca", new Object[] { marca } );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'modelo = :modelo'.
	 */
	public SmsDispositivoMovil[] findWhereModeloEquals(String modelo) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE modelo = ? ORDER BY modelo", new Object[] { modelo } );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'pct_pila = :pctPila'.
	 */
	public SmsDispositivoMovil[] findWherePctPilaEquals(double pctPila) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pct_pila = ? ORDER BY pct_pila", new Object[] {  new Double(pctPila) } );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'fecha_hr_ultima_com = :fechaHrUltimaCom'.
	 */
	public SmsDispositivoMovil[] findWhereFechaHrUltimaComEquals(Date fechaHrUltimaCom) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_ultima_com = ? ORDER BY fecha_hr_ultima_com", new Object[] { fechaHrUltimaCom==null ? null : new java.sql.Timestamp( fechaHrUltimaCom.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'fecha_hr_ultimo_envio = :fechaHrUltimoEnvio'.
	 */
	public SmsDispositivoMovil[] findWhereFechaHrUltimoEnvioEquals(Date fechaHrUltimoEnvio) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_ultimo_envio = ? ORDER BY fecha_hr_ultimo_envio", new Object[] { fechaHrUltimoEnvio==null ? null : new java.sql.Timestamp( fechaHrUltimoEnvio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'is_ocupado = :isOcupado'.
	 */
	public SmsDispositivoMovil[] findWhereIsOcupadoEquals(int isOcupado) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_ocupado = ? ORDER BY is_ocupado", new Object[] {  new Integer(isOcupado) } );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'id_sms_envio_lote_actual = :idSmsEnvioLoteActual'.
	 */
	public SmsDispositivoMovil[] findWhereIdSmsEnvioLoteActualEquals(int idSmsEnvioLoteActual) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_envio_lote_actual = ? ORDER BY id_sms_envio_lote_actual", new Object[] {  new Integer(idSmsEnvioLoteActual) } );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'usuario = :usuario'.
	 */
	public SmsDispositivoMovil[] findWhereUsuarioEquals(String usuario) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE usuario = ? ORDER BY usuario", new Object[] { usuario } );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the criteria 'password = :password'.
	 */
	public SmsDispositivoMovil[] findWherePasswordEquals(String password) throws SmsDispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE password = ? ORDER BY password", new Object[] { password } );
	}

	/**
	 * Method 'SmsDispositivoMovilDaoImpl'
	 * 
	 */
	public SmsDispositivoMovilDaoImpl()
	{
	}

	/**
	 * Method 'SmsDispositivoMovilDaoImpl'
	 * 
	 * @param userConn
	 */
	public SmsDispositivoMovilDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sms_dispositivo_movil";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SmsDispositivoMovil fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SmsDispositivoMovil dto = new SmsDispositivoMovil();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SmsDispositivoMovil[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SmsDispositivoMovil dto = new SmsDispositivoMovil();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SmsDispositivoMovil ret[] = new SmsDispositivoMovil[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SmsDispositivoMovil dto, ResultSet rs) throws SQLException
	{
		dto.setIdSmsDispositivoMovil( rs.getInt( COLUMN_ID_SMS_DISPOSITIVO_MOVIL ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		dto.setAlias( rs.getString( COLUMN_ALIAS ) );
		dto.setNumeroCelular( rs.getString( COLUMN_NUMERO_CELULAR ) );
		dto.setImei( rs.getString( COLUMN_IMEI ) );
		dto.setMarca( rs.getString( COLUMN_MARCA ) );
		dto.setModelo( rs.getString( COLUMN_MODELO ) );
		dto.setPctPila( rs.getDouble( COLUMN_PCT_PILA ) );
		dto.setFechaHrUltimaCom( rs.getTimestamp(COLUMN_FECHA_HR_ULTIMA_COM ) );
		dto.setFechaHrUltimoEnvio( rs.getTimestamp(COLUMN_FECHA_HR_ULTIMO_ENVIO ) );
		dto.setIsOcupado( rs.getInt( COLUMN_IS_OCUPADO ) );
		if (rs.wasNull()) {
			dto.setIsOcupadoNull( true );
		}
		
		dto.setIdSmsEnvioLoteActual( rs.getInt( COLUMN_ID_SMS_ENVIO_LOTE_ACTUAL ) );
		if (rs.wasNull()) {
			dto.setIdSmsEnvioLoteActualNull( true );
		}
		
		dto.setUsuario( rs.getString( COLUMN_USUARIO ) );
		dto.setPassword( rs.getString( COLUMN_PASSWORD ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SmsDispositivoMovil dto)
	{
		dto.setIdSmsDispositivoMovilModified( false );
		dto.setIdEstatusModified( false );
		dto.setAliasModified( false );
		dto.setNumeroCelularModified( false );
		dto.setImeiModified( false );
		dto.setMarcaModified( false );
		dto.setModeloModified( false );
		dto.setPctPilaModified( false );
		dto.setFechaHrUltimaComModified( false );
		dto.setFechaHrUltimoEnvioModified( false );
		dto.setIsOcupadoModified( false );
		dto.setIdSmsEnvioLoteActualModified( false );
		dto.setUsuarioModified( false );
		dto.setPasswordModified( false );
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the specified arbitrary SQL statement
	 */
	public SmsDispositivoMovil[] findByDynamicSelect(String sql, Object[] sqlParams) throws SmsDispositivoMovilDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsDispositivoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sms_dispositivo_movil table that match the specified arbitrary SQL statement
	 */
	public SmsDispositivoMovil[] findByDynamicWhere(String sql, Object[] sqlParams) throws SmsDispositivoMovilDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsDispositivoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
