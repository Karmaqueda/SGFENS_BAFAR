/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SgfensPedidoEntregaDaoImpl extends AbstractDAO implements SgfensPedidoEntregaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_pedido_entrega, id_empresa, id_estatus, fecha_hora, id_pedido, id_usuario_vendedor, total_cant_entregada, total_cant_entregada_peso FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_pedido_entrega, id_empresa, id_estatus, fecha_hora, id_pedido, id_usuario_vendedor, total_cant_entregada, total_cant_entregada_peso ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_pedido_entrega = ?, id_empresa = ?, id_estatus = ?, fecha_hora = ?, id_pedido = ?, id_usuario_vendedor = ?, total_cant_entregada = ?, total_cant_entregada_peso = ? WHERE id_pedido_entrega = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_pedido_entrega = ?";

	/** 
	 * Index of column id_pedido_entrega
	 */
	protected static final int COLUMN_ID_PEDIDO_ENTREGA = 1;

	/** 
	 * Index of column id_empresa
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column id_estatus
	 */
	protected static final int COLUMN_ID_ESTATUS = 3;

	/** 
	 * Index of column fecha_hora
	 */
	protected static final int COLUMN_FECHA_HORA = 4;

	/** 
	 * Index of column id_pedido
	 */
	protected static final int COLUMN_ID_PEDIDO = 5;

	/** 
	 * Index of column id_usuario_vendedor
	 */
	protected static final int COLUMN_ID_USUARIO_VENDEDOR = 6;

	/** 
	 * Index of column total_cant_entregada
	 */
	protected static final int COLUMN_TOTAL_CANT_ENTREGADA = 7;

	/** 
	 * Index of column total_cant_entregada_peso
	 */
	protected static final int COLUMN_TOTAL_CANT_ENTREGADA_PESO = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column id_pedido_entrega
	 */
	protected static final int PK_COLUMN_ID_PEDIDO_ENTREGA = 1;

	/** 
	 * Inserts a new row in the sgfens_pedido_entrega table.
	 */
	public SgfensPedidoEntregaPk insert(SgfensPedidoEntrega dto) throws SgfensPedidoEntregaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdPedidoEntregaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_pedido_entrega" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_empresa" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_estatus" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHoraModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hora" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdPedidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_pedido" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_usuario_vendedor" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTotalCantEntregadaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "total_cant_entregada" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTotalCantEntregadaPesoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "total_cant_entregada_peso" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdPedidoEntregaModified()) {
				stmt.setInt( index++, dto.getIdPedidoEntrega() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isFechaHoraModified()) {
				stmt.setTimestamp(index++, dto.getFechaHora()==null ? null : new java.sql.Timestamp( dto.getFechaHora().getTime() ) );
			}
		
			if (dto.isIdPedidoModified()) {
				if (dto.isIdPedidoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPedido() );
				}
		
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				if (dto.isIdUsuarioVendedorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVendedor() );
				}
		
			}
		
			if (dto.isTotalCantEntregadaModified()) {
				if (dto.isTotalCantEntregadaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getTotalCantEntregada() );
				}
		
			}
		
			if (dto.isTotalCantEntregadaPesoModified()) {
				if (dto.isTotalCantEntregadaPesoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getTotalCantEntregadaPeso() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdPedidoEntrega( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoEntregaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sgfens_pedido_entrega table.
	 */
	public void update(SgfensPedidoEntregaPk pk, SgfensPedidoEntrega dto) throws SgfensPedidoEntregaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdPedidoEntregaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_pedido_entrega=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_empresa=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_estatus=?" );
				modified=true;
			}
		
			if (dto.isFechaHoraModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hora=?" );
				modified=true;
			}
		
			if (dto.isIdPedidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_pedido=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_usuario_vendedor=?" );
				modified=true;
			}
		
			if (dto.isTotalCantEntregadaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "total_cant_entregada=?" );
				modified=true;
			}
		
			if (dto.isTotalCantEntregadaPesoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "total_cant_entregada_peso=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_pedido_entrega=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdPedidoEntregaModified()) {
				stmt.setInt( index++, dto.getIdPedidoEntrega() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isFechaHoraModified()) {
				stmt.setTimestamp(index++, dto.getFechaHora()==null ? null : new java.sql.Timestamp( dto.getFechaHora().getTime() ) );
			}
		
			if (dto.isIdPedidoModified()) {
				if (dto.isIdPedidoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPedido() );
				}
		
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				if (dto.isIdUsuarioVendedorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVendedor() );
				}
		
			}
		
			if (dto.isTotalCantEntregadaModified()) {
				if (dto.isTotalCantEntregadaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getTotalCantEntregada() );
				}
		
			}
		
			if (dto.isTotalCantEntregadaPesoModified()) {
				if (dto.isTotalCantEntregadaPesoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getTotalCantEntregadaPeso() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdPedidoEntrega() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoEntregaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sgfens_pedido_entrega table.
	 */
	public void delete(SgfensPedidoEntregaPk pk) throws SgfensPedidoEntregaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdPedidoEntrega() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoEntregaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sgfens_pedido_entrega table that matches the specified primary-key value.
	 */
	public SgfensPedidoEntrega findByPrimaryKey(SgfensPedidoEntregaPk pk) throws SgfensPedidoEntregaDaoException
	{
		return findByPrimaryKey( pk.getIdPedidoEntrega() );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_entrega table that match the criteria 'id_pedido_entrega = :idPedidoEntrega'.
	 */
	public SgfensPedidoEntrega findByPrimaryKey(int idPedidoEntrega) throws SgfensPedidoEntregaDaoException
	{
		SgfensPedidoEntrega ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_pedido_entrega = ?", new Object[] {  new Integer(idPedidoEntrega) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sgfens_pedido_entrega table that match the criteria ''.
	 */
	public SgfensPedidoEntrega[] findAll() throws SgfensPedidoEntregaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_pedido_entrega", null );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_entrega table that match the criteria 'id_pedido_entrega = :idPedidoEntrega'.
	 */
	public SgfensPedidoEntrega[] findWhereIdPedidoEntregaEquals(int idPedidoEntrega) throws SgfensPedidoEntregaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_pedido_entrega = ? ORDER BY id_pedido_entrega", new Object[] {  new Integer(idPedidoEntrega) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_entrega table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public SgfensPedidoEntrega[] findWhereIdEmpresaEquals(int idEmpresa) throws SgfensPedidoEntregaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_empresa = ? ORDER BY id_empresa", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_entrega table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public SgfensPedidoEntrega[] findWhereIdEstatusEquals(int idEstatus) throws SgfensPedidoEntregaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_estatus = ? ORDER BY id_estatus", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_entrega table that match the criteria 'fecha_hora = :fechaHora'.
	 */
	public SgfensPedidoEntrega[] findWhereFechaHoraEquals(Date fechaHora) throws SgfensPedidoEntregaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hora = ? ORDER BY fecha_hora", new Object[] { fechaHora==null ? null : new java.sql.Timestamp( fechaHora.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_entrega table that match the criteria 'id_pedido = :idPedido'.
	 */
	public SgfensPedidoEntrega[] findWhereIdPedidoEquals(int idPedido) throws SgfensPedidoEntregaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_pedido = ? ORDER BY id_pedido", new Object[] {  new Integer(idPedido) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_entrega table that match the criteria 'id_usuario_vendedor = :idUsuarioVendedor'.
	 */
	public SgfensPedidoEntrega[] findWhereIdUsuarioVendedorEquals(int idUsuarioVendedor) throws SgfensPedidoEntregaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_usuario_vendedor = ? ORDER BY id_usuario_vendedor", new Object[] {  new Integer(idUsuarioVendedor) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_entrega table that match the criteria 'total_cant_entregada = :totalCantEntregada'.
	 */
	public SgfensPedidoEntrega[] findWhereTotalCantEntregadaEquals(double totalCantEntregada) throws SgfensPedidoEntregaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE total_cant_entregada = ? ORDER BY total_cant_entregada", new Object[] {  new Double(totalCantEntregada) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_entrega table that match the criteria 'total_cant_entregada_peso = :totalCantEntregadaPeso'.
	 */
	public SgfensPedidoEntrega[] findWhereTotalCantEntregadaPesoEquals(double totalCantEntregadaPeso) throws SgfensPedidoEntregaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE total_cant_entregada_peso = ? ORDER BY total_cant_entregada_peso", new Object[] {  new Double(totalCantEntregadaPeso) } );
	}

	/**
	 * Method 'SgfensPedidoEntregaDaoImpl'
	 * 
	 */
	public SgfensPedidoEntregaDaoImpl()
	{
	}

	/**
	 * Method 'SgfensPedidoEntregaDaoImpl'
	 * 
	 * @param userConn
	 */
	public SgfensPedidoEntregaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sgfens_pedido_entrega";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SgfensPedidoEntrega fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SgfensPedidoEntrega dto = new SgfensPedidoEntrega();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SgfensPedidoEntrega[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SgfensPedidoEntrega dto = new SgfensPedidoEntrega();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SgfensPedidoEntrega ret[] = new SgfensPedidoEntrega[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SgfensPedidoEntrega dto, ResultSet rs) throws SQLException
	{
		dto.setIdPedidoEntrega( rs.getInt( COLUMN_ID_PEDIDO_ENTREGA ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		dto.setFechaHora( rs.getTimestamp(COLUMN_FECHA_HORA ) );
		dto.setIdPedido( rs.getInt( COLUMN_ID_PEDIDO ) );
		if (rs.wasNull()) {
			dto.setIdPedidoNull( true );
		}
		
		dto.setIdUsuarioVendedor( rs.getInt( COLUMN_ID_USUARIO_VENDEDOR ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioVendedorNull( true );
		}
		
		dto.setTotalCantEntregada( rs.getDouble( COLUMN_TOTAL_CANT_ENTREGADA ) );
		if (rs.wasNull()) {
			dto.setTotalCantEntregadaNull( true );
		}
		
		dto.setTotalCantEntregadaPeso( rs.getDouble( COLUMN_TOTAL_CANT_ENTREGADA_PESO ) );
		if (rs.wasNull()) {
			dto.setTotalCantEntregadaPesoNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SgfensPedidoEntrega dto)
	{
		dto.setIdPedidoEntregaModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEstatusModified( false );
		dto.setFechaHoraModified( false );
		dto.setIdPedidoModified( false );
		dto.setIdUsuarioVendedorModified( false );
		dto.setTotalCantEntregadaModified( false );
		dto.setTotalCantEntregadaPesoModified( false );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_entrega table that match the specified arbitrary SQL statement
	 */
	public SgfensPedidoEntrega[] findByDynamicSelect(String sql, Object[] sqlParams) throws SgfensPedidoEntregaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoEntregaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sgfens_pedido_entrega table that match the specified arbitrary SQL statement
	 */
	public SgfensPedidoEntrega[] findByDynamicWhere(String sql, Object[] sqlParams) throws SgfensPedidoEntregaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoEntregaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
