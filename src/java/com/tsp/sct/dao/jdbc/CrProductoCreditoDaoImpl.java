/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CrProductoCreditoDaoImpl extends AbstractDAO implements CrProductoCreditoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_producto_credito, id_producto_credito_padre, nombre, descripcion, fecha_hr_creacion, fecha_hr_ultima_edicion, id_usuario_edicion, id_score, id_grupo_formulario_solic, id_grupo_formulario_verif, tipo_amortizacion, monto, plazo, tasa_interes_anual, tasa_interes_mora, gastos_cobranza, costo_anual_total, garantias_descripcion, id_empresa, id_estatus, id_grupo_formulario_fotos FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_producto_credito, id_producto_credito_padre, nombre, descripcion, fecha_hr_creacion, fecha_hr_ultima_edicion, id_usuario_edicion, id_score, id_grupo_formulario_solic, id_grupo_formulario_verif, tipo_amortizacion, monto, plazo, tasa_interes_anual, tasa_interes_mora, gastos_cobranza, costo_anual_total, garantias_descripcion, id_empresa, id_estatus, id_grupo_formulario_fotos ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_producto_credito = ?, id_producto_credito_padre = ?, nombre = ?, descripcion = ?, fecha_hr_creacion = ?, fecha_hr_ultima_edicion = ?, id_usuario_edicion = ?, id_score = ?, id_grupo_formulario_solic = ?, id_grupo_formulario_verif = ?, tipo_amortizacion = ?, monto = ?, plazo = ?, tasa_interes_anual = ?, tasa_interes_mora = ?, gastos_cobranza = ?, costo_anual_total = ?, garantias_descripcion = ?, id_empresa = ?, id_estatus = ?, id_grupo_formulario_fotos = ? WHERE id_producto_credito = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_producto_credito = ?";

	/** 
	 * Index of column id_producto_credito
	 */
	protected static final int COLUMN_ID_PRODUCTO_CREDITO = 1;

	/** 
	 * Index of column id_producto_credito_padre
	 */
	protected static final int COLUMN_ID_PRODUCTO_CREDITO_PADRE = 2;

	/** 
	 * Index of column nombre
	 */
	protected static final int COLUMN_NOMBRE = 3;

	/** 
	 * Index of column descripcion
	 */
	protected static final int COLUMN_DESCRIPCION = 4;

	/** 
	 * Index of column fecha_hr_creacion
	 */
	protected static final int COLUMN_FECHA_HR_CREACION = 5;

	/** 
	 * Index of column fecha_hr_ultima_edicion
	 */
	protected static final int COLUMN_FECHA_HR_ULTIMA_EDICION = 6;

	/** 
	 * Index of column id_usuario_edicion
	 */
	protected static final int COLUMN_ID_USUARIO_EDICION = 7;

	/** 
	 * Index of column id_score
	 */
	protected static final int COLUMN_ID_SCORE = 8;

	/** 
	 * Index of column id_grupo_formulario_solic
	 */
	protected static final int COLUMN_ID_GRUPO_FORMULARIO_SOLIC = 9;

	/** 
	 * Index of column id_grupo_formulario_verif
	 */
	protected static final int COLUMN_ID_GRUPO_FORMULARIO_VERIF = 10;

	/** 
	 * Index of column tipo_amortizacion
	 */
	protected static final int COLUMN_TIPO_AMORTIZACION = 11;

	/** 
	 * Index of column monto
	 */
	protected static final int COLUMN_MONTO = 12;

	/** 
	 * Index of column plazo
	 */
	protected static final int COLUMN_PLAZO = 13;

	/** 
	 * Index of column tasa_interes_anual
	 */
	protected static final int COLUMN_TASA_INTERES_ANUAL = 14;

	/** 
	 * Index of column tasa_interes_mora
	 */
	protected static final int COLUMN_TASA_INTERES_MORA = 15;

	/** 
	 * Index of column gastos_cobranza
	 */
	protected static final int COLUMN_GASTOS_COBRANZA = 16;

	/** 
	 * Index of column costo_anual_total
	 */
	protected static final int COLUMN_COSTO_ANUAL_TOTAL = 17;

	/** 
	 * Index of column garantias_descripcion
	 */
	protected static final int COLUMN_GARANTIAS_DESCRIPCION = 18;

	/** 
	 * Index of column id_empresa
	 */
	protected static final int COLUMN_ID_EMPRESA = 19;

	/** 
	 * Index of column id_estatus
	 */
	protected static final int COLUMN_ID_ESTATUS = 20;

	/** 
	 * Index of column id_grupo_formulario_fotos
	 */
	protected static final int COLUMN_ID_GRUPO_FORMULARIO_FOTOS = 21;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 21;

	/** 
	 * Index of primary-key column id_producto_credito
	 */
	protected static final int PK_COLUMN_ID_PRODUCTO_CREDITO = 1;

	/** 
	 * Inserts a new row in the cr_producto_credito table.
	 */
	public CrProductoCreditoPk insert(CrProductoCredito dto) throws CrProductoCreditoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdProductoCreditoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_producto_credito" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdProductoCreditoPadreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_producto_credito_padre" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "nombre" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "descripcion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrCreacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_creacion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrUltimaEdicionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_ultima_edicion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioEdicionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_usuario_edicion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdScoreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_score" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdGrupoFormularioSolicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_grupo_formulario_solic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdGrupoFormularioVerifModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_grupo_formulario_verif" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoAmortizacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "tipo_amortizacion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMontoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "monto" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPlazoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "plazo" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTasaInteresAnualModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "tasa_interes_anual" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTasaInteresMoraModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "tasa_interes_mora" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isGastosCobranzaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "gastos_cobranza" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCostoAnualTotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "costo_anual_total" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isGarantiasDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "garantias_descripcion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_empresa" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_estatus" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdGrupoFormularioFotosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_grupo_formulario_fotos" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdProductoCreditoModified()) {
				stmt.setInt( index++, dto.getIdProductoCredito() );
			}
		
			if (dto.isIdProductoCreditoPadreModified()) {
				if (dto.isIdProductoCreditoPadreNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdProductoCreditoPadre() );
				}
		
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isFechaHrCreacionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaHrCreacion().getTime() ) );
			}
		
			if (dto.isFechaHrUltimaEdicionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrUltimaEdicion()==null ? null : new java.sql.Timestamp( dto.getFechaHrUltimaEdicion().getTime() ) );
			}
		
			if (dto.isIdUsuarioEdicionModified()) {
				stmt.setInt( index++, dto.getIdUsuarioEdicion() );
			}
		
			if (dto.isIdScoreModified()) {
				if (dto.isIdScoreNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdScore() );
				}
		
			}
		
			if (dto.isIdGrupoFormularioSolicModified()) {
				if (dto.isIdGrupoFormularioSolicNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdGrupoFormularioSolic() );
				}
		
			}
		
			if (dto.isIdGrupoFormularioVerifModified()) {
				if (dto.isIdGrupoFormularioVerifNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdGrupoFormularioVerif() );
				}
		
			}
		
			if (dto.isTipoAmortizacionModified()) {
				stmt.setString( index++, dto.getTipoAmortizacion() );
			}
		
			if (dto.isMontoModified()) {
				if (dto.isMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMonto() );
				}
		
			}
		
			if (dto.isPlazoModified()) {
				if (dto.isPlazoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPlazo() );
				}
		
			}
		
			if (dto.isTasaInteresAnualModified()) {
				if (dto.isTasaInteresAnualNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getTasaInteresAnual() );
				}
		
			}
		
			if (dto.isTasaInteresMoraModified()) {
				if (dto.isTasaInteresMoraNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getTasaInteresMora() );
				}
		
			}
		
			if (dto.isGastosCobranzaModified()) {
				if (dto.isGastosCobranzaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getGastosCobranza() );
				}
		
			}
		
			if (dto.isCostoAnualTotalModified()) {
				if (dto.isCostoAnualTotalNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCostoAnualTotal() );
				}
		
			}
		
			if (dto.isGarantiasDescripcionModified()) {
				stmt.setString( index++, dto.getGarantiasDescripcion() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isIdGrupoFormularioFotosModified()) {
				if (dto.isIdGrupoFormularioFotosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdGrupoFormularioFotos() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdProductoCredito( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrProductoCreditoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the cr_producto_credito table.
	 */
	public void update(CrProductoCreditoPk pk, CrProductoCredito dto) throws CrProductoCreditoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdProductoCreditoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_producto_credito=?" );
				modified=true;
			}
		
			if (dto.isIdProductoCreditoPadreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_producto_credito_padre=?" );
				modified=true;
			}
		
			if (dto.isNombreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "nombre=?" );
				modified=true;
			}
		
			if (dto.isDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "descripcion=?" );
				modified=true;
			}
		
			if (dto.isFechaHrCreacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_creacion=?" );
				modified=true;
			}
		
			if (dto.isFechaHrUltimaEdicionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_ultima_edicion=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioEdicionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_usuario_edicion=?" );
				modified=true;
			}
		
			if (dto.isIdScoreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_score=?" );
				modified=true;
			}
		
			if (dto.isIdGrupoFormularioSolicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_grupo_formulario_solic=?" );
				modified=true;
			}
		
			if (dto.isIdGrupoFormularioVerifModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_grupo_formulario_verif=?" );
				modified=true;
			}
		
			if (dto.isTipoAmortizacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "tipo_amortizacion=?" );
				modified=true;
			}
		
			if (dto.isMontoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "monto=?" );
				modified=true;
			}
		
			if (dto.isPlazoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "plazo=?" );
				modified=true;
			}
		
			if (dto.isTasaInteresAnualModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "tasa_interes_anual=?" );
				modified=true;
			}
		
			if (dto.isTasaInteresMoraModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "tasa_interes_mora=?" );
				modified=true;
			}
		
			if (dto.isGastosCobranzaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "gastos_cobranza=?" );
				modified=true;
			}
		
			if (dto.isCostoAnualTotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "costo_anual_total=?" );
				modified=true;
			}
		
			if (dto.isGarantiasDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "garantias_descripcion=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_empresa=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_estatus=?" );
				modified=true;
			}
		
			if (dto.isIdGrupoFormularioFotosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_grupo_formulario_fotos=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_producto_credito=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdProductoCreditoModified()) {
				stmt.setInt( index++, dto.getIdProductoCredito() );
			}
		
			if (dto.isIdProductoCreditoPadreModified()) {
				if (dto.isIdProductoCreditoPadreNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdProductoCreditoPadre() );
				}
		
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isFechaHrCreacionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaHrCreacion().getTime() ) );
			}
		
			if (dto.isFechaHrUltimaEdicionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrUltimaEdicion()==null ? null : new java.sql.Timestamp( dto.getFechaHrUltimaEdicion().getTime() ) );
			}
		
			if (dto.isIdUsuarioEdicionModified()) {
				stmt.setInt( index++, dto.getIdUsuarioEdicion() );
			}
		
			if (dto.isIdScoreModified()) {
				if (dto.isIdScoreNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdScore() );
				}
		
			}
		
			if (dto.isIdGrupoFormularioSolicModified()) {
				if (dto.isIdGrupoFormularioSolicNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdGrupoFormularioSolic() );
				}
		
			}
		
			if (dto.isIdGrupoFormularioVerifModified()) {
				if (dto.isIdGrupoFormularioVerifNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdGrupoFormularioVerif() );
				}
		
			}
		
			if (dto.isTipoAmortizacionModified()) {
				stmt.setString( index++, dto.getTipoAmortizacion() );
			}
		
			if (dto.isMontoModified()) {
				if (dto.isMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMonto() );
				}
		
			}
		
			if (dto.isPlazoModified()) {
				if (dto.isPlazoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPlazo() );
				}
		
			}
		
			if (dto.isTasaInteresAnualModified()) {
				if (dto.isTasaInteresAnualNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getTasaInteresAnual() );
				}
		
			}
		
			if (dto.isTasaInteresMoraModified()) {
				if (dto.isTasaInteresMoraNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getTasaInteresMora() );
				}
		
			}
		
			if (dto.isGastosCobranzaModified()) {
				if (dto.isGastosCobranzaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getGastosCobranza() );
				}
		
			}
		
			if (dto.isCostoAnualTotalModified()) {
				if (dto.isCostoAnualTotalNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCostoAnualTotal() );
				}
		
			}
		
			if (dto.isGarantiasDescripcionModified()) {
				stmt.setString( index++, dto.getGarantiasDescripcion() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isIdGrupoFormularioFotosModified()) {
				if (dto.isIdGrupoFormularioFotosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdGrupoFormularioFotos() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdProductoCredito() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrProductoCreditoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the cr_producto_credito table.
	 */
	public void delete(CrProductoCreditoPk pk) throws CrProductoCreditoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdProductoCredito() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrProductoCreditoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the cr_producto_credito table that matches the specified primary-key value.
	 */
	public CrProductoCredito findByPrimaryKey(CrProductoCreditoPk pk) throws CrProductoCreditoDaoException
	{
		return findByPrimaryKey( pk.getIdProductoCredito() );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'id_producto_credito = :idProductoCredito'.
	 */
	public CrProductoCredito findByPrimaryKey(int idProductoCredito) throws CrProductoCreditoDaoException
	{
		CrProductoCredito ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_producto_credito = ?", new Object[] {  new Integer(idProductoCredito) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria ''.
	 */
	public CrProductoCredito[] findAll() throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_producto_credito", null );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'id_producto_credito = :idProductoCredito'.
	 */
	public CrProductoCredito[] findWhereIdProductoCreditoEquals(int idProductoCredito) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_producto_credito = ? ORDER BY id_producto_credito", new Object[] {  new Integer(idProductoCredito) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'id_producto_credito_padre = :idProductoCreditoPadre'.
	 */
	public CrProductoCredito[] findWhereIdProductoCreditoPadreEquals(int idProductoCreditoPadre) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_producto_credito_padre = ? ORDER BY id_producto_credito_padre", new Object[] {  new Integer(idProductoCreditoPadre) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'nombre = :nombre'.
	 */
	public CrProductoCredito[] findWhereNombreEquals(String nombre) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nombre = ? ORDER BY nombre", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'descripcion = :descripcion'.
	 */
	public CrProductoCredito[] findWhereDescripcionEquals(String descripcion) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE descripcion = ? ORDER BY descripcion", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'fecha_hr_creacion = :fechaHrCreacion'.
	 */
	public CrProductoCredito[] findWhereFechaHrCreacionEquals(Date fechaHrCreacion) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_creacion = ? ORDER BY fecha_hr_creacion", new Object[] { fechaHrCreacion==null ? null : new java.sql.Timestamp( fechaHrCreacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'fecha_hr_ultima_edicion = :fechaHrUltimaEdicion'.
	 */
	public CrProductoCredito[] findWhereFechaHrUltimaEdicionEquals(Date fechaHrUltimaEdicion) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_ultima_edicion = ? ORDER BY fecha_hr_ultima_edicion", new Object[] { fechaHrUltimaEdicion==null ? null : new java.sql.Timestamp( fechaHrUltimaEdicion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'id_usuario_edicion = :idUsuarioEdicion'.
	 */
	public CrProductoCredito[] findWhereIdUsuarioEdicionEquals(int idUsuarioEdicion) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_usuario_edicion = ? ORDER BY id_usuario_edicion", new Object[] {  new Integer(idUsuarioEdicion) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'id_score = :idScore'.
	 */
	public CrProductoCredito[] findWhereIdScoreEquals(int idScore) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_score = ? ORDER BY id_score", new Object[] {  new Integer(idScore) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'id_grupo_formulario_solic = :idGrupoFormularioSolic'.
	 */
	public CrProductoCredito[] findWhereIdGrupoFormularioSolicEquals(int idGrupoFormularioSolic) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_grupo_formulario_solic = ? ORDER BY id_grupo_formulario_solic", new Object[] {  new Integer(idGrupoFormularioSolic) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'id_grupo_formulario_verif = :idGrupoFormularioVerif'.
	 */
	public CrProductoCredito[] findWhereIdGrupoFormularioVerifEquals(int idGrupoFormularioVerif) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_grupo_formulario_verif = ? ORDER BY id_grupo_formulario_verif", new Object[] {  new Integer(idGrupoFormularioVerif) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'tipo_amortizacion = :tipoAmortizacion'.
	 */
	public CrProductoCredito[] findWhereTipoAmortizacionEquals(String tipoAmortizacion) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipo_amortizacion = ? ORDER BY tipo_amortizacion", new Object[] { tipoAmortizacion } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'monto = :monto'.
	 */
	public CrProductoCredito[] findWhereMontoEquals(double monto) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE monto = ? ORDER BY monto", new Object[] {  new Double(monto) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'plazo = :plazo'.
	 */
	public CrProductoCredito[] findWherePlazoEquals(double plazo) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE plazo = ? ORDER BY plazo", new Object[] {  new Double(plazo) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'tasa_interes_anual = :tasaInteresAnual'.
	 */
	public CrProductoCredito[] findWhereTasaInteresAnualEquals(double tasaInteresAnual) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tasa_interes_anual = ? ORDER BY tasa_interes_anual", new Object[] {  new Double(tasaInteresAnual) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'tasa_interes_mora = :tasaInteresMora'.
	 */
	public CrProductoCredito[] findWhereTasaInteresMoraEquals(double tasaInteresMora) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tasa_interes_mora = ? ORDER BY tasa_interes_mora", new Object[] {  new Double(tasaInteresMora) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'gastos_cobranza = :gastosCobranza'.
	 */
	public CrProductoCredito[] findWhereGastosCobranzaEquals(double gastosCobranza) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE gastos_cobranza = ? ORDER BY gastos_cobranza", new Object[] {  new Double(gastosCobranza) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'costo_anual_total = :costoAnualTotal'.
	 */
	public CrProductoCredito[] findWhereCostoAnualTotalEquals(double costoAnualTotal) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE costo_anual_total = ? ORDER BY costo_anual_total", new Object[] {  new Double(costoAnualTotal) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'garantias_descripcion = :garantiasDescripcion'.
	 */
	public CrProductoCredito[] findWhereGarantiasDescripcionEquals(String garantiasDescripcion) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE garantias_descripcion = ? ORDER BY garantias_descripcion", new Object[] { garantiasDescripcion } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public CrProductoCredito[] findWhereIdEmpresaEquals(int idEmpresa) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_empresa = ? ORDER BY id_empresa", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public CrProductoCredito[] findWhereIdEstatusEquals(int idEstatus) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_estatus = ? ORDER BY id_estatus", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the criteria 'id_grupo_formulario_fotos = :idGrupoFormularioFotos'.
	 */
	public CrProductoCredito[] findWhereIdGrupoFormularioFotosEquals(int idGrupoFormularioFotos) throws CrProductoCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_grupo_formulario_fotos = ? ORDER BY id_grupo_formulario_fotos", new Object[] {  new Integer(idGrupoFormularioFotos) } );
	}

	/**
	 * Method 'CrProductoCreditoDaoImpl'
	 * 
	 */
	public CrProductoCreditoDaoImpl()
	{
	}

	/**
	 * Method 'CrProductoCreditoDaoImpl'
	 * 
	 * @param userConn
	 */
	public CrProductoCreditoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "cr_producto_credito";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CrProductoCredito fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CrProductoCredito dto = new CrProductoCredito();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CrProductoCredito[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CrProductoCredito dto = new CrProductoCredito();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CrProductoCredito ret[] = new CrProductoCredito[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CrProductoCredito dto, ResultSet rs) throws SQLException
	{
		dto.setIdProductoCredito( rs.getInt( COLUMN_ID_PRODUCTO_CREDITO ) );
		dto.setIdProductoCreditoPadre( rs.getInt( COLUMN_ID_PRODUCTO_CREDITO_PADRE ) );
		if (rs.wasNull()) {
			dto.setIdProductoCreditoPadreNull( true );
		}
		
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setFechaHrCreacion( rs.getTimestamp(COLUMN_FECHA_HR_CREACION ) );
		dto.setFechaHrUltimaEdicion( rs.getTimestamp(COLUMN_FECHA_HR_ULTIMA_EDICION ) );
		dto.setIdUsuarioEdicion( rs.getInt( COLUMN_ID_USUARIO_EDICION ) );
		dto.setIdScore( rs.getInt( COLUMN_ID_SCORE ) );
		if (rs.wasNull()) {
			dto.setIdScoreNull( true );
		}
		
		dto.setIdGrupoFormularioSolic( rs.getInt( COLUMN_ID_GRUPO_FORMULARIO_SOLIC ) );
		if (rs.wasNull()) {
			dto.setIdGrupoFormularioSolicNull( true );
		}
		
		dto.setIdGrupoFormularioVerif( rs.getInt( COLUMN_ID_GRUPO_FORMULARIO_VERIF ) );
		if (rs.wasNull()) {
			dto.setIdGrupoFormularioVerifNull( true );
		}
		
		dto.setTipoAmortizacion( rs.getString( COLUMN_TIPO_AMORTIZACION ) );
		dto.setMonto( rs.getDouble( COLUMN_MONTO ) );
		if (rs.wasNull()) {
			dto.setMontoNull( true );
		}
		
		dto.setPlazo( rs.getDouble( COLUMN_PLAZO ) );
		if (rs.wasNull()) {
			dto.setPlazoNull( true );
		}
		
		dto.setTasaInteresAnual( rs.getDouble( COLUMN_TASA_INTERES_ANUAL ) );
		if (rs.wasNull()) {
			dto.setTasaInteresAnualNull( true );
		}
		
		dto.setTasaInteresMora( rs.getDouble( COLUMN_TASA_INTERES_MORA ) );
		if (rs.wasNull()) {
			dto.setTasaInteresMoraNull( true );
		}
		
		dto.setGastosCobranza( rs.getDouble( COLUMN_GASTOS_COBRANZA ) );
		if (rs.wasNull()) {
			dto.setGastosCobranzaNull( true );
		}
		
		dto.setCostoAnualTotal( rs.getDouble( COLUMN_COSTO_ANUAL_TOTAL ) );
		if (rs.wasNull()) {
			dto.setCostoAnualTotalNull( true );
		}
		
		dto.setGarantiasDescripcion( rs.getString( COLUMN_GARANTIAS_DESCRIPCION ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		dto.setIdGrupoFormularioFotos( rs.getInt( COLUMN_ID_GRUPO_FORMULARIO_FOTOS ) );
		if (rs.wasNull()) {
			dto.setIdGrupoFormularioFotosNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CrProductoCredito dto)
	{
		dto.setIdProductoCreditoModified( false );
		dto.setIdProductoCreditoPadreModified( false );
		dto.setNombreModified( false );
		dto.setDescripcionModified( false );
		dto.setFechaHrCreacionModified( false );
		dto.setFechaHrUltimaEdicionModified( false );
		dto.setIdUsuarioEdicionModified( false );
		dto.setIdScoreModified( false );
		dto.setIdGrupoFormularioSolicModified( false );
		dto.setIdGrupoFormularioVerifModified( false );
		dto.setTipoAmortizacionModified( false );
		dto.setMontoModified( false );
		dto.setPlazoModified( false );
		dto.setTasaInteresAnualModified( false );
		dto.setTasaInteresMoraModified( false );
		dto.setGastosCobranzaModified( false );
		dto.setCostoAnualTotalModified( false );
		dto.setGarantiasDescripcionModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEstatusModified( false );
		dto.setIdGrupoFormularioFotosModified( false );
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the specified arbitrary SQL statement
	 */
	public CrProductoCredito[] findByDynamicSelect(String sql, Object[] sqlParams) throws CrProductoCreditoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrProductoCreditoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the cr_producto_credito table that match the specified arbitrary SQL statement
	 */
	public CrProductoCredito[] findByDynamicWhere(String sql, Object[] sqlParams) throws CrProductoCreditoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrProductoCreditoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
