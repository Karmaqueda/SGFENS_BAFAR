/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SmsEmpresaConfigDaoImpl extends AbstractDAO implements SmsEmpresaConfigDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_sms_empresa_config, id_empresa, permiso_sms_empleados, mensaje_venta, mensaje_venta_fijo, mensaje_venta_libre, mensaje_abono, mensaje_abono_fijo, mensaje_abono_libre, mensaje_factura, mensaje_factura_fijo, mensaje_factura_libre, mensaje_cancela_fac, mensaje_cancela_fac_fijo, mensaje_cancela_fac_libre, mensaje_callcenter, mensaje_callcenter_fijo, mensaje_callcenter_libre FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_sms_empresa_config, id_empresa, permiso_sms_empleados, mensaje_venta, mensaje_venta_fijo, mensaje_venta_libre, mensaje_abono, mensaje_abono_fijo, mensaje_abono_libre, mensaje_factura, mensaje_factura_fijo, mensaje_factura_libre, mensaje_cancela_fac, mensaje_cancela_fac_fijo, mensaje_cancela_fac_libre, mensaje_callcenter, mensaje_callcenter_fijo, mensaje_callcenter_libre ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_sms_empresa_config = ?, id_empresa = ?, permiso_sms_empleados = ?, mensaje_venta = ?, mensaje_venta_fijo = ?, mensaje_venta_libre = ?, mensaje_abono = ?, mensaje_abono_fijo = ?, mensaje_abono_libre = ?, mensaje_factura = ?, mensaje_factura_fijo = ?, mensaje_factura_libre = ?, mensaje_cancela_fac = ?, mensaje_cancela_fac_fijo = ?, mensaje_cancela_fac_libre = ?, mensaje_callcenter = ?, mensaje_callcenter_fijo = ?, mensaje_callcenter_libre = ? WHERE id_sms_empresa_config = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_sms_empresa_config = ?";

	/** 
	 * Index of column id_sms_empresa_config
	 */
	protected static final int COLUMN_ID_SMS_EMPRESA_CONFIG = 1;

	/** 
	 * Index of column id_empresa
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column permiso_sms_empleados
	 */
	protected static final int COLUMN_PERMISO_SMS_EMPLEADOS = 3;

	/** 
	 * Index of column mensaje_venta
	 */
	protected static final int COLUMN_MENSAJE_VENTA = 4;

	/** 
	 * Index of column mensaje_venta_fijo
	 */
	protected static final int COLUMN_MENSAJE_VENTA_FIJO = 5;

	/** 
	 * Index of column mensaje_venta_libre
	 */
	protected static final int COLUMN_MENSAJE_VENTA_LIBRE = 6;

	/** 
	 * Index of column mensaje_abono
	 */
	protected static final int COLUMN_MENSAJE_ABONO = 7;

	/** 
	 * Index of column mensaje_abono_fijo
	 */
	protected static final int COLUMN_MENSAJE_ABONO_FIJO = 8;

	/** 
	 * Index of column mensaje_abono_libre
	 */
	protected static final int COLUMN_MENSAJE_ABONO_LIBRE = 9;

	/** 
	 * Index of column mensaje_factura
	 */
	protected static final int COLUMN_MENSAJE_FACTURA = 10;

	/** 
	 * Index of column mensaje_factura_fijo
	 */
	protected static final int COLUMN_MENSAJE_FACTURA_FIJO = 11;

	/** 
	 * Index of column mensaje_factura_libre
	 */
	protected static final int COLUMN_MENSAJE_FACTURA_LIBRE = 12;

	/** 
	 * Index of column mensaje_cancela_fac
	 */
	protected static final int COLUMN_MENSAJE_CANCELA_FAC = 13;

	/** 
	 * Index of column mensaje_cancela_fac_fijo
	 */
	protected static final int COLUMN_MENSAJE_CANCELA_FAC_FIJO = 14;

	/** 
	 * Index of column mensaje_cancela_fac_libre
	 */
	protected static final int COLUMN_MENSAJE_CANCELA_FAC_LIBRE = 15;

	/** 
	 * Index of column mensaje_callcenter
	 */
	protected static final int COLUMN_MENSAJE_CALLCENTER = 16;

	/** 
	 * Index of column mensaje_callcenter_fijo
	 */
	protected static final int COLUMN_MENSAJE_CALLCENTER_FIJO = 17;

	/** 
	 * Index of column mensaje_callcenter_libre
	 */
	protected static final int COLUMN_MENSAJE_CALLCENTER_LIBRE = 18;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 18;

	/** 
	 * Index of primary-key column id_sms_empresa_config
	 */
	protected static final int PK_COLUMN_ID_SMS_EMPRESA_CONFIG = 1;

	/** 
	 * Inserts a new row in the sms_empresa_config table.
	 */
	public SmsEmpresaConfigPk insert(SmsEmpresaConfig dto) throws SmsEmpresaConfigDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdSmsEmpresaConfigModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_empresa_config" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_empresa" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPermisoSmsEmpleadosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "permiso_sms_empleados" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeVentaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_venta" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeVentaFijoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_venta_fijo" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeVentaLibreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_venta_libre" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeAbonoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_abono" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeAbonoFijoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_abono_fijo" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeAbonoLibreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_abono_libre" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeFacturaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_factura" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeFacturaFijoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_factura_fijo" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeFacturaLibreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_factura_libre" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeCancelaFacModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_cancela_fac" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeCancelaFacFijoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_cancela_fac_fijo" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeCancelaFacLibreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_cancela_fac_libre" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeCallcenterModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_callcenter" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeCallcenterFijoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_callcenter_fijo" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeCallcenterLibreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje_callcenter_libre" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdSmsEmpresaConfigModified()) {
				stmt.setInt( index++, dto.getIdSmsEmpresaConfig() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isPermisoSmsEmpleadosModified()) {
				stmt.setInt( index++, dto.getPermisoSmsEmpleados() );
			}
		
			if (dto.isMensajeVentaModified()) {
				stmt.setInt( index++, dto.getMensajeVenta() );
			}
		
			if (dto.isMensajeVentaFijoModified()) {
				stmt.setInt( index++, dto.getMensajeVentaFijo() );
			}
		
			if (dto.isMensajeVentaLibreModified()) {
				stmt.setString( index++, dto.getMensajeVentaLibre() );
			}
		
			if (dto.isMensajeAbonoModified()) {
				stmt.setInt( index++, dto.getMensajeAbono() );
			}
		
			if (dto.isMensajeAbonoFijoModified()) {
				stmt.setInt( index++, dto.getMensajeAbonoFijo() );
			}
		
			if (dto.isMensajeAbonoLibreModified()) {
				stmt.setString( index++, dto.getMensajeAbonoLibre() );
			}
		
			if (dto.isMensajeFacturaModified()) {
				stmt.setInt( index++, dto.getMensajeFactura() );
			}
		
			if (dto.isMensajeFacturaFijoModified()) {
				stmt.setInt( index++, dto.getMensajeFacturaFijo() );
			}
		
			if (dto.isMensajeFacturaLibreModified()) {
				stmt.setString( index++, dto.getMensajeFacturaLibre() );
			}
		
			if (dto.isMensajeCancelaFacModified()) {
				stmt.setInt( index++, dto.getMensajeCancelaFac() );
			}
		
			if (dto.isMensajeCancelaFacFijoModified()) {
				stmt.setInt( index++, dto.getMensajeCancelaFacFijo() );
			}
		
			if (dto.isMensajeCancelaFacLibreModified()) {
				stmt.setString( index++, dto.getMensajeCancelaFacLibre() );
			}
		
			if (dto.isMensajeCallcenterModified()) {
				stmt.setInt( index++, dto.getMensajeCallcenter() );
			}
		
			if (dto.isMensajeCallcenterFijoModified()) {
				stmt.setInt( index++, dto.getMensajeCallcenterFijo() );
			}
		
			if (dto.isMensajeCallcenterLibreModified()) {
				stmt.setString( index++, dto.getMensajeCallcenterLibre() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdSmsEmpresaConfig( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEmpresaConfigDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sms_empresa_config table.
	 */
	public void update(SmsEmpresaConfigPk pk, SmsEmpresaConfig dto) throws SmsEmpresaConfigDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdSmsEmpresaConfigModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_empresa_config=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_empresa=?" );
				modified=true;
			}
		
			if (dto.isPermisoSmsEmpleadosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "permiso_sms_empleados=?" );
				modified=true;
			}
		
			if (dto.isMensajeVentaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_venta=?" );
				modified=true;
			}
		
			if (dto.isMensajeVentaFijoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_venta_fijo=?" );
				modified=true;
			}
		
			if (dto.isMensajeVentaLibreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_venta_libre=?" );
				modified=true;
			}
		
			if (dto.isMensajeAbonoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_abono=?" );
				modified=true;
			}
		
			if (dto.isMensajeAbonoFijoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_abono_fijo=?" );
				modified=true;
			}
		
			if (dto.isMensajeAbonoLibreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_abono_libre=?" );
				modified=true;
			}
		
			if (dto.isMensajeFacturaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_factura=?" );
				modified=true;
			}
		
			if (dto.isMensajeFacturaFijoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_factura_fijo=?" );
				modified=true;
			}
		
			if (dto.isMensajeFacturaLibreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_factura_libre=?" );
				modified=true;
			}
		
			if (dto.isMensajeCancelaFacModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_cancela_fac=?" );
				modified=true;
			}
		
			if (dto.isMensajeCancelaFacFijoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_cancela_fac_fijo=?" );
				modified=true;
			}
		
			if (dto.isMensajeCancelaFacLibreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_cancela_fac_libre=?" );
				modified=true;
			}
		
			if (dto.isMensajeCallcenterModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_callcenter=?" );
				modified=true;
			}
		
			if (dto.isMensajeCallcenterFijoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_callcenter_fijo=?" );
				modified=true;
			}
		
			if (dto.isMensajeCallcenterLibreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje_callcenter_libre=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_sms_empresa_config=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdSmsEmpresaConfigModified()) {
				stmt.setInt( index++, dto.getIdSmsEmpresaConfig() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isPermisoSmsEmpleadosModified()) {
				stmt.setInt( index++, dto.getPermisoSmsEmpleados() );
			}
		
			if (dto.isMensajeVentaModified()) {
				stmt.setInt( index++, dto.getMensajeVenta() );
			}
		
			if (dto.isMensajeVentaFijoModified()) {
				stmt.setInt( index++, dto.getMensajeVentaFijo() );
			}
		
			if (dto.isMensajeVentaLibreModified()) {
				stmt.setString( index++, dto.getMensajeVentaLibre() );
			}
		
			if (dto.isMensajeAbonoModified()) {
				stmt.setInt( index++, dto.getMensajeAbono() );
			}
		
			if (dto.isMensajeAbonoFijoModified()) {
				stmt.setInt( index++, dto.getMensajeAbonoFijo() );
			}
		
			if (dto.isMensajeAbonoLibreModified()) {
				stmt.setString( index++, dto.getMensajeAbonoLibre() );
			}
		
			if (dto.isMensajeFacturaModified()) {
				stmt.setInt( index++, dto.getMensajeFactura() );
			}
		
			if (dto.isMensajeFacturaFijoModified()) {
				stmt.setInt( index++, dto.getMensajeFacturaFijo() );
			}
		
			if (dto.isMensajeFacturaLibreModified()) {
				stmt.setString( index++, dto.getMensajeFacturaLibre() );
			}
		
			if (dto.isMensajeCancelaFacModified()) {
				stmt.setInt( index++, dto.getMensajeCancelaFac() );
			}
		
			if (dto.isMensajeCancelaFacFijoModified()) {
				stmt.setInt( index++, dto.getMensajeCancelaFacFijo() );
			}
		
			if (dto.isMensajeCancelaFacLibreModified()) {
				stmt.setString( index++, dto.getMensajeCancelaFacLibre() );
			}
		
			if (dto.isMensajeCallcenterModified()) {
				stmt.setInt( index++, dto.getMensajeCallcenter() );
			}
		
			if (dto.isMensajeCallcenterFijoModified()) {
				stmt.setInt( index++, dto.getMensajeCallcenterFijo() );
			}
		
			if (dto.isMensajeCallcenterLibreModified()) {
				stmt.setString( index++, dto.getMensajeCallcenterLibre() );
			}
		
			stmt.setInt( index++, pk.getIdSmsEmpresaConfig() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEmpresaConfigDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sms_empresa_config table.
	 */
	public void delete(SmsEmpresaConfigPk pk) throws SmsEmpresaConfigDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdSmsEmpresaConfig() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEmpresaConfigDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sms_empresa_config table that matches the specified primary-key value.
	 */
	public SmsEmpresaConfig findByPrimaryKey(SmsEmpresaConfigPk pk) throws SmsEmpresaConfigDaoException
	{
		return findByPrimaryKey( pk.getIdSmsEmpresaConfig() );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'id_sms_empresa_config = :idSmsEmpresaConfig'.
	 */
	public SmsEmpresaConfig findByPrimaryKey(int idSmsEmpresaConfig) throws SmsEmpresaConfigDaoException
	{
		SmsEmpresaConfig ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_sms_empresa_config = ?", new Object[] {  new Integer(idSmsEmpresaConfig) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria ''.
	 */
	public SmsEmpresaConfig[] findAll() throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_sms_empresa_config", null );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'id_sms_empresa_config = :idSmsEmpresaConfig'.
	 */
	public SmsEmpresaConfig[] findWhereIdSmsEmpresaConfigEquals(int idSmsEmpresaConfig) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_empresa_config = ? ORDER BY id_sms_empresa_config", new Object[] {  new Integer(idSmsEmpresaConfig) } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public SmsEmpresaConfig[] findWhereIdEmpresaEquals(int idEmpresa) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_empresa = ? ORDER BY id_empresa", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'permiso_sms_empleados = :permisoSmsEmpleados'.
	 */
	public SmsEmpresaConfig[] findWherePermisoSmsEmpleadosEquals(int permisoSmsEmpleados) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE permiso_sms_empleados = ? ORDER BY permiso_sms_empleados", new Object[] {  new Integer(permisoSmsEmpleados) } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_venta = :mensajeVenta'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeVentaEquals(int mensajeVenta) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_venta = ? ORDER BY mensaje_venta", new Object[] {  new Integer(mensajeVenta) } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_venta_fijo = :mensajeVentaFijo'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeVentaFijoEquals(int mensajeVentaFijo) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_venta_fijo = ? ORDER BY mensaje_venta_fijo", new Object[] {  new Integer(mensajeVentaFijo) } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_venta_libre = :mensajeVentaLibre'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeVentaLibreEquals(String mensajeVentaLibre) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_venta_libre = ? ORDER BY mensaje_venta_libre", new Object[] { mensajeVentaLibre } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_abono = :mensajeAbono'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeAbonoEquals(int mensajeAbono) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_abono = ? ORDER BY mensaje_abono", new Object[] {  new Integer(mensajeAbono) } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_abono_fijo = :mensajeAbonoFijo'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeAbonoFijoEquals(int mensajeAbonoFijo) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_abono_fijo = ? ORDER BY mensaje_abono_fijo", new Object[] {  new Integer(mensajeAbonoFijo) } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_abono_libre = :mensajeAbonoLibre'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeAbonoLibreEquals(String mensajeAbonoLibre) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_abono_libre = ? ORDER BY mensaje_abono_libre", new Object[] { mensajeAbonoLibre } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_factura = :mensajeFactura'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeFacturaEquals(int mensajeFactura) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_factura = ? ORDER BY mensaje_factura", new Object[] {  new Integer(mensajeFactura) } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_factura_fijo = :mensajeFacturaFijo'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeFacturaFijoEquals(int mensajeFacturaFijo) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_factura_fijo = ? ORDER BY mensaje_factura_fijo", new Object[] {  new Integer(mensajeFacturaFijo) } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_factura_libre = :mensajeFacturaLibre'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeFacturaLibreEquals(String mensajeFacturaLibre) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_factura_libre = ? ORDER BY mensaje_factura_libre", new Object[] { mensajeFacturaLibre } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_cancela_fac = :mensajeCancelaFac'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeCancelaFacEquals(int mensajeCancelaFac) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_cancela_fac = ? ORDER BY mensaje_cancela_fac", new Object[] {  new Integer(mensajeCancelaFac) } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_cancela_fac_fijo = :mensajeCancelaFacFijo'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeCancelaFacFijoEquals(int mensajeCancelaFacFijo) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_cancela_fac_fijo = ? ORDER BY mensaje_cancela_fac_fijo", new Object[] {  new Integer(mensajeCancelaFacFijo) } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_cancela_fac_libre = :mensajeCancelaFacLibre'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeCancelaFacLibreEquals(String mensajeCancelaFacLibre) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_cancela_fac_libre = ? ORDER BY mensaje_cancela_fac_libre", new Object[] { mensajeCancelaFacLibre } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_callcenter = :mensajeCallcenter'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeCallcenterEquals(int mensajeCallcenter) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_callcenter = ? ORDER BY mensaje_callcenter", new Object[] {  new Integer(mensajeCallcenter) } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_callcenter_fijo = :mensajeCallcenterFijo'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeCallcenterFijoEquals(int mensajeCallcenterFijo) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_callcenter_fijo = ? ORDER BY mensaje_callcenter_fijo", new Object[] {  new Integer(mensajeCallcenterFijo) } );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the criteria 'mensaje_callcenter_libre = :mensajeCallcenterLibre'.
	 */
	public SmsEmpresaConfig[] findWhereMensajeCallcenterLibreEquals(String mensajeCallcenterLibre) throws SmsEmpresaConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje_callcenter_libre = ? ORDER BY mensaje_callcenter_libre", new Object[] { mensajeCallcenterLibre } );
	}

	/**
	 * Method 'SmsEmpresaConfigDaoImpl'
	 * 
	 */
	public SmsEmpresaConfigDaoImpl()
	{
	}

	/**
	 * Method 'SmsEmpresaConfigDaoImpl'
	 * 
	 * @param userConn
	 */
	public SmsEmpresaConfigDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sms_empresa_config";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SmsEmpresaConfig fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SmsEmpresaConfig dto = new SmsEmpresaConfig();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SmsEmpresaConfig[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SmsEmpresaConfig dto = new SmsEmpresaConfig();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SmsEmpresaConfig ret[] = new SmsEmpresaConfig[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SmsEmpresaConfig dto, ResultSet rs) throws SQLException
	{
		dto.setIdSmsEmpresaConfig( rs.getInt( COLUMN_ID_SMS_EMPRESA_CONFIG ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setPermisoSmsEmpleados( rs.getInt( COLUMN_PERMISO_SMS_EMPLEADOS ) );
		dto.setMensajeVenta( rs.getInt( COLUMN_MENSAJE_VENTA ) );
		dto.setMensajeVentaFijo( rs.getInt( COLUMN_MENSAJE_VENTA_FIJO ) );
		dto.setMensajeVentaLibre( rs.getString( COLUMN_MENSAJE_VENTA_LIBRE ) );
		dto.setMensajeAbono( rs.getInt( COLUMN_MENSAJE_ABONO ) );
		dto.setMensajeAbonoFijo( rs.getInt( COLUMN_MENSAJE_ABONO_FIJO ) );
		dto.setMensajeAbonoLibre( rs.getString( COLUMN_MENSAJE_ABONO_LIBRE ) );
		dto.setMensajeFactura( rs.getInt( COLUMN_MENSAJE_FACTURA ) );
		dto.setMensajeFacturaFijo( rs.getInt( COLUMN_MENSAJE_FACTURA_FIJO ) );
		dto.setMensajeFacturaLibre( rs.getString( COLUMN_MENSAJE_FACTURA_LIBRE ) );
		dto.setMensajeCancelaFac( rs.getInt( COLUMN_MENSAJE_CANCELA_FAC ) );
		dto.setMensajeCancelaFacFijo( rs.getInt( COLUMN_MENSAJE_CANCELA_FAC_FIJO ) );
		dto.setMensajeCancelaFacLibre( rs.getString( COLUMN_MENSAJE_CANCELA_FAC_LIBRE ) );
		dto.setMensajeCallcenter( rs.getInt( COLUMN_MENSAJE_CALLCENTER ) );
		dto.setMensajeCallcenterFijo( rs.getInt( COLUMN_MENSAJE_CALLCENTER_FIJO ) );
		dto.setMensajeCallcenterLibre( rs.getString( COLUMN_MENSAJE_CALLCENTER_LIBRE ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SmsEmpresaConfig dto)
	{
		dto.setIdSmsEmpresaConfigModified( false );
		dto.setIdEmpresaModified( false );
		dto.setPermisoSmsEmpleadosModified( false );
		dto.setMensajeVentaModified( false );
		dto.setMensajeVentaFijoModified( false );
		dto.setMensajeVentaLibreModified( false );
		dto.setMensajeAbonoModified( false );
		dto.setMensajeAbonoFijoModified( false );
		dto.setMensajeAbonoLibreModified( false );
		dto.setMensajeFacturaModified( false );
		dto.setMensajeFacturaFijoModified( false );
		dto.setMensajeFacturaLibreModified( false );
		dto.setMensajeCancelaFacModified( false );
		dto.setMensajeCancelaFacFijoModified( false );
		dto.setMensajeCancelaFacLibreModified( false );
		dto.setMensajeCallcenterModified( false );
		dto.setMensajeCallcenterFijoModified( false );
		dto.setMensajeCallcenterLibreModified( false );
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the specified arbitrary SQL statement
	 */
	public SmsEmpresaConfig[] findByDynamicSelect(String sql, Object[] sqlParams) throws SmsEmpresaConfigDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEmpresaConfigDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sms_empresa_config table that match the specified arbitrary SQL statement
	 */
	public SmsEmpresaConfig[] findByDynamicWhere(String sql, Object[] sqlParams) throws SmsEmpresaConfigDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEmpresaConfigDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
