/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class AlmacenDaoImpl extends AbstractDAO implements AlmacenDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_ALMACEN, ID_EMPRESA, ID_ESTATUS, NOMBRE, DIRECCION, AREA_ALMACEN, RESPONSABLE, PUESTO, TELEFONO, CORREO, SINCRONIZACION_MICROSIP, isPrincipal, EXCLUIR_MOVILES FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_ALMACEN, ID_EMPRESA, ID_ESTATUS, NOMBRE, DIRECCION, AREA_ALMACEN, RESPONSABLE, PUESTO, TELEFONO, CORREO, SINCRONIZACION_MICROSIP, isPrincipal, EXCLUIR_MOVILES ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_ALMACEN = ?, ID_EMPRESA = ?, ID_ESTATUS = ?, NOMBRE = ?, DIRECCION = ?, AREA_ALMACEN = ?, RESPONSABLE = ?, PUESTO = ?, TELEFONO = ?, CORREO = ?, SINCRONIZACION_MICROSIP = ?, isPrincipal = ?, EXCLUIR_MOVILES = ? WHERE ID_ALMACEN = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_ALMACEN = ?";

	/** 
	 * Index of column ID_ALMACEN
	 */
	protected static final int COLUMN_ID_ALMACEN = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 3;

	/** 
	 * Index of column NOMBRE
	 */
	protected static final int COLUMN_NOMBRE = 4;

	/** 
	 * Index of column DIRECCION
	 */
	protected static final int COLUMN_DIRECCION = 5;

	/** 
	 * Index of column AREA_ALMACEN
	 */
	protected static final int COLUMN_AREA_ALMACEN = 6;

	/** 
	 * Index of column RESPONSABLE
	 */
	protected static final int COLUMN_RESPONSABLE = 7;

	/** 
	 * Index of column PUESTO
	 */
	protected static final int COLUMN_PUESTO = 8;

	/** 
	 * Index of column TELEFONO
	 */
	protected static final int COLUMN_TELEFONO = 9;

	/** 
	 * Index of column CORREO
	 */
	protected static final int COLUMN_CORREO = 10;

	/** 
	 * Index of column SINCRONIZACION_MICROSIP
	 */
	protected static final int COLUMN_SINCRONIZACION_MICROSIP = 11;

	/** 
	 * Index of column isPrincipal
	 */
	protected static final int COLUMN_IS_PRINCIPAL = 12;

	/** 
	 * Index of column EXCLUIR_MOVILES
	 */
	protected static final int COLUMN_EXCLUIR_MOVILES = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column ID_ALMACEN
	 */
	protected static final int PK_COLUMN_ID_ALMACEN = 1;

	/** 
	 * Inserts a new row in the almacen table.
	 */
	public AlmacenPk insert(Almacen dto) throws AlmacenDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdAlmacenModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ALMACEN" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDireccionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DIRECCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAreaAlmacenModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "AREA_ALMACEN" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isResponsableModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RESPONSABLE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPuestoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PUESTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTelefonoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TELEFONO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCorreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CORREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SINCRONIZACION_MICROSIP" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPrincipalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "isPrincipal" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isExcluirMovilesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "EXCLUIR_MOVILES" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdAlmacenModified()) {
				stmt.setInt( index++, dto.getIdAlmacen() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isDireccionModified()) {
				stmt.setString( index++, dto.getDireccion() );
			}
		
			if (dto.isAreaAlmacenModified()) {
				if (dto.isAreaAlmacenNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getAreaAlmacen() );
				}
		
			}
		
			if (dto.isResponsableModified()) {
				stmt.setString( index++, dto.getResponsable() );
			}
		
			if (dto.isPuestoModified()) {
				stmt.setString( index++, dto.getPuesto() );
			}
		
			if (dto.isTelefonoModified()) {
				stmt.setString( index++, dto.getTelefono() );
			}
		
			if (dto.isCorreoModified()) {
				stmt.setString( index++, dto.getCorreo() );
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (dto.isSincronizacionMicrosipNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getSincronizacionMicrosip() );
				}
		
			}
		
			if (dto.isIsPrincipalModified()) {
				if (dto.isIsPrincipalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIsPrincipal() );
				}
		
			}
		
			if (dto.isExcluirMovilesModified()) {
				if (dto.isExcluirMovilesNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getExcluirMoviles() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdAlmacen( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AlmacenDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the almacen table.
	 */
	public void update(AlmacenPk pk, Almacen dto) throws AlmacenDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdAlmacenModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ALMACEN=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isNombreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE=?" );
				modified=true;
			}
		
			if (dto.isDireccionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DIRECCION=?" );
				modified=true;
			}
		
			if (dto.isAreaAlmacenModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "AREA_ALMACEN=?" );
				modified=true;
			}
		
			if (dto.isResponsableModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RESPONSABLE=?" );
				modified=true;
			}
		
			if (dto.isPuestoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PUESTO=?" );
				modified=true;
			}
		
			if (dto.isTelefonoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TELEFONO=?" );
				modified=true;
			}
		
			if (dto.isCorreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CORREO=?" );
				modified=true;
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SINCRONIZACION_MICROSIP=?" );
				modified=true;
			}
		
			if (dto.isIsPrincipalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "isPrincipal=?" );
				modified=true;
			}
		
			if (dto.isExcluirMovilesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "EXCLUIR_MOVILES=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_ALMACEN=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdAlmacenModified()) {
				stmt.setInt( index++, dto.getIdAlmacen() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isDireccionModified()) {
				stmt.setString( index++, dto.getDireccion() );
			}
		
			if (dto.isAreaAlmacenModified()) {
				if (dto.isAreaAlmacenNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getAreaAlmacen() );
				}
		
			}
		
			if (dto.isResponsableModified()) {
				stmt.setString( index++, dto.getResponsable() );
			}
		
			if (dto.isPuestoModified()) {
				stmt.setString( index++, dto.getPuesto() );
			}
		
			if (dto.isTelefonoModified()) {
				stmt.setString( index++, dto.getTelefono() );
			}
		
			if (dto.isCorreoModified()) {
				stmt.setString( index++, dto.getCorreo() );
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (dto.isSincronizacionMicrosipNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getSincronizacionMicrosip() );
				}
		
			}
		
			if (dto.isIsPrincipalModified()) {
				if (dto.isIsPrincipalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIsPrincipal() );
				}
		
			}
		
			if (dto.isExcluirMovilesModified()) {
				if (dto.isExcluirMovilesNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getExcluirMoviles() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdAlmacen() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AlmacenDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the almacen table.
	 */
	public void delete(AlmacenPk pk) throws AlmacenDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdAlmacen() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AlmacenDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the almacen table that matches the specified primary-key value.
	 */
	public Almacen findByPrimaryKey(AlmacenPk pk) throws AlmacenDaoException
	{
		return findByPrimaryKey( pk.getIdAlmacen() );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'ID_ALMACEN = :idAlmacen'.
	 */
	public Almacen findByPrimaryKey(int idAlmacen) throws AlmacenDaoException
	{
		Almacen ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_ALMACEN = ?", new Object[] {  new Integer(idAlmacen) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria ''.
	 */
	public Almacen[] findAll() throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_ALMACEN", null );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'ID_ALMACEN = :idAlmacen'.
	 */
	public Almacen[] findWhereIdAlmacenEquals(int idAlmacen) throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ALMACEN = ? ORDER BY ID_ALMACEN", new Object[] {  new Integer(idAlmacen) } );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Almacen[] findWhereIdEmpresaEquals(int idEmpresa) throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Almacen[] findWhereIdEstatusEquals(int idEstatus) throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'NOMBRE = :nombre'.
	 */
	public Almacen[] findWhereNombreEquals(String nombre) throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE = ? ORDER BY NOMBRE", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'DIRECCION = :direccion'.
	 */
	public Almacen[] findWhereDireccionEquals(String direccion) throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIRECCION = ? ORDER BY DIRECCION", new Object[] { direccion } );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'AREA_ALMACEN = :areaAlmacen'.
	 */
	public Almacen[] findWhereAreaAlmacenEquals(double areaAlmacen) throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AREA_ALMACEN = ? ORDER BY AREA_ALMACEN", new Object[] {  new Double(areaAlmacen) } );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'RESPONSABLE = :responsable'.
	 */
	public Almacen[] findWhereResponsableEquals(String responsable) throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RESPONSABLE = ? ORDER BY RESPONSABLE", new Object[] { responsable } );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'PUESTO = :puesto'.
	 */
	public Almacen[] findWherePuestoEquals(String puesto) throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PUESTO = ? ORDER BY PUESTO", new Object[] { puesto } );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'TELEFONO = :telefono'.
	 */
	public Almacen[] findWhereTelefonoEquals(String telefono) throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TELEFONO = ? ORDER BY TELEFONO", new Object[] { telefono } );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'CORREO = :correo'.
	 */
	public Almacen[] findWhereCorreoEquals(String correo) throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CORREO = ? ORDER BY CORREO", new Object[] { correo } );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'SINCRONIZACION_MICROSIP = :sincronizacionMicrosip'.
	 */
	public Almacen[] findWhereSincronizacionMicrosipEquals(int sincronizacionMicrosip) throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SINCRONIZACION_MICROSIP = ? ORDER BY SINCRONIZACION_MICROSIP", new Object[] {  new Integer(sincronizacionMicrosip) } );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'isPrincipal = :isPrincipal'.
	 */
	public Almacen[] findWhereIsPrincipalEquals(int isPrincipal) throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE isPrincipal = ? ORDER BY isPrincipal", new Object[] {  new Integer(isPrincipal) } );
	}

	/** 
	 * Returns all rows from the almacen table that match the criteria 'EXCLUIR_MOVILES = :excluirMoviles'.
	 */
	public Almacen[] findWhereExcluirMovilesEquals(int excluirMoviles) throws AlmacenDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXCLUIR_MOVILES = ? ORDER BY EXCLUIR_MOVILES", new Object[] {  new Integer(excluirMoviles) } );
	}

	/**
	 * Method 'AlmacenDaoImpl'
	 * 
	 */
	public AlmacenDaoImpl()
	{
	}

	/**
	 * Method 'AlmacenDaoImpl'
	 * 
	 * @param userConn
	 */
	public AlmacenDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "almacen";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Almacen fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Almacen dto = new Almacen();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Almacen[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Almacen dto = new Almacen();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Almacen ret[] = new Almacen[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Almacen dto, ResultSet rs) throws SQLException
	{
		dto.setIdAlmacen( rs.getInt( COLUMN_ID_ALMACEN ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setDireccion( rs.getString( COLUMN_DIRECCION ) );
		dto.setAreaAlmacen( rs.getDouble( COLUMN_AREA_ALMACEN ) );
		if (rs.wasNull()) {
			dto.setAreaAlmacenNull( true );
		}
		
		dto.setResponsable( rs.getString( COLUMN_RESPONSABLE ) );
		dto.setPuesto( rs.getString( COLUMN_PUESTO ) );
		dto.setTelefono( rs.getString( COLUMN_TELEFONO ) );
		dto.setCorreo( rs.getString( COLUMN_CORREO ) );
		dto.setSincronizacionMicrosip( rs.getInt( COLUMN_SINCRONIZACION_MICROSIP ) );
		if (rs.wasNull()) {
			dto.setSincronizacionMicrosipNull( true );
		}
		
		dto.setIsPrincipal( rs.getInt( COLUMN_IS_PRINCIPAL ) );
		if (rs.wasNull()) {
			dto.setIsPrincipalNull( true );
		}
		
		dto.setExcluirMoviles( rs.getInt( COLUMN_EXCLUIR_MOVILES ) );
		if (rs.wasNull()) {
			dto.setExcluirMovilesNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Almacen dto)
	{
		dto.setIdAlmacenModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEstatusModified( false );
		dto.setNombreModified( false );
		dto.setDireccionModified( false );
		dto.setAreaAlmacenModified( false );
		dto.setResponsableModified( false );
		dto.setPuestoModified( false );
		dto.setTelefonoModified( false );
		dto.setCorreoModified( false );
		dto.setSincronizacionMicrosipModified( false );
		dto.setIsPrincipalModified( false );
		dto.setExcluirMovilesModified( false );
	}

	/** 
	 * Returns all rows from the almacen table that match the specified arbitrary SQL statement
	 */
	public Almacen[] findByDynamicSelect(String sql, Object[] sqlParams) throws AlmacenDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AlmacenDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the almacen table that match the specified arbitrary SQL statement
	 */
	public Almacen[] findByDynamicWhere(String sql, Object[] sqlParams) throws AlmacenDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AlmacenDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
