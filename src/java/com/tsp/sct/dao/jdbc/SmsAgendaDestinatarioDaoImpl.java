/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SmsAgendaDestinatarioDaoImpl extends AbstractDAO implements SmsAgendaDestinatarioDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_sms_agenda_dest, numero_celular, nombre, campo_extra_1, campo_extra_2, campo_extra_3, campo_extra_4, id_sms_agenda_grupo, id_empresa, id_estatus FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_sms_agenda_dest, numero_celular, nombre, campo_extra_1, campo_extra_2, campo_extra_3, campo_extra_4, id_sms_agenda_grupo, id_empresa, id_estatus ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_sms_agenda_dest = ?, numero_celular = ?, nombre = ?, campo_extra_1 = ?, campo_extra_2 = ?, campo_extra_3 = ?, campo_extra_4 = ?, id_sms_agenda_grupo = ?, id_empresa = ?, id_estatus = ? WHERE id_sms_agenda_dest = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_sms_agenda_dest = ?";

	/** 
	 * Index of column id_sms_agenda_dest
	 */
	protected static final int COLUMN_ID_SMS_AGENDA_DEST = 1;

	/** 
	 * Index of column numero_celular
	 */
	protected static final int COLUMN_NUMERO_CELULAR = 2;

	/** 
	 * Index of column nombre
	 */
	protected static final int COLUMN_NOMBRE = 3;

	/** 
	 * Index of column campo_extra_1
	 */
	protected static final int COLUMN_CAMPO_EXTRA1 = 4;

	/** 
	 * Index of column campo_extra_2
	 */
	protected static final int COLUMN_CAMPO_EXTRA2 = 5;

	/** 
	 * Index of column campo_extra_3
	 */
	protected static final int COLUMN_CAMPO_EXTRA3 = 6;

	/** 
	 * Index of column campo_extra_4
	 */
	protected static final int COLUMN_CAMPO_EXTRA4 = 7;

	/** 
	 * Index of column id_sms_agenda_grupo
	 */
	protected static final int COLUMN_ID_SMS_AGENDA_GRUPO = 8;

	/** 
	 * Index of column id_empresa
	 */
	protected static final int COLUMN_ID_EMPRESA = 9;

	/** 
	 * Index of column id_estatus
	 */
	protected static final int COLUMN_ID_ESTATUS = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column id_sms_agenda_dest
	 */
	protected static final int PK_COLUMN_ID_SMS_AGENDA_DEST = 1;

	/** 
	 * Inserts a new row in the sms_agenda_destinatario table.
	 */
	public SmsAgendaDestinatarioPk insert(SmsAgendaDestinatario dto) throws SmsAgendaDestinatarioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdSmsAgendaDestModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_agenda_dest" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumeroCelularModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "numero_celular" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "nombre" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCampoExtra1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "campo_extra_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCampoExtra2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "campo_extra_2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCampoExtra3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "campo_extra_3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCampoExtra4Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "campo_extra_4" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSmsAgendaGrupoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_agenda_grupo" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_empresa" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_estatus" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdSmsAgendaDestModified()) {
				stmt.setInt( index++, dto.getIdSmsAgendaDest() );
			}
		
			if (dto.isNumeroCelularModified()) {
				stmt.setString( index++, dto.getNumeroCelular() );
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isCampoExtra1Modified()) {
				stmt.setString( index++, dto.getCampoExtra1() );
			}
		
			if (dto.isCampoExtra2Modified()) {
				stmt.setString( index++, dto.getCampoExtra2() );
			}
		
			if (dto.isCampoExtra3Modified()) {
				stmt.setString( index++, dto.getCampoExtra3() );
			}
		
			if (dto.isCampoExtra4Modified()) {
				stmt.setString( index++, dto.getCampoExtra4() );
			}
		
			if (dto.isIdSmsAgendaGrupoModified()) {
				if (dto.isIdSmsAgendaGrupoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsAgendaGrupo() );
				}
		
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdSmsAgendaDest( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsAgendaDestinatarioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sms_agenda_destinatario table.
	 */
	public void update(SmsAgendaDestinatarioPk pk, SmsAgendaDestinatario dto) throws SmsAgendaDestinatarioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdSmsAgendaDestModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_agenda_dest=?" );
				modified=true;
			}
		
			if (dto.isNumeroCelularModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "numero_celular=?" );
				modified=true;
			}
		
			if (dto.isNombreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "nombre=?" );
				modified=true;
			}
		
			if (dto.isCampoExtra1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "campo_extra_1=?" );
				modified=true;
			}
		
			if (dto.isCampoExtra2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "campo_extra_2=?" );
				modified=true;
			}
		
			if (dto.isCampoExtra3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "campo_extra_3=?" );
				modified=true;
			}
		
			if (dto.isCampoExtra4Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "campo_extra_4=?" );
				modified=true;
			}
		
			if (dto.isIdSmsAgendaGrupoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_agenda_grupo=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_empresa=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_estatus=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_sms_agenda_dest=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdSmsAgendaDestModified()) {
				stmt.setInt( index++, dto.getIdSmsAgendaDest() );
			}
		
			if (dto.isNumeroCelularModified()) {
				stmt.setString( index++, dto.getNumeroCelular() );
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isCampoExtra1Modified()) {
				stmt.setString( index++, dto.getCampoExtra1() );
			}
		
			if (dto.isCampoExtra2Modified()) {
				stmt.setString( index++, dto.getCampoExtra2() );
			}
		
			if (dto.isCampoExtra3Modified()) {
				stmt.setString( index++, dto.getCampoExtra3() );
			}
		
			if (dto.isCampoExtra4Modified()) {
				stmt.setString( index++, dto.getCampoExtra4() );
			}
		
			if (dto.isIdSmsAgendaGrupoModified()) {
				if (dto.isIdSmsAgendaGrupoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsAgendaGrupo() );
				}
		
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			stmt.setInt( index++, pk.getIdSmsAgendaDest() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsAgendaDestinatarioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sms_agenda_destinatario table.
	 */
	public void delete(SmsAgendaDestinatarioPk pk) throws SmsAgendaDestinatarioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdSmsAgendaDest() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsAgendaDestinatarioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sms_agenda_destinatario table that matches the specified primary-key value.
	 */
	public SmsAgendaDestinatario findByPrimaryKey(SmsAgendaDestinatarioPk pk) throws SmsAgendaDestinatarioDaoException
	{
		return findByPrimaryKey( pk.getIdSmsAgendaDest() );
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the criteria 'id_sms_agenda_dest = :idSmsAgendaDest'.
	 */
	public SmsAgendaDestinatario findByPrimaryKey(int idSmsAgendaDest) throws SmsAgendaDestinatarioDaoException
	{
		SmsAgendaDestinatario ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_sms_agenda_dest = ?", new Object[] {  new Integer(idSmsAgendaDest) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the criteria ''.
	 */
	public SmsAgendaDestinatario[] findAll() throws SmsAgendaDestinatarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_sms_agenda_dest", null );
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the criteria 'id_sms_agenda_dest = :idSmsAgendaDest'.
	 */
	public SmsAgendaDestinatario[] findWhereIdSmsAgendaDestEquals(int idSmsAgendaDest) throws SmsAgendaDestinatarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_agenda_dest = ? ORDER BY id_sms_agenda_dest", new Object[] {  new Integer(idSmsAgendaDest) } );
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the criteria 'numero_celular = :numeroCelular'.
	 */
	public SmsAgendaDestinatario[] findWhereNumeroCelularEquals(String numeroCelular) throws SmsAgendaDestinatarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE numero_celular = ? ORDER BY numero_celular", new Object[] { numeroCelular } );
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the criteria 'nombre = :nombre'.
	 */
	public SmsAgendaDestinatario[] findWhereNombreEquals(String nombre) throws SmsAgendaDestinatarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nombre = ? ORDER BY nombre", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the criteria 'campo_extra_1 = :campoExtra1'.
	 */
	public SmsAgendaDestinatario[] findWhereCampoExtra1Equals(String campoExtra1) throws SmsAgendaDestinatarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE campo_extra_1 = ? ORDER BY campo_extra_1", new Object[] { campoExtra1 } );
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the criteria 'campo_extra_2 = :campoExtra2'.
	 */
	public SmsAgendaDestinatario[] findWhereCampoExtra2Equals(String campoExtra2) throws SmsAgendaDestinatarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE campo_extra_2 = ? ORDER BY campo_extra_2", new Object[] { campoExtra2 } );
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the criteria 'campo_extra_3 = :campoExtra3'.
	 */
	public SmsAgendaDestinatario[] findWhereCampoExtra3Equals(String campoExtra3) throws SmsAgendaDestinatarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE campo_extra_3 = ? ORDER BY campo_extra_3", new Object[] { campoExtra3 } );
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the criteria 'campo_extra_4 = :campoExtra4'.
	 */
	public SmsAgendaDestinatario[] findWhereCampoExtra4Equals(String campoExtra4) throws SmsAgendaDestinatarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE campo_extra_4 = ? ORDER BY campo_extra_4", new Object[] { campoExtra4 } );
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the criteria 'id_sms_agenda_grupo = :idSmsAgendaGrupo'.
	 */
	public SmsAgendaDestinatario[] findWhereIdSmsAgendaGrupoEquals(int idSmsAgendaGrupo) throws SmsAgendaDestinatarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_agenda_grupo = ? ORDER BY id_sms_agenda_grupo", new Object[] {  new Integer(idSmsAgendaGrupo) } );
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public SmsAgendaDestinatario[] findWhereIdEmpresaEquals(int idEmpresa) throws SmsAgendaDestinatarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_empresa = ? ORDER BY id_empresa", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public SmsAgendaDestinatario[] findWhereIdEstatusEquals(int idEstatus) throws SmsAgendaDestinatarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_estatus = ? ORDER BY id_estatus", new Object[] {  new Integer(idEstatus) } );
	}

	/**
	 * Method 'SmsAgendaDestinatarioDaoImpl'
	 * 
	 */
	public SmsAgendaDestinatarioDaoImpl()
	{
	}

	/**
	 * Method 'SmsAgendaDestinatarioDaoImpl'
	 * 
	 * @param userConn
	 */
	public SmsAgendaDestinatarioDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sms_agenda_destinatario";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SmsAgendaDestinatario fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SmsAgendaDestinatario dto = new SmsAgendaDestinatario();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SmsAgendaDestinatario[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SmsAgendaDestinatario dto = new SmsAgendaDestinatario();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SmsAgendaDestinatario ret[] = new SmsAgendaDestinatario[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SmsAgendaDestinatario dto, ResultSet rs) throws SQLException
	{
		dto.setIdSmsAgendaDest( rs.getInt( COLUMN_ID_SMS_AGENDA_DEST ) );
		dto.setNumeroCelular( rs.getString( COLUMN_NUMERO_CELULAR ) );
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setCampoExtra1( rs.getString( COLUMN_CAMPO_EXTRA1 ) );
		dto.setCampoExtra2( rs.getString( COLUMN_CAMPO_EXTRA2 ) );
		dto.setCampoExtra3( rs.getString( COLUMN_CAMPO_EXTRA3 ) );
		dto.setCampoExtra4( rs.getString( COLUMN_CAMPO_EXTRA4 ) );
		dto.setIdSmsAgendaGrupo( rs.getInt( COLUMN_ID_SMS_AGENDA_GRUPO ) );
		if (rs.wasNull()) {
			dto.setIdSmsAgendaGrupoNull( true );
		}
		
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		if (rs.wasNull()) {
			dto.setIdEmpresaNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SmsAgendaDestinatario dto)
	{
		dto.setIdSmsAgendaDestModified( false );
		dto.setNumeroCelularModified( false );
		dto.setNombreModified( false );
		dto.setCampoExtra1Modified( false );
		dto.setCampoExtra2Modified( false );
		dto.setCampoExtra3Modified( false );
		dto.setCampoExtra4Modified( false );
		dto.setIdSmsAgendaGrupoModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEstatusModified( false );
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the specified arbitrary SQL statement
	 */
	public SmsAgendaDestinatario[] findByDynamicSelect(String sql, Object[] sqlParams) throws SmsAgendaDestinatarioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsAgendaDestinatarioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sms_agenda_destinatario table that match the specified arbitrary SQL statement
	 */
	public SmsAgendaDestinatario[] findByDynamicWhere(String sql, Object[] sqlParams) throws SmsAgendaDestinatarioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsAgendaDestinatarioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
