/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class NominaEmpleadoDaoImpl extends AbstractDAO implements NominaEmpleadoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_EMPLEADO, ID_EMPRESA, ID_ESTATUS, RFC, NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO, NUM_EMPLEADO, CURP, ID_NOMINA_REGIMEN_FISCAL, NUM_SEGURO_SOCIAL, ID_PUESTO, ID_DEPARTAMENTO, CLABE, ID_NOMINA_BANCO, FECHA_INICIO_RELACION_LABORAL, FECHA_ALTA, TIPO_CONTRATO, TIPO_JORNADA, PERIODICIDAD_PAGO, SALARIO_BASE_COT_APOR, ID_RIESGO_PUESTO, SALARIO_DIARIO_INTEGRADO, FECHA_BAJA, CORREO, TELEFONO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_EMPLEADO, ID_EMPRESA, ID_ESTATUS, RFC, NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO, NUM_EMPLEADO, CURP, ID_NOMINA_REGIMEN_FISCAL, NUM_SEGURO_SOCIAL, ID_PUESTO, ID_DEPARTAMENTO, CLABE, ID_NOMINA_BANCO, FECHA_INICIO_RELACION_LABORAL, FECHA_ALTA, TIPO_CONTRATO, TIPO_JORNADA, PERIODICIDAD_PAGO, SALARIO_BASE_COT_APOR, ID_RIESGO_PUESTO, SALARIO_DIARIO_INTEGRADO, FECHA_BAJA, CORREO, TELEFONO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_EMPLEADO = ?, ID_EMPRESA = ?, ID_ESTATUS = ?, RFC = ?, NOMBRE = ?, APELLIDO_PATERNO = ?, APELLIDO_MATERNO = ?, NUM_EMPLEADO = ?, CURP = ?, ID_NOMINA_REGIMEN_FISCAL = ?, NUM_SEGURO_SOCIAL = ?, ID_PUESTO = ?, ID_DEPARTAMENTO = ?, CLABE = ?, ID_NOMINA_BANCO = ?, FECHA_INICIO_RELACION_LABORAL = ?, FECHA_ALTA = ?, TIPO_CONTRATO = ?, TIPO_JORNADA = ?, PERIODICIDAD_PAGO = ?, SALARIO_BASE_COT_APOR = ?, ID_RIESGO_PUESTO = ?, SALARIO_DIARIO_INTEGRADO = ?, FECHA_BAJA = ?, CORREO = ?, TELEFONO = ? WHERE ID_EMPLEADO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_EMPLEADO = ?";

	/** 
	 * Index of column ID_EMPLEADO
	 */
	protected static final int COLUMN_ID_EMPLEADO = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 3;

	/** 
	 * Index of column RFC
	 */
	protected static final int COLUMN_RFC = 4;

	/** 
	 * Index of column NOMBRE
	 */
	protected static final int COLUMN_NOMBRE = 5;

	/** 
	 * Index of column APELLIDO_PATERNO
	 */
	protected static final int COLUMN_APELLIDO_PATERNO = 6;

	/** 
	 * Index of column APELLIDO_MATERNO
	 */
	protected static final int COLUMN_APELLIDO_MATERNO = 7;

	/** 
	 * Index of column NUM_EMPLEADO
	 */
	protected static final int COLUMN_NUM_EMPLEADO = 8;

	/** 
	 * Index of column CURP
	 */
	protected static final int COLUMN_CURP = 9;

	/** 
	 * Index of column ID_NOMINA_REGIMEN_FISCAL
	 */
	protected static final int COLUMN_ID_NOMINA_REGIMEN_FISCAL = 10;

	/** 
	 * Index of column NUM_SEGURO_SOCIAL
	 */
	protected static final int COLUMN_NUM_SEGURO_SOCIAL = 11;

	/** 
	 * Index of column ID_PUESTO
	 */
	protected static final int COLUMN_ID_PUESTO = 12;

	/** 
	 * Index of column ID_DEPARTAMENTO
	 */
	protected static final int COLUMN_ID_DEPARTAMENTO = 13;

	/** 
	 * Index of column CLABE
	 */
	protected static final int COLUMN_CLABE = 14;

	/** 
	 * Index of column ID_NOMINA_BANCO
	 */
	protected static final int COLUMN_ID_NOMINA_BANCO = 15;

	/** 
	 * Index of column FECHA_INICIO_RELACION_LABORAL
	 */
	protected static final int COLUMN_FECHA_INICIO_RELACION_LABORAL = 16;

	/** 
	 * Index of column FECHA_ALTA
	 */
	protected static final int COLUMN_FECHA_ALTA = 17;

	/** 
	 * Index of column TIPO_CONTRATO
	 */
	protected static final int COLUMN_TIPO_CONTRATO = 18;

	/** 
	 * Index of column TIPO_JORNADA
	 */
	protected static final int COLUMN_TIPO_JORNADA = 19;

	/** 
	 * Index of column PERIODICIDAD_PAGO
	 */
	protected static final int COLUMN_PERIODICIDAD_PAGO = 20;

	/** 
	 * Index of column SALARIO_BASE_COT_APOR
	 */
	protected static final int COLUMN_SALARIO_BASE_COT_APOR = 21;

	/** 
	 * Index of column ID_RIESGO_PUESTO
	 */
	protected static final int COLUMN_ID_RIESGO_PUESTO = 22;

	/** 
	 * Index of column SALARIO_DIARIO_INTEGRADO
	 */
	protected static final int COLUMN_SALARIO_DIARIO_INTEGRADO = 23;

	/** 
	 * Index of column FECHA_BAJA
	 */
	protected static final int COLUMN_FECHA_BAJA = 24;

	/** 
	 * Index of column CORREO
	 */
	protected static final int COLUMN_CORREO = 25;

	/** 
	 * Index of column TELEFONO
	 */
	protected static final int COLUMN_TELEFONO = 26;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 26;

	/** 
	 * Index of primary-key column ID_EMPLEADO
	 */
	protected static final int PK_COLUMN_ID_EMPLEADO = 1;

	/** 
	 * Inserts a new row in the nomina_empleado table.
	 */
	public NominaEmpleadoPk insert(NominaEmpleado dto) throws NominaEmpleadoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdEmpleadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPLEADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRfcModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RFC" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isApellidoPaternoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "APELLIDO_PATERNO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isApellidoMaternoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "APELLIDO_MATERNO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumEmpleadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUM_EMPLEADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCurpModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CURP" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdNominaRegimenFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_NOMINA_REGIMEN_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumSeguroSocialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUM_SEGURO_SOCIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdPuestoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PUESTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdDepartamentoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_DEPARTAMENTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isClabeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CLABE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdNominaBancoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_NOMINA_BANCO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaInicioRelacionLaboralModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_INICIO_RELACION_LABORAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaAltaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_ALTA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoContratoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIPO_CONTRATO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoJornadaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIPO_JORNADA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPeriodicidadPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PERIODICIDAD_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSalarioBaseCotAporModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SALARIO_BASE_COT_APOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdRiesgoPuestoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_RIESGO_PUESTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSalarioDiarioIntegradoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SALARIO_DIARIO_INTEGRADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaBajaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_BAJA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCorreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CORREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTelefonoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TELEFONO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdEmpleado() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isRfcModified()) {
				stmt.setString( index++, dto.getRfc() );
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isApellidoPaternoModified()) {
				stmt.setString( index++, dto.getApellidoPaterno() );
			}
		
			if (dto.isApellidoMaternoModified()) {
				stmt.setString( index++, dto.getApellidoMaterno() );
			}
		
			if (dto.isNumEmpleadoModified()) {
				stmt.setString( index++, dto.getNumEmpleado() );
			}
		
			if (dto.isCurpModified()) {
				stmt.setString( index++, dto.getCurp() );
			}
		
			if (dto.isIdNominaRegimenFiscalModified()) {
				if (dto.isIdNominaRegimenFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdNominaRegimenFiscal() );
				}
		
			}
		
			if (dto.isNumSeguroSocialModified()) {
				stmt.setString( index++, dto.getNumSeguroSocial() );
			}
		
			if (dto.isIdPuestoModified()) {
				if (dto.isIdPuestoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPuesto() );
				}
		
			}
		
			if (dto.isIdDepartamentoModified()) {
				if (dto.isIdDepartamentoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdDepartamento() );
				}
		
			}
		
			if (dto.isClabeModified()) {
				stmt.setString( index++, dto.getClabe() );
			}
		
			if (dto.isIdNominaBancoModified()) {
				if (dto.isIdNominaBancoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdNominaBanco() );
				}
		
			}
		
			if (dto.isFechaInicioRelacionLaboralModified()) {
				stmt.setDate(index++, dto.getFechaInicioRelacionLaboral()==null ? null : new java.sql.Date( dto.getFechaInicioRelacionLaboral().getTime() ) );
			}
		
			if (dto.isFechaAltaModified()) {
				stmt.setDate(index++, dto.getFechaAlta()==null ? null : new java.sql.Date( dto.getFechaAlta().getTime() ) );
			}
		
			if (dto.isTipoContratoModified()) {
				stmt.setString( index++, dto.getTipoContrato() );
			}
		
			if (dto.isTipoJornadaModified()) {
				stmt.setString( index++, dto.getTipoJornada() );
			}
		
			if (dto.isPeriodicidadPagoModified()) {
				stmt.setString( index++, dto.getPeriodicidadPago() );
			}
		
			if (dto.isSalarioBaseCotAporModified()) {
				if (dto.isSalarioBaseCotAporNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSalarioBaseCotApor() );
				}
		
			}
		
			if (dto.isIdRiesgoPuestoModified()) {
				stmt.setInt( index++, dto.getIdRiesgoPuesto() );
			}
		
			if (dto.isSalarioDiarioIntegradoModified()) {
				if (dto.isSalarioDiarioIntegradoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSalarioDiarioIntegrado() );
				}
		
			}
		
			if (dto.isFechaBajaModified()) {
				stmt.setDate(index++, dto.getFechaBaja()==null ? null : new java.sql.Date( dto.getFechaBaja().getTime() ) );
			}
		
			if (dto.isCorreoModified()) {
				stmt.setString( index++, dto.getCorreo() );
			}
		
			if (dto.isTelefonoModified()) {
				stmt.setString( index++, dto.getTelefono() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdEmpleado( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NominaEmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the nomina_empleado table.
	 */
	public void update(NominaEmpleadoPk pk, NominaEmpleado dto) throws NominaEmpleadoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdEmpleadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPLEADO=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isRfcModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RFC=?" );
				modified=true;
			}
		
			if (dto.isNombreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE=?" );
				modified=true;
			}
		
			if (dto.isApellidoPaternoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "APELLIDO_PATERNO=?" );
				modified=true;
			}
		
			if (dto.isApellidoMaternoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "APELLIDO_MATERNO=?" );
				modified=true;
			}
		
			if (dto.isNumEmpleadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUM_EMPLEADO=?" );
				modified=true;
			}
		
			if (dto.isCurpModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CURP=?" );
				modified=true;
			}
		
			if (dto.isIdNominaRegimenFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_NOMINA_REGIMEN_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isNumSeguroSocialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUM_SEGURO_SOCIAL=?" );
				modified=true;
			}
		
			if (dto.isIdPuestoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PUESTO=?" );
				modified=true;
			}
		
			if (dto.isIdDepartamentoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_DEPARTAMENTO=?" );
				modified=true;
			}
		
			if (dto.isClabeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CLABE=?" );
				modified=true;
			}
		
			if (dto.isIdNominaBancoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_NOMINA_BANCO=?" );
				modified=true;
			}
		
			if (dto.isFechaInicioRelacionLaboralModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_INICIO_RELACION_LABORAL=?" );
				modified=true;
			}
		
			if (dto.isFechaAltaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_ALTA=?" );
				modified=true;
			}
		
			if (dto.isTipoContratoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIPO_CONTRATO=?" );
				modified=true;
			}
		
			if (dto.isTipoJornadaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIPO_JORNADA=?" );
				modified=true;
			}
		
			if (dto.isPeriodicidadPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PERIODICIDAD_PAGO=?" );
				modified=true;
			}
		
			if (dto.isSalarioBaseCotAporModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SALARIO_BASE_COT_APOR=?" );
				modified=true;
			}
		
			if (dto.isIdRiesgoPuestoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_RIESGO_PUESTO=?" );
				modified=true;
			}
		
			if (dto.isSalarioDiarioIntegradoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SALARIO_DIARIO_INTEGRADO=?" );
				modified=true;
			}
		
			if (dto.isFechaBajaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_BAJA=?" );
				modified=true;
			}
		
			if (dto.isCorreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CORREO=?" );
				modified=true;
			}
		
			if (dto.isTelefonoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TELEFONO=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_EMPLEADO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdEmpleado() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isRfcModified()) {
				stmt.setString( index++, dto.getRfc() );
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isApellidoPaternoModified()) {
				stmt.setString( index++, dto.getApellidoPaterno() );
			}
		
			if (dto.isApellidoMaternoModified()) {
				stmt.setString( index++, dto.getApellidoMaterno() );
			}
		
			if (dto.isNumEmpleadoModified()) {
				stmt.setString( index++, dto.getNumEmpleado() );
			}
		
			if (dto.isCurpModified()) {
				stmt.setString( index++, dto.getCurp() );
			}
		
			if (dto.isIdNominaRegimenFiscalModified()) {
				if (dto.isIdNominaRegimenFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdNominaRegimenFiscal() );
				}
		
			}
		
			if (dto.isNumSeguroSocialModified()) {
				stmt.setString( index++, dto.getNumSeguroSocial() );
			}
		
			if (dto.isIdPuestoModified()) {
				if (dto.isIdPuestoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPuesto() );
				}
		
			}
		
			if (dto.isIdDepartamentoModified()) {
				if (dto.isIdDepartamentoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdDepartamento() );
				}
		
			}
		
			if (dto.isClabeModified()) {
				stmt.setString( index++, dto.getClabe() );
			}
		
			if (dto.isIdNominaBancoModified()) {
				if (dto.isIdNominaBancoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdNominaBanco() );
				}
		
			}
		
			if (dto.isFechaInicioRelacionLaboralModified()) {
				stmt.setDate(index++, dto.getFechaInicioRelacionLaboral()==null ? null : new java.sql.Date( dto.getFechaInicioRelacionLaboral().getTime() ) );
			}
		
			if (dto.isFechaAltaModified()) {
				stmt.setDate(index++, dto.getFechaAlta()==null ? null : new java.sql.Date( dto.getFechaAlta().getTime() ) );
			}
		
			if (dto.isTipoContratoModified()) {
				stmt.setString( index++, dto.getTipoContrato() );
			}
		
			if (dto.isTipoJornadaModified()) {
				stmt.setString( index++, dto.getTipoJornada() );
			}
		
			if (dto.isPeriodicidadPagoModified()) {
				stmt.setString( index++, dto.getPeriodicidadPago() );
			}
		
			if (dto.isSalarioBaseCotAporModified()) {
				if (dto.isSalarioBaseCotAporNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSalarioBaseCotApor() );
				}
		
			}
		
			if (dto.isIdRiesgoPuestoModified()) {
				stmt.setInt( index++, dto.getIdRiesgoPuesto() );
			}
		
			if (dto.isSalarioDiarioIntegradoModified()) {
				if (dto.isSalarioDiarioIntegradoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSalarioDiarioIntegrado() );
				}
		
			}
		
			if (dto.isFechaBajaModified()) {
				stmt.setDate(index++, dto.getFechaBaja()==null ? null : new java.sql.Date( dto.getFechaBaja().getTime() ) );
			}
		
			if (dto.isCorreoModified()) {
				stmt.setString( index++, dto.getCorreo() );
			}
		
			if (dto.isTelefonoModified()) {
				stmt.setString( index++, dto.getTelefono() );
			}
		
			stmt.setInt( index++, pk.getIdEmpleado() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NominaEmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the nomina_empleado table.
	 */
	public void delete(NominaEmpleadoPk pk) throws NominaEmpleadoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdEmpleado() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NominaEmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the nomina_empleado table that matches the specified primary-key value.
	 */
	public NominaEmpleado findByPrimaryKey(NominaEmpleadoPk pk) throws NominaEmpleadoDaoException
	{
		return findByPrimaryKey( pk.getIdEmpleado() );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public NominaEmpleado findByPrimaryKey(int idEmpleado) throws NominaEmpleadoDaoException
	{
		NominaEmpleado ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPLEADO = ?", new Object[] {  new Integer(idEmpleado) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria ''.
	 */
	public NominaEmpleado[] findAll() throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_EMPLEADO", null );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public NominaEmpleado[] findWhereIdEmpleadoEquals(int idEmpleado) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPLEADO = ? ORDER BY ID_EMPLEADO", new Object[] {  new Integer(idEmpleado) } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public NominaEmpleado[] findWhereIdEmpresaEquals(int idEmpresa) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public NominaEmpleado[] findWhereIdEstatusEquals(int idEstatus) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'RFC = :rfc'.
	 */
	public NominaEmpleado[] findWhereRfcEquals(String rfc) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC = ? ORDER BY RFC", new Object[] { rfc } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'NOMBRE = :nombre'.
	 */
	public NominaEmpleado[] findWhereNombreEquals(String nombre) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE = ? ORDER BY NOMBRE", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'APELLIDO_PATERNO = :apellidoPaterno'.
	 */
	public NominaEmpleado[] findWhereApellidoPaternoEquals(String apellidoPaterno) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APELLIDO_PATERNO = ? ORDER BY APELLIDO_PATERNO", new Object[] { apellidoPaterno } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'APELLIDO_MATERNO = :apellidoMaterno'.
	 */
	public NominaEmpleado[] findWhereApellidoMaternoEquals(String apellidoMaterno) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APELLIDO_MATERNO = ? ORDER BY APELLIDO_MATERNO", new Object[] { apellidoMaterno } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'NUM_EMPLEADO = :numEmpleado'.
	 */
	public NominaEmpleado[] findWhereNumEmpleadoEquals(String numEmpleado) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUM_EMPLEADO = ? ORDER BY NUM_EMPLEADO", new Object[] { numEmpleado } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'CURP = :curp'.
	 */
	public NominaEmpleado[] findWhereCurpEquals(String curp) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CURP = ? ORDER BY CURP", new Object[] { curp } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_NOMINA_REGIMEN_FISCAL = :idNominaRegimenFiscal'.
	 */
	public NominaEmpleado[] findWhereIdNominaRegimenFiscalEquals(int idNominaRegimenFiscal) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_NOMINA_REGIMEN_FISCAL = ? ORDER BY ID_NOMINA_REGIMEN_FISCAL", new Object[] {  new Integer(idNominaRegimenFiscal) } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'NUM_SEGURO_SOCIAL = :numSeguroSocial'.
	 */
	public NominaEmpleado[] findWhereNumSeguroSocialEquals(String numSeguroSocial) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUM_SEGURO_SOCIAL = ? ORDER BY NUM_SEGURO_SOCIAL", new Object[] { numSeguroSocial } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_PUESTO = :idPuesto'.
	 */
	public NominaEmpleado[] findWhereIdPuestoEquals(int idPuesto) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PUESTO = ? ORDER BY ID_PUESTO", new Object[] {  new Integer(idPuesto) } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_DEPARTAMENTO = :idDepartamento'.
	 */
	public NominaEmpleado[] findWhereIdDepartamentoEquals(int idDepartamento) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_DEPARTAMENTO = ? ORDER BY ID_DEPARTAMENTO", new Object[] {  new Integer(idDepartamento) } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'CLABE = :clabe'.
	 */
	public NominaEmpleado[] findWhereClabeEquals(String clabe) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLABE = ? ORDER BY CLABE", new Object[] { clabe } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_NOMINA_BANCO = :idNominaBanco'.
	 */
	public NominaEmpleado[] findWhereIdNominaBancoEquals(int idNominaBanco) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_NOMINA_BANCO = ? ORDER BY ID_NOMINA_BANCO", new Object[] {  new Integer(idNominaBanco) } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'FECHA_INICIO_RELACION_LABORAL = :fechaInicioRelacionLaboral'.
	 */
	public NominaEmpleado[] findWhereFechaInicioRelacionLaboralEquals(Date fechaInicioRelacionLaboral) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_INICIO_RELACION_LABORAL = ? ORDER BY FECHA_INICIO_RELACION_LABORAL", new Object[] { fechaInicioRelacionLaboral==null ? null : new java.sql.Date( fechaInicioRelacionLaboral.getTime() ) } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'FECHA_ALTA = :fechaAlta'.
	 */
	public NominaEmpleado[] findWhereFechaAltaEquals(Date fechaAlta) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_ALTA = ? ORDER BY FECHA_ALTA", new Object[] { fechaAlta==null ? null : new java.sql.Date( fechaAlta.getTime() ) } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'TIPO_CONTRATO = :tipoContrato'.
	 */
	public NominaEmpleado[] findWhereTipoContratoEquals(String tipoContrato) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_CONTRATO = ? ORDER BY TIPO_CONTRATO", new Object[] { tipoContrato } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'TIPO_JORNADA = :tipoJornada'.
	 */
	public NominaEmpleado[] findWhereTipoJornadaEquals(String tipoJornada) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_JORNADA = ? ORDER BY TIPO_JORNADA", new Object[] { tipoJornada } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'PERIODICIDAD_PAGO = :periodicidadPago'.
	 */
	public NominaEmpleado[] findWherePeriodicidadPagoEquals(String periodicidadPago) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERIODICIDAD_PAGO = ? ORDER BY PERIODICIDAD_PAGO", new Object[] { periodicidadPago } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'SALARIO_BASE_COT_APOR = :salarioBaseCotApor'.
	 */
	public NominaEmpleado[] findWhereSalarioBaseCotAporEquals(double salarioBaseCotApor) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SALARIO_BASE_COT_APOR = ? ORDER BY SALARIO_BASE_COT_APOR", new Object[] {  new Double(salarioBaseCotApor) } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_RIESGO_PUESTO = :idRiesgoPuesto'.
	 */
	public NominaEmpleado[] findWhereIdRiesgoPuestoEquals(int idRiesgoPuesto) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_RIESGO_PUESTO = ? ORDER BY ID_RIESGO_PUESTO", new Object[] {  new Integer(idRiesgoPuesto) } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'SALARIO_DIARIO_INTEGRADO = :salarioDiarioIntegrado'.
	 */
	public NominaEmpleado[] findWhereSalarioDiarioIntegradoEquals(double salarioDiarioIntegrado) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SALARIO_DIARIO_INTEGRADO = ? ORDER BY SALARIO_DIARIO_INTEGRADO", new Object[] {  new Double(salarioDiarioIntegrado) } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'FECHA_BAJA = :fechaBaja'.
	 */
	public NominaEmpleado[] findWhereFechaBajaEquals(Date fechaBaja) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_BAJA = ? ORDER BY FECHA_BAJA", new Object[] { fechaBaja==null ? null : new java.sql.Date( fechaBaja.getTime() ) } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'CORREO = :correo'.
	 */
	public NominaEmpleado[] findWhereCorreoEquals(String correo) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CORREO = ? ORDER BY CORREO", new Object[] { correo } );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'TELEFONO = :telefono'.
	 */
	public NominaEmpleado[] findWhereTelefonoEquals(String telefono) throws NominaEmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TELEFONO = ? ORDER BY TELEFONO", new Object[] { telefono } );
	}

	/**
	 * Method 'NominaEmpleadoDaoImpl'
	 * 
	 */
	public NominaEmpleadoDaoImpl()
	{
	}

	/**
	 * Method 'NominaEmpleadoDaoImpl'
	 * 
	 * @param userConn
	 */
	public NominaEmpleadoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "nomina_empleado";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected NominaEmpleado fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			NominaEmpleado dto = new NominaEmpleado();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected NominaEmpleado[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			NominaEmpleado dto = new NominaEmpleado();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		NominaEmpleado ret[] = new NominaEmpleado[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(NominaEmpleado dto, ResultSet rs) throws SQLException
	{
		dto.setIdEmpleado( rs.getInt( COLUMN_ID_EMPLEADO ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setRfc( rs.getString( COLUMN_RFC ) );
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setApellidoPaterno( rs.getString( COLUMN_APELLIDO_PATERNO ) );
		dto.setApellidoMaterno( rs.getString( COLUMN_APELLIDO_MATERNO ) );
		dto.setNumEmpleado( rs.getString( COLUMN_NUM_EMPLEADO ) );
		dto.setCurp( rs.getString( COLUMN_CURP ) );
		dto.setIdNominaRegimenFiscal( rs.getInt( COLUMN_ID_NOMINA_REGIMEN_FISCAL ) );
		if (rs.wasNull()) {
			dto.setIdNominaRegimenFiscalNull( true );
		}
		
		dto.setNumSeguroSocial( rs.getString( COLUMN_NUM_SEGURO_SOCIAL ) );
		dto.setIdPuesto( rs.getInt( COLUMN_ID_PUESTO ) );
		if (rs.wasNull()) {
			dto.setIdPuestoNull( true );
		}
		
		dto.setIdDepartamento( rs.getInt( COLUMN_ID_DEPARTAMENTO ) );
		if (rs.wasNull()) {
			dto.setIdDepartamentoNull( true );
		}
		
		dto.setClabe( rs.getString( COLUMN_CLABE ) );
		dto.setIdNominaBanco( rs.getInt( COLUMN_ID_NOMINA_BANCO ) );
		if (rs.wasNull()) {
			dto.setIdNominaBancoNull( true );
		}
		
		dto.setFechaInicioRelacionLaboral( rs.getDate(COLUMN_FECHA_INICIO_RELACION_LABORAL ) );
		dto.setFechaAlta( rs.getDate(COLUMN_FECHA_ALTA ) );
		dto.setTipoContrato( rs.getString( COLUMN_TIPO_CONTRATO ) );
		dto.setTipoJornada( rs.getString( COLUMN_TIPO_JORNADA ) );
		dto.setPeriodicidadPago( rs.getString( COLUMN_PERIODICIDAD_PAGO ) );
		dto.setSalarioBaseCotApor( rs.getDouble( COLUMN_SALARIO_BASE_COT_APOR ) );
		if (rs.wasNull()) {
			dto.setSalarioBaseCotAporNull( true );
		}
		
		dto.setIdRiesgoPuesto( rs.getInt( COLUMN_ID_RIESGO_PUESTO ) );
		dto.setSalarioDiarioIntegrado( rs.getDouble( COLUMN_SALARIO_DIARIO_INTEGRADO ) );
		if (rs.wasNull()) {
			dto.setSalarioDiarioIntegradoNull( true );
		}
		
		dto.setFechaBaja( rs.getDate(COLUMN_FECHA_BAJA ) );
		dto.setCorreo( rs.getString( COLUMN_CORREO ) );
		dto.setTelefono( rs.getString( COLUMN_TELEFONO ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(NominaEmpleado dto)
	{
		dto.setIdEmpleadoModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEstatusModified( false );
		dto.setRfcModified( false );
		dto.setNombreModified( false );
		dto.setApellidoPaternoModified( false );
		dto.setApellidoMaternoModified( false );
		dto.setNumEmpleadoModified( false );
		dto.setCurpModified( false );
		dto.setIdNominaRegimenFiscalModified( false );
		dto.setNumSeguroSocialModified( false );
		dto.setIdPuestoModified( false );
		dto.setIdDepartamentoModified( false );
		dto.setClabeModified( false );
		dto.setIdNominaBancoModified( false );
		dto.setFechaInicioRelacionLaboralModified( false );
		dto.setFechaAltaModified( false );
		dto.setTipoContratoModified( false );
		dto.setTipoJornadaModified( false );
		dto.setPeriodicidadPagoModified( false );
		dto.setSalarioBaseCotAporModified( false );
		dto.setIdRiesgoPuestoModified( false );
		dto.setSalarioDiarioIntegradoModified( false );
		dto.setFechaBajaModified( false );
		dto.setCorreoModified( false );
		dto.setTelefonoModified( false );
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the specified arbitrary SQL statement
	 */
	public NominaEmpleado[] findByDynamicSelect(String sql, Object[] sqlParams) throws NominaEmpleadoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NominaEmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the nomina_empleado table that match the specified arbitrary SQL statement
	 */
	public NominaEmpleado[] findByDynamicWhere(String sql, Object[] sqlParams) throws NominaEmpleadoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NominaEmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
