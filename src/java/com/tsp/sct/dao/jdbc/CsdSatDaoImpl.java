/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CsdSatDaoImpl extends AbstractDAO implements CsdSatDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT NO_SERIE, FECHA_INICIAL, FECHA_FINAL, RFC, ESTADO_CERTIFICADO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( NO_SERIE, FECHA_INICIAL, FECHA_FINAL, RFC, ESTADO_CERTIFICADO ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * Index of column NO_SERIE
	 */
	protected static final int COLUMN_NO_SERIE = 1;

	/** 
	 * Index of column FECHA_INICIAL
	 */
	protected static final int COLUMN_FECHA_INICIAL = 2;

	/** 
	 * Index of column FECHA_FINAL
	 */
	protected static final int COLUMN_FECHA_FINAL = 3;

	/** 
	 * Index of column RFC
	 */
	protected static final int COLUMN_RFC = 4;

	/** 
	 * Index of column ESTADO_CERTIFICADO
	 */
	protected static final int COLUMN_ESTADO_CERTIFICADO = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Inserts a new row in the csd_sat table.
	 */
	public void insert(CsdSat dto) throws CsdSatDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getNoSerie() );
			stmt.setDate(index++, dto.getFechaInicial()==null ? null : new java.sql.Date( dto.getFechaInicial().getTime() ) );
			stmt.setDate(index++, dto.getFechaFinal()==null ? null : new java.sql.Date( dto.getFechaFinal().getTime() ) );
			stmt.setString( index++, dto.getRfc() );
			stmt.setString( index++, dto.getEstadoCertificado() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CsdSatDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the csd_sat table that match the criteria ''.
	 */
	public CsdSat[] findAll() throws CsdSatDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the csd_sat table that match the criteria 'NO_SERIE = :noSerie'.
	 */
	public CsdSat[] findWhereNoSerieEquals(String noSerie) throws CsdSatDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NO_SERIE = ? ORDER BY NO_SERIE", new Object[] { noSerie } );
	}

	/** 
	 * Returns all rows from the csd_sat table that match the criteria 'FECHA_INICIAL = :fechaInicial'.
	 */
	public CsdSat[] findWhereFechaInicialEquals(Date fechaInicial) throws CsdSatDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_INICIAL = ? ORDER BY FECHA_INICIAL", new Object[] { fechaInicial==null ? null : new java.sql.Date( fechaInicial.getTime() ) } );
	}

	/** 
	 * Returns all rows from the csd_sat table that match the criteria 'FECHA_FINAL = :fechaFinal'.
	 */
	public CsdSat[] findWhereFechaFinalEquals(Date fechaFinal) throws CsdSatDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_FINAL = ? ORDER BY FECHA_FINAL", new Object[] { fechaFinal==null ? null : new java.sql.Date( fechaFinal.getTime() ) } );
	}

	/** 
	 * Returns all rows from the csd_sat table that match the criteria 'RFC = :rfc'.
	 */
	public CsdSat[] findWhereRfcEquals(String rfc) throws CsdSatDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC = ? ORDER BY RFC", new Object[] { rfc } );
	}

	/** 
	 * Returns all rows from the csd_sat table that match the criteria 'ESTADO_CERTIFICADO = :estadoCertificado'.
	 */
	public CsdSat[] findWhereEstadoCertificadoEquals(String estadoCertificado) throws CsdSatDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTADO_CERTIFICADO = ? ORDER BY ESTADO_CERTIFICADO", new Object[] { estadoCertificado } );
	}

	/**
	 * Method 'CsdSatDaoImpl'
	 * 
	 */
	public CsdSatDaoImpl()
	{
	}

	/**
	 * Method 'CsdSatDaoImpl'
	 * 
	 * @param userConn
	 */
	public CsdSatDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CSD_SAT";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CsdSat fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CsdSat dto = new CsdSat();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CsdSat[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CsdSat dto = new CsdSat();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CsdSat ret[] = new CsdSat[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CsdSat dto, ResultSet rs) throws SQLException
	{
		dto.setNoSerie( rs.getString( COLUMN_NO_SERIE ) );
		dto.setFechaInicial( rs.getDate(COLUMN_FECHA_INICIAL ) );
		dto.setFechaFinal( rs.getDate(COLUMN_FECHA_FINAL ) );
		dto.setRfc( rs.getString( COLUMN_RFC ) );
		dto.setEstadoCertificado( rs.getString( COLUMN_ESTADO_CERTIFICADO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CsdSat dto)
	{
	}

	/** 
	 * Returns all rows from the csd_sat table that match the specified arbitrary SQL statement
	 */
	public CsdSat[] findByDynamicSelect(String sql, Object[] sqlParams) throws CsdSatDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CsdSatDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the csd_sat table that match the specified arbitrary SQL statement
	 */
	public CsdSat[] findByDynamicWhere(String sql, Object[] sqlParams) throws CsdSatDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CsdSatDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
