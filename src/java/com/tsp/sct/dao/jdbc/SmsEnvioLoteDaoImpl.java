/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SmsEnvioLoteDaoImpl extends AbstractDAO implements SmsEnvioLoteDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_sms_envio_lote, id_empresa, id_estatus, id_sms_plantilla, fecha_hr_captura, fecha_hr_programa_envio, id_sms_dispositivo_movil, cantidad_destinatarios, cantidad_creditos_sms, envio_inmediato, is_sms_sistema, id_usuario_pretoriano, id_usuario_ventas, asunto, mensaje FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_sms_envio_lote, id_empresa, id_estatus, id_sms_plantilla, fecha_hr_captura, fecha_hr_programa_envio, id_sms_dispositivo_movil, cantidad_destinatarios, cantidad_creditos_sms, envio_inmediato, is_sms_sistema, id_usuario_pretoriano, id_usuario_ventas, asunto, mensaje ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_sms_envio_lote = ?, id_empresa = ?, id_estatus = ?, id_sms_plantilla = ?, fecha_hr_captura = ?, fecha_hr_programa_envio = ?, id_sms_dispositivo_movil = ?, cantidad_destinatarios = ?, cantidad_creditos_sms = ?, envio_inmediato = ?, is_sms_sistema = ?, id_usuario_pretoriano = ?, id_usuario_ventas = ?, asunto = ?, mensaje = ? WHERE id_sms_envio_lote = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_sms_envio_lote = ?";

	/** 
	 * Index of column id_sms_envio_lote
	 */
	protected static final int COLUMN_ID_SMS_ENVIO_LOTE = 1;

	/** 
	 * Index of column id_empresa
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column id_estatus
	 */
	protected static final int COLUMN_ID_ESTATUS = 3;

	/** 
	 * Index of column id_sms_plantilla
	 */
	protected static final int COLUMN_ID_SMS_PLANTILLA = 4;

	/** 
	 * Index of column fecha_hr_captura
	 */
	protected static final int COLUMN_FECHA_HR_CAPTURA = 5;

	/** 
	 * Index of column fecha_hr_programa_envio
	 */
	protected static final int COLUMN_FECHA_HR_PROGRAMA_ENVIO = 6;

	/** 
	 * Index of column id_sms_dispositivo_movil
	 */
	protected static final int COLUMN_ID_SMS_DISPOSITIVO_MOVIL = 7;

	/** 
	 * Index of column cantidad_destinatarios
	 */
	protected static final int COLUMN_CANTIDAD_DESTINATARIOS = 8;

	/** 
	 * Index of column cantidad_creditos_sms
	 */
	protected static final int COLUMN_CANTIDAD_CREDITOS_SMS = 9;

	/** 
	 * Index of column envio_inmediato
	 */
	protected static final int COLUMN_ENVIO_INMEDIATO = 10;

	/** 
	 * Index of column is_sms_sistema
	 */
	protected static final int COLUMN_IS_SMS_SISTEMA = 11;

	/** 
	 * Index of column id_usuario_pretoriano
	 */
	protected static final int COLUMN_ID_USUARIO_PRETORIANO = 12;

	/** 
	 * Index of column id_usuario_ventas
	 */
	protected static final int COLUMN_ID_USUARIO_VENTAS = 13;

	/** 
	 * Index of column asunto
	 */
	protected static final int COLUMN_ASUNTO = 14;

	/** 
	 * Index of column mensaje
	 */
	protected static final int COLUMN_MENSAJE = 15;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 15;

	/** 
	 * Index of primary-key column id_sms_envio_lote
	 */
	protected static final int PK_COLUMN_ID_SMS_ENVIO_LOTE = 1;

	/** 
	 * Inserts a new row in the sms_envio_lote table.
	 */
	public SmsEnvioLotePk insert(SmsEnvioLote dto) throws SmsEnvioLoteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdSmsEnvioLoteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_envio_lote" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_empresa" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_estatus" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSmsPlantillaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_plantilla" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrCapturaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_captura" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrProgramaEnvioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_programa_envio" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSmsDispositivoMovilModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_dispositivo_movil" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadDestinatariosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "cantidad_destinatarios" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadCreditosSmsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "cantidad_creditos_sms" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEnvioInmediatoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "envio_inmediato" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSmsSistemaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_sms_sistema" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioPretorianoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_usuario_pretoriano" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioVentasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_usuario_ventas" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAsuntoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "asunto" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mensaje" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdSmsEnvioLoteModified()) {
				stmt.setInt( index++, dto.getIdSmsEnvioLote() );
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isIdSmsPlantillaModified()) {
				if (dto.isIdSmsPlantillaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsPlantilla() );
				}
		
			}
		
			if (dto.isFechaHrCapturaModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCaptura()==null ? null : new java.sql.Timestamp( dto.getFechaHrCaptura().getTime() ) );
			}
		
			if (dto.isFechaHrProgramaEnvioModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrProgramaEnvio()==null ? null : new java.sql.Timestamp( dto.getFechaHrProgramaEnvio().getTime() ) );
			}
		
			if (dto.isIdSmsDispositivoMovilModified()) {
				stmt.setInt( index++, dto.getIdSmsDispositivoMovil() );
			}
		
			if (dto.isCantidadDestinatariosModified()) {
				stmt.setInt( index++, dto.getCantidadDestinatarios() );
			}
		
			if (dto.isCantidadCreditosSmsModified()) {
				if (dto.isCantidadCreditosSmsNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCantidadCreditosSms() );
				}
		
			}
		
			if (dto.isEnvioInmediatoModified()) {
				stmt.setInt( index++, dto.getEnvioInmediato() );
			}
		
			if (dto.isIsSmsSistemaModified()) {
				stmt.setInt( index++, dto.getIsSmsSistema() );
			}
		
			if (dto.isIdUsuarioPretorianoModified()) {
				if (dto.isIdUsuarioPretorianoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioPretoriano() );
				}
		
			}
		
			if (dto.isIdUsuarioVentasModified()) {
				if (dto.isIdUsuarioVentasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVentas() );
				}
		
			}
		
			if (dto.isAsuntoModified()) {
				stmt.setString( index++, dto.getAsunto() );
			}
		
			if (dto.isMensajeModified()) {
				stmt.setString( index++, dto.getMensaje() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdSmsEnvioLote( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEnvioLoteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sms_envio_lote table.
	 */
	public void update(SmsEnvioLotePk pk, SmsEnvioLote dto) throws SmsEnvioLoteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdSmsEnvioLoteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_envio_lote=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_empresa=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_estatus=?" );
				modified=true;
			}
		
			if (dto.isIdSmsPlantillaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_plantilla=?" );
				modified=true;
			}
		
			if (dto.isFechaHrCapturaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_captura=?" );
				modified=true;
			}
		
			if (dto.isFechaHrProgramaEnvioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_programa_envio=?" );
				modified=true;
			}
		
			if (dto.isIdSmsDispositivoMovilModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_dispositivo_movil=?" );
				modified=true;
			}
		
			if (dto.isCantidadDestinatariosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "cantidad_destinatarios=?" );
				modified=true;
			}
		
			if (dto.isCantidadCreditosSmsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "cantidad_creditos_sms=?" );
				modified=true;
			}
		
			if (dto.isEnvioInmediatoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "envio_inmediato=?" );
				modified=true;
			}
		
			if (dto.isIsSmsSistemaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_sms_sistema=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioPretorianoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_usuario_pretoriano=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioVentasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_usuario_ventas=?" );
				modified=true;
			}
		
			if (dto.isAsuntoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "asunto=?" );
				modified=true;
			}
		
			if (dto.isMensajeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mensaje=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_sms_envio_lote=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdSmsEnvioLoteModified()) {
				stmt.setInt( index++, dto.getIdSmsEnvioLote() );
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isIdSmsPlantillaModified()) {
				if (dto.isIdSmsPlantillaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsPlantilla() );
				}
		
			}
		
			if (dto.isFechaHrCapturaModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCaptura()==null ? null : new java.sql.Timestamp( dto.getFechaHrCaptura().getTime() ) );
			}
		
			if (dto.isFechaHrProgramaEnvioModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrProgramaEnvio()==null ? null : new java.sql.Timestamp( dto.getFechaHrProgramaEnvio().getTime() ) );
			}
		
			if (dto.isIdSmsDispositivoMovilModified()) {
				stmt.setInt( index++, dto.getIdSmsDispositivoMovil() );
			}
		
			if (dto.isCantidadDestinatariosModified()) {
				stmt.setInt( index++, dto.getCantidadDestinatarios() );
			}
		
			if (dto.isCantidadCreditosSmsModified()) {
				if (dto.isCantidadCreditosSmsNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCantidadCreditosSms() );
				}
		
			}
		
			if (dto.isEnvioInmediatoModified()) {
				stmt.setInt( index++, dto.getEnvioInmediato() );
			}
		
			if (dto.isIsSmsSistemaModified()) {
				stmt.setInt( index++, dto.getIsSmsSistema() );
			}
		
			if (dto.isIdUsuarioPretorianoModified()) {
				if (dto.isIdUsuarioPretorianoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioPretoriano() );
				}
		
			}
		
			if (dto.isIdUsuarioVentasModified()) {
				if (dto.isIdUsuarioVentasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVentas() );
				}
		
			}
		
			if (dto.isAsuntoModified()) {
				stmt.setString( index++, dto.getAsunto() );
			}
		
			if (dto.isMensajeModified()) {
				stmt.setString( index++, dto.getMensaje() );
			}
		
			stmt.setInt( index++, pk.getIdSmsEnvioLote() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEnvioLoteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sms_envio_lote table.
	 */
	public void delete(SmsEnvioLotePk pk) throws SmsEnvioLoteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdSmsEnvioLote() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEnvioLoteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sms_envio_lote table that matches the specified primary-key value.
	 */
	public SmsEnvioLote findByPrimaryKey(SmsEnvioLotePk pk) throws SmsEnvioLoteDaoException
	{
		return findByPrimaryKey( pk.getIdSmsEnvioLote() );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_sms_envio_lote = :idSmsEnvioLote'.
	 */
	public SmsEnvioLote findByPrimaryKey(int idSmsEnvioLote) throws SmsEnvioLoteDaoException
	{
		SmsEnvioLote ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_sms_envio_lote = ?", new Object[] {  new Integer(idSmsEnvioLote) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria ''.
	 */
	public SmsEnvioLote[] findAll() throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_sms_envio_lote", null );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_sms_envio_lote = :idSmsEnvioLote'.
	 */
	public SmsEnvioLote[] findWhereIdSmsEnvioLoteEquals(int idSmsEnvioLote) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_envio_lote = ? ORDER BY id_sms_envio_lote", new Object[] {  new Integer(idSmsEnvioLote) } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public SmsEnvioLote[] findWhereIdEmpresaEquals(int idEmpresa) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_empresa = ? ORDER BY id_empresa", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public SmsEnvioLote[] findWhereIdEstatusEquals(int idEstatus) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_estatus = ? ORDER BY id_estatus", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_sms_plantilla = :idSmsPlantilla'.
	 */
	public SmsEnvioLote[] findWhereIdSmsPlantillaEquals(int idSmsPlantilla) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_plantilla = ? ORDER BY id_sms_plantilla", new Object[] {  new Integer(idSmsPlantilla) } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'fecha_hr_captura = :fechaHrCaptura'.
	 */
	public SmsEnvioLote[] findWhereFechaHrCapturaEquals(Date fechaHrCaptura) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_captura = ? ORDER BY fecha_hr_captura", new Object[] { fechaHrCaptura==null ? null : new java.sql.Timestamp( fechaHrCaptura.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'fecha_hr_programa_envio = :fechaHrProgramaEnvio'.
	 */
	public SmsEnvioLote[] findWhereFechaHrProgramaEnvioEquals(Date fechaHrProgramaEnvio) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_programa_envio = ? ORDER BY fecha_hr_programa_envio", new Object[] { fechaHrProgramaEnvio==null ? null : new java.sql.Timestamp( fechaHrProgramaEnvio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_sms_dispositivo_movil = :idSmsDispositivoMovil'.
	 */
	public SmsEnvioLote[] findWhereIdSmsDispositivoMovilEquals(int idSmsDispositivoMovil) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_dispositivo_movil = ? ORDER BY id_sms_dispositivo_movil", new Object[] {  new Integer(idSmsDispositivoMovil) } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'cantidad_destinatarios = :cantidadDestinatarios'.
	 */
	public SmsEnvioLote[] findWhereCantidadDestinatariosEquals(int cantidadDestinatarios) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cantidad_destinatarios = ? ORDER BY cantidad_destinatarios", new Object[] {  new Integer(cantidadDestinatarios) } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'cantidad_creditos_sms = :cantidadCreditosSms'.
	 */
	public SmsEnvioLote[] findWhereCantidadCreditosSmsEquals(int cantidadCreditosSms) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cantidad_creditos_sms = ? ORDER BY cantidad_creditos_sms", new Object[] {  new Integer(cantidadCreditosSms) } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'envio_inmediato = :envioInmediato'.
	 */
	public SmsEnvioLote[] findWhereEnvioInmediatoEquals(int envioInmediato) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE envio_inmediato = ? ORDER BY envio_inmediato", new Object[] {  new Integer(envioInmediato) } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'is_sms_sistema = :isSmsSistema'.
	 */
	public SmsEnvioLote[] findWhereIsSmsSistemaEquals(int isSmsSistema) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_sms_sistema = ? ORDER BY is_sms_sistema", new Object[] {  new Integer(isSmsSistema) } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_usuario_pretoriano = :idUsuarioPretoriano'.
	 */
	public SmsEnvioLote[] findWhereIdUsuarioPretorianoEquals(int idUsuarioPretoriano) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_usuario_pretoriano = ? ORDER BY id_usuario_pretoriano", new Object[] {  new Integer(idUsuarioPretoriano) } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_usuario_ventas = :idUsuarioVentas'.
	 */
	public SmsEnvioLote[] findWhereIdUsuarioVentasEquals(int idUsuarioVentas) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_usuario_ventas = ? ORDER BY id_usuario_ventas", new Object[] {  new Integer(idUsuarioVentas) } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'asunto = :asunto'.
	 */
	public SmsEnvioLote[] findWhereAsuntoEquals(String asunto) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE asunto = ? ORDER BY asunto", new Object[] { asunto } );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'mensaje = :mensaje'.
	 */
	public SmsEnvioLote[] findWhereMensajeEquals(String mensaje) throws SmsEnvioLoteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mensaje = ? ORDER BY mensaje", new Object[] { mensaje } );
	}

	/**
	 * Method 'SmsEnvioLoteDaoImpl'
	 * 
	 */
	public SmsEnvioLoteDaoImpl()
	{
	}

	/**
	 * Method 'SmsEnvioLoteDaoImpl'
	 * 
	 * @param userConn
	 */
	public SmsEnvioLoteDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sms_envio_lote";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SmsEnvioLote fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SmsEnvioLote dto = new SmsEnvioLote();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SmsEnvioLote[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SmsEnvioLote dto = new SmsEnvioLote();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SmsEnvioLote ret[] = new SmsEnvioLote[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SmsEnvioLote dto, ResultSet rs) throws SQLException
	{
		dto.setIdSmsEnvioLote( rs.getInt( COLUMN_ID_SMS_ENVIO_LOTE ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		if (rs.wasNull()) {
			dto.setIdEmpresaNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		dto.setIdSmsPlantilla( rs.getInt( COLUMN_ID_SMS_PLANTILLA ) );
		if (rs.wasNull()) {
			dto.setIdSmsPlantillaNull( true );
		}
		
		dto.setFechaHrCaptura( rs.getTimestamp(COLUMN_FECHA_HR_CAPTURA ) );
		dto.setFechaHrProgramaEnvio( rs.getTimestamp(COLUMN_FECHA_HR_PROGRAMA_ENVIO ) );
		dto.setIdSmsDispositivoMovil( rs.getInt( COLUMN_ID_SMS_DISPOSITIVO_MOVIL ) );
		dto.setCantidadDestinatarios( rs.getInt( COLUMN_CANTIDAD_DESTINATARIOS ) );
		dto.setCantidadCreditosSms( rs.getInt( COLUMN_CANTIDAD_CREDITOS_SMS ) );
		if (rs.wasNull()) {
			dto.setCantidadCreditosSmsNull( true );
		}
		
		dto.setEnvioInmediato( rs.getInt( COLUMN_ENVIO_INMEDIATO ) );
		dto.setIsSmsSistema( rs.getInt( COLUMN_IS_SMS_SISTEMA ) );
		dto.setIdUsuarioPretoriano( rs.getInt( COLUMN_ID_USUARIO_PRETORIANO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioPretorianoNull( true );
		}
		
		dto.setIdUsuarioVentas( rs.getInt( COLUMN_ID_USUARIO_VENTAS ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioVentasNull( true );
		}
		
		dto.setAsunto( rs.getString( COLUMN_ASUNTO ) );
		dto.setMensaje( rs.getString( COLUMN_MENSAJE ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SmsEnvioLote dto)
	{
		dto.setIdSmsEnvioLoteModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEstatusModified( false );
		dto.setIdSmsPlantillaModified( false );
		dto.setFechaHrCapturaModified( false );
		dto.setFechaHrProgramaEnvioModified( false );
		dto.setIdSmsDispositivoMovilModified( false );
		dto.setCantidadDestinatariosModified( false );
		dto.setCantidadCreditosSmsModified( false );
		dto.setEnvioInmediatoModified( false );
		dto.setIsSmsSistemaModified( false );
		dto.setIdUsuarioPretorianoModified( false );
		dto.setIdUsuarioVentasModified( false );
		dto.setAsuntoModified( false );
		dto.setMensajeModified( false );
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the specified arbitrary SQL statement
	 */
	public SmsEnvioLote[] findByDynamicSelect(String sql, Object[] sqlParams) throws SmsEnvioLoteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEnvioLoteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sms_envio_lote table that match the specified arbitrary SQL statement
	 */
	public SmsEnvioLote[] findByDynamicWhere(String sql, Object[] sqlParams) throws SmsEnvioLoteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsEnvioLoteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
