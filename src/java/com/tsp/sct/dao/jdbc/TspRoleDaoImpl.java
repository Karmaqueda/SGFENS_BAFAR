/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class TspRoleDaoImpl extends AbstractDAO implements TspRoleDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_ROLE, NAME_ROLE, DESCRIPCION_ROLE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_ROLE, NAME_ROLE, DESCRIPCION_ROLE ) VALUES ( ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_ROLE = ?, NAME_ROLE = ?, DESCRIPCION_ROLE = ? WHERE ID_ROLE = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_ROLE = ?";

	/** 
	 * Index of column ID_ROLE
	 */
	protected static final int COLUMN_ID_ROLE = 1;

	/** 
	 * Index of column NAME_ROLE
	 */
	protected static final int COLUMN_NAME_ROLE = 2;

	/** 
	 * Index of column DESCRIPCION_ROLE
	 */
	protected static final int COLUMN_DESCRIPCION_ROLE = 3;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 3;

	/** 
	 * Index of primary-key column ID_ROLE
	 */
	protected static final int PK_COLUMN_ID_ROLE = 1;

	/** 
	 * Inserts a new row in the tsp_role table.
	 */
	public TspRolePk insert(TspRole dto) throws TspRoleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdRoleModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ROLE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNameRoleModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NAME_ROLE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescripcionRoleModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCRIPCION_ROLE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdRoleModified()) {
				stmt.setInt( index++, dto.getIdRole() );
			}
		
			if (dto.isNameRoleModified()) {
				stmt.setString( index++, dto.getNameRole() );
			}
		
			if (dto.isDescripcionRoleModified()) {
				stmt.setString( index++, dto.getDescripcionRole() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdRole( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TspRoleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the tsp_role table.
	 */
	public void update(TspRolePk pk, TspRole dto) throws TspRoleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdRoleModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ROLE=?" );
				modified=true;
			}
		
			if (dto.isNameRoleModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NAME_ROLE=?" );
				modified=true;
			}
		
			if (dto.isDescripcionRoleModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCRIPCION_ROLE=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_ROLE=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdRoleModified()) {
				stmt.setInt( index++, dto.getIdRole() );
			}
		
			if (dto.isNameRoleModified()) {
				stmt.setString( index++, dto.getNameRole() );
			}
		
			if (dto.isDescripcionRoleModified()) {
				stmt.setString( index++, dto.getDescripcionRole() );
			}
		
			stmt.setInt( index++, pk.getIdRole() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TspRoleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the tsp_role table.
	 */
	public void delete(TspRolePk pk) throws TspRoleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdRole() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TspRoleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the tsp_role table that matches the specified primary-key value.
	 */
	public TspRole findByPrimaryKey(TspRolePk pk) throws TspRoleDaoException
	{
		return findByPrimaryKey( pk.getIdRole() );
	}

	/** 
	 * Returns all rows from the tsp_role table that match the criteria 'ID_ROLE = :idRole'.
	 */
	public TspRole findByPrimaryKey(int idRole) throws TspRoleDaoException
	{
		TspRole ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_ROLE = ?", new Object[] {  new Integer(idRole) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the tsp_role table that match the criteria ''.
	 */
	public TspRole[] findAll() throws TspRoleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_ROLE", null );
	}

	/** 
	 * Returns all rows from the tsp_role table that match the criteria 'ID_ROLE = :idRole'.
	 */
	public TspRole[] findWhereIdRoleEquals(int idRole) throws TspRoleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ROLE = ? ORDER BY ID_ROLE", new Object[] {  new Integer(idRole) } );
	}

	/** 
	 * Returns all rows from the tsp_role table that match the criteria 'NAME_ROLE = :nameRole'.
	 */
	public TspRole[] findWhereNameRoleEquals(String nameRole) throws TspRoleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NAME_ROLE = ? ORDER BY NAME_ROLE", new Object[] { nameRole } );
	}

	/** 
	 * Returns all rows from the tsp_role table that match the criteria 'DESCRIPCION_ROLE = :descripcionRole'.
	 */
	public TspRole[] findWhereDescripcionRoleEquals(String descripcionRole) throws TspRoleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION_ROLE = ? ORDER BY DESCRIPCION_ROLE", new Object[] { descripcionRole } );
	}

	/**
	 * Method 'TspRoleDaoImpl'
	 * 
	 */
	public TspRoleDaoImpl()
	{
	}

	/**
	 * Method 'TspRoleDaoImpl'
	 * 
	 * @param userConn
	 */
	public TspRoleDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "TSP_ROLE";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected TspRole fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			TspRole dto = new TspRole();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected TspRole[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			TspRole dto = new TspRole();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		TspRole ret[] = new TspRole[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(TspRole dto, ResultSet rs) throws SQLException
	{
		dto.setIdRole( rs.getInt( COLUMN_ID_ROLE ) );
		dto.setNameRole( rs.getString( COLUMN_NAME_ROLE ) );
		dto.setDescripcionRole( rs.getString( COLUMN_DESCRIPCION_ROLE ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(TspRole dto)
	{
		dto.setIdRoleModified( false );
		dto.setNameRoleModified( false );
		dto.setDescripcionRoleModified( false );
	}

	/** 
	 * Returns all rows from the tsp_role table that match the specified arbitrary SQL statement
	 */
	public TspRole[] findByDynamicSelect(String sql, Object[] sqlParams) throws TspRoleDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TspRoleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the tsp_role table that match the specified arbitrary SQL statement
	 */
	public TspRole[] findByDynamicWhere(String sql, Object[] sqlParams) throws TspRoleDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TspRoleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
