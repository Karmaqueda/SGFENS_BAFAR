/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EmpresaDaoImpl extends AbstractDAO implements EmpresaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_EMPRESA, ID_EMPRESA_PADRE, ID_UBICACION_FISCAL, ID_TIPO_EMPRESA, RFC, RAZON_SOCIAL, NOMBRE_COMERCIAL, FOLIOS_DISPONIBLES, REGIMEN_FISCAL, ID_ESTATUS, TIPO_PDF, TIPO_PDF_HONORARIOS, TIPO_PDF_ARRENDAMIENTO, ID_VENDEDOR, TIPO_PAGO, ID_PAGO, ID_PAQUETE, REFERENCIA_PAGO, FECHA_REGISTRO, COMPARTIR_CONCEPTOS_MATRIZ, LATITUD, LONGITUD, REGISTRO_PATRONAL, CREDITO_VALIDA_XML, CREDITOS_DISPONIBLES_SECTOR_PRIMARIO, ADDEDAS_PERMITIDAS, ID_FRANQUICIATARIO, MENSAJE_PERSONALIZADO_VISITA, PRINT_RAZON_SOCIAL, PRINT_NOMBRE_COMERCIAL, GIRO, CREDITOS_OPERACION, INTENTOS_LOGIN_NO_CREDITOS, PRINT_TK_PRODS, TK_MOVIL_TIPO, TK_MOVIL_POR_MARCA, TK_MOVIL_MOSTRAR_ZONA, TK_MOVIL_MOSTRAR_FOLIO, CREDITOS_SMS, ID_SMS_DISPOSITIVO_MOVIL, CONTACTO_CELULAR FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_EMPRESA, ID_EMPRESA_PADRE, ID_UBICACION_FISCAL, ID_TIPO_EMPRESA, RFC, RAZON_SOCIAL, NOMBRE_COMERCIAL, FOLIOS_DISPONIBLES, REGIMEN_FISCAL, ID_ESTATUS, TIPO_PDF, TIPO_PDF_HONORARIOS, TIPO_PDF_ARRENDAMIENTO, ID_VENDEDOR, TIPO_PAGO, ID_PAGO, ID_PAQUETE, REFERENCIA_PAGO, FECHA_REGISTRO, COMPARTIR_CONCEPTOS_MATRIZ, LATITUD, LONGITUD, REGISTRO_PATRONAL, CREDITO_VALIDA_XML, CREDITOS_DISPONIBLES_SECTOR_PRIMARIO, ADDEDAS_PERMITIDAS, ID_FRANQUICIATARIO, MENSAJE_PERSONALIZADO_VISITA, PRINT_RAZON_SOCIAL, PRINT_NOMBRE_COMERCIAL, GIRO, CREDITOS_OPERACION, INTENTOS_LOGIN_NO_CREDITOS, PRINT_TK_PRODS, TK_MOVIL_TIPO, TK_MOVIL_POR_MARCA, TK_MOVIL_MOSTRAR_ZONA, TK_MOVIL_MOSTRAR_FOLIO, CREDITOS_SMS, ID_SMS_DISPOSITIVO_MOVIL, CONTACTO_CELULAR ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_EMPRESA = ?, ID_EMPRESA_PADRE = ?, ID_UBICACION_FISCAL = ?, ID_TIPO_EMPRESA = ?, RFC = ?, RAZON_SOCIAL = ?, NOMBRE_COMERCIAL = ?, FOLIOS_DISPONIBLES = ?, REGIMEN_FISCAL = ?, ID_ESTATUS = ?, TIPO_PDF = ?, TIPO_PDF_HONORARIOS = ?, TIPO_PDF_ARRENDAMIENTO = ?, ID_VENDEDOR = ?, TIPO_PAGO = ?, ID_PAGO = ?, ID_PAQUETE = ?, REFERENCIA_PAGO = ?, FECHA_REGISTRO = ?, COMPARTIR_CONCEPTOS_MATRIZ = ?, LATITUD = ?, LONGITUD = ?, REGISTRO_PATRONAL = ?, CREDITO_VALIDA_XML = ?, CREDITOS_DISPONIBLES_SECTOR_PRIMARIO = ?, ADDEDAS_PERMITIDAS = ?, ID_FRANQUICIATARIO = ?, MENSAJE_PERSONALIZADO_VISITA = ?, PRINT_RAZON_SOCIAL = ?, PRINT_NOMBRE_COMERCIAL = ?, GIRO = ?, CREDITOS_OPERACION = ?, INTENTOS_LOGIN_NO_CREDITOS = ?, PRINT_TK_PRODS = ?, TK_MOVIL_TIPO = ?, TK_MOVIL_POR_MARCA = ?, TK_MOVIL_MOSTRAR_ZONA = ?, TK_MOVIL_MOSTRAR_FOLIO = ?, CREDITOS_SMS = ?, ID_SMS_DISPOSITIVO_MOVIL = ?, CONTACTO_CELULAR = ? WHERE ID_EMPRESA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_EMPRESA = ?";

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 1;

	/** 
	 * Index of column ID_EMPRESA_PADRE
	 */
	protected static final int COLUMN_ID_EMPRESA_PADRE = 2;

	/** 
	 * Index of column ID_UBICACION_FISCAL
	 */
	protected static final int COLUMN_ID_UBICACION_FISCAL = 3;

	/** 
	 * Index of column ID_TIPO_EMPRESA
	 */
	protected static final int COLUMN_ID_TIPO_EMPRESA = 4;

	/** 
	 * Index of column RFC
	 */
	protected static final int COLUMN_RFC = 5;

	/** 
	 * Index of column RAZON_SOCIAL
	 */
	protected static final int COLUMN_RAZON_SOCIAL = 6;

	/** 
	 * Index of column NOMBRE_COMERCIAL
	 */
	protected static final int COLUMN_NOMBRE_COMERCIAL = 7;

	/** 
	 * Index of column FOLIOS_DISPONIBLES
	 */
	protected static final int COLUMN_FOLIOS_DISPONIBLES = 8;

	/** 
	 * Index of column REGIMEN_FISCAL
	 */
	protected static final int COLUMN_REGIMEN_FISCAL = 9;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 10;

	/** 
	 * Index of column TIPO_PDF
	 */
	protected static final int COLUMN_TIPO_PDF = 11;

	/** 
	 * Index of column TIPO_PDF_HONORARIOS
	 */
	protected static final int COLUMN_TIPO_PDF_HONORARIOS = 12;

	/** 
	 * Index of column TIPO_PDF_ARRENDAMIENTO
	 */
	protected static final int COLUMN_TIPO_PDF_ARRENDAMIENTO = 13;

	/** 
	 * Index of column ID_VENDEDOR
	 */
	protected static final int COLUMN_ID_VENDEDOR = 14;

	/** 
	 * Index of column TIPO_PAGO
	 */
	protected static final int COLUMN_TIPO_PAGO = 15;

	/** 
	 * Index of column ID_PAGO
	 */
	protected static final int COLUMN_ID_PAGO = 16;

	/** 
	 * Index of column ID_PAQUETE
	 */
	protected static final int COLUMN_ID_PAQUETE = 17;

	/** 
	 * Index of column REFERENCIA_PAGO
	 */
	protected static final int COLUMN_REFERENCIA_PAGO = 18;

	/** 
	 * Index of column FECHA_REGISTRO
	 */
	protected static final int COLUMN_FECHA_REGISTRO = 19;

	/** 
	 * Index of column COMPARTIR_CONCEPTOS_MATRIZ
	 */
	protected static final int COLUMN_COMPARTIR_CONCEPTOS_MATRIZ = 20;

	/** 
	 * Index of column LATITUD
	 */
	protected static final int COLUMN_LATITUD = 21;

	/** 
	 * Index of column LONGITUD
	 */
	protected static final int COLUMN_LONGITUD = 22;

	/** 
	 * Index of column REGISTRO_PATRONAL
	 */
	protected static final int COLUMN_REGISTRO_PATRONAL = 23;

	/** 
	 * Index of column CREDITO_VALIDA_XML
	 */
	protected static final int COLUMN_CREDITO_VALIDA_XML = 24;

	/** 
	 * Index of column CREDITOS_DISPONIBLES_SECTOR_PRIMARIO
	 */
	protected static final int COLUMN_CREDITOS_DISPONIBLES_SECTOR_PRIMARIO = 25;

	/** 
	 * Index of column ADDEDAS_PERMITIDAS
	 */
	protected static final int COLUMN_ADDEDAS_PERMITIDAS = 26;

	/** 
	 * Index of column ID_FRANQUICIATARIO
	 */
	protected static final int COLUMN_ID_FRANQUICIATARIO = 27;

	/** 
	 * Index of column MENSAJE_PERSONALIZADO_VISITA
	 */
	protected static final int COLUMN_MENSAJE_PERSONALIZADO_VISITA = 28;

	/** 
	 * Index of column PRINT_RAZON_SOCIAL
	 */
	protected static final int COLUMN_PRINT_RAZON_SOCIAL = 29;

	/** 
	 * Index of column PRINT_NOMBRE_COMERCIAL
	 */
	protected static final int COLUMN_PRINT_NOMBRE_COMERCIAL = 30;

	/** 
	 * Index of column GIRO
	 */
	protected static final int COLUMN_GIRO = 31;

	/** 
	 * Index of column CREDITOS_OPERACION
	 */
	protected static final int COLUMN_CREDITOS_OPERACION = 32;

	/** 
	 * Index of column INTENTOS_LOGIN_NO_CREDITOS
	 */
	protected static final int COLUMN_INTENTOS_LOGIN_NO_CREDITOS = 33;

	/** 
	 * Index of column PRINT_TK_PRODS
	 */
	protected static final int COLUMN_PRINT_TK_PRODS = 34;

	/** 
	 * Index of column TK_MOVIL_TIPO
	 */
	protected static final int COLUMN_TK_MOVIL_TIPO = 35;

	/** 
	 * Index of column TK_MOVIL_POR_MARCA
	 */
	protected static final int COLUMN_TK_MOVIL_POR_MARCA = 36;

	/** 
	 * Index of column TK_MOVIL_MOSTRAR_ZONA
	 */
	protected static final int COLUMN_TK_MOVIL_MOSTRAR_ZONA = 37;

	/** 
	 * Index of column TK_MOVIL_MOSTRAR_FOLIO
	 */
	protected static final int COLUMN_TK_MOVIL_MOSTRAR_FOLIO = 38;

	/** 
	 * Index of column CREDITOS_SMS
	 */
	protected static final int COLUMN_CREDITOS_SMS = 39;

	/** 
	 * Index of column ID_SMS_DISPOSITIVO_MOVIL
	 */
	protected static final int COLUMN_ID_SMS_DISPOSITIVO_MOVIL = 40;

	/** 
	 * Index of column CONTACTO_CELULAR
	 */
	protected static final int COLUMN_CONTACTO_CELULAR = 41;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 41;

	/** 
	 * Index of primary-key column ID_EMPRESA
	 */
	protected static final int PK_COLUMN_ID_EMPRESA = 1;

	/** 
	 * Inserts a new row in the empresa table.
	 */
	public EmpresaPk insert(Empresa dto) throws EmpresaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaPadreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA_PADRE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUbicacionFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_UBICACION_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdTipoEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_TIPO_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRfcModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RFC" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRazonSocialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RAZON_SOCIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreComercialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_COMERCIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFoliosDisponiblesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIOS_DISPONIBLES" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRegimenFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "REGIMEN_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoPdfModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIPO_PDF" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoPdfHonorariosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIPO_PDF_HONORARIOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoPdfArrendamientoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIPO_PDF_ARRENDAMIENTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdVendedorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_VENDEDOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIPO_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdPaqueteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PAQUETE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isReferenciaPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "REFERENCIA_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaRegistroModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_REGISTRO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCompartirConceptosMatrizModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "COMPARTIR_CONCEPTOS_MATRIZ" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLatitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LATITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLongitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LONGITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRegistroPatronalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "REGISTRO_PATRONAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCreditoValidaXmlModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CREDITO_VALIDA_XML" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCreditosDisponiblesSectorPrimarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CREDITOS_DISPONIBLES_SECTOR_PRIMARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAddedasPermitidasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ADDEDAS_PERMITIDAS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdFranquiciatarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_FRANQUICIATARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMensajePersonalizadoVisitaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MENSAJE_PERSONALIZADO_VISITA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrintRazonSocialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRINT_RAZON_SOCIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrintNombreComercialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRINT_NOMBRE_COMERCIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isGiroModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "GIRO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCreditosOperacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CREDITOS_OPERACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIntentosLoginNoCreditosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "INTENTOS_LOGIN_NO_CREDITOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrintTkProdsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRINT_TK_PRODS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTkMovilTipoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TK_MOVIL_TIPO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTkMovilPorMarcaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TK_MOVIL_POR_MARCA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTkMovilMostrarZonaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TK_MOVIL_MOSTRAR_ZONA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTkMovilMostrarFolioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TK_MOVIL_MOSTRAR_FOLIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCreditosSmsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CREDITOS_SMS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSmsDispositivoMovilModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_SMS_DISPOSITIVO_MOVIL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactoCelularModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CONTACTO_CELULAR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEmpresaPadreModified()) {
				if (dto.isIdEmpresaPadreNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresaPadre() );
				}
		
			}
		
			if (dto.isIdUbicacionFiscalModified()) {
				stmt.setInt( index++, dto.getIdUbicacionFiscal() );
			}
		
			if (dto.isIdTipoEmpresaModified()) {
				stmt.setInt( index++, dto.getIdTipoEmpresa() );
			}
		
			if (dto.isRfcModified()) {
				stmt.setString( index++, dto.getRfc() );
			}
		
			if (dto.isRazonSocialModified()) {
				stmt.setString( index++, dto.getRazonSocial() );
			}
		
			if (dto.isNombreComercialModified()) {
				stmt.setString( index++, dto.getNombreComercial() );
			}
		
			if (dto.isFoliosDisponiblesModified()) {
				if (dto.isFoliosDisponiblesNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getFoliosDisponibles() );
				}
		
			}
		
			if (dto.isRegimenFiscalModified()) {
				stmt.setString( index++, dto.getRegimenFiscal() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isTipoPdfModified()) {
				if (dto.isTipoPdfNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoPdf() );
				}
		
			}
		
			if (dto.isTipoPdfHonorariosModified()) {
				if (dto.isTipoPdfHonorariosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoPdfHonorarios() );
				}
		
			}
		
			if (dto.isTipoPdfArrendamientoModified()) {
				if (dto.isTipoPdfArrendamientoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoPdfArrendamiento() );
				}
		
			}
		
			if (dto.isIdVendedorModified()) {
				if (dto.isIdVendedorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdVendedor() );
				}
		
			}
		
			if (dto.isTipoPagoModified()) {
				if (dto.isTipoPagoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoPago() );
				}
		
			}
		
			if (dto.isIdPagoModified()) {
				if (dto.isIdPagoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPago() );
				}
		
			}
		
			if (dto.isIdPaqueteModified()) {
				if (dto.isIdPaqueteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPaquete() );
				}
		
			}
		
			if (dto.isReferenciaPagoModified()) {
				stmt.setString( index++, dto.getReferenciaPago() );
			}
		
			if (dto.isFechaRegistroModified()) {
				stmt.setDate(index++, dto.getFechaRegistro()==null ? null : new java.sql.Date( dto.getFechaRegistro().getTime() ) );
			}
		
			if (dto.isCompartirConceptosMatrizModified()) {
				if (dto.isCompartirConceptosMatrizNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCompartirConceptosMatriz() );
				}
		
			}
		
			if (dto.isLatitudModified()) {
				if (dto.isLatitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLatitud() );
				}
		
			}
		
			if (dto.isLongitudModified()) {
				if (dto.isLongitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLongitud() );
				}
		
			}
		
			if (dto.isRegistroPatronalModified()) {
				stmt.setString( index++, dto.getRegistroPatronal() );
			}
		
			if (dto.isCreditoValidaXmlModified()) {
				if (dto.isCreditoValidaXmlNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreditoValidaXml() );
				}
		
			}
		
			if (dto.isCreditosDisponiblesSectorPrimarioModified()) {
				if (dto.isCreditosDisponiblesSectorPrimarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreditosDisponiblesSectorPrimario() );
				}
		
			}
		
			if (dto.isAddedasPermitidasModified()) {
				stmt.setString( index++, dto.getAddedasPermitidas() );
			}
		
			if (dto.isIdFranquiciatarioModified()) {
				if (dto.isIdFranquiciatarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFranquiciatario() );
				}
		
			}
		
			if (dto.isMensajePersonalizadoVisitaModified()) {
				stmt.setString( index++, dto.getMensajePersonalizadoVisita() );
			}
		
			if (dto.isPrintRazonSocialModified()) {
				if (dto.isPrintRazonSocialNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPrintRazonSocial() );
				}
		
			}
		
			if (dto.isPrintNombreComercialModified()) {
				if (dto.isPrintNombreComercialNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPrintNombreComercial() );
				}
		
			}
		
			if (dto.isGiroModified()) {
				stmt.setString( index++, dto.getGiro() );
			}
		
			if (dto.isCreditosOperacionModified()) {
				if (dto.isCreditosOperacionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreditosOperacion() );
				}
		
			}
		
			if (dto.isIntentosLoginNoCreditosModified()) {
				if (dto.isIntentosLoginNoCreditosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIntentosLoginNoCreditos() );
				}
		
			}
		
			if (dto.isPrintTkProdsModified()) {
				if (dto.isPrintTkProdsNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPrintTkProds() );
				}
		
			}
		
			if (dto.isTkMovilTipoModified()) {
				if (dto.isTkMovilTipoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTkMovilTipo() );
				}
		
			}
		
			if (dto.isTkMovilPorMarcaModified()) {
				if (dto.isTkMovilPorMarcaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTkMovilPorMarca() );
				}
		
			}
		
			if (dto.isTkMovilMostrarZonaModified()) {
				if (dto.isTkMovilMostrarZonaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTkMovilMostrarZona() );
				}
		
			}
		
			if (dto.isTkMovilMostrarFolioModified()) {
				if (dto.isTkMovilMostrarFolioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTkMovilMostrarFolio() );
				}
		
			}
		
			if (dto.isCreditosSmsModified()) {
				if (dto.isCreditosSmsNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreditosSms() );
				}
		
			}
		
			if (dto.isIdSmsDispositivoMovilModified()) {
				if (dto.isIdSmsDispositivoMovilNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsDispositivoMovil() );
				}
		
			}
		
			if (dto.isContactoCelularModified()) {
				stmt.setString( index++, dto.getContactoCelular() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the empresa table.
	 */
	public void update(EmpresaPk pk, Empresa dto) throws EmpresaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaPadreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA_PADRE=?" );
				modified=true;
			}
		
			if (dto.isIdUbicacionFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_UBICACION_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isIdTipoEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_TIPO_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isRfcModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RFC=?" );
				modified=true;
			}
		
			if (dto.isRazonSocialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RAZON_SOCIAL=?" );
				modified=true;
			}
		
			if (dto.isNombreComercialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_COMERCIAL=?" );
				modified=true;
			}
		
			if (dto.isFoliosDisponiblesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIOS_DISPONIBLES=?" );
				modified=true;
			}
		
			if (dto.isRegimenFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "REGIMEN_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isTipoPdfModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIPO_PDF=?" );
				modified=true;
			}
		
			if (dto.isTipoPdfHonorariosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIPO_PDF_HONORARIOS=?" );
				modified=true;
			}
		
			if (dto.isTipoPdfArrendamientoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIPO_PDF_ARRENDAMIENTO=?" );
				modified=true;
			}
		
			if (dto.isIdVendedorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_VENDEDOR=?" );
				modified=true;
			}
		
			if (dto.isTipoPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIPO_PAGO=?" );
				modified=true;
			}
		
			if (dto.isIdPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PAGO=?" );
				modified=true;
			}
		
			if (dto.isIdPaqueteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PAQUETE=?" );
				modified=true;
			}
		
			if (dto.isReferenciaPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "REFERENCIA_PAGO=?" );
				modified=true;
			}
		
			if (dto.isFechaRegistroModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_REGISTRO=?" );
				modified=true;
			}
		
			if (dto.isCompartirConceptosMatrizModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "COMPARTIR_CONCEPTOS_MATRIZ=?" );
				modified=true;
			}
		
			if (dto.isLatitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LATITUD=?" );
				modified=true;
			}
		
			if (dto.isLongitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LONGITUD=?" );
				modified=true;
			}
		
			if (dto.isRegistroPatronalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "REGISTRO_PATRONAL=?" );
				modified=true;
			}
		
			if (dto.isCreditoValidaXmlModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CREDITO_VALIDA_XML=?" );
				modified=true;
			}
		
			if (dto.isCreditosDisponiblesSectorPrimarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CREDITOS_DISPONIBLES_SECTOR_PRIMARIO=?" );
				modified=true;
			}
		
			if (dto.isAddedasPermitidasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ADDEDAS_PERMITIDAS=?" );
				modified=true;
			}
		
			if (dto.isIdFranquiciatarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_FRANQUICIATARIO=?" );
				modified=true;
			}
		
			if (dto.isMensajePersonalizadoVisitaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MENSAJE_PERSONALIZADO_VISITA=?" );
				modified=true;
			}
		
			if (dto.isPrintRazonSocialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRINT_RAZON_SOCIAL=?" );
				modified=true;
			}
		
			if (dto.isPrintNombreComercialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRINT_NOMBRE_COMERCIAL=?" );
				modified=true;
			}
		
			if (dto.isGiroModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "GIRO=?" );
				modified=true;
			}
		
			if (dto.isCreditosOperacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CREDITOS_OPERACION=?" );
				modified=true;
			}
		
			if (dto.isIntentosLoginNoCreditosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "INTENTOS_LOGIN_NO_CREDITOS=?" );
				modified=true;
			}
		
			if (dto.isPrintTkProdsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRINT_TK_PRODS=?" );
				modified=true;
			}
		
			if (dto.isTkMovilTipoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TK_MOVIL_TIPO=?" );
				modified=true;
			}
		
			if (dto.isTkMovilPorMarcaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TK_MOVIL_POR_MARCA=?" );
				modified=true;
			}
		
			if (dto.isTkMovilMostrarZonaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TK_MOVIL_MOSTRAR_ZONA=?" );
				modified=true;
			}
		
			if (dto.isTkMovilMostrarFolioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TK_MOVIL_MOSTRAR_FOLIO=?" );
				modified=true;
			}
		
			if (dto.isCreditosSmsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CREDITOS_SMS=?" );
				modified=true;
			}
		
			if (dto.isIdSmsDispositivoMovilModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_SMS_DISPOSITIVO_MOVIL=?" );
				modified=true;
			}
		
			if (dto.isContactoCelularModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONTACTO_CELULAR=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_EMPRESA=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEmpresaPadreModified()) {
				if (dto.isIdEmpresaPadreNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresaPadre() );
				}
		
			}
		
			if (dto.isIdUbicacionFiscalModified()) {
				stmt.setInt( index++, dto.getIdUbicacionFiscal() );
			}
		
			if (dto.isIdTipoEmpresaModified()) {
				stmt.setInt( index++, dto.getIdTipoEmpresa() );
			}
		
			if (dto.isRfcModified()) {
				stmt.setString( index++, dto.getRfc() );
			}
		
			if (dto.isRazonSocialModified()) {
				stmt.setString( index++, dto.getRazonSocial() );
			}
		
			if (dto.isNombreComercialModified()) {
				stmt.setString( index++, dto.getNombreComercial() );
			}
		
			if (dto.isFoliosDisponiblesModified()) {
				if (dto.isFoliosDisponiblesNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getFoliosDisponibles() );
				}
		
			}
		
			if (dto.isRegimenFiscalModified()) {
				stmt.setString( index++, dto.getRegimenFiscal() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isTipoPdfModified()) {
				if (dto.isTipoPdfNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoPdf() );
				}
		
			}
		
			if (dto.isTipoPdfHonorariosModified()) {
				if (dto.isTipoPdfHonorariosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoPdfHonorarios() );
				}
		
			}
		
			if (dto.isTipoPdfArrendamientoModified()) {
				if (dto.isTipoPdfArrendamientoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoPdfArrendamiento() );
				}
		
			}
		
			if (dto.isIdVendedorModified()) {
				if (dto.isIdVendedorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdVendedor() );
				}
		
			}
		
			if (dto.isTipoPagoModified()) {
				if (dto.isTipoPagoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoPago() );
				}
		
			}
		
			if (dto.isIdPagoModified()) {
				if (dto.isIdPagoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPago() );
				}
		
			}
		
			if (dto.isIdPaqueteModified()) {
				if (dto.isIdPaqueteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPaquete() );
				}
		
			}
		
			if (dto.isReferenciaPagoModified()) {
				stmt.setString( index++, dto.getReferenciaPago() );
			}
		
			if (dto.isFechaRegistroModified()) {
				stmt.setDate(index++, dto.getFechaRegistro()==null ? null : new java.sql.Date( dto.getFechaRegistro().getTime() ) );
			}
		
			if (dto.isCompartirConceptosMatrizModified()) {
				if (dto.isCompartirConceptosMatrizNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCompartirConceptosMatriz() );
				}
		
			}
		
			if (dto.isLatitudModified()) {
				if (dto.isLatitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLatitud() );
				}
		
			}
		
			if (dto.isLongitudModified()) {
				if (dto.isLongitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLongitud() );
				}
		
			}
		
			if (dto.isRegistroPatronalModified()) {
				stmt.setString( index++, dto.getRegistroPatronal() );
			}
		
			if (dto.isCreditoValidaXmlModified()) {
				if (dto.isCreditoValidaXmlNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreditoValidaXml() );
				}
		
			}
		
			if (dto.isCreditosDisponiblesSectorPrimarioModified()) {
				if (dto.isCreditosDisponiblesSectorPrimarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreditosDisponiblesSectorPrimario() );
				}
		
			}
		
			if (dto.isAddedasPermitidasModified()) {
				stmt.setString( index++, dto.getAddedasPermitidas() );
			}
		
			if (dto.isIdFranquiciatarioModified()) {
				if (dto.isIdFranquiciatarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFranquiciatario() );
				}
		
			}
		
			if (dto.isMensajePersonalizadoVisitaModified()) {
				stmt.setString( index++, dto.getMensajePersonalizadoVisita() );
			}
		
			if (dto.isPrintRazonSocialModified()) {
				if (dto.isPrintRazonSocialNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPrintRazonSocial() );
				}
		
			}
		
			if (dto.isPrintNombreComercialModified()) {
				if (dto.isPrintNombreComercialNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPrintNombreComercial() );
				}
		
			}
		
			if (dto.isGiroModified()) {
				stmt.setString( index++, dto.getGiro() );
			}
		
			if (dto.isCreditosOperacionModified()) {
				if (dto.isCreditosOperacionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreditosOperacion() );
				}
		
			}
		
			if (dto.isIntentosLoginNoCreditosModified()) {
				if (dto.isIntentosLoginNoCreditosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIntentosLoginNoCreditos() );
				}
		
			}
		
			if (dto.isPrintTkProdsModified()) {
				if (dto.isPrintTkProdsNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPrintTkProds() );
				}
		
			}
		
			if (dto.isTkMovilTipoModified()) {
				if (dto.isTkMovilTipoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTkMovilTipo() );
				}
		
			}
		
			if (dto.isTkMovilPorMarcaModified()) {
				if (dto.isTkMovilPorMarcaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTkMovilPorMarca() );
				}
		
			}
		
			if (dto.isTkMovilMostrarZonaModified()) {
				if (dto.isTkMovilMostrarZonaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTkMovilMostrarZona() );
				}
		
			}
		
			if (dto.isTkMovilMostrarFolioModified()) {
				if (dto.isTkMovilMostrarFolioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTkMovilMostrarFolio() );
				}
		
			}
		
			if (dto.isCreditosSmsModified()) {
				if (dto.isCreditosSmsNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreditosSms() );
				}
		
			}
		
			if (dto.isIdSmsDispositivoMovilModified()) {
				if (dto.isIdSmsDispositivoMovilNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSmsDispositivoMovil() );
				}
		
			}
		
			if (dto.isContactoCelularModified()) {
				stmt.setString( index++, dto.getContactoCelular() );
			}
		
			stmt.setInt( index++, pk.getIdEmpresa() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the empresa table.
	 */
	public void delete(EmpresaPk pk) throws EmpresaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdEmpresa() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the empresa table that matches the specified primary-key value.
	 */
	public Empresa findByPrimaryKey(EmpresaPk pk) throws EmpresaDaoException
	{
		return findByPrimaryKey( pk.getIdEmpresa() );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Empresa findByPrimaryKey(int idEmpresa) throws EmpresaDaoException
	{
		Empresa ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ?", new Object[] {  new Integer(idEmpresa) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria ''.
	 */
	public Empresa[] findAll() throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_EMPRESA", null );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Empresa[] findWhereIdEmpresaEquals(int idEmpresa) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_EMPRESA_PADRE = :idEmpresaPadre'.
	 */
	public Empresa[] findWhereIdEmpresaPadreEquals(int idEmpresaPadre) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA_PADRE = ? ORDER BY ID_EMPRESA_PADRE", new Object[] {  new Integer(idEmpresaPadre) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_UBICACION_FISCAL = :idUbicacionFiscal'.
	 */
	public Empresa[] findWhereIdUbicacionFiscalEquals(int idUbicacionFiscal) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_UBICACION_FISCAL = ? ORDER BY ID_UBICACION_FISCAL", new Object[] {  new Integer(idUbicacionFiscal) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_TIPO_EMPRESA = :idTipoEmpresa'.
	 */
	public Empresa[] findWhereIdTipoEmpresaEquals(int idTipoEmpresa) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TIPO_EMPRESA = ? ORDER BY ID_TIPO_EMPRESA", new Object[] {  new Integer(idTipoEmpresa) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'RFC = :rfc'.
	 */
	public Empresa[] findWhereRfcEquals(String rfc) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC = ? ORDER BY RFC", new Object[] { rfc } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'RAZON_SOCIAL = :razonSocial'.
	 */
	public Empresa[] findWhereRazonSocialEquals(String razonSocial) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RAZON_SOCIAL = ? ORDER BY RAZON_SOCIAL", new Object[] { razonSocial } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'NOMBRE_COMERCIAL = :nombreComercial'.
	 */
	public Empresa[] findWhereNombreComercialEquals(String nombreComercial) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_COMERCIAL = ? ORDER BY NOMBRE_COMERCIAL", new Object[] { nombreComercial } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'FOLIOS_DISPONIBLES = :foliosDisponibles'.
	 */
	public Empresa[] findWhereFoliosDisponiblesEquals(int foliosDisponibles) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIOS_DISPONIBLES = ? ORDER BY FOLIOS_DISPONIBLES", new Object[] {  new Integer(foliosDisponibles) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'REGIMEN_FISCAL = :regimenFiscal'.
	 */
	public Empresa[] findWhereRegimenFiscalEquals(String regimenFiscal) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REGIMEN_FISCAL = ? ORDER BY REGIMEN_FISCAL", new Object[] { regimenFiscal } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Empresa[] findWhereIdEstatusEquals(int idEstatus) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TIPO_PDF = :tipoPdf'.
	 */
	public Empresa[] findWhereTipoPdfEquals(int tipoPdf) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_PDF = ? ORDER BY TIPO_PDF", new Object[] {  new Integer(tipoPdf) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TIPO_PDF_HONORARIOS = :tipoPdfHonorarios'.
	 */
	public Empresa[] findWhereTipoPdfHonorariosEquals(int tipoPdfHonorarios) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_PDF_HONORARIOS = ? ORDER BY TIPO_PDF_HONORARIOS", new Object[] {  new Integer(tipoPdfHonorarios) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TIPO_PDF_ARRENDAMIENTO = :tipoPdfArrendamiento'.
	 */
	public Empresa[] findWhereTipoPdfArrendamientoEquals(int tipoPdfArrendamiento) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_PDF_ARRENDAMIENTO = ? ORDER BY TIPO_PDF_ARRENDAMIENTO", new Object[] {  new Integer(tipoPdfArrendamiento) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_VENDEDOR = :idVendedor'.
	 */
	public Empresa[] findWhereIdVendedorEquals(int idVendedor) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_VENDEDOR = ? ORDER BY ID_VENDEDOR", new Object[] {  new Integer(idVendedor) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TIPO_PAGO = :tipoPago'.
	 */
	public Empresa[] findWhereTipoPagoEquals(int tipoPago) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_PAGO = ? ORDER BY TIPO_PAGO", new Object[] {  new Integer(tipoPago) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_PAGO = :idPago'.
	 */
	public Empresa[] findWhereIdPagoEquals(int idPago) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PAGO = ? ORDER BY ID_PAGO", new Object[] {  new Integer(idPago) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_PAQUETE = :idPaquete'.
	 */
	public Empresa[] findWhereIdPaqueteEquals(int idPaquete) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PAQUETE = ? ORDER BY ID_PAQUETE", new Object[] {  new Integer(idPaquete) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'REFERENCIA_PAGO = :referenciaPago'.
	 */
	public Empresa[] findWhereReferenciaPagoEquals(String referenciaPago) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REFERENCIA_PAGO = ? ORDER BY REFERENCIA_PAGO", new Object[] { referenciaPago } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'FECHA_REGISTRO = :fechaRegistro'.
	 */
	public Empresa[] findWhereFechaRegistroEquals(Date fechaRegistro) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_REGISTRO = ? ORDER BY FECHA_REGISTRO", new Object[] { fechaRegistro==null ? null : new java.sql.Date( fechaRegistro.getTime() ) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'COMPARTIR_CONCEPTOS_MATRIZ = :compartirConceptosMatriz'.
	 */
	public Empresa[] findWhereCompartirConceptosMatrizEquals(int compartirConceptosMatriz) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMPARTIR_CONCEPTOS_MATRIZ = ? ORDER BY COMPARTIR_CONCEPTOS_MATRIZ", new Object[] {  new Integer(compartirConceptosMatriz) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'LATITUD = :latitud'.
	 */
	public Empresa[] findWhereLatitudEquals(double latitud) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATITUD = ? ORDER BY LATITUD", new Object[] {  new Double(latitud) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'LONGITUD = :longitud'.
	 */
	public Empresa[] findWhereLongitudEquals(double longitud) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LONGITUD = ? ORDER BY LONGITUD", new Object[] {  new Double(longitud) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'REGISTRO_PATRONAL = :registroPatronal'.
	 */
	public Empresa[] findWhereRegistroPatronalEquals(String registroPatronal) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REGISTRO_PATRONAL = ? ORDER BY REGISTRO_PATRONAL", new Object[] { registroPatronal } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'CREDITO_VALIDA_XML = :creditoValidaXml'.
	 */
	public Empresa[] findWhereCreditoValidaXmlEquals(int creditoValidaXml) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREDITO_VALIDA_XML = ? ORDER BY CREDITO_VALIDA_XML", new Object[] {  new Integer(creditoValidaXml) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'CREDITOS_DISPONIBLES_SECTOR_PRIMARIO = :creditosDisponiblesSectorPrimario'.
	 */
	public Empresa[] findWhereCreditosDisponiblesSectorPrimarioEquals(int creditosDisponiblesSectorPrimario) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREDITOS_DISPONIBLES_SECTOR_PRIMARIO = ? ORDER BY CREDITOS_DISPONIBLES_SECTOR_PRIMARIO", new Object[] {  new Integer(creditosDisponiblesSectorPrimario) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ADDEDAS_PERMITIDAS = :addedasPermitidas'.
	 */
	public Empresa[] findWhereAddedasPermitidasEquals(String addedasPermitidas) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ADDEDAS_PERMITIDAS = ? ORDER BY ADDEDAS_PERMITIDAS", new Object[] { addedasPermitidas } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_FRANQUICIATARIO = :idFranquiciatario'.
	 */
	public Empresa[] findWhereIdFranquiciatarioEquals(int idFranquiciatario) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_FRANQUICIATARIO = ? ORDER BY ID_FRANQUICIATARIO", new Object[] {  new Integer(idFranquiciatario) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'MENSAJE_PERSONALIZADO_VISITA = :mensajePersonalizadoVisita'.
	 */
	public Empresa[] findWhereMensajePersonalizadoVisitaEquals(String mensajePersonalizadoVisita) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MENSAJE_PERSONALIZADO_VISITA = ? ORDER BY MENSAJE_PERSONALIZADO_VISITA", new Object[] { mensajePersonalizadoVisita } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'PRINT_RAZON_SOCIAL = :printRazonSocial'.
	 */
	public Empresa[] findWherePrintRazonSocialEquals(int printRazonSocial) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRINT_RAZON_SOCIAL = ? ORDER BY PRINT_RAZON_SOCIAL", new Object[] {  new Integer(printRazonSocial) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'PRINT_NOMBRE_COMERCIAL = :printNombreComercial'.
	 */
	public Empresa[] findWherePrintNombreComercialEquals(int printNombreComercial) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRINT_NOMBRE_COMERCIAL = ? ORDER BY PRINT_NOMBRE_COMERCIAL", new Object[] {  new Integer(printNombreComercial) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'GIRO = :giro'.
	 */
	public Empresa[] findWhereGiroEquals(String giro) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GIRO = ? ORDER BY GIRO", new Object[] { giro } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'CREDITOS_OPERACION = :creditosOperacion'.
	 */
	public Empresa[] findWhereCreditosOperacionEquals(int creditosOperacion) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREDITOS_OPERACION = ? ORDER BY CREDITOS_OPERACION", new Object[] {  new Integer(creditosOperacion) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'INTENTOS_LOGIN_NO_CREDITOS = :intentosLoginNoCreditos'.
	 */
	public Empresa[] findWhereIntentosLoginNoCreditosEquals(int intentosLoginNoCreditos) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INTENTOS_LOGIN_NO_CREDITOS = ? ORDER BY INTENTOS_LOGIN_NO_CREDITOS", new Object[] {  new Integer(intentosLoginNoCreditos) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'PRINT_TK_PRODS = :printTkProds'.
	 */
	public Empresa[] findWherePrintTkProdsEquals(int printTkProds) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRINT_TK_PRODS = ? ORDER BY PRINT_TK_PRODS", new Object[] {  new Integer(printTkProds) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TK_MOVIL_TIPO = :tkMovilTipo'.
	 */
	public Empresa[] findWhereTkMovilTipoEquals(int tkMovilTipo) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TK_MOVIL_TIPO = ? ORDER BY TK_MOVIL_TIPO", new Object[] {  new Integer(tkMovilTipo) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TK_MOVIL_POR_MARCA = :tkMovilPorMarca'.
	 */
	public Empresa[] findWhereTkMovilPorMarcaEquals(int tkMovilPorMarca) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TK_MOVIL_POR_MARCA = ? ORDER BY TK_MOVIL_POR_MARCA", new Object[] {  new Integer(tkMovilPorMarca) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TK_MOVIL_MOSTRAR_ZONA = :tkMovilMostrarZona'.
	 */
	public Empresa[] findWhereTkMovilMostrarZonaEquals(int tkMovilMostrarZona) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TK_MOVIL_MOSTRAR_ZONA = ? ORDER BY TK_MOVIL_MOSTRAR_ZONA", new Object[] {  new Integer(tkMovilMostrarZona) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TK_MOVIL_MOSTRAR_FOLIO = :tkMovilMostrarFolio'.
	 */
	public Empresa[] findWhereTkMovilMostrarFolioEquals(int tkMovilMostrarFolio) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TK_MOVIL_MOSTRAR_FOLIO = ? ORDER BY TK_MOVIL_MOSTRAR_FOLIO", new Object[] {  new Integer(tkMovilMostrarFolio) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'CREDITOS_SMS = :creditosSms'.
	 */
	public Empresa[] findWhereCreditosSmsEquals(int creditosSms) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREDITOS_SMS = ? ORDER BY CREDITOS_SMS", new Object[] {  new Integer(creditosSms) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_SMS_DISPOSITIVO_MOVIL = :idSmsDispositivoMovil'.
	 */
	public Empresa[] findWhereIdSmsDispositivoMovilEquals(int idSmsDispositivoMovil) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_SMS_DISPOSITIVO_MOVIL = ? ORDER BY ID_SMS_DISPOSITIVO_MOVIL", new Object[] {  new Integer(idSmsDispositivoMovil) } );
	}

	/** 
	 * Returns all rows from the empresa table that match the criteria 'CONTACTO_CELULAR = :contactoCelular'.
	 */
	public Empresa[] findWhereContactoCelularEquals(String contactoCelular) throws EmpresaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTACTO_CELULAR = ? ORDER BY CONTACTO_CELULAR", new Object[] { contactoCelular } );
	}

	/**
	 * Method 'EmpresaDaoImpl'
	 * 
	 */
	public EmpresaDaoImpl()
	{
	}

	/**
	 * Method 'EmpresaDaoImpl'
	 * 
	 * @param userConn
	 */
	public EmpresaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "empresa";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Empresa fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Empresa dto = new Empresa();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Empresa[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Empresa dto = new Empresa();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Empresa ret[] = new Empresa[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Empresa dto, ResultSet rs) throws SQLException
	{
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdEmpresaPadre( rs.getInt( COLUMN_ID_EMPRESA_PADRE ) );
		if (rs.wasNull()) {
			dto.setIdEmpresaPadreNull( true );
		}
		
		dto.setIdUbicacionFiscal( rs.getInt( COLUMN_ID_UBICACION_FISCAL ) );
		dto.setIdTipoEmpresa( rs.getInt( COLUMN_ID_TIPO_EMPRESA ) );
		dto.setRfc( rs.getString( COLUMN_RFC ) );
		dto.setRazonSocial( rs.getString( COLUMN_RAZON_SOCIAL ) );
		dto.setNombreComercial( rs.getString( COLUMN_NOMBRE_COMERCIAL ) );
		dto.setFoliosDisponibles( rs.getInt( COLUMN_FOLIOS_DISPONIBLES ) );
		if (rs.wasNull()) {
			dto.setFoliosDisponiblesNull( true );
		}
		
		dto.setRegimenFiscal( rs.getString( COLUMN_REGIMEN_FISCAL ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		dto.setTipoPdf( rs.getInt( COLUMN_TIPO_PDF ) );
		if (rs.wasNull()) {
			dto.setTipoPdfNull( true );
		}
		
		dto.setTipoPdfHonorarios( rs.getInt( COLUMN_TIPO_PDF_HONORARIOS ) );
		if (rs.wasNull()) {
			dto.setTipoPdfHonorariosNull( true );
		}
		
		dto.setTipoPdfArrendamiento( rs.getInt( COLUMN_TIPO_PDF_ARRENDAMIENTO ) );
		if (rs.wasNull()) {
			dto.setTipoPdfArrendamientoNull( true );
		}
		
		dto.setIdVendedor( rs.getInt( COLUMN_ID_VENDEDOR ) );
		if (rs.wasNull()) {
			dto.setIdVendedorNull( true );
		}
		
		dto.setTipoPago( rs.getInt( COLUMN_TIPO_PAGO ) );
		if (rs.wasNull()) {
			dto.setTipoPagoNull( true );
		}
		
		dto.setIdPago( rs.getInt( COLUMN_ID_PAGO ) );
		if (rs.wasNull()) {
			dto.setIdPagoNull( true );
		}
		
		dto.setIdPaquete( rs.getInt( COLUMN_ID_PAQUETE ) );
		if (rs.wasNull()) {
			dto.setIdPaqueteNull( true );
		}
		
		dto.setReferenciaPago( rs.getString( COLUMN_REFERENCIA_PAGO ) );
		dto.setFechaRegistro( rs.getDate(COLUMN_FECHA_REGISTRO ) );
		dto.setCompartirConceptosMatriz( rs.getInt( COLUMN_COMPARTIR_CONCEPTOS_MATRIZ ) );
		if (rs.wasNull()) {
			dto.setCompartirConceptosMatrizNull( true );
		}
		
		dto.setLatitud( rs.getDouble( COLUMN_LATITUD ) );
		if (rs.wasNull()) {
			dto.setLatitudNull( true );
		}
		
		dto.setLongitud( rs.getDouble( COLUMN_LONGITUD ) );
		if (rs.wasNull()) {
			dto.setLongitudNull( true );
		}
		
		dto.setRegistroPatronal( rs.getString( COLUMN_REGISTRO_PATRONAL ) );
		dto.setCreditoValidaXml( rs.getInt( COLUMN_CREDITO_VALIDA_XML ) );
		if (rs.wasNull()) {
			dto.setCreditoValidaXmlNull( true );
		}
		
		dto.setCreditosDisponiblesSectorPrimario( rs.getInt( COLUMN_CREDITOS_DISPONIBLES_SECTOR_PRIMARIO ) );
		if (rs.wasNull()) {
			dto.setCreditosDisponiblesSectorPrimarioNull( true );
		}
		
		dto.setAddedasPermitidas( rs.getString( COLUMN_ADDEDAS_PERMITIDAS ) );
		dto.setIdFranquiciatario( rs.getInt( COLUMN_ID_FRANQUICIATARIO ) );
		if (rs.wasNull()) {
			dto.setIdFranquiciatarioNull( true );
		}
		
		dto.setMensajePersonalizadoVisita( rs.getString( COLUMN_MENSAJE_PERSONALIZADO_VISITA ) );
		dto.setPrintRazonSocial( rs.getInt( COLUMN_PRINT_RAZON_SOCIAL ) );
		if (rs.wasNull()) {
			dto.setPrintRazonSocialNull( true );
		}
		
		dto.setPrintNombreComercial( rs.getInt( COLUMN_PRINT_NOMBRE_COMERCIAL ) );
		if (rs.wasNull()) {
			dto.setPrintNombreComercialNull( true );
		}
		
		dto.setGiro( rs.getString( COLUMN_GIRO ) );
		dto.setCreditosOperacion( rs.getInt( COLUMN_CREDITOS_OPERACION ) );
		if (rs.wasNull()) {
			dto.setCreditosOperacionNull( true );
		}
		
		dto.setIntentosLoginNoCreditos( rs.getInt( COLUMN_INTENTOS_LOGIN_NO_CREDITOS ) );
		if (rs.wasNull()) {
			dto.setIntentosLoginNoCreditosNull( true );
		}
		
		dto.setPrintTkProds( rs.getInt( COLUMN_PRINT_TK_PRODS ) );
		if (rs.wasNull()) {
			dto.setPrintTkProdsNull( true );
		}
		
		dto.setTkMovilTipo( rs.getInt( COLUMN_TK_MOVIL_TIPO ) );
		if (rs.wasNull()) {
			dto.setTkMovilTipoNull( true );
		}
		
		dto.setTkMovilPorMarca( rs.getInt( COLUMN_TK_MOVIL_POR_MARCA ) );
		if (rs.wasNull()) {
			dto.setTkMovilPorMarcaNull( true );
		}
		
		dto.setTkMovilMostrarZona( rs.getInt( COLUMN_TK_MOVIL_MOSTRAR_ZONA ) );
		if (rs.wasNull()) {
			dto.setTkMovilMostrarZonaNull( true );
		}
		
		dto.setTkMovilMostrarFolio( rs.getInt( COLUMN_TK_MOVIL_MOSTRAR_FOLIO ) );
		if (rs.wasNull()) {
			dto.setTkMovilMostrarFolioNull( true );
		}
		
		dto.setCreditosSms( rs.getInt( COLUMN_CREDITOS_SMS ) );
		if (rs.wasNull()) {
			dto.setCreditosSmsNull( true );
		}
		
		dto.setIdSmsDispositivoMovil( rs.getInt( COLUMN_ID_SMS_DISPOSITIVO_MOVIL ) );
		if (rs.wasNull()) {
			dto.setIdSmsDispositivoMovilNull( true );
		}
		
		dto.setContactoCelular( rs.getString( COLUMN_CONTACTO_CELULAR ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Empresa dto)
	{
		dto.setIdEmpresaModified( false );
		dto.setIdEmpresaPadreModified( false );
		dto.setIdUbicacionFiscalModified( false );
		dto.setIdTipoEmpresaModified( false );
		dto.setRfcModified( false );
		dto.setRazonSocialModified( false );
		dto.setNombreComercialModified( false );
		dto.setFoliosDisponiblesModified( false );
		dto.setRegimenFiscalModified( false );
		dto.setIdEstatusModified( false );
		dto.setTipoPdfModified( false );
		dto.setTipoPdfHonorariosModified( false );
		dto.setTipoPdfArrendamientoModified( false );
		dto.setIdVendedorModified( false );
		dto.setTipoPagoModified( false );
		dto.setIdPagoModified( false );
		dto.setIdPaqueteModified( false );
		dto.setReferenciaPagoModified( false );
		dto.setFechaRegistroModified( false );
		dto.setCompartirConceptosMatrizModified( false );
		dto.setLatitudModified( false );
		dto.setLongitudModified( false );
		dto.setRegistroPatronalModified( false );
		dto.setCreditoValidaXmlModified( false );
		dto.setCreditosDisponiblesSectorPrimarioModified( false );
		dto.setAddedasPermitidasModified( false );
		dto.setIdFranquiciatarioModified( false );
		dto.setMensajePersonalizadoVisitaModified( false );
		dto.setPrintRazonSocialModified( false );
		dto.setPrintNombreComercialModified( false );
		dto.setGiroModified( false );
		dto.setCreditosOperacionModified( false );
		dto.setIntentosLoginNoCreditosModified( false );
		dto.setPrintTkProdsModified( false );
		dto.setTkMovilTipoModified( false );
		dto.setTkMovilPorMarcaModified( false );
		dto.setTkMovilMostrarZonaModified( false );
		dto.setTkMovilMostrarFolioModified( false );
		dto.setCreditosSmsModified( false );
		dto.setIdSmsDispositivoMovilModified( false );
		dto.setContactoCelularModified( false );
	}

	/** 
	 * Returns all rows from the empresa table that match the specified arbitrary SQL statement
	 */
	public Empresa[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmpresaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the empresa table that match the specified arbitrary SQL statement
	 */
	public Empresa[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmpresaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpresaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

    protected final String SQL_SELECT_MAX = "SELECT ID_EMPRESA, ID_EMPRESA_PADRE, ID_UBICACION_FISCAL, ID_TIPO_EMPRESA, RFC, RAZON_SOCIAL, NOMBRE_COMERCIAL, FOLIOS_DISPONIBLES, REGIMEN_FISCAL, ID_ESTATUS, TIPO_PDF, TIPO_PDF_HONORARIOS, TIPO_PDF_ARRENDAMIENTO, ID_VENDEDOR, TIPO_PAGO, ID_PAGO, ID_PAQUETE, REFERENCIA_PAGO, FECHA_REGISTRO, COMPARTIR_CONCEPTOS_MATRIZ, LATITUD, LONGITUD, REGISTRO_PATRONAL, CREDITO_VALIDA_XML, CREDITOS_DISPONIBLES_SECTOR_PRIMARIO, ADDEDAS_PERMITIDAS, ID_FRANQUICIATARIO, MENSAJE_PERSONALIZADO_VISITA, PRINT_RAZON_SOCIAL, PRINT_NOMBRE_COMERCIAL, GIRO, CREDITOS_OPERACION, INTENTOS_LOGIN_NO_CREDITOS, PRINT_TK_PRODS, TK_MOVIL_TIPO, TK_MOVIL_POR_MARCA, TK_MOVIL_MOSTRAR_ZONA, TK_MOVIL_MOSTRAR_FOLIO, CREDITOS_SMS, ID_SMS_DISPOSITIVO_MOVIL, CONTACTO_CELULAR FROM " + getTableName() + " ORDER BY ID_EMPRESA DESC LIMIT 1 ";

    public Empresa findLast() throws EmpresaDaoException {
        Empresa ret[] = findByDynamicSelect(SQL_SELECT_MAX, new Object[0]);
        return ret.length == 0 ? null : ret[0];
    }
    
}
