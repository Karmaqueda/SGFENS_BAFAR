/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CrFormularioValidacionDaoImpl extends AbstractDAO implements CrFormularioValidacionDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_formulario_validacion, nombre, descripcion, regex_java, regex_lenguaje_ext, is_creado_sistema, id_empresa, id_estatus FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_formulario_validacion, nombre, descripcion, regex_java, regex_lenguaje_ext, is_creado_sistema, id_empresa, id_estatus ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_formulario_validacion = ?, nombre = ?, descripcion = ?, regex_java = ?, regex_lenguaje_ext = ?, is_creado_sistema = ?, id_empresa = ?, id_estatus = ? WHERE id_formulario_validacion = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_formulario_validacion = ?";

	/** 
	 * Index of column id_formulario_validacion
	 */
	protected static final int COLUMN_ID_FORMULARIO_VALIDACION = 1;

	/** 
	 * Index of column nombre
	 */
	protected static final int COLUMN_NOMBRE = 2;

	/** 
	 * Index of column descripcion
	 */
	protected static final int COLUMN_DESCRIPCION = 3;

	/** 
	 * Index of column regex_java
	 */
	protected static final int COLUMN_REGEX_JAVA = 4;

	/** 
	 * Index of column regex_lenguaje_ext
	 */
	protected static final int COLUMN_REGEX_LENGUAJE_EXT = 5;

	/** 
	 * Index of column is_creado_sistema
	 */
	protected static final int COLUMN_IS_CREADO_SISTEMA = 6;

	/** 
	 * Index of column id_empresa
	 */
	protected static final int COLUMN_ID_EMPRESA = 7;

	/** 
	 * Index of column id_estatus
	 */
	protected static final int COLUMN_ID_ESTATUS = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column id_formulario_validacion
	 */
	protected static final int PK_COLUMN_ID_FORMULARIO_VALIDACION = 1;

	/** 
	 * Inserts a new row in the cr_formulario_validacion table.
	 */
	public CrFormularioValidacionPk insert(CrFormularioValidacion dto) throws CrFormularioValidacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdFormularioValidacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_formulario_validacion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "nombre" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "descripcion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRegexJavaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "regex_java" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRegexLenguajeExtModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "regex_lenguaje_ext" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsCreadoSistemaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_creado_sistema" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_empresa" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_estatus" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdFormularioValidacionModified()) {
				stmt.setInt( index++, dto.getIdFormularioValidacion() );
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isRegexJavaModified()) {
				stmt.setString( index++, dto.getRegexJava() );
			}
		
			if (dto.isRegexLenguajeExtModified()) {
				stmt.setString( index++, dto.getRegexLenguajeExt() );
			}
		
			if (dto.isIsCreadoSistemaModified()) {
				stmt.setInt( index++, dto.getIsCreadoSistema() );
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdFormularioValidacion( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFormularioValidacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the cr_formulario_validacion table.
	 */
	public void update(CrFormularioValidacionPk pk, CrFormularioValidacion dto) throws CrFormularioValidacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdFormularioValidacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_formulario_validacion=?" );
				modified=true;
			}
		
			if (dto.isNombreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "nombre=?" );
				modified=true;
			}
		
			if (dto.isDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "descripcion=?" );
				modified=true;
			}
		
			if (dto.isRegexJavaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "regex_java=?" );
				modified=true;
			}
		
			if (dto.isRegexLenguajeExtModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "regex_lenguaje_ext=?" );
				modified=true;
			}
		
			if (dto.isIsCreadoSistemaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_creado_sistema=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_empresa=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_estatus=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_formulario_validacion=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdFormularioValidacionModified()) {
				stmt.setInt( index++, dto.getIdFormularioValidacion() );
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isRegexJavaModified()) {
				stmt.setString( index++, dto.getRegexJava() );
			}
		
			if (dto.isRegexLenguajeExtModified()) {
				stmt.setString( index++, dto.getRegexLenguajeExt() );
			}
		
			if (dto.isIsCreadoSistemaModified()) {
				stmt.setInt( index++, dto.getIsCreadoSistema() );
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			stmt.setInt( index++, pk.getIdFormularioValidacion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFormularioValidacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the cr_formulario_validacion table.
	 */
	public void delete(CrFormularioValidacionPk pk) throws CrFormularioValidacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdFormularioValidacion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFormularioValidacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the cr_formulario_validacion table that matches the specified primary-key value.
	 */
	public CrFormularioValidacion findByPrimaryKey(CrFormularioValidacionPk pk) throws CrFormularioValidacionDaoException
	{
		return findByPrimaryKey( pk.getIdFormularioValidacion() );
	}

	/** 
	 * Returns all rows from the cr_formulario_validacion table that match the criteria 'id_formulario_validacion = :idFormularioValidacion'.
	 */
	public CrFormularioValidacion findByPrimaryKey(int idFormularioValidacion) throws CrFormularioValidacionDaoException
	{
		CrFormularioValidacion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_formulario_validacion = ?", new Object[] {  new Integer(idFormularioValidacion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the cr_formulario_validacion table that match the criteria ''.
	 */
	public CrFormularioValidacion[] findAll() throws CrFormularioValidacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_formulario_validacion", null );
	}

	/** 
	 * Returns all rows from the cr_formulario_validacion table that match the criteria 'id_formulario_validacion = :idFormularioValidacion'.
	 */
	public CrFormularioValidacion[] findWhereIdFormularioValidacionEquals(int idFormularioValidacion) throws CrFormularioValidacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_formulario_validacion = ? ORDER BY id_formulario_validacion", new Object[] {  new Integer(idFormularioValidacion) } );
	}

	/** 
	 * Returns all rows from the cr_formulario_validacion table that match the criteria 'nombre = :nombre'.
	 */
	public CrFormularioValidacion[] findWhereNombreEquals(String nombre) throws CrFormularioValidacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nombre = ? ORDER BY nombre", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the cr_formulario_validacion table that match the criteria 'descripcion = :descripcion'.
	 */
	public CrFormularioValidacion[] findWhereDescripcionEquals(String descripcion) throws CrFormularioValidacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE descripcion = ? ORDER BY descripcion", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the cr_formulario_validacion table that match the criteria 'regex_java = :regexJava'.
	 */
	public CrFormularioValidacion[] findWhereRegexJavaEquals(String regexJava) throws CrFormularioValidacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE regex_java = ? ORDER BY regex_java", new Object[] { regexJava } );
	}

	/** 
	 * Returns all rows from the cr_formulario_validacion table that match the criteria 'regex_lenguaje_ext = :regexLenguajeExt'.
	 */
	public CrFormularioValidacion[] findWhereRegexLenguajeExtEquals(String regexLenguajeExt) throws CrFormularioValidacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE regex_lenguaje_ext = ? ORDER BY regex_lenguaje_ext", new Object[] { regexLenguajeExt } );
	}

	/** 
	 * Returns all rows from the cr_formulario_validacion table that match the criteria 'is_creado_sistema = :isCreadoSistema'.
	 */
	public CrFormularioValidacion[] findWhereIsCreadoSistemaEquals(int isCreadoSistema) throws CrFormularioValidacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_creado_sistema = ? ORDER BY is_creado_sistema", new Object[] {  new Integer(isCreadoSistema) } );
	}

	/** 
	 * Returns all rows from the cr_formulario_validacion table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public CrFormularioValidacion[] findWhereIdEmpresaEquals(int idEmpresa) throws CrFormularioValidacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_empresa = ? ORDER BY id_empresa", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the cr_formulario_validacion table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public CrFormularioValidacion[] findWhereIdEstatusEquals(int idEstatus) throws CrFormularioValidacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_estatus = ? ORDER BY id_estatus", new Object[] {  new Integer(idEstatus) } );
	}

	/**
	 * Method 'CrFormularioValidacionDaoImpl'
	 * 
	 */
	public CrFormularioValidacionDaoImpl()
	{
	}

	/**
	 * Method 'CrFormularioValidacionDaoImpl'
	 * 
	 * @param userConn
	 */
	public CrFormularioValidacionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "cr_formulario_validacion";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CrFormularioValidacion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CrFormularioValidacion dto = new CrFormularioValidacion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CrFormularioValidacion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CrFormularioValidacion dto = new CrFormularioValidacion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CrFormularioValidacion ret[] = new CrFormularioValidacion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CrFormularioValidacion dto, ResultSet rs) throws SQLException
	{
		dto.setIdFormularioValidacion( rs.getInt( COLUMN_ID_FORMULARIO_VALIDACION ) );
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setRegexJava( rs.getString( COLUMN_REGEX_JAVA ) );
		dto.setRegexLenguajeExt( rs.getString( COLUMN_REGEX_LENGUAJE_EXT ) );
		dto.setIsCreadoSistema( rs.getInt( COLUMN_IS_CREADO_SISTEMA ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		if (rs.wasNull()) {
			dto.setIdEmpresaNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CrFormularioValidacion dto)
	{
		dto.setIdFormularioValidacionModified( false );
		dto.setNombreModified( false );
		dto.setDescripcionModified( false );
		dto.setRegexJavaModified( false );
		dto.setRegexLenguajeExtModified( false );
		dto.setIsCreadoSistemaModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEstatusModified( false );
	}

	/** 
	 * Returns all rows from the cr_formulario_validacion table that match the specified arbitrary SQL statement
	 */
	public CrFormularioValidacion[] findByDynamicSelect(String sql, Object[] sqlParams) throws CrFormularioValidacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFormularioValidacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the cr_formulario_validacion table that match the specified arbitrary SQL statement
	 */
	public CrFormularioValidacion[] findByDynamicWhere(String sql, Object[] sqlParams) throws CrFormularioValidacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFormularioValidacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
