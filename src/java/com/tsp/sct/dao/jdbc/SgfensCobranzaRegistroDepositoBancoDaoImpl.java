/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SgfensCobranzaRegistroDepositoBancoDaoImpl extends AbstractDAO implements SgfensCobranzaRegistroDepositoBancoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_DEPOSITO, ID_EMPRESA, FOTO_BOUCHER, NUM_REFERENCIA_BOUCHER, MONTO, LATITUD, LONGITUD, FECHA_DEPOSITO, ID_VENDEDOR, ID_BANCO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_DEPOSITO, ID_EMPRESA, FOTO_BOUCHER, NUM_REFERENCIA_BOUCHER, MONTO, LATITUD, LONGITUD, FECHA_DEPOSITO, ID_VENDEDOR, ID_BANCO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_DEPOSITO = ?, ID_EMPRESA = ?, FOTO_BOUCHER = ?, NUM_REFERENCIA_BOUCHER = ?, MONTO = ?, LATITUD = ?, LONGITUD = ?, FECHA_DEPOSITO = ?, ID_VENDEDOR = ?, ID_BANCO = ? WHERE ID_DEPOSITO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_DEPOSITO = ?";

	/** 
	 * Index of column ID_DEPOSITO
	 */
	protected static final int COLUMN_ID_DEPOSITO = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column FOTO_BOUCHER
	 */
	protected static final int COLUMN_FOTO_BOUCHER = 3;

	/** 
	 * Index of column NUM_REFERENCIA_BOUCHER
	 */
	protected static final int COLUMN_NUM_REFERENCIA_BOUCHER = 4;

	/** 
	 * Index of column MONTO
	 */
	protected static final int COLUMN_MONTO = 5;

	/** 
	 * Index of column LATITUD
	 */
	protected static final int COLUMN_LATITUD = 6;

	/** 
	 * Index of column LONGITUD
	 */
	protected static final int COLUMN_LONGITUD = 7;

	/** 
	 * Index of column FECHA_DEPOSITO
	 */
	protected static final int COLUMN_FECHA_DEPOSITO = 8;

	/** 
	 * Index of column ID_VENDEDOR
	 */
	protected static final int COLUMN_ID_VENDEDOR = 9;

	/** 
	 * Index of column ID_BANCO
	 */
	protected static final int COLUMN_ID_BANCO = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column ID_DEPOSITO
	 */
	protected static final int PK_COLUMN_ID_DEPOSITO = 1;

	/** 
	 * Inserts a new row in the sgfens_cobranza_registro_deposito_banco table.
	 */
	public SgfensCobranzaRegistroDepositoBancoPk insert(SgfensCobranzaRegistroDepositoBanco dto) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdDepositoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_DEPOSITO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFotoBoucherModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOTO_BOUCHER" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumReferenciaBoucherModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUM_REFERENCIA_BOUCHER" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMontoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MONTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLatitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LATITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLongitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LONGITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaDepositoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_DEPOSITO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdVendedorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_VENDEDOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdBancoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_BANCO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdDepositoModified()) {
				stmt.setInt( index++, dto.getIdDeposito() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isFotoBoucherModified()) {
				stmt.setString( index++, dto.getFotoBoucher() );
			}
		
			if (dto.isNumReferenciaBoucherModified()) {
				stmt.setString( index++, dto.getNumReferenciaBoucher() );
			}
		
			if (dto.isMontoModified()) {
				if (dto.isMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMonto() );
				}
		
			}
		
			if (dto.isLatitudModified()) {
				stmt.setString( index++, dto.getLatitud() );
			}
		
			if (dto.isLongitudModified()) {
				stmt.setString( index++, dto.getLongitud() );
			}
		
			if (dto.isFechaDepositoModified()) {
				stmt.setTimestamp(index++, dto.getFechaDeposito()==null ? null : new java.sql.Timestamp( dto.getFechaDeposito().getTime() ) );
			}
		
			if (dto.isIdVendedorModified()) {
				if (dto.isIdVendedorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdVendedor() );
				}
		
			}
		
			if (dto.isIdBancoModified()) {
				if (dto.isIdBancoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdBanco() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdDeposito( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCobranzaRegistroDepositoBancoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sgfens_cobranza_registro_deposito_banco table.
	 */
	public void update(SgfensCobranzaRegistroDepositoBancoPk pk, SgfensCobranzaRegistroDepositoBanco dto) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdDepositoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_DEPOSITO=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isFotoBoucherModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOTO_BOUCHER=?" );
				modified=true;
			}
		
			if (dto.isNumReferenciaBoucherModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUM_REFERENCIA_BOUCHER=?" );
				modified=true;
			}
		
			if (dto.isMontoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MONTO=?" );
				modified=true;
			}
		
			if (dto.isLatitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LATITUD=?" );
				modified=true;
			}
		
			if (dto.isLongitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LONGITUD=?" );
				modified=true;
			}
		
			if (dto.isFechaDepositoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_DEPOSITO=?" );
				modified=true;
			}
		
			if (dto.isIdVendedorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_VENDEDOR=?" );
				modified=true;
			}
		
			if (dto.isIdBancoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_BANCO=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_DEPOSITO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdDepositoModified()) {
				stmt.setInt( index++, dto.getIdDeposito() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isFotoBoucherModified()) {
				stmt.setString( index++, dto.getFotoBoucher() );
			}
		
			if (dto.isNumReferenciaBoucherModified()) {
				stmt.setString( index++, dto.getNumReferenciaBoucher() );
			}
		
			if (dto.isMontoModified()) {
				if (dto.isMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMonto() );
				}
		
			}
		
			if (dto.isLatitudModified()) {
				stmt.setString( index++, dto.getLatitud() );
			}
		
			if (dto.isLongitudModified()) {
				stmt.setString( index++, dto.getLongitud() );
			}
		
			if (dto.isFechaDepositoModified()) {
				stmt.setTimestamp(index++, dto.getFechaDeposito()==null ? null : new java.sql.Timestamp( dto.getFechaDeposito().getTime() ) );
			}
		
			if (dto.isIdVendedorModified()) {
				if (dto.isIdVendedorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdVendedor() );
				}
		
			}
		
			if (dto.isIdBancoModified()) {
				if (dto.isIdBancoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdBanco() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdDeposito() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCobranzaRegistroDepositoBancoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sgfens_cobranza_registro_deposito_banco table.
	 */
	public void delete(SgfensCobranzaRegistroDepositoBancoPk pk) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdDeposito() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCobranzaRegistroDepositoBancoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sgfens_cobranza_registro_deposito_banco table that matches the specified primary-key value.
	 */
	public SgfensCobranzaRegistroDepositoBanco findByPrimaryKey(SgfensCobranzaRegistroDepositoBancoPk pk) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		return findByPrimaryKey( pk.getIdDeposito() );
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the criteria 'ID_DEPOSITO = :idDeposito'.
	 */
	public SgfensCobranzaRegistroDepositoBanco findByPrimaryKey(int idDeposito) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		SgfensCobranzaRegistroDepositoBanco ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_DEPOSITO = ?", new Object[] {  new Integer(idDeposito) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the criteria ''.
	 */
	public SgfensCobranzaRegistroDepositoBanco[] findAll() throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_DEPOSITO", null );
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the criteria 'ID_DEPOSITO = :idDeposito'.
	 */
	public SgfensCobranzaRegistroDepositoBanco[] findWhereIdDepositoEquals(int idDeposito) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_DEPOSITO = ? ORDER BY ID_DEPOSITO", new Object[] {  new Integer(idDeposito) } );
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public SgfensCobranzaRegistroDepositoBanco[] findWhereIdEmpresaEquals(int idEmpresa) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the criteria 'FOTO_BOUCHER = :fotoBoucher'.
	 */
	public SgfensCobranzaRegistroDepositoBanco[] findWhereFotoBoucherEquals(String fotoBoucher) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOTO_BOUCHER = ? ORDER BY FOTO_BOUCHER", new Object[] { fotoBoucher } );
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the criteria 'NUM_REFERENCIA_BOUCHER = :numReferenciaBoucher'.
	 */
	public SgfensCobranzaRegistroDepositoBanco[] findWhereNumReferenciaBoucherEquals(String numReferenciaBoucher) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUM_REFERENCIA_BOUCHER = ? ORDER BY NUM_REFERENCIA_BOUCHER", new Object[] { numReferenciaBoucher } );
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the criteria 'MONTO = :monto'.
	 */
	public SgfensCobranzaRegistroDepositoBanco[] findWhereMontoEquals(double monto) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONTO = ? ORDER BY MONTO", new Object[] {  new Double(monto) } );
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the criteria 'LATITUD = :latitud'.
	 */
	public SgfensCobranzaRegistroDepositoBanco[] findWhereLatitudEquals(String latitud) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATITUD = ? ORDER BY LATITUD", new Object[] { latitud } );
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the criteria 'LONGITUD = :longitud'.
	 */
	public SgfensCobranzaRegistroDepositoBanco[] findWhereLongitudEquals(String longitud) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LONGITUD = ? ORDER BY LONGITUD", new Object[] { longitud } );
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the criteria 'FECHA_DEPOSITO = :fechaDeposito'.
	 */
	public SgfensCobranzaRegistroDepositoBanco[] findWhereFechaDepositoEquals(Date fechaDeposito) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_DEPOSITO = ? ORDER BY FECHA_DEPOSITO", new Object[] { fechaDeposito==null ? null : new java.sql.Timestamp( fechaDeposito.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the criteria 'ID_VENDEDOR = :idVendedor'.
	 */
	public SgfensCobranzaRegistroDepositoBanco[] findWhereIdVendedorEquals(int idVendedor) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_VENDEDOR = ? ORDER BY ID_VENDEDOR", new Object[] {  new Integer(idVendedor) } );
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the criteria 'ID_BANCO = :idBanco'.
	 */
	public SgfensCobranzaRegistroDepositoBanco[] findWhereIdBancoEquals(int idBanco) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_BANCO = ? ORDER BY ID_BANCO", new Object[] {  new Integer(idBanco) } );
	}

	/**
	 * Method 'SgfensCobranzaRegistroDepositoBancoDaoImpl'
	 * 
	 */
	public SgfensCobranzaRegistroDepositoBancoDaoImpl()
	{
	}

	/**
	 * Method 'SgfensCobranzaRegistroDepositoBancoDaoImpl'
	 * 
	 * @param userConn
	 */
	public SgfensCobranzaRegistroDepositoBancoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sgfens_cobranza_registro_deposito_banco";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SgfensCobranzaRegistroDepositoBanco fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SgfensCobranzaRegistroDepositoBanco dto = new SgfensCobranzaRegistroDepositoBanco();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SgfensCobranzaRegistroDepositoBanco[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SgfensCobranzaRegistroDepositoBanco dto = new SgfensCobranzaRegistroDepositoBanco();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SgfensCobranzaRegistroDepositoBanco ret[] = new SgfensCobranzaRegistroDepositoBanco[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SgfensCobranzaRegistroDepositoBanco dto, ResultSet rs) throws SQLException
	{
		dto.setIdDeposito( rs.getInt( COLUMN_ID_DEPOSITO ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setFotoBoucher( rs.getString( COLUMN_FOTO_BOUCHER ) );
		dto.setNumReferenciaBoucher( rs.getString( COLUMN_NUM_REFERENCIA_BOUCHER ) );
		dto.setMonto( rs.getDouble( COLUMN_MONTO ) );
		if (rs.wasNull()) {
			dto.setMontoNull( true );
		}
		
		dto.setLatitud( rs.getString( COLUMN_LATITUD ) );
		dto.setLongitud( rs.getString( COLUMN_LONGITUD ) );
		dto.setFechaDeposito( rs.getTimestamp(COLUMN_FECHA_DEPOSITO ) );
		dto.setIdVendedor( rs.getInt( COLUMN_ID_VENDEDOR ) );
		if (rs.wasNull()) {
			dto.setIdVendedorNull( true );
		}
		
		dto.setIdBanco( rs.getInt( COLUMN_ID_BANCO ) );
		if (rs.wasNull()) {
			dto.setIdBancoNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SgfensCobranzaRegistroDepositoBanco dto)
	{
		dto.setIdDepositoModified( false );
		dto.setIdEmpresaModified( false );
		dto.setFotoBoucherModified( false );
		dto.setNumReferenciaBoucherModified( false );
		dto.setMontoModified( false );
		dto.setLatitudModified( false );
		dto.setLongitudModified( false );
		dto.setFechaDepositoModified( false );
		dto.setIdVendedorModified( false );
		dto.setIdBancoModified( false );
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the specified arbitrary SQL statement
	 */
	public SgfensCobranzaRegistroDepositoBanco[] findByDynamicSelect(String sql, Object[] sqlParams) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCobranzaRegistroDepositoBancoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sgfens_cobranza_registro_deposito_banco table that match the specified arbitrary SQL statement
	 */
	public SgfensCobranzaRegistroDepositoBanco[] findByDynamicWhere(String sql, Object[] sqlParams) throws SgfensCobranzaRegistroDepositoBancoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCobranzaRegistroDepositoBancoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
