/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ImpuestoMovilDaoImpl extends AbstractDAO implements ImpuestoMovilDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_IMPUESTO, ID_EMPRESA, NOMBRE, DESCRIPCION, PORCENTAJE, TRASLADADO, ID_ESTATUS, IMPUESTO_LOCAL FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_IMPUESTO, ID_EMPRESA, NOMBRE, DESCRIPCION, PORCENTAJE, TRASLADADO, ID_ESTATUS, IMPUESTO_LOCAL ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_IMPUESTO = ?, ID_EMPRESA = ?, NOMBRE = ?, DESCRIPCION = ?, PORCENTAJE = ?, TRASLADADO = ?, ID_ESTATUS = ?, IMPUESTO_LOCAL = ? WHERE ID_IMPUESTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_IMPUESTO = ?";

	/** 
	 * Index of column ID_IMPUESTO
	 */
	protected static final int COLUMN_ID_IMPUESTO = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column NOMBRE
	 */
	protected static final int COLUMN_NOMBRE = 3;

	/** 
	 * Index of column DESCRIPCION
	 */
	protected static final int COLUMN_DESCRIPCION = 4;

	/** 
	 * Index of column PORCENTAJE
	 */
	protected static final int COLUMN_PORCENTAJE = 5;

	/** 
	 * Index of column TRASLADADO
	 */
	protected static final int COLUMN_TRASLADADO = 6;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 7;

	/** 
	 * Index of column IMPUESTO_LOCAL
	 */
	protected static final int COLUMN_IMPUESTO_LOCAL = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column ID_IMPUESTO
	 */
	protected static final int PK_COLUMN_ID_IMPUESTO = 1;

	/** 
	 * Inserts a new row in the impuesto_movil table.
	 */
	public ImpuestoMovilPk insert(ImpuestoMovil dto) throws ImpuestoMovilDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getIdImpuesto() );
			stmt.setInt( index++, dto.getIdEmpresa() );
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getDescripcion() );
			stmt.setFloat( index++, dto.getPorcentaje() );
			if (dto.isTrasladadoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getTrasladado() );
			}
		
			if (dto.isIdEstatusNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isImpuestoLocalNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getImpuestoLocal() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdImpuesto( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpuestoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the impuesto_movil table.
	 */
	public void update(ImpuestoMovilPk pk, ImpuestoMovil dto) throws ImpuestoMovilDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdImpuesto() );
			stmt.setInt( index++, dto.getIdEmpresa() );
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getDescripcion() );
			stmt.setFloat( index++, dto.getPorcentaje() );
			if (dto.isTrasladadoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getTrasladado() );
			}
		
			if (dto.isIdEstatusNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isImpuestoLocalNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getImpuestoLocal() );
			}
		
			stmt.setInt( 9, pk.getIdImpuesto() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpuestoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the impuesto_movil table.
	 */
	public void delete(ImpuestoMovilPk pk) throws ImpuestoMovilDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdImpuesto() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpuestoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the impuesto_movil table that matches the specified primary-key value.
	 */
	public ImpuestoMovil findByPrimaryKey(ImpuestoMovilPk pk) throws ImpuestoMovilDaoException
	{
		return findByPrimaryKey( pk.getIdImpuesto() );
	}

	/** 
	 * Returns all rows from the impuesto_movil table that match the criteria 'ID_IMPUESTO = :idImpuesto'.
	 */
	public ImpuestoMovil findByPrimaryKey(int idImpuesto) throws ImpuestoMovilDaoException
	{
		ImpuestoMovil ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_IMPUESTO = ?", new Object[] {  new Integer(idImpuesto) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the impuesto_movil table that match the criteria ''.
	 */
	public ImpuestoMovil[] findAll() throws ImpuestoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_IMPUESTO", null );
	}

	/** 
	 * Returns all rows from the impuesto_movil table that match the criteria 'ID_IMPUESTO = :idImpuesto'.
	 */
	public ImpuestoMovil[] findWhereIdImpuestoEquals(int idImpuesto) throws ImpuestoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_IMPUESTO = ? ORDER BY ID_IMPUESTO", new Object[] {  new Integer(idImpuesto) } );
	}

	/** 
	 * Returns all rows from the impuesto_movil table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public ImpuestoMovil[] findWhereIdEmpresaEquals(int idEmpresa) throws ImpuestoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the impuesto_movil table that match the criteria 'NOMBRE = :nombre'.
	 */
	public ImpuestoMovil[] findWhereNombreEquals(String nombre) throws ImpuestoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE = ? ORDER BY NOMBRE", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the impuesto_movil table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public ImpuestoMovil[] findWhereDescripcionEquals(String descripcion) throws ImpuestoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION = ? ORDER BY DESCRIPCION", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the impuesto_movil table that match the criteria 'PORCENTAJE = :porcentaje'.
	 */
	public ImpuestoMovil[] findWherePorcentajeEquals(float porcentaje) throws ImpuestoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PORCENTAJE = ? ORDER BY PORCENTAJE", new Object[] {  new Float(porcentaje) } );
	}

	/** 
	 * Returns all rows from the impuesto_movil table that match the criteria 'TRASLADADO = :trasladado'.
	 */
	public ImpuestoMovil[] findWhereTrasladadoEquals(short trasladado) throws ImpuestoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TRASLADADO = ? ORDER BY TRASLADADO", new Object[] {  new Short(trasladado) } );
	}

	/** 
	 * Returns all rows from the impuesto_movil table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public ImpuestoMovil[] findWhereIdEstatusEquals(int idEstatus) throws ImpuestoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the impuesto_movil table that match the criteria 'IMPUESTO_LOCAL = :impuestoLocal'.
	 */
	public ImpuestoMovil[] findWhereImpuestoLocalEquals(short impuestoLocal) throws ImpuestoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPUESTO_LOCAL = ? ORDER BY IMPUESTO_LOCAL", new Object[] {  new Short(impuestoLocal) } );
	}

	/**
	 * Method 'ImpuestoMovilDaoImpl'
	 * 
	 */
	public ImpuestoMovilDaoImpl()
	{
	}

	/**
	 * Method 'ImpuestoMovilDaoImpl'
	 * 
	 * @param userConn
	 */
	public ImpuestoMovilDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "IMPUESTO_MOVIL";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ImpuestoMovil fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ImpuestoMovil dto = new ImpuestoMovil();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ImpuestoMovil[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ImpuestoMovil dto = new ImpuestoMovil();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ImpuestoMovil ret[] = new ImpuestoMovil[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ImpuestoMovil dto, ResultSet rs) throws SQLException
	{
		dto.setIdImpuesto( rs.getInt( COLUMN_ID_IMPUESTO ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setPorcentaje( rs.getFloat( COLUMN_PORCENTAJE ) );
		dto.setTrasladado( rs.getShort( COLUMN_TRASLADADO ) );
		if (rs.wasNull()) {
			dto.setTrasladadoNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setImpuestoLocal( rs.getShort( COLUMN_IMPUESTO_LOCAL ) );
		if (rs.wasNull()) {
			dto.setImpuestoLocalNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ImpuestoMovil dto)
	{
	}

	/** 
	 * Returns all rows from the impuesto_movil table that match the specified arbitrary SQL statement
	 */
	public ImpuestoMovil[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpuestoMovilDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpuestoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the impuesto_movil table that match the specified arbitrary SQL statement
	 */
	public ImpuestoMovil[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpuestoMovilDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpuestoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
