/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SmsPlantillaDaoImpl extends AbstractDAO implements SmsPlantillaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_sms_plantilla, alias_plantilla, id_empresa, id_estatus, asunto, contenido, is_fijo_sistema, id_usuario_preto, id_usuario_ventas, fecha_hr_creado FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_sms_plantilla, alias_plantilla, id_empresa, id_estatus, asunto, contenido, is_fijo_sistema, id_usuario_preto, id_usuario_ventas, fecha_hr_creado ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_sms_plantilla = ?, alias_plantilla = ?, id_empresa = ?, id_estatus = ?, asunto = ?, contenido = ?, is_fijo_sistema = ?, id_usuario_preto = ?, id_usuario_ventas = ?, fecha_hr_creado = ? WHERE id_sms_plantilla = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_sms_plantilla = ?";

	/** 
	 * Index of column id_sms_plantilla
	 */
	protected static final int COLUMN_ID_SMS_PLANTILLA = 1;

	/** 
	 * Index of column alias_plantilla
	 */
	protected static final int COLUMN_ALIAS_PLANTILLA = 2;

	/** 
	 * Index of column id_empresa
	 */
	protected static final int COLUMN_ID_EMPRESA = 3;

	/** 
	 * Index of column id_estatus
	 */
	protected static final int COLUMN_ID_ESTATUS = 4;

	/** 
	 * Index of column asunto
	 */
	protected static final int COLUMN_ASUNTO = 5;

	/** 
	 * Index of column contenido
	 */
	protected static final int COLUMN_CONTENIDO = 6;

	/** 
	 * Index of column is_fijo_sistema
	 */
	protected static final int COLUMN_IS_FIJO_SISTEMA = 7;

	/** 
	 * Index of column id_usuario_preto
	 */
	protected static final int COLUMN_ID_USUARIO_PRETO = 8;

	/** 
	 * Index of column id_usuario_ventas
	 */
	protected static final int COLUMN_ID_USUARIO_VENTAS = 9;

	/** 
	 * Index of column fecha_hr_creado
	 */
	protected static final int COLUMN_FECHA_HR_CREADO = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column id_sms_plantilla
	 */
	protected static final int PK_COLUMN_ID_SMS_PLANTILLA = 1;

	/** 
	 * Inserts a new row in the sms_plantilla table.
	 */
	public SmsPlantillaPk insert(SmsPlantilla dto) throws SmsPlantillaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdSmsPlantillaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_sms_plantilla" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAliasPlantillaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "alias_plantilla" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_empresa" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_estatus" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAsuntoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "asunto" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContenidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contenido" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFijoSistemaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_fijo_sistema" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioPretoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_usuario_preto" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioVentasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_usuario_ventas" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrCreadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_creado" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdSmsPlantillaModified()) {
				stmt.setInt( index++, dto.getIdSmsPlantilla() );
			}
		
			if (dto.isAliasPlantillaModified()) {
				stmt.setString( index++, dto.getAliasPlantilla() );
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isAsuntoModified()) {
				stmt.setString( index++, dto.getAsunto() );
			}
		
			if (dto.isContenidoModified()) {
				stmt.setString( index++, dto.getContenido() );
			}
		
			if (dto.isIsFijoSistemaModified()) {
				stmt.setInt( index++, dto.getIsFijoSistema() );
			}
		
			if (dto.isIdUsuarioPretoModified()) {
				if (dto.isIdUsuarioPretoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioPreto() );
				}
		
			}
		
			if (dto.isIdUsuarioVentasModified()) {
				if (dto.isIdUsuarioVentasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVentas() );
				}
		
			}
		
			if (dto.isFechaHrCreadoModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCreado()==null ? null : new java.sql.Timestamp( dto.getFechaHrCreado().getTime() ) );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdSmsPlantilla( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsPlantillaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sms_plantilla table.
	 */
	public void update(SmsPlantillaPk pk, SmsPlantilla dto) throws SmsPlantillaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdSmsPlantillaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_sms_plantilla=?" );
				modified=true;
			}
		
			if (dto.isAliasPlantillaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "alias_plantilla=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_empresa=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_estatus=?" );
				modified=true;
			}
		
			if (dto.isAsuntoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "asunto=?" );
				modified=true;
			}
		
			if (dto.isContenidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contenido=?" );
				modified=true;
			}
		
			if (dto.isIsFijoSistemaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_fijo_sistema=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioPretoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_usuario_preto=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioVentasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_usuario_ventas=?" );
				modified=true;
			}
		
			if (dto.isFechaHrCreadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_creado=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_sms_plantilla=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdSmsPlantillaModified()) {
				stmt.setInt( index++, dto.getIdSmsPlantilla() );
			}
		
			if (dto.isAliasPlantillaModified()) {
				stmt.setString( index++, dto.getAliasPlantilla() );
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isAsuntoModified()) {
				stmt.setString( index++, dto.getAsunto() );
			}
		
			if (dto.isContenidoModified()) {
				stmt.setString( index++, dto.getContenido() );
			}
		
			if (dto.isIsFijoSistemaModified()) {
				stmt.setInt( index++, dto.getIsFijoSistema() );
			}
		
			if (dto.isIdUsuarioPretoModified()) {
				if (dto.isIdUsuarioPretoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioPreto() );
				}
		
			}
		
			if (dto.isIdUsuarioVentasModified()) {
				if (dto.isIdUsuarioVentasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVentas() );
				}
		
			}
		
			if (dto.isFechaHrCreadoModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCreado()==null ? null : new java.sql.Timestamp( dto.getFechaHrCreado().getTime() ) );
			}
		
			stmt.setInt( index++, pk.getIdSmsPlantilla() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsPlantillaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sms_plantilla table.
	 */
	public void delete(SmsPlantillaPk pk) throws SmsPlantillaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdSmsPlantilla() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsPlantillaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sms_plantilla table that matches the specified primary-key value.
	 */
	public SmsPlantilla findByPrimaryKey(SmsPlantillaPk pk) throws SmsPlantillaDaoException
	{
		return findByPrimaryKey( pk.getIdSmsPlantilla() );
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the criteria 'id_sms_plantilla = :idSmsPlantilla'.
	 */
	public SmsPlantilla findByPrimaryKey(int idSmsPlantilla) throws SmsPlantillaDaoException
	{
		SmsPlantilla ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_sms_plantilla = ?", new Object[] {  new Integer(idSmsPlantilla) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the criteria ''.
	 */
	public SmsPlantilla[] findAll() throws SmsPlantillaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_sms_plantilla", null );
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the criteria 'id_sms_plantilla = :idSmsPlantilla'.
	 */
	public SmsPlantilla[] findWhereIdSmsPlantillaEquals(int idSmsPlantilla) throws SmsPlantillaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_sms_plantilla = ? ORDER BY id_sms_plantilla", new Object[] {  new Integer(idSmsPlantilla) } );
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the criteria 'alias_plantilla = :aliasPlantilla'.
	 */
	public SmsPlantilla[] findWhereAliasPlantillaEquals(String aliasPlantilla) throws SmsPlantillaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE alias_plantilla = ? ORDER BY alias_plantilla", new Object[] { aliasPlantilla } );
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public SmsPlantilla[] findWhereIdEmpresaEquals(int idEmpresa) throws SmsPlantillaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_empresa = ? ORDER BY id_empresa", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public SmsPlantilla[] findWhereIdEstatusEquals(int idEstatus) throws SmsPlantillaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_estatus = ? ORDER BY id_estatus", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the criteria 'asunto = :asunto'.
	 */
	public SmsPlantilla[] findWhereAsuntoEquals(String asunto) throws SmsPlantillaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE asunto = ? ORDER BY asunto", new Object[] { asunto } );
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the criteria 'contenido = :contenido'.
	 */
	public SmsPlantilla[] findWhereContenidoEquals(String contenido) throws SmsPlantillaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contenido = ? ORDER BY contenido", new Object[] { contenido } );
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the criteria 'is_fijo_sistema = :isFijoSistema'.
	 */
	public SmsPlantilla[] findWhereIsFijoSistemaEquals(int isFijoSistema) throws SmsPlantillaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_fijo_sistema = ? ORDER BY is_fijo_sistema", new Object[] {  new Integer(isFijoSistema) } );
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the criteria 'id_usuario_preto = :idUsuarioPreto'.
	 */
	public SmsPlantilla[] findWhereIdUsuarioPretoEquals(int idUsuarioPreto) throws SmsPlantillaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_usuario_preto = ? ORDER BY id_usuario_preto", new Object[] {  new Integer(idUsuarioPreto) } );
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the criteria 'id_usuario_ventas = :idUsuarioVentas'.
	 */
	public SmsPlantilla[] findWhereIdUsuarioVentasEquals(int idUsuarioVentas) throws SmsPlantillaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_usuario_ventas = ? ORDER BY id_usuario_ventas", new Object[] {  new Integer(idUsuarioVentas) } );
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the criteria 'fecha_hr_creado = :fechaHrCreado'.
	 */
	public SmsPlantilla[] findWhereFechaHrCreadoEquals(Date fechaHrCreado) throws SmsPlantillaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_creado = ? ORDER BY fecha_hr_creado", new Object[] { fechaHrCreado==null ? null : new java.sql.Timestamp( fechaHrCreado.getTime() ) } );
	}

	/**
	 * Method 'SmsPlantillaDaoImpl'
	 * 
	 */
	public SmsPlantillaDaoImpl()
	{
	}

	/**
	 * Method 'SmsPlantillaDaoImpl'
	 * 
	 * @param userConn
	 */
	public SmsPlantillaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sms_plantilla";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SmsPlantilla fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SmsPlantilla dto = new SmsPlantilla();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SmsPlantilla[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SmsPlantilla dto = new SmsPlantilla();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SmsPlantilla ret[] = new SmsPlantilla[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SmsPlantilla dto, ResultSet rs) throws SQLException
	{
		dto.setIdSmsPlantilla( rs.getInt( COLUMN_ID_SMS_PLANTILLA ) );
		dto.setAliasPlantilla( rs.getString( COLUMN_ALIAS_PLANTILLA ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		if (rs.wasNull()) {
			dto.setIdEmpresaNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		dto.setAsunto( rs.getString( COLUMN_ASUNTO ) );
		dto.setContenido( rs.getString( COLUMN_CONTENIDO ) );
		dto.setIsFijoSistema( rs.getInt( COLUMN_IS_FIJO_SISTEMA ) );
		dto.setIdUsuarioPreto( rs.getInt( COLUMN_ID_USUARIO_PRETO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioPretoNull( true );
		}
		
		dto.setIdUsuarioVentas( rs.getInt( COLUMN_ID_USUARIO_VENTAS ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioVentasNull( true );
		}
		
		dto.setFechaHrCreado( rs.getTimestamp(COLUMN_FECHA_HR_CREADO ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SmsPlantilla dto)
	{
		dto.setIdSmsPlantillaModified( false );
		dto.setAliasPlantillaModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEstatusModified( false );
		dto.setAsuntoModified( false );
		dto.setContenidoModified( false );
		dto.setIsFijoSistemaModified( false );
		dto.setIdUsuarioPretoModified( false );
		dto.setIdUsuarioVentasModified( false );
		dto.setFechaHrCreadoModified( false );
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the specified arbitrary SQL statement
	 */
	public SmsPlantilla[] findByDynamicSelect(String sql, Object[] sqlParams) throws SmsPlantillaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsPlantillaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sms_plantilla table that match the specified arbitrary SQL statement
	 */
	public SmsPlantilla[] findByDynamicWhere(String sql, Object[] sqlParams) throws SmsPlantillaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SmsPlantillaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
