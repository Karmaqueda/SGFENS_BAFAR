/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class PretoCaracteristicasConsolaDaoImpl extends AbstractDAO implements PretoCaracteristicasConsolaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_CARACTERISTICA, NOMBRE_CARACTERISTICA, TPV_GRATIS, TPV_EMPRENDEDOR, TPV_COMERCIANTE, TPV_MIPYME, EVC, PRETORIANO_ERP, CBB FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_CARACTERISTICA, NOMBRE_CARACTERISTICA, TPV_GRATIS, TPV_EMPRENDEDOR, TPV_COMERCIANTE, TPV_MIPYME, EVC, PRETORIANO_ERP, CBB ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_CARACTERISTICA = ?, NOMBRE_CARACTERISTICA = ?, TPV_GRATIS = ?, TPV_EMPRENDEDOR = ?, TPV_COMERCIANTE = ?, TPV_MIPYME = ?, EVC = ?, PRETORIANO_ERP = ?, CBB = ? WHERE ID_CARACTERISTICA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_CARACTERISTICA = ?";

	/** 
	 * Index of column ID_CARACTERISTICA
	 */
	protected static final int COLUMN_ID_CARACTERISTICA = 1;

	/** 
	 * Index of column NOMBRE_CARACTERISTICA
	 */
	protected static final int COLUMN_NOMBRE_CARACTERISTICA = 2;

	/** 
	 * Index of column TPV_GRATIS
	 */
	protected static final int COLUMN_TPV_GRATIS = 3;

	/** 
	 * Index of column TPV_EMPRENDEDOR
	 */
	protected static final int COLUMN_TPV_EMPRENDEDOR = 4;

	/** 
	 * Index of column TPV_COMERCIANTE
	 */
	protected static final int COLUMN_TPV_COMERCIANTE = 5;

	/** 
	 * Index of column TPV_MIPYME
	 */
	protected static final int COLUMN_TPV_MIPYME = 6;

	/** 
	 * Index of column EVC
	 */
	protected static final int COLUMN_EVC = 7;

	/** 
	 * Index of column PRETORIANO_ERP
	 */
	protected static final int COLUMN_PRETORIANO_ERP = 8;

	/** 
	 * Index of column CBB
	 */
	protected static final int COLUMN_CBB = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column ID_CARACTERISTICA
	 */
	protected static final int PK_COLUMN_ID_CARACTERISTICA = 1;

	/** 
	 * Inserts a new row in the preto_caracteristicas_consola table.
	 */
	public PretoCaracteristicasConsolaPk insert(PretoCaracteristicasConsola dto) throws PretoCaracteristicasConsolaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdCaracteristicaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CARACTERISTICA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreCaracteristicaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_CARACTERISTICA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTpvGratisModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TPV_GRATIS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTpvEmprendedorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TPV_EMPRENDEDOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTpvComercianteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TPV_COMERCIANTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTpvMipymeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TPV_MIPYME" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEvcModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "EVC" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPretorianoErpModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRETORIANO_ERP" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCbbModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CBB" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdCaracteristicaModified()) {
				stmt.setInt( index++, dto.getIdCaracteristica() );
			}
		
			if (dto.isNombreCaracteristicaModified()) {
				stmt.setString( index++, dto.getNombreCaracteristica() );
			}
		
			if (dto.isTpvGratisModified()) {
				stmt.setString( index++, dto.getTpvGratis() );
			}
		
			if (dto.isTpvEmprendedorModified()) {
				stmt.setString( index++, dto.getTpvEmprendedor() );
			}
		
			if (dto.isTpvComercianteModified()) {
				stmt.setString( index++, dto.getTpvComerciante() );
			}
		
			if (dto.isTpvMipymeModified()) {
				stmt.setString( index++, dto.getTpvMipyme() );
			}
		
			if (dto.isEvcModified()) {
				stmt.setString( index++, dto.getEvc() );
			}
		
			if (dto.isPretorianoErpModified()) {
				stmt.setString( index++, dto.getPretorianoErp() );
			}
		
			if (dto.isCbbModified()) {
				stmt.setString( index++, dto.getCbb() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdCaracteristica( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PretoCaracteristicasConsolaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the preto_caracteristicas_consola table.
	 */
	public void update(PretoCaracteristicasConsolaPk pk, PretoCaracteristicasConsola dto) throws PretoCaracteristicasConsolaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdCaracteristicaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CARACTERISTICA=?" );
				modified=true;
			}
		
			if (dto.isNombreCaracteristicaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_CARACTERISTICA=?" );
				modified=true;
			}
		
			if (dto.isTpvGratisModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TPV_GRATIS=?" );
				modified=true;
			}
		
			if (dto.isTpvEmprendedorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TPV_EMPRENDEDOR=?" );
				modified=true;
			}
		
			if (dto.isTpvComercianteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TPV_COMERCIANTE=?" );
				modified=true;
			}
		
			if (dto.isTpvMipymeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TPV_MIPYME=?" );
				modified=true;
			}
		
			if (dto.isEvcModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "EVC=?" );
				modified=true;
			}
		
			if (dto.isPretorianoErpModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRETORIANO_ERP=?" );
				modified=true;
			}
		
			if (dto.isCbbModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CBB=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_CARACTERISTICA=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdCaracteristicaModified()) {
				stmt.setInt( index++, dto.getIdCaracteristica() );
			}
		
			if (dto.isNombreCaracteristicaModified()) {
				stmt.setString( index++, dto.getNombreCaracteristica() );
			}
		
			if (dto.isTpvGratisModified()) {
				stmt.setString( index++, dto.getTpvGratis() );
			}
		
			if (dto.isTpvEmprendedorModified()) {
				stmt.setString( index++, dto.getTpvEmprendedor() );
			}
		
			if (dto.isTpvComercianteModified()) {
				stmt.setString( index++, dto.getTpvComerciante() );
			}
		
			if (dto.isTpvMipymeModified()) {
				stmt.setString( index++, dto.getTpvMipyme() );
			}
		
			if (dto.isEvcModified()) {
				stmt.setString( index++, dto.getEvc() );
			}
		
			if (dto.isPretorianoErpModified()) {
				stmt.setString( index++, dto.getPretorianoErp() );
			}
		
			if (dto.isCbbModified()) {
				stmt.setString( index++, dto.getCbb() );
			}
		
			stmt.setInt( index++, pk.getIdCaracteristica() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PretoCaracteristicasConsolaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the preto_caracteristicas_consola table.
	 */
	public void delete(PretoCaracteristicasConsolaPk pk) throws PretoCaracteristicasConsolaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdCaracteristica() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PretoCaracteristicasConsolaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the preto_caracteristicas_consola table that matches the specified primary-key value.
	 */
	public PretoCaracteristicasConsola findByPrimaryKey(PretoCaracteristicasConsolaPk pk) throws PretoCaracteristicasConsolaDaoException
	{
		return findByPrimaryKey( pk.getIdCaracteristica() );
	}

	/** 
	 * Returns all rows from the preto_caracteristicas_consola table that match the criteria 'ID_CARACTERISTICA = :idCaracteristica'.
	 */
	public PretoCaracteristicasConsola findByPrimaryKey(int idCaracteristica) throws PretoCaracteristicasConsolaDaoException
	{
		PretoCaracteristicasConsola ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_CARACTERISTICA = ?", new Object[] {  new Integer(idCaracteristica) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the preto_caracteristicas_consola table that match the criteria ''.
	 */
	public PretoCaracteristicasConsola[] findAll() throws PretoCaracteristicasConsolaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_CARACTERISTICA", null );
	}

	/** 
	 * Returns all rows from the preto_caracteristicas_consola table that match the criteria 'ID_CARACTERISTICA = :idCaracteristica'.
	 */
	public PretoCaracteristicasConsola[] findWhereIdCaracteristicaEquals(int idCaracteristica) throws PretoCaracteristicasConsolaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CARACTERISTICA = ? ORDER BY ID_CARACTERISTICA", new Object[] {  new Integer(idCaracteristica) } );
	}

	/** 
	 * Returns all rows from the preto_caracteristicas_consola table that match the criteria 'NOMBRE_CARACTERISTICA = :nombreCaracteristica'.
	 */
	public PretoCaracteristicasConsola[] findWhereNombreCaracteristicaEquals(String nombreCaracteristica) throws PretoCaracteristicasConsolaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_CARACTERISTICA = ? ORDER BY NOMBRE_CARACTERISTICA", new Object[] { nombreCaracteristica } );
	}

	/** 
	 * Returns all rows from the preto_caracteristicas_consola table that match the criteria 'TPV_GRATIS = :tpvGratis'.
	 */
	public PretoCaracteristicasConsola[] findWhereTpvGratisEquals(String tpvGratis) throws PretoCaracteristicasConsolaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TPV_GRATIS = ? ORDER BY TPV_GRATIS", new Object[] { tpvGratis } );
	}

	/** 
	 * Returns all rows from the preto_caracteristicas_consola table that match the criteria 'TPV_EMPRENDEDOR = :tpvEmprendedor'.
	 */
	public PretoCaracteristicasConsola[] findWhereTpvEmprendedorEquals(String tpvEmprendedor) throws PretoCaracteristicasConsolaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TPV_EMPRENDEDOR = ? ORDER BY TPV_EMPRENDEDOR", new Object[] { tpvEmprendedor } );
	}

	/** 
	 * Returns all rows from the preto_caracteristicas_consola table that match the criteria 'TPV_COMERCIANTE = :tpvComerciante'.
	 */
	public PretoCaracteristicasConsola[] findWhereTpvComercianteEquals(String tpvComerciante) throws PretoCaracteristicasConsolaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TPV_COMERCIANTE = ? ORDER BY TPV_COMERCIANTE", new Object[] { tpvComerciante } );
	}

	/** 
	 * Returns all rows from the preto_caracteristicas_consola table that match the criteria 'TPV_MIPYME = :tpvMipyme'.
	 */
	public PretoCaracteristicasConsola[] findWhereTpvMipymeEquals(String tpvMipyme) throws PretoCaracteristicasConsolaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TPV_MIPYME = ? ORDER BY TPV_MIPYME", new Object[] { tpvMipyme } );
	}

	/** 
	 * Returns all rows from the preto_caracteristicas_consola table that match the criteria 'EVC = :evc'.
	 */
	public PretoCaracteristicasConsola[] findWhereEvcEquals(String evc) throws PretoCaracteristicasConsolaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EVC = ? ORDER BY EVC", new Object[] { evc } );
	}

	/** 
	 * Returns all rows from the preto_caracteristicas_consola table that match the criteria 'PRETORIANO_ERP = :pretorianoErp'.
	 */
	public PretoCaracteristicasConsola[] findWherePretorianoErpEquals(String pretorianoErp) throws PretoCaracteristicasConsolaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRETORIANO_ERP = ? ORDER BY PRETORIANO_ERP", new Object[] { pretorianoErp } );
	}

	/** 
	 * Returns all rows from the preto_caracteristicas_consola table that match the criteria 'CBB = :cbb'.
	 */
	public PretoCaracteristicasConsola[] findWhereCbbEquals(String cbb) throws PretoCaracteristicasConsolaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CBB = ? ORDER BY CBB", new Object[] { cbb } );
	}

	/**
	 * Method 'PretoCaracteristicasConsolaDaoImpl'
	 * 
	 */
	public PretoCaracteristicasConsolaDaoImpl()
	{
	}

	/**
	 * Method 'PretoCaracteristicasConsolaDaoImpl'
	 * 
	 * @param userConn
	 */
	public PretoCaracteristicasConsolaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "preto_caracteristicas_consola";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected PretoCaracteristicasConsola fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			PretoCaracteristicasConsola dto = new PretoCaracteristicasConsola();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected PretoCaracteristicasConsola[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			PretoCaracteristicasConsola dto = new PretoCaracteristicasConsola();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		PretoCaracteristicasConsola ret[] = new PretoCaracteristicasConsola[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(PretoCaracteristicasConsola dto, ResultSet rs) throws SQLException
	{
		dto.setIdCaracteristica( rs.getInt( COLUMN_ID_CARACTERISTICA ) );
		dto.setNombreCaracteristica( rs.getString( COLUMN_NOMBRE_CARACTERISTICA ) );
		dto.setTpvGratis( rs.getString( COLUMN_TPV_GRATIS ) );
		dto.setTpvEmprendedor( rs.getString( COLUMN_TPV_EMPRENDEDOR ) );
		dto.setTpvComerciante( rs.getString( COLUMN_TPV_COMERCIANTE ) );
		dto.setTpvMipyme( rs.getString( COLUMN_TPV_MIPYME ) );
		dto.setEvc( rs.getString( COLUMN_EVC ) );
		dto.setPretorianoErp( rs.getString( COLUMN_PRETORIANO_ERP ) );
		dto.setCbb( rs.getString( COLUMN_CBB ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(PretoCaracteristicasConsola dto)
	{
		dto.setIdCaracteristicaModified( false );
		dto.setNombreCaracteristicaModified( false );
		dto.setTpvGratisModified( false );
		dto.setTpvEmprendedorModified( false );
		dto.setTpvComercianteModified( false );
		dto.setTpvMipymeModified( false );
		dto.setEvcModified( false );
		dto.setPretorianoErpModified( false );
		dto.setCbbModified( false );
	}

	/** 
	 * Returns all rows from the preto_caracteristicas_consola table that match the specified arbitrary SQL statement
	 */
	public PretoCaracteristicasConsola[] findByDynamicSelect(String sql, Object[] sqlParams) throws PretoCaracteristicasConsolaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PretoCaracteristicasConsolaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the preto_caracteristicas_consola table that match the specified arbitrary SQL statement
	 */
	public PretoCaracteristicasConsola[] findByDynamicWhere(String sql, Object[] sqlParams) throws PretoCaracteristicasConsolaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PretoCaracteristicasConsolaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
