/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CxpComprobanteFiscalDaoImpl extends AbstractDAO implements CxpComprobanteFiscalDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_CXP_COMPROBANTE_FISCAL, ID_EMPRESA, ID_VALIDACION, EMISOR_RFC, EMISOR_NOMBRE, SERIE, FOLIO, TOTAL, IMPORTE_PAGADO, FECHA_HORA_CAPTURA, FECHA_HORA_SELLO, FECHA_TENTATIVA_PAGO, SELLO_EMISOR, CFDI_UUID, ID_ESTATUS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_CXP_COMPROBANTE_FISCAL, ID_EMPRESA, ID_VALIDACION, EMISOR_RFC, EMISOR_NOMBRE, SERIE, FOLIO, TOTAL, IMPORTE_PAGADO, FECHA_HORA_CAPTURA, FECHA_HORA_SELLO, FECHA_TENTATIVA_PAGO, SELLO_EMISOR, CFDI_UUID, ID_ESTATUS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_CXP_COMPROBANTE_FISCAL = ?, ID_EMPRESA = ?, ID_VALIDACION = ?, EMISOR_RFC = ?, EMISOR_NOMBRE = ?, SERIE = ?, FOLIO = ?, TOTAL = ?, IMPORTE_PAGADO = ?, FECHA_HORA_CAPTURA = ?, FECHA_HORA_SELLO = ?, FECHA_TENTATIVA_PAGO = ?, SELLO_EMISOR = ?, CFDI_UUID = ?, ID_ESTATUS = ? WHERE ID_CXP_COMPROBANTE_FISCAL = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_CXP_COMPROBANTE_FISCAL = ?";

	/** 
	 * Index of column ID_CXP_COMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_ID_CXP_COMPROBANTE_FISCAL = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column ID_VALIDACION
	 */
	protected static final int COLUMN_ID_VALIDACION = 3;

	/** 
	 * Index of column EMISOR_RFC
	 */
	protected static final int COLUMN_EMISOR_RFC = 4;

	/** 
	 * Index of column EMISOR_NOMBRE
	 */
	protected static final int COLUMN_EMISOR_NOMBRE = 5;

	/** 
	 * Index of column SERIE
	 */
	protected static final int COLUMN_SERIE = 6;

	/** 
	 * Index of column FOLIO
	 */
	protected static final int COLUMN_FOLIO = 7;

	/** 
	 * Index of column TOTAL
	 */
	protected static final int COLUMN_TOTAL = 8;

	/** 
	 * Index of column IMPORTE_PAGADO
	 */
	protected static final int COLUMN_IMPORTE_PAGADO = 9;

	/** 
	 * Index of column FECHA_HORA_CAPTURA
	 */
	protected static final int COLUMN_FECHA_HORA_CAPTURA = 10;

	/** 
	 * Index of column FECHA_HORA_SELLO
	 */
	protected static final int COLUMN_FECHA_HORA_SELLO = 11;

	/** 
	 * Index of column FECHA_TENTATIVA_PAGO
	 */
	protected static final int COLUMN_FECHA_TENTATIVA_PAGO = 12;

	/** 
	 * Index of column SELLO_EMISOR
	 */
	protected static final int COLUMN_SELLO_EMISOR = 13;

	/** 
	 * Index of column CFDI_UUID
	 */
	protected static final int COLUMN_CFDI_UUID = 14;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 15;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 15;

	/** 
	 * Index of primary-key column ID_CXP_COMPROBANTE_FISCAL
	 */
	protected static final int PK_COLUMN_ID_CXP_COMPROBANTE_FISCAL = 1;

	/** 
	 * Inserts a new row in the cxp_comprobante_fiscal table.
	 */
	public CxpComprobanteFiscalPk insert(CxpComprobanteFiscal dto) throws CxpComprobanteFiscalDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdCxpComprobanteFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CXP_COMPROBANTE_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdValidacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_VALIDACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEmisorRfcModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "EMISOR_RFC" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEmisorNombreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "EMISOR_NOMBRE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSerieModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SERIE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TOTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isImportePagadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IMPORTE_PAGADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHoraCapturaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_HORA_CAPTURA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHoraSelloModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_HORA_SELLO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaTentativaPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_TENTATIVA_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSelloEmisorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SELLO_EMISOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCfdiUuidModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CFDI_UUID" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdCxpComprobanteFiscalModified()) {
				stmt.setInt( index++, dto.getIdCxpComprobanteFiscal() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdValidacionModified()) {
				stmt.setInt( index++, dto.getIdValidacion() );
			}
		
			if (dto.isEmisorRfcModified()) {
				stmt.setString( index++, dto.getEmisorRfc() );
			}
		
			if (dto.isEmisorNombreModified()) {
				stmt.setString( index++, dto.getEmisorNombre() );
			}
		
			if (dto.isSerieModified()) {
				stmt.setString( index++, dto.getSerie() );
			}
		
			if (dto.isFolioModified()) {
				stmt.setString( index++, dto.getFolio() );
			}
		
			if (dto.isTotalModified()) {
				stmt.setDouble( index++, dto.getTotal() );
			}
		
			if (dto.isImportePagadoModified()) {
				stmt.setDouble( index++, dto.getImportePagado() );
			}
		
			if (dto.isFechaHoraCapturaModified()) {
				stmt.setTimestamp(index++, dto.getFechaHoraCaptura()==null ? null : new java.sql.Timestamp( dto.getFechaHoraCaptura().getTime() ) );
			}
		
			if (dto.isFechaHoraSelloModified()) {
				stmt.setTimestamp(index++, dto.getFechaHoraSello()==null ? null : new java.sql.Timestamp( dto.getFechaHoraSello().getTime() ) );
			}
		
			if (dto.isFechaTentativaPagoModified()) {
				stmt.setTimestamp(index++, dto.getFechaTentativaPago()==null ? null : new java.sql.Timestamp( dto.getFechaTentativaPago().getTime() ) );
			}
		
			if (dto.isSelloEmisorModified()) {
				stmt.setString( index++, dto.getSelloEmisor() );
			}
		
			if (dto.isCfdiUuidModified()) {
				stmt.setString( index++, dto.getCfdiUuid() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdCxpComprobanteFiscal( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CxpComprobanteFiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the cxp_comprobante_fiscal table.
	 */
	public void update(CxpComprobanteFiscalPk pk, CxpComprobanteFiscal dto) throws CxpComprobanteFiscalDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdCxpComprobanteFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CXP_COMPROBANTE_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdValidacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_VALIDACION=?" );
				modified=true;
			}
		
			if (dto.isEmisorRfcModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "EMISOR_RFC=?" );
				modified=true;
			}
		
			if (dto.isEmisorNombreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "EMISOR_NOMBRE=?" );
				modified=true;
			}
		
			if (dto.isSerieModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SERIE=?" );
				modified=true;
			}
		
			if (dto.isFolioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIO=?" );
				modified=true;
			}
		
			if (dto.isTotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TOTAL=?" );
				modified=true;
			}
		
			if (dto.isImportePagadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IMPORTE_PAGADO=?" );
				modified=true;
			}
		
			if (dto.isFechaHoraCapturaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_HORA_CAPTURA=?" );
				modified=true;
			}
		
			if (dto.isFechaHoraSelloModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_HORA_SELLO=?" );
				modified=true;
			}
		
			if (dto.isFechaTentativaPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_TENTATIVA_PAGO=?" );
				modified=true;
			}
		
			if (dto.isSelloEmisorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SELLO_EMISOR=?" );
				modified=true;
			}
		
			if (dto.isCfdiUuidModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CFDI_UUID=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_CXP_COMPROBANTE_FISCAL=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdCxpComprobanteFiscalModified()) {
				stmt.setInt( index++, dto.getIdCxpComprobanteFiscal() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdValidacionModified()) {
				stmt.setInt( index++, dto.getIdValidacion() );
			}
		
			if (dto.isEmisorRfcModified()) {
				stmt.setString( index++, dto.getEmisorRfc() );
			}
		
			if (dto.isEmisorNombreModified()) {
				stmt.setString( index++, dto.getEmisorNombre() );
			}
		
			if (dto.isSerieModified()) {
				stmt.setString( index++, dto.getSerie() );
			}
		
			if (dto.isFolioModified()) {
				stmt.setString( index++, dto.getFolio() );
			}
		
			if (dto.isTotalModified()) {
				stmt.setDouble( index++, dto.getTotal() );
			}
		
			if (dto.isImportePagadoModified()) {
				stmt.setDouble( index++, dto.getImportePagado() );
			}
		
			if (dto.isFechaHoraCapturaModified()) {
				stmt.setTimestamp(index++, dto.getFechaHoraCaptura()==null ? null : new java.sql.Timestamp( dto.getFechaHoraCaptura().getTime() ) );
			}
		
			if (dto.isFechaHoraSelloModified()) {
				stmt.setTimestamp(index++, dto.getFechaHoraSello()==null ? null : new java.sql.Timestamp( dto.getFechaHoraSello().getTime() ) );
			}
		
			if (dto.isFechaTentativaPagoModified()) {
				stmt.setTimestamp(index++, dto.getFechaTentativaPago()==null ? null : new java.sql.Timestamp( dto.getFechaTentativaPago().getTime() ) );
			}
		
			if (dto.isSelloEmisorModified()) {
				stmt.setString( index++, dto.getSelloEmisor() );
			}
		
			if (dto.isCfdiUuidModified()) {
				stmt.setString( index++, dto.getCfdiUuid() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdCxpComprobanteFiscal() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CxpComprobanteFiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the cxp_comprobante_fiscal table.
	 */
	public void delete(CxpComprobanteFiscalPk pk) throws CxpComprobanteFiscalDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdCxpComprobanteFiscal() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CxpComprobanteFiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the cxp_comprobante_fiscal table that matches the specified primary-key value.
	 */
	public CxpComprobanteFiscal findByPrimaryKey(CxpComprobanteFiscalPk pk) throws CxpComprobanteFiscalDaoException
	{
		return findByPrimaryKey( pk.getIdCxpComprobanteFiscal() );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'ID_CXP_COMPROBANTE_FISCAL = :idCxpComprobanteFiscal'.
	 */
	public CxpComprobanteFiscal findByPrimaryKey(int idCxpComprobanteFiscal) throws CxpComprobanteFiscalDaoException
	{
		CxpComprobanteFiscal ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_CXP_COMPROBANTE_FISCAL = ?", new Object[] {  new Integer(idCxpComprobanteFiscal) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria ''.
	 */
	public CxpComprobanteFiscal[] findAll() throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_CXP_COMPROBANTE_FISCAL", null );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'ID_CXP_COMPROBANTE_FISCAL = :idCxpComprobanteFiscal'.
	 */
	public CxpComprobanteFiscal[] findWhereIdCxpComprobanteFiscalEquals(int idCxpComprobanteFiscal) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CXP_COMPROBANTE_FISCAL = ? ORDER BY ID_CXP_COMPROBANTE_FISCAL", new Object[] {  new Integer(idCxpComprobanteFiscal) } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public CxpComprobanteFiscal[] findWhereIdEmpresaEquals(int idEmpresa) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'ID_VALIDACION = :idValidacion'.
	 */
	public CxpComprobanteFiscal[] findWhereIdValidacionEquals(int idValidacion) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_VALIDACION = ? ORDER BY ID_VALIDACION", new Object[] {  new Integer(idValidacion) } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'EMISOR_RFC = :emisorRfc'.
	 */
	public CxpComprobanteFiscal[] findWhereEmisorRfcEquals(String emisorRfc) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMISOR_RFC = ? ORDER BY EMISOR_RFC", new Object[] { emisorRfc } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'EMISOR_NOMBRE = :emisorNombre'.
	 */
	public CxpComprobanteFiscal[] findWhereEmisorNombreEquals(String emisorNombre) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMISOR_NOMBRE = ? ORDER BY EMISOR_NOMBRE", new Object[] { emisorNombre } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'SERIE = :serie'.
	 */
	public CxpComprobanteFiscal[] findWhereSerieEquals(String serie) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SERIE = ? ORDER BY SERIE", new Object[] { serie } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'FOLIO = :folio'.
	 */
	public CxpComprobanteFiscal[] findWhereFolioEquals(String folio) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO = ? ORDER BY FOLIO", new Object[] { folio } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'TOTAL = :total'.
	 */
	public CxpComprobanteFiscal[] findWhereTotalEquals(double total) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TOTAL = ? ORDER BY TOTAL", new Object[] {  new Double(total) } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'IMPORTE_PAGADO = :importePagado'.
	 */
	public CxpComprobanteFiscal[] findWhereImportePagadoEquals(double importePagado) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPORTE_PAGADO = ? ORDER BY IMPORTE_PAGADO", new Object[] {  new Double(importePagado) } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'FECHA_HORA_CAPTURA = :fechaHoraCaptura'.
	 */
	public CxpComprobanteFiscal[] findWhereFechaHoraCapturaEquals(Date fechaHoraCaptura) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_HORA_CAPTURA = ? ORDER BY FECHA_HORA_CAPTURA", new Object[] { fechaHoraCaptura==null ? null : new java.sql.Timestamp( fechaHoraCaptura.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'FECHA_HORA_SELLO = :fechaHoraSello'.
	 */
	public CxpComprobanteFiscal[] findWhereFechaHoraSelloEquals(Date fechaHoraSello) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_HORA_SELLO = ? ORDER BY FECHA_HORA_SELLO", new Object[] { fechaHoraSello==null ? null : new java.sql.Timestamp( fechaHoraSello.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'FECHA_TENTATIVA_PAGO = :fechaTentativaPago'.
	 */
	public CxpComprobanteFiscal[] findWhereFechaTentativaPagoEquals(Date fechaTentativaPago) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_TENTATIVA_PAGO = ? ORDER BY FECHA_TENTATIVA_PAGO", new Object[] { fechaTentativaPago==null ? null : new java.sql.Timestamp( fechaTentativaPago.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'SELLO_EMISOR = :selloEmisor'.
	 */
	public CxpComprobanteFiscal[] findWhereSelloEmisorEquals(String selloEmisor) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SELLO_EMISOR = ? ORDER BY SELLO_EMISOR", new Object[] { selloEmisor } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'CFDI_UUID = :cfdiUuid'.
	 */
	public CxpComprobanteFiscal[] findWhereCfdiUuidEquals(String cfdiUuid) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CFDI_UUID = ? ORDER BY CFDI_UUID", new Object[] { cfdiUuid } );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public CxpComprobanteFiscal[] findWhereIdEstatusEquals(int idEstatus) throws CxpComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/**
	 * Method 'CxpComprobanteFiscalDaoImpl'
	 * 
	 */
	public CxpComprobanteFiscalDaoImpl()
	{
	}

	/**
	 * Method 'CxpComprobanteFiscalDaoImpl'
	 * 
	 * @param userConn
	 */
	public CxpComprobanteFiscalDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "cxp_comprobante_fiscal";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CxpComprobanteFiscal fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CxpComprobanteFiscal dto = new CxpComprobanteFiscal();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CxpComprobanteFiscal[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CxpComprobanteFiscal dto = new CxpComprobanteFiscal();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CxpComprobanteFiscal ret[] = new CxpComprobanteFiscal[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CxpComprobanteFiscal dto, ResultSet rs) throws SQLException
	{
		dto.setIdCxpComprobanteFiscal( rs.getInt( COLUMN_ID_CXP_COMPROBANTE_FISCAL ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdValidacion( rs.getInt( COLUMN_ID_VALIDACION ) );
		dto.setEmisorRfc( rs.getString( COLUMN_EMISOR_RFC ) );
		dto.setEmisorNombre( rs.getString( COLUMN_EMISOR_NOMBRE ) );
		dto.setSerie( rs.getString( COLUMN_SERIE ) );
		dto.setFolio( rs.getString( COLUMN_FOLIO ) );
		dto.setTotal( rs.getDouble( COLUMN_TOTAL ) );
		dto.setImportePagado( rs.getDouble( COLUMN_IMPORTE_PAGADO ) );
		dto.setFechaHoraCaptura( rs.getTimestamp(COLUMN_FECHA_HORA_CAPTURA ) );
		dto.setFechaHoraSello( rs.getTimestamp(COLUMN_FECHA_HORA_SELLO ) );
		dto.setFechaTentativaPago( rs.getTimestamp(COLUMN_FECHA_TENTATIVA_PAGO ) );
		dto.setSelloEmisor( rs.getString( COLUMN_SELLO_EMISOR ) );
		dto.setCfdiUuid( rs.getString( COLUMN_CFDI_UUID ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CxpComprobanteFiscal dto)
	{
		dto.setIdCxpComprobanteFiscalModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdValidacionModified( false );
		dto.setEmisorRfcModified( false );
		dto.setEmisorNombreModified( false );
		dto.setSerieModified( false );
		dto.setFolioModified( false );
		dto.setTotalModified( false );
		dto.setImportePagadoModified( false );
		dto.setFechaHoraCapturaModified( false );
		dto.setFechaHoraSelloModified( false );
		dto.setFechaTentativaPagoModified( false );
		dto.setSelloEmisorModified( false );
		dto.setCfdiUuidModified( false );
		dto.setIdEstatusModified( false );
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the specified arbitrary SQL statement
	 */
	public CxpComprobanteFiscal[] findByDynamicSelect(String sql, Object[] sqlParams) throws CxpComprobanteFiscalDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CxpComprobanteFiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the specified arbitrary SQL statement
	 */
	public CxpComprobanteFiscal[] findByDynamicWhere(String sql, Object[] sqlParams) throws CxpComprobanteFiscalDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CxpComprobanteFiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
