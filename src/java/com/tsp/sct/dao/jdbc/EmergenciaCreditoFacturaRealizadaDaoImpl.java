/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EmergenciaCreditoFacturaRealizadaDaoImpl extends AbstractDAO implements EmergenciaCreditoFacturaRealizadaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_EMERGENCIA_CREDITO, ID_EMERGENCIA, FECHA, ID_EMPRESA, RFC_EMISOR, ID_CLIENTE_RECEPTOR, RFC_RECEPTOR, MONTO_FACTURA, UUID, ID_ESTATUS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_EMERGENCIA_CREDITO, ID_EMERGENCIA, FECHA, ID_EMPRESA, RFC_EMISOR, ID_CLIENTE_RECEPTOR, RFC_RECEPTOR, MONTO_FACTURA, UUID, ID_ESTATUS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_EMERGENCIA_CREDITO = ?, ID_EMERGENCIA = ?, FECHA = ?, ID_EMPRESA = ?, RFC_EMISOR = ?, ID_CLIENTE_RECEPTOR = ?, RFC_RECEPTOR = ?, MONTO_FACTURA = ?, UUID = ?, ID_ESTATUS = ? WHERE ID_EMERGENCIA_CREDITO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_EMERGENCIA_CREDITO = ?";

	/** 
	 * Index of column ID_EMERGENCIA_CREDITO
	 */
	protected static final int COLUMN_ID_EMERGENCIA_CREDITO = 1;

	/** 
	 * Index of column ID_EMERGENCIA
	 */
	protected static final int COLUMN_ID_EMERGENCIA = 2;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 3;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 4;

	/** 
	 * Index of column RFC_EMISOR
	 */
	protected static final int COLUMN_RFC_EMISOR = 5;

	/** 
	 * Index of column ID_CLIENTE_RECEPTOR
	 */
	protected static final int COLUMN_ID_CLIENTE_RECEPTOR = 6;

	/** 
	 * Index of column RFC_RECEPTOR
	 */
	protected static final int COLUMN_RFC_RECEPTOR = 7;

	/** 
	 * Index of column MONTO_FACTURA
	 */
	protected static final int COLUMN_MONTO_FACTURA = 8;

	/** 
	 * Index of column UUID
	 */
	protected static final int COLUMN_UUID = 9;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column ID_EMERGENCIA_CREDITO
	 */
	protected static final int PK_COLUMN_ID_EMERGENCIA_CREDITO = 1;

	/** 
	 * Inserts a new row in the emergencia_credito_factura_realizada table.
	 */
	public EmergenciaCreditoFacturaRealizadaPk insert(EmergenciaCreditoFacturaRealizada dto) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdEmergenciaCreditoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMERGENCIA_CREDITO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmergenciaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMERGENCIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRfcEmisorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RFC_EMISOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdClienteReceptorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CLIENTE_RECEPTOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRfcReceptorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RFC_RECEPTOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMontoFacturaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MONTO_FACTURA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUuidModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "UUID" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdEmergenciaCreditoModified()) {
				stmt.setInt( index++, dto.getIdEmergenciaCredito() );
			}
		
			if (dto.isIdEmergenciaModified()) {
				if (dto.isIdEmergenciaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmergencia() );
				}
		
			}
		
			if (dto.isFechaModified()) {
				stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isRfcEmisorModified()) {
				stmt.setString( index++, dto.getRfcEmisor() );
			}
		
			if (dto.isIdClienteReceptorModified()) {
				if (dto.isIdClienteReceptorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdClienteReceptor() );
				}
		
			}
		
			if (dto.isRfcReceptorModified()) {
				stmt.setString( index++, dto.getRfcReceptor() );
			}
		
			if (dto.isMontoFacturaModified()) {
				if (dto.isMontoFacturaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMontoFactura() );
				}
		
			}
		
			if (dto.isUuidModified()) {
				stmt.setString( index++, dto.getUuid() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmergenciaCreditoFacturaRealizadaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the emergencia_credito_factura_realizada table.
	 */
	public void update(EmergenciaCreditoFacturaRealizadaPk pk, EmergenciaCreditoFacturaRealizada dto) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdEmergenciaCreditoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMERGENCIA_CREDITO=?" );
				modified=true;
			}
		
			if (dto.isIdEmergenciaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMERGENCIA=?" );
				modified=true;
			}
		
			if (dto.isFechaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isRfcEmisorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RFC_EMISOR=?" );
				modified=true;
			}
		
			if (dto.isIdClienteReceptorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CLIENTE_RECEPTOR=?" );
				modified=true;
			}
		
			if (dto.isRfcReceptorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RFC_RECEPTOR=?" );
				modified=true;
			}
		
			if (dto.isMontoFacturaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MONTO_FACTURA=?" );
				modified=true;
			}
		
			if (dto.isUuidModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "UUID=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_EMERGENCIA_CREDITO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdEmergenciaCreditoModified()) {
				stmt.setInt( index++, dto.getIdEmergenciaCredito() );
			}
		
			if (dto.isIdEmergenciaModified()) {
				if (dto.isIdEmergenciaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmergencia() );
				}
		
			}
		
			if (dto.isFechaModified()) {
				stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isRfcEmisorModified()) {
				stmt.setString( index++, dto.getRfcEmisor() );
			}
		
			if (dto.isIdClienteReceptorModified()) {
				if (dto.isIdClienteReceptorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdClienteReceptor() );
				}
		
			}
		
			if (dto.isRfcReceptorModified()) {
				stmt.setString( index++, dto.getRfcReceptor() );
			}
		
			if (dto.isMontoFacturaModified()) {
				if (dto.isMontoFacturaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMontoFactura() );
				}
		
			}
		
			if (dto.isUuidModified()) {
				stmt.setString( index++, dto.getUuid() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdEmergenciaCredito() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmergenciaCreditoFacturaRealizadaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the emergencia_credito_factura_realizada table.
	 */
	public void delete(EmergenciaCreditoFacturaRealizadaPk pk) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdEmergenciaCredito() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmergenciaCreditoFacturaRealizadaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the emergencia_credito_factura_realizada table that matches the specified primary-key value.
	 */
	public EmergenciaCreditoFacturaRealizada findByPrimaryKey(EmergenciaCreditoFacturaRealizadaPk pk) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		return findByPrimaryKey( pk.getIdEmergenciaCredito() );
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the criteria 'ID_EMERGENCIA_CREDITO = :idEmergenciaCredito'.
	 */
	public EmergenciaCreditoFacturaRealizada findByPrimaryKey(int idEmergenciaCredito) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		EmergenciaCreditoFacturaRealizada ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_EMERGENCIA_CREDITO = ?", new Object[] {  new Integer(idEmergenciaCredito) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the criteria ''.
	 */
	public EmergenciaCreditoFacturaRealizada[] findAll() throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_EMERGENCIA_CREDITO", null );
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the criteria 'ID_EMERGENCIA_CREDITO = :idEmergenciaCredito'.
	 */
	public EmergenciaCreditoFacturaRealizada[] findWhereIdEmergenciaCreditoEquals(int idEmergenciaCredito) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMERGENCIA_CREDITO = ? ORDER BY ID_EMERGENCIA_CREDITO", new Object[] {  new Integer(idEmergenciaCredito) } );
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the criteria 'ID_EMERGENCIA = :idEmergencia'.
	 */
	public EmergenciaCreditoFacturaRealizada[] findWhereIdEmergenciaEquals(int idEmergencia) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMERGENCIA = ? ORDER BY ID_EMERGENCIA", new Object[] {  new Integer(idEmergencia) } );
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the criteria 'FECHA = :fecha'.
	 */
	public EmergenciaCreditoFacturaRealizada[] findWhereFechaEquals(Date fecha) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Timestamp( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public EmergenciaCreditoFacturaRealizada[] findWhereIdEmpresaEquals(int idEmpresa) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the criteria 'RFC_EMISOR = :rfcEmisor'.
	 */
	public EmergenciaCreditoFacturaRealizada[] findWhereRfcEmisorEquals(String rfcEmisor) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC_EMISOR = ? ORDER BY RFC_EMISOR", new Object[] { rfcEmisor } );
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the criteria 'ID_CLIENTE_RECEPTOR = :idClienteReceptor'.
	 */
	public EmergenciaCreditoFacturaRealizada[] findWhereIdClienteReceptorEquals(int idClienteReceptor) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CLIENTE_RECEPTOR = ? ORDER BY ID_CLIENTE_RECEPTOR", new Object[] {  new Integer(idClienteReceptor) } );
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the criteria 'RFC_RECEPTOR = :rfcReceptor'.
	 */
	public EmergenciaCreditoFacturaRealizada[] findWhereRfcReceptorEquals(String rfcReceptor) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC_RECEPTOR = ? ORDER BY RFC_RECEPTOR", new Object[] { rfcReceptor } );
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the criteria 'MONTO_FACTURA = :montoFactura'.
	 */
	public EmergenciaCreditoFacturaRealizada[] findWhereMontoFacturaEquals(double montoFactura) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONTO_FACTURA = ? ORDER BY MONTO_FACTURA", new Object[] {  new Double(montoFactura) } );
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the criteria 'UUID = :uuid'.
	 */
	public EmergenciaCreditoFacturaRealizada[] findWhereUuidEquals(String uuid) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UUID = ? ORDER BY UUID", new Object[] { uuid } );
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public EmergenciaCreditoFacturaRealizada[] findWhereIdEstatusEquals(int idEstatus) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/**
	 * Method 'EmergenciaCreditoFacturaRealizadaDaoImpl'
	 * 
	 */
	public EmergenciaCreditoFacturaRealizadaDaoImpl()
	{
	}

	/**
	 * Method 'EmergenciaCreditoFacturaRealizadaDaoImpl'
	 * 
	 * @param userConn
	 */
	public EmergenciaCreditoFacturaRealizadaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "emergencia_credito_factura_realizada";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected EmergenciaCreditoFacturaRealizada fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			EmergenciaCreditoFacturaRealizada dto = new EmergenciaCreditoFacturaRealizada();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected EmergenciaCreditoFacturaRealizada[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			EmergenciaCreditoFacturaRealizada dto = new EmergenciaCreditoFacturaRealizada();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		EmergenciaCreditoFacturaRealizada ret[] = new EmergenciaCreditoFacturaRealizada[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(EmergenciaCreditoFacturaRealizada dto, ResultSet rs) throws SQLException
	{
		dto.setIdEmergenciaCredito( rs.getInt( COLUMN_ID_EMERGENCIA_CREDITO ) );
		dto.setIdEmergencia( rs.getInt( COLUMN_ID_EMERGENCIA ) );
		if (rs.wasNull()) {
			dto.setIdEmergenciaNull( true );
		}
		
		dto.setFecha( rs.getTimestamp(COLUMN_FECHA ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setRfcEmisor( rs.getString( COLUMN_RFC_EMISOR ) );
		dto.setIdClienteReceptor( rs.getInt( COLUMN_ID_CLIENTE_RECEPTOR ) );
		if (rs.wasNull()) {
			dto.setIdClienteReceptorNull( true );
		}
		
		dto.setRfcReceptor( rs.getString( COLUMN_RFC_RECEPTOR ) );
		dto.setMontoFactura( rs.getDouble( COLUMN_MONTO_FACTURA ) );
		if (rs.wasNull()) {
			dto.setMontoFacturaNull( true );
		}
		
		dto.setUuid( rs.getString( COLUMN_UUID ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(EmergenciaCreditoFacturaRealizada dto)
	{
		dto.setIdEmergenciaCreditoModified( false );
		dto.setIdEmergenciaModified( false );
		dto.setFechaModified( false );
		dto.setIdEmpresaModified( false );
		dto.setRfcEmisorModified( false );
		dto.setIdClienteReceptorModified( false );
		dto.setRfcReceptorModified( false );
		dto.setMontoFacturaModified( false );
		dto.setUuidModified( false );
		dto.setIdEstatusModified( false );
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the specified arbitrary SQL statement
	 */
	public EmergenciaCreditoFacturaRealizada[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmergenciaCreditoFacturaRealizadaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the emergencia_credito_factura_realizada table that match the specified arbitrary SQL statement
	 */
	public EmergenciaCreditoFacturaRealizada[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmergenciaCreditoFacturaRealizadaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmergenciaCreditoFacturaRealizadaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
