/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ComprobanteDescripcionJaimeCalderonHernandezDaoImpl extends AbstractDAO implements ComprobanteDescripcionJaimeCalderonHernandezDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_COMPROBANTE_DESCRIPCION, ID_COMPROBANTE_FISCAL, ID_CONCEPTO, DESCRIPCION, CANTIDAD, PRECIO_UNITARIO, UNIDAD, PORCENTAJE_IMPUESTO_FLETE, PRECIO_CONCEPTO_FLETE, TOTAL_IMPUESTO_CONCEPTO_FLETE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_COMPROBANTE_DESCRIPCION, ID_COMPROBANTE_FISCAL, ID_CONCEPTO, DESCRIPCION, CANTIDAD, PRECIO_UNITARIO, UNIDAD, PORCENTAJE_IMPUESTO_FLETE, PRECIO_CONCEPTO_FLETE, TOTAL_IMPUESTO_CONCEPTO_FLETE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_COMPROBANTE_DESCRIPCION = ?, ID_COMPROBANTE_FISCAL = ?, ID_CONCEPTO = ?, DESCRIPCION = ?, CANTIDAD = ?, PRECIO_UNITARIO = ?, UNIDAD = ?, PORCENTAJE_IMPUESTO_FLETE = ?, PRECIO_CONCEPTO_FLETE = ?, TOTAL_IMPUESTO_CONCEPTO_FLETE = ? WHERE ID_COMPROBANTE_DESCRIPCION = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_COMPROBANTE_DESCRIPCION = ?";

	/** 
	 * Index of column ID_COMPROBANTE_DESCRIPCION
	 */
	protected static final int COLUMN_ID_COMPROBANTE_DESCRIPCION = 1;

	/** 
	 * Index of column ID_COMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_ID_COMPROBANTE_FISCAL = 2;

	/** 
	 * Index of column ID_CONCEPTO
	 */
	protected static final int COLUMN_ID_CONCEPTO = 3;

	/** 
	 * Index of column DESCRIPCION
	 */
	protected static final int COLUMN_DESCRIPCION = 4;

	/** 
	 * Index of column CANTIDAD
	 */
	protected static final int COLUMN_CANTIDAD = 5;

	/** 
	 * Index of column PRECIO_UNITARIO
	 */
	protected static final int COLUMN_PRECIO_UNITARIO = 6;

	/** 
	 * Index of column UNIDAD
	 */
	protected static final int COLUMN_UNIDAD = 7;

	/** 
	 * Index of column PORCENTAJE_IMPUESTO_FLETE
	 */
	protected static final int COLUMN_PORCENTAJE_IMPUESTO_FLETE = 8;

	/** 
	 * Index of column PRECIO_CONCEPTO_FLETE
	 */
	protected static final int COLUMN_PRECIO_CONCEPTO_FLETE = 9;

	/** 
	 * Index of column TOTAL_IMPUESTO_CONCEPTO_FLETE
	 */
	protected static final int COLUMN_TOTAL_IMPUESTO_CONCEPTO_FLETE = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column ID_COMPROBANTE_DESCRIPCION
	 */
	protected static final int PK_COLUMN_ID_COMPROBANTE_DESCRIPCION = 1;

	/** 
	 * Inserts a new row in the comprobante_descripcion_jaime_calderon_hernandez table.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandezPk insert(ComprobanteDescripcionJaimeCalderonHernandez dto) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getIdComprobanteDescripcion() );
			stmt.setInt( index++, dto.getIdComprobanteFiscal() );
			stmt.setInt( index++, dto.getIdConcepto() );
			stmt.setString( index++, dto.getDescripcion() );
			if (dto.isCantidadNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getCantidad() );
			}
		
			if (dto.isPrecioUnitarioNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getPrecioUnitario() );
			}
		
			stmt.setString( index++, dto.getUnidad() );
			stmt.setString( index++, dto.getPorcentajeImpuestoFlete() );
			stmt.setString( index++, dto.getPrecioConceptoFlete() );
			stmt.setString( index++, dto.getTotalImpuestoConceptoFlete() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteDescripcionJaimeCalderonHernandezDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the comprobante_descripcion_jaime_calderon_hernandez table.
	 */
	public void update(ComprobanteDescripcionJaimeCalderonHernandezPk pk, ComprobanteDescripcionJaimeCalderonHernandez dto) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdComprobanteDescripcion() );
			stmt.setInt( index++, dto.getIdComprobanteFiscal() );
			stmt.setInt( index++, dto.getIdConcepto() );
			stmt.setString( index++, dto.getDescripcion() );
			if (dto.isCantidadNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getCantidad() );
			}
		
			if (dto.isPrecioUnitarioNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getPrecioUnitario() );
			}
		
			stmt.setString( index++, dto.getUnidad() );
			stmt.setString( index++, dto.getPorcentajeImpuestoFlete() );
			stmt.setString( index++, dto.getPrecioConceptoFlete() );
			stmt.setString( index++, dto.getTotalImpuestoConceptoFlete() );
			stmt.setInt( 11, pk.getIdComprobanteDescripcion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteDescripcionJaimeCalderonHernandezDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the comprobante_descripcion_jaime_calderon_hernandez table.
	 */
	public void delete(ComprobanteDescripcionJaimeCalderonHernandezPk pk) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdComprobanteDescripcion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteDescripcionJaimeCalderonHernandezDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the comprobante_descripcion_jaime_calderon_hernandez table that matches the specified primary-key value.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez findByPrimaryKey(ComprobanteDescripcionJaimeCalderonHernandezPk pk) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByPrimaryKey( pk.getIdComprobanteDescripcion() );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'ID_COMPROBANTE_DESCRIPCION = :idComprobanteDescripcion'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez findByPrimaryKey(int idComprobanteDescripcion) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		ComprobanteDescripcionJaimeCalderonHernandez ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_DESCRIPCION = ?", new Object[] {  new Integer(idComprobanteDescripcion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria ''.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findAll() throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_COMPROBANTE_DESCRIPCION", null );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findByComprobanteFiscal(int idComprobanteFiscal) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_FISCAL = ?", new Object[] {  new Integer(idComprobanteFiscal) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findByConcepto(int idConcepto) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO = ?", new Object[] {  new Integer(idConcepto) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'ID_COMPROBANTE_DESCRIPCION = :idComprobanteDescripcion'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereIdComprobanteDescripcionEquals(int idComprobanteDescripcion) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_DESCRIPCION = ? ORDER BY ID_COMPROBANTE_DESCRIPCION", new Object[] {  new Integer(idComprobanteDescripcion) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_FISCAL = ? ORDER BY ID_COMPROBANTE_FISCAL", new Object[] {  new Integer(idComprobanteFiscal) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereIdConceptoEquals(int idConcepto) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO = ? ORDER BY ID_CONCEPTO", new Object[] {  new Integer(idConcepto) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereDescripcionEquals(String descripcion) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION = ? ORDER BY DESCRIPCION", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereCantidadEquals(float cantidad) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD = ? ORDER BY CANTIDAD", new Object[] {  new Float(cantidad) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'PRECIO_UNITARIO = :precioUnitario'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWherePrecioUnitarioEquals(float precioUnitario) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_UNITARIO = ? ORDER BY PRECIO_UNITARIO", new Object[] {  new Float(precioUnitario) } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'UNIDAD = :unidad'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereUnidadEquals(String unidad) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UNIDAD = ? ORDER BY UNIDAD", new Object[] { unidad } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'PORCENTAJE_IMPUESTO_FLETE = :porcentajeImpuestoFlete'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWherePorcentajeImpuestoFleteEquals(String porcentajeImpuestoFlete) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PORCENTAJE_IMPUESTO_FLETE = ? ORDER BY PORCENTAJE_IMPUESTO_FLETE", new Object[] { porcentajeImpuestoFlete } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'PRECIO_CONCEPTO_FLETE = :precioConceptoFlete'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWherePrecioConceptoFleteEquals(String precioConceptoFlete) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_CONCEPTO_FLETE = ? ORDER BY PRECIO_CONCEPTO_FLETE", new Object[] { precioConceptoFlete } );
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'TOTAL_IMPUESTO_CONCEPTO_FLETE = :totalImpuestoConceptoFlete'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereTotalImpuestoConceptoFleteEquals(String totalImpuestoConceptoFlete) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TOTAL_IMPUESTO_CONCEPTO_FLETE = ? ORDER BY TOTAL_IMPUESTO_CONCEPTO_FLETE", new Object[] { totalImpuestoConceptoFlete } );
	}

	/**
	 * Method 'ComprobanteDescripcionJaimeCalderonHernandezDaoImpl'
	 * 
	 */
	public ComprobanteDescripcionJaimeCalderonHernandezDaoImpl()
	{
	}

	/**
	 * Method 'ComprobanteDescripcionJaimeCalderonHernandezDaoImpl'
	 * 
	 * @param userConn
	 */
	public ComprobanteDescripcionJaimeCalderonHernandezDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "comprobante_descripcion_jaime_calderon_hernandez";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ComprobanteDescripcionJaimeCalderonHernandez fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ComprobanteDescripcionJaimeCalderonHernandez dto = new ComprobanteDescripcionJaimeCalderonHernandez();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ComprobanteDescripcionJaimeCalderonHernandez[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ComprobanteDescripcionJaimeCalderonHernandez dto = new ComprobanteDescripcionJaimeCalderonHernandez();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ComprobanteDescripcionJaimeCalderonHernandez ret[] = new ComprobanteDescripcionJaimeCalderonHernandez[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ComprobanteDescripcionJaimeCalderonHernandez dto, ResultSet rs) throws SQLException
	{
		dto.setIdComprobanteDescripcion( rs.getInt( COLUMN_ID_COMPROBANTE_DESCRIPCION ) );
		dto.setIdComprobanteFiscal( rs.getInt( COLUMN_ID_COMPROBANTE_FISCAL ) );
		dto.setIdConcepto( rs.getInt( COLUMN_ID_CONCEPTO ) );
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setCantidad( rs.getFloat( COLUMN_CANTIDAD ) );
		if (rs.wasNull()) {
			dto.setCantidadNull( true );
		}
		
		dto.setPrecioUnitario( rs.getFloat( COLUMN_PRECIO_UNITARIO ) );
		if (rs.wasNull()) {
			dto.setPrecioUnitarioNull( true );
		}
		
		dto.setUnidad( rs.getString( COLUMN_UNIDAD ) );
		dto.setPorcentajeImpuestoFlete( rs.getString( COLUMN_PORCENTAJE_IMPUESTO_FLETE ) );
		dto.setPrecioConceptoFlete( rs.getString( COLUMN_PRECIO_CONCEPTO_FLETE ) );
		dto.setTotalImpuestoConceptoFlete( rs.getString( COLUMN_TOTAL_IMPUESTO_CONCEPTO_FLETE ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ComprobanteDescripcionJaimeCalderonHernandez dto)
	{
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the specified arbitrary SQL statement
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findByDynamicSelect(String sql, Object[] sqlParams) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteDescripcionJaimeCalderonHernandezDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the specified arbitrary SQL statement
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findByDynamicWhere(String sql, Object[] sqlParams) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteDescripcionJaimeCalderonHernandezDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
