/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class NominaComprobanteDescripcionPercepcionDeduccionDaoImpl extends AbstractDAO implements NominaComprobanteDescripcionPercepcionDeduccionDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_NOMINA_COMPROBANTE_DESCRIPCION, ID_CROMPROBANTE_FISCAL, ID_PERCEPCION_DEDUCCION, TIPO_CLAVE, CLAVE_PATRON, CONCEPTO_DESCRIPCION, IMPORTE_GRAVADO, IMPORTE_EXCEPTO, ID_DE_LA_PERCEPCION_DEDUCCION FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_NOMINA_COMPROBANTE_DESCRIPCION, ID_CROMPROBANTE_FISCAL, ID_PERCEPCION_DEDUCCION, TIPO_CLAVE, CLAVE_PATRON, CONCEPTO_DESCRIPCION, IMPORTE_GRAVADO, IMPORTE_EXCEPTO, ID_DE_LA_PERCEPCION_DEDUCCION ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_NOMINA_COMPROBANTE_DESCRIPCION = ?, ID_CROMPROBANTE_FISCAL = ?, ID_PERCEPCION_DEDUCCION = ?, TIPO_CLAVE = ?, CLAVE_PATRON = ?, CONCEPTO_DESCRIPCION = ?, IMPORTE_GRAVADO = ?, IMPORTE_EXCEPTO = ?, ID_DE_LA_PERCEPCION_DEDUCCION = ? WHERE ID_NOMINA_COMPROBANTE_DESCRIPCION = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_NOMINA_COMPROBANTE_DESCRIPCION = ?";

	/** 
	 * Index of column ID_NOMINA_COMPROBANTE_DESCRIPCION
	 */
	protected static final int COLUMN_ID_NOMINA_COMPROBANTE_DESCRIPCION = 1;

	/** 
	 * Index of column ID_CROMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_ID_CROMPROBANTE_FISCAL = 2;

	/** 
	 * Index of column ID_PERCEPCION_DEDUCCION
	 */
	protected static final int COLUMN_ID_PERCEPCION_DEDUCCION = 3;

	/** 
	 * Index of column TIPO_CLAVE
	 */
	protected static final int COLUMN_TIPO_CLAVE = 4;

	/** 
	 * Index of column CLAVE_PATRON
	 */
	protected static final int COLUMN_CLAVE_PATRON = 5;

	/** 
	 * Index of column CONCEPTO_DESCRIPCION
	 */
	protected static final int COLUMN_CONCEPTO_DESCRIPCION = 6;

	/** 
	 * Index of column IMPORTE_GRAVADO
	 */
	protected static final int COLUMN_IMPORTE_GRAVADO = 7;

	/** 
	 * Index of column IMPORTE_EXCEPTO
	 */
	protected static final int COLUMN_IMPORTE_EXCEPTO = 8;

	/** 
	 * Index of column ID_DE_LA_PERCEPCION_DEDUCCION
	 */
	protected static final int COLUMN_ID_DE_LA_PERCEPCION_DEDUCCION = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column ID_NOMINA_COMPROBANTE_DESCRIPCION
	 */
	protected static final int PK_COLUMN_ID_NOMINA_COMPROBANTE_DESCRIPCION = 1;

	/** 
	 * Inserts a new row in the nomina_comprobante_descripcion_percepcion_deduccion table.
	 */
	public NominaComprobanteDescripcionPercepcionDeduccionPk insert(NominaComprobanteDescripcionPercepcionDeduccion dto) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdNominaComprobanteDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_NOMINA_COMPROBANTE_DESCRIPCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdCromprobanteFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CROMPROBANTE_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdPercepcionDeduccionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PERCEPCION_DEDUCCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoClaveModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIPO_CLAVE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isClavePatronModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CLAVE_PATRON" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isConceptoDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CONCEPTO_DESCRIPCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isImporteGravadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IMPORTE_GRAVADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isImporteExceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IMPORTE_EXCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdDeLaPercepcionDeduccionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_DE_LA_PERCEPCION_DEDUCCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdNominaComprobanteDescripcionModified()) {
				stmt.setInt( index++, dto.getIdNominaComprobanteDescripcion() );
			}
		
			if (dto.isIdCromprobanteFiscalModified()) {
				if (dto.isIdCromprobanteFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCromprobanteFiscal() );
				}
		
			}
		
			if (dto.isIdPercepcionDeduccionModified()) {
				if (dto.isIdPercepcionDeduccionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPercepcionDeduccion() );
				}
		
			}
		
			if (dto.isTipoClaveModified()) {
				stmt.setString( index++, dto.getTipoClave() );
			}
		
			if (dto.isClavePatronModified()) {
				stmt.setString( index++, dto.getClavePatron() );
			}
		
			if (dto.isConceptoDescripcionModified()) {
				stmt.setString( index++, dto.getConceptoDescripcion() );
			}
		
			if (dto.isImporteGravadoModified()) {
				if (dto.isImporteGravadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getImporteGravado() );
				}
		
			}
		
			if (dto.isImporteExceptoModified()) {
				if (dto.isImporteExceptoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getImporteExcepto() );
				}
		
			}
		
			if (dto.isIdDeLaPercepcionDeduccionModified()) {
				if (dto.isIdDeLaPercepcionDeduccionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdDeLaPercepcionDeduccion() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdNominaComprobanteDescripcion( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NominaComprobanteDescripcionPercepcionDeduccionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the nomina_comprobante_descripcion_percepcion_deduccion table.
	 */
	public void update(NominaComprobanteDescripcionPercepcionDeduccionPk pk, NominaComprobanteDescripcionPercepcionDeduccion dto) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdNominaComprobanteDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_NOMINA_COMPROBANTE_DESCRIPCION=?" );
				modified=true;
			}
		
			if (dto.isIdCromprobanteFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CROMPROBANTE_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isIdPercepcionDeduccionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PERCEPCION_DEDUCCION=?" );
				modified=true;
			}
		
			if (dto.isTipoClaveModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIPO_CLAVE=?" );
				modified=true;
			}
		
			if (dto.isClavePatronModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CLAVE_PATRON=?" );
				modified=true;
			}
		
			if (dto.isConceptoDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONCEPTO_DESCRIPCION=?" );
				modified=true;
			}
		
			if (dto.isImporteGravadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IMPORTE_GRAVADO=?" );
				modified=true;
			}
		
			if (dto.isImporteExceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IMPORTE_EXCEPTO=?" );
				modified=true;
			}
		
			if (dto.isIdDeLaPercepcionDeduccionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_DE_LA_PERCEPCION_DEDUCCION=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_NOMINA_COMPROBANTE_DESCRIPCION=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdNominaComprobanteDescripcionModified()) {
				stmt.setInt( index++, dto.getIdNominaComprobanteDescripcion() );
			}
		
			if (dto.isIdCromprobanteFiscalModified()) {
				if (dto.isIdCromprobanteFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCromprobanteFiscal() );
				}
		
			}
		
			if (dto.isIdPercepcionDeduccionModified()) {
				if (dto.isIdPercepcionDeduccionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPercepcionDeduccion() );
				}
		
			}
		
			if (dto.isTipoClaveModified()) {
				stmt.setString( index++, dto.getTipoClave() );
			}
		
			if (dto.isClavePatronModified()) {
				stmt.setString( index++, dto.getClavePatron() );
			}
		
			if (dto.isConceptoDescripcionModified()) {
				stmt.setString( index++, dto.getConceptoDescripcion() );
			}
		
			if (dto.isImporteGravadoModified()) {
				if (dto.isImporteGravadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getImporteGravado() );
				}
		
			}
		
			if (dto.isImporteExceptoModified()) {
				if (dto.isImporteExceptoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getImporteExcepto() );
				}
		
			}
		
			if (dto.isIdDeLaPercepcionDeduccionModified()) {
				if (dto.isIdDeLaPercepcionDeduccionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdDeLaPercepcionDeduccion() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdNominaComprobanteDescripcion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NominaComprobanteDescripcionPercepcionDeduccionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the nomina_comprobante_descripcion_percepcion_deduccion table.
	 */
	public void delete(NominaComprobanteDescripcionPercepcionDeduccionPk pk) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdNominaComprobanteDescripcion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NominaComprobanteDescripcionPercepcionDeduccionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the nomina_comprobante_descripcion_percepcion_deduccion table that matches the specified primary-key value.
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion findByPrimaryKey(NominaComprobanteDescripcionPercepcionDeduccionPk pk) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		return findByPrimaryKey( pk.getIdNominaComprobanteDescripcion() );
	}

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_percepcion_deduccion table that match the criteria 'ID_NOMINA_COMPROBANTE_DESCRIPCION = :idNominaComprobanteDescripcion'.
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion findByPrimaryKey(int idNominaComprobanteDescripcion) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		NominaComprobanteDescripcionPercepcionDeduccion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_NOMINA_COMPROBANTE_DESCRIPCION = ?", new Object[] {  new Integer(idNominaComprobanteDescripcion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_percepcion_deduccion table that match the criteria ''.
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion[] findAll() throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_NOMINA_COMPROBANTE_DESCRIPCION", null );
	}

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_percepcion_deduccion table that match the criteria 'ID_NOMINA_COMPROBANTE_DESCRIPCION = :idNominaComprobanteDescripcion'.
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion[] findWhereIdNominaComprobanteDescripcionEquals(int idNominaComprobanteDescripcion) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_NOMINA_COMPROBANTE_DESCRIPCION = ? ORDER BY ID_NOMINA_COMPROBANTE_DESCRIPCION", new Object[] {  new Integer(idNominaComprobanteDescripcion) } );
	}

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_percepcion_deduccion table that match the criteria 'ID_CROMPROBANTE_FISCAL = :idCromprobanteFiscal'.
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion[] findWhereIdCromprobanteFiscalEquals(int idCromprobanteFiscal) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CROMPROBANTE_FISCAL = ? ORDER BY ID_CROMPROBANTE_FISCAL", new Object[] {  new Integer(idCromprobanteFiscal) } );
	}

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_percepcion_deduccion table that match the criteria 'ID_PERCEPCION_DEDUCCION = :idPercepcionDeduccion'.
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion[] findWhereIdPercepcionDeduccionEquals(int idPercepcionDeduccion) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PERCEPCION_DEDUCCION = ? ORDER BY ID_PERCEPCION_DEDUCCION", new Object[] {  new Integer(idPercepcionDeduccion) } );
	}

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_percepcion_deduccion table that match the criteria 'TIPO_CLAVE = :tipoClave'.
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion[] findWhereTipoClaveEquals(String tipoClave) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_CLAVE = ? ORDER BY TIPO_CLAVE", new Object[] { tipoClave } );
	}

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_percepcion_deduccion table that match the criteria 'CLAVE_PATRON = :clavePatron'.
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion[] findWhereClavePatronEquals(String clavePatron) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLAVE_PATRON = ? ORDER BY CLAVE_PATRON", new Object[] { clavePatron } );
	}

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_percepcion_deduccion table that match the criteria 'CONCEPTO_DESCRIPCION = :conceptoDescripcion'.
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion[] findWhereConceptoDescripcionEquals(String conceptoDescripcion) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONCEPTO_DESCRIPCION = ? ORDER BY CONCEPTO_DESCRIPCION", new Object[] { conceptoDescripcion } );
	}

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_percepcion_deduccion table that match the criteria 'IMPORTE_GRAVADO = :importeGravado'.
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion[] findWhereImporteGravadoEquals(double importeGravado) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPORTE_GRAVADO = ? ORDER BY IMPORTE_GRAVADO", new Object[] {  new Double(importeGravado) } );
	}

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_percepcion_deduccion table that match the criteria 'IMPORTE_EXCEPTO = :importeExcepto'.
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion[] findWhereImporteExceptoEquals(double importeExcepto) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPORTE_EXCEPTO = ? ORDER BY IMPORTE_EXCEPTO", new Object[] {  new Double(importeExcepto) } );
	}

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_percepcion_deduccion table that match the criteria 'ID_DE_LA_PERCEPCION_DEDUCCION = :idDeLaPercepcionDeduccion'.
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion[] findWhereIdDeLaPercepcionDeduccionEquals(int idDeLaPercepcionDeduccion) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_DE_LA_PERCEPCION_DEDUCCION = ? ORDER BY ID_DE_LA_PERCEPCION_DEDUCCION", new Object[] {  new Integer(idDeLaPercepcionDeduccion) } );
	}

	/**
	 * Method 'NominaComprobanteDescripcionPercepcionDeduccionDaoImpl'
	 * 
	 */
	public NominaComprobanteDescripcionPercepcionDeduccionDaoImpl()
	{
	}

	/**
	 * Method 'NominaComprobanteDescripcionPercepcionDeduccionDaoImpl'
	 * 
	 * @param userConn
	 */
	public NominaComprobanteDescripcionPercepcionDeduccionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "nomina_comprobante_descripcion_percepcion_deduccion";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected NominaComprobanteDescripcionPercepcionDeduccion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			NominaComprobanteDescripcionPercepcionDeduccion dto = new NominaComprobanteDescripcionPercepcionDeduccion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected NominaComprobanteDescripcionPercepcionDeduccion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			NominaComprobanteDescripcionPercepcionDeduccion dto = new NominaComprobanteDescripcionPercepcionDeduccion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		NominaComprobanteDescripcionPercepcionDeduccion ret[] = new NominaComprobanteDescripcionPercepcionDeduccion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(NominaComprobanteDescripcionPercepcionDeduccion dto, ResultSet rs) throws SQLException
	{
		dto.setIdNominaComprobanteDescripcion( rs.getInt( COLUMN_ID_NOMINA_COMPROBANTE_DESCRIPCION ) );
		dto.setIdCromprobanteFiscal( rs.getInt( COLUMN_ID_CROMPROBANTE_FISCAL ) );
		if (rs.wasNull()) {
			dto.setIdCromprobanteFiscalNull( true );
		}
		
		dto.setIdPercepcionDeduccion( rs.getInt( COLUMN_ID_PERCEPCION_DEDUCCION ) );
		if (rs.wasNull()) {
			dto.setIdPercepcionDeduccionNull( true );
		}
		
		dto.setTipoClave( rs.getString( COLUMN_TIPO_CLAVE ) );
		dto.setClavePatron( rs.getString( COLUMN_CLAVE_PATRON ) );
		dto.setConceptoDescripcion( rs.getString( COLUMN_CONCEPTO_DESCRIPCION ) );
		dto.setImporteGravado( rs.getDouble( COLUMN_IMPORTE_GRAVADO ) );
		if (rs.wasNull()) {
			dto.setImporteGravadoNull( true );
		}
		
		dto.setImporteExcepto( rs.getDouble( COLUMN_IMPORTE_EXCEPTO ) );
		if (rs.wasNull()) {
			dto.setImporteExceptoNull( true );
		}
		
		dto.setIdDeLaPercepcionDeduccion( rs.getInt( COLUMN_ID_DE_LA_PERCEPCION_DEDUCCION ) );
		if (rs.wasNull()) {
			dto.setIdDeLaPercepcionDeduccionNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(NominaComprobanteDescripcionPercepcionDeduccion dto)
	{
		dto.setIdNominaComprobanteDescripcionModified( false );
		dto.setIdCromprobanteFiscalModified( false );
		dto.setIdPercepcionDeduccionModified( false );
		dto.setTipoClaveModified( false );
		dto.setClavePatronModified( false );
		dto.setConceptoDescripcionModified( false );
		dto.setImporteGravadoModified( false );
		dto.setImporteExceptoModified( false );
		dto.setIdDeLaPercepcionDeduccionModified( false );
	}

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_percepcion_deduccion table that match the specified arbitrary SQL statement
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion[] findByDynamicSelect(String sql, Object[] sqlParams) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NominaComprobanteDescripcionPercepcionDeduccionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_percepcion_deduccion table that match the specified arbitrary SQL statement
	 */
	public NominaComprobanteDescripcionPercepcionDeduccion[] findByDynamicWhere(String sql, Object[] sqlParams) throws NominaComprobanteDescripcionPercepcionDeduccionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new NominaComprobanteDescripcionPercepcionDeduccionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
