/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class VentaDaoImpl extends AbstractDAO implements VentaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_VENTA, ID_EMPRESA, ID_EMPLEADO, ID_CLIENTE, ID_OPERACION_BANCARIA, ID_COMPROBANTE_FISCAL, FECHA_VENTA, TOTAL, ID_ESTATUS, FACTURADO, ID_VENTA_METODO_PAGO, CREDITO_FECHA_PAGO, PAGADA_TOTAL FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_VENTA, ID_EMPRESA, ID_EMPLEADO, ID_CLIENTE, ID_OPERACION_BANCARIA, ID_COMPROBANTE_FISCAL, FECHA_VENTA, TOTAL, ID_ESTATUS, FACTURADO, ID_VENTA_METODO_PAGO, CREDITO_FECHA_PAGO, PAGADA_TOTAL ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_VENTA = ?, ID_EMPRESA = ?, ID_EMPLEADO = ?, ID_CLIENTE = ?, ID_OPERACION_BANCARIA = ?, ID_COMPROBANTE_FISCAL = ?, FECHA_VENTA = ?, TOTAL = ?, ID_ESTATUS = ?, FACTURADO = ?, ID_VENTA_METODO_PAGO = ?, CREDITO_FECHA_PAGO = ?, PAGADA_TOTAL = ? WHERE ID_VENTA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_VENTA = ?";

	/** 
	 * Index of column ID_VENTA
	 */
	protected static final int COLUMN_ID_VENTA = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column ID_EMPLEADO
	 */
	protected static final int COLUMN_ID_EMPLEADO = 3;

	/** 
	 * Index of column ID_CLIENTE
	 */
	protected static final int COLUMN_ID_CLIENTE = 4;

	/** 
	 * Index of column ID_OPERACION_BANCARIA
	 */
	protected static final int COLUMN_ID_OPERACION_BANCARIA = 5;

	/** 
	 * Index of column ID_COMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_ID_COMPROBANTE_FISCAL = 6;

	/** 
	 * Index of column FECHA_VENTA
	 */
	protected static final int COLUMN_FECHA_VENTA = 7;

	/** 
	 * Index of column TOTAL
	 */
	protected static final int COLUMN_TOTAL = 8;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 9;

	/** 
	 * Index of column FACTURADO
	 */
	protected static final int COLUMN_FACTURADO = 10;

	/** 
	 * Index of column ID_VENTA_METODO_PAGO
	 */
	protected static final int COLUMN_ID_VENTA_METODO_PAGO = 11;

	/** 
	 * Index of column CREDITO_FECHA_PAGO
	 */
	protected static final int COLUMN_CREDITO_FECHA_PAGO = 12;

	/** 
	 * Index of column PAGADA_TOTAL
	 */
	protected static final int COLUMN_PAGADA_TOTAL = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column ID_VENTA
	 */
	protected static final int PK_COLUMN_ID_VENTA = 1;

	/** 
	 * Inserts a new row in the VENTA table.
	 */
	public VentaPk insert(Venta dto) throws VentaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdVentaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_VENTA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpleadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPLEADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdOperacionBancariaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_OPERACION_BANCARIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaVentaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_VENTA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TOTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFacturadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FACTURADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdVentaMetodoPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_VENTA_METODO_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCreditoFechaPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CREDITO_FECHA_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPagadaTotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PAGADA_TOTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdVentaModified()) {
				stmt.setInt( index++, dto.getIdVenta() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdEmpleado() );
			}
		
			if (dto.isIdClienteModified()) {
				stmt.setInt( index++, dto.getIdCliente() );
			}
		
			if (dto.isIdOperacionBancariaModified()) {
				if (dto.isIdOperacionBancariaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdOperacionBancaria() );
				}
		
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (dto.isIdComprobanteFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdComprobanteFiscal() );
				}
		
			}
		
			if (dto.isFechaVentaModified()) {
				stmt.setTimestamp(index++, dto.getFechaVenta()==null ? null : new java.sql.Timestamp( dto.getFechaVenta().getTime() ) );
			}
		
			if (dto.isTotalModified()) {
				if (dto.isTotalNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getTotal() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isFacturadoModified()) {
				if (dto.isFacturadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getFacturado() );
				}
		
			}
		
			if (dto.isIdVentaMetodoPagoModified()) {
				stmt.setInt( index++, dto.getIdVentaMetodoPago() );
			}
		
			if (dto.isCreditoFechaPagoModified()) {
				stmt.setTimestamp(index++, dto.getCreditoFechaPago()==null ? null : new java.sql.Timestamp( dto.getCreditoFechaPago().getTime() ) );
			}
		
			if (dto.isPagadaTotalModified()) {
				stmt.setInt( index++, dto.getPagadaTotal() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdVenta( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the VENTA table.
	 */
	public void update(VentaPk pk, Venta dto) throws VentaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdVentaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_VENTA=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdEmpleadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPLEADO=?" );
				modified=true;
			}
		
			if (dto.isIdClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isIdOperacionBancariaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_OPERACION_BANCARIA=?" );
				modified=true;
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isFechaVentaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_VENTA=?" );
				modified=true;
			}
		
			if (dto.isTotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TOTAL=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isFacturadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FACTURADO=?" );
				modified=true;
			}
		
			if (dto.isIdVentaMetodoPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_VENTA_METODO_PAGO=?" );
				modified=true;
			}
		
			if (dto.isCreditoFechaPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CREDITO_FECHA_PAGO=?" );
				modified=true;
			}
		
			if (dto.isPagadaTotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PAGADA_TOTAL=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_VENTA=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdVentaModified()) {
				stmt.setInt( index++, dto.getIdVenta() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdEmpleado() );
			}
		
			if (dto.isIdClienteModified()) {
				stmt.setInt( index++, dto.getIdCliente() );
			}
		
			if (dto.isIdOperacionBancariaModified()) {
				if (dto.isIdOperacionBancariaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdOperacionBancaria() );
				}
		
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (dto.isIdComprobanteFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdComprobanteFiscal() );
				}
		
			}
		
			if (dto.isFechaVentaModified()) {
				stmt.setTimestamp(index++, dto.getFechaVenta()==null ? null : new java.sql.Timestamp( dto.getFechaVenta().getTime() ) );
			}
		
			if (dto.isTotalModified()) {
				if (dto.isTotalNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getTotal() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isFacturadoModified()) {
				if (dto.isFacturadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getFacturado() );
				}
		
			}
		
			if (dto.isIdVentaMetodoPagoModified()) {
				stmt.setInt( index++, dto.getIdVentaMetodoPago() );
			}
		
			if (dto.isCreditoFechaPagoModified()) {
				stmt.setTimestamp(index++, dto.getCreditoFechaPago()==null ? null : new java.sql.Timestamp( dto.getCreditoFechaPago().getTime() ) );
			}
		
			if (dto.isPagadaTotalModified()) {
				stmt.setInt( index++, dto.getPagadaTotal() );
			}
		
			stmt.setInt( index++, pk.getIdVenta() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the VENTA table.
	 */
	public void delete(VentaPk pk) throws VentaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdVenta() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the VENTA table that matches the specified primary-key value.
	 */
	public Venta findByPrimaryKey(VentaPk pk) throws VentaDaoException
	{
		return findByPrimaryKey( pk.getIdVenta() );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_VENTA = :idVenta'.
	 */
	public Venta findByPrimaryKey(int idVenta) throws VentaDaoException
	{
		Venta ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_VENTA = ?", new Object[] {  new Integer(idVenta) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria ''.
	 */
	public Venta[] findAll() throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_VENTA", null );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_VENTA = :idVenta'.
	 */
	public Venta[] findWhereIdVentaEquals(int idVenta) throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_VENTA = ? ORDER BY ID_VENTA", new Object[] {  new Integer(idVenta) } );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Venta[] findWhereIdEmpresaEquals(int idEmpresa) throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public Venta[] findWhereIdEmpleadoEquals(int idEmpleado) throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPLEADO = ? ORDER BY ID_EMPLEADO", new Object[] {  new Integer(idEmpleado) } );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public Venta[] findWhereIdClienteEquals(int idCliente) throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CLIENTE = ? ORDER BY ID_CLIENTE", new Object[] {  new Integer(idCliente) } );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_OPERACION_BANCARIA = :idOperacionBancaria'.
	 */
	public Venta[] findWhereIdOperacionBancariaEquals(int idOperacionBancaria) throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_OPERACION_BANCARIA = ? ORDER BY ID_OPERACION_BANCARIA", new Object[] {  new Integer(idOperacionBancaria) } );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public Venta[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_FISCAL = ? ORDER BY ID_COMPROBANTE_FISCAL", new Object[] {  new Integer(idComprobanteFiscal) } );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'FECHA_VENTA = :fechaVenta'.
	 */
	public Venta[] findWhereFechaVentaEquals(Date fechaVenta) throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_VENTA = ? ORDER BY FECHA_VENTA", new Object[] { fechaVenta==null ? null : new java.sql.Timestamp( fechaVenta.getTime() ) } );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'TOTAL = :total'.
	 */
	public Venta[] findWhereTotalEquals(double total) throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TOTAL = ? ORDER BY TOTAL", new Object[] {  new Double(total) } );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Venta[] findWhereIdEstatusEquals(int idEstatus) throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'FACTURADO = :facturado'.
	 */
	public Venta[] findWhereFacturadoEquals(int facturado) throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FACTURADO = ? ORDER BY FACTURADO", new Object[] {  new Integer(facturado) } );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_VENTA_METODO_PAGO = :idVentaMetodoPago'.
	 */
	public Venta[] findWhereIdVentaMetodoPagoEquals(int idVentaMetodoPago) throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_VENTA_METODO_PAGO = ? ORDER BY ID_VENTA_METODO_PAGO", new Object[] {  new Integer(idVentaMetodoPago) } );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'CREDITO_FECHA_PAGO = :creditoFechaPago'.
	 */
	public Venta[] findWhereCreditoFechaPagoEquals(Date creditoFechaPago) throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREDITO_FECHA_PAGO = ? ORDER BY CREDITO_FECHA_PAGO", new Object[] { creditoFechaPago==null ? null : new java.sql.Timestamp( creditoFechaPago.getTime() ) } );
	}

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'PAGADA_TOTAL = :pagadaTotal'.
	 */
	public Venta[] findWherePagadaTotalEquals(int pagadaTotal) throws VentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAGADA_TOTAL = ? ORDER BY PAGADA_TOTAL", new Object[] {  new Integer(pagadaTotal) } );
	}

	/**
	 * Method 'VentaDaoImpl'
	 * 
	 */
	public VentaDaoImpl()
	{
	}

	/**
	 * Method 'VentaDaoImpl'
	 * 
	 * @param userConn
	 */
	public VentaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "VENTA";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Venta fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Venta dto = new Venta();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Venta[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Venta dto = new Venta();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Venta ret[] = new Venta[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Venta dto, ResultSet rs) throws SQLException
	{
		dto.setIdVenta( rs.getInt( COLUMN_ID_VENTA ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdEmpleado( rs.getInt( COLUMN_ID_EMPLEADO ) );
		dto.setIdCliente( rs.getInt( COLUMN_ID_CLIENTE ) );
		dto.setIdOperacionBancaria( rs.getInt( COLUMN_ID_OPERACION_BANCARIA ) );
		if (rs.wasNull()) {
			dto.setIdOperacionBancariaNull( true );
		}
		
		dto.setIdComprobanteFiscal( rs.getInt( COLUMN_ID_COMPROBANTE_FISCAL ) );
		if (rs.wasNull()) {
			dto.setIdComprobanteFiscalNull( true );
		}
		
		dto.setFechaVenta( rs.getTimestamp(COLUMN_FECHA_VENTA ) );
		dto.setTotal( rs.getDouble( COLUMN_TOTAL ) );
		if (rs.wasNull()) {
			dto.setTotalNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setFacturado( rs.getInt( COLUMN_FACTURADO ) );
		if (rs.wasNull()) {
			dto.setFacturadoNull( true );
		}
		
		dto.setIdVentaMetodoPago( rs.getInt( COLUMN_ID_VENTA_METODO_PAGO ) );
		dto.setCreditoFechaPago( rs.getTimestamp(COLUMN_CREDITO_FECHA_PAGO ) );
		dto.setPagadaTotal( rs.getInt( COLUMN_PAGADA_TOTAL ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Venta dto)
	{
		dto.setIdVentaModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEmpleadoModified( false );
		dto.setIdClienteModified( false );
		dto.setIdOperacionBancariaModified( false );
		dto.setIdComprobanteFiscalModified( false );
		dto.setFechaVentaModified( false );
		dto.setTotalModified( false );
		dto.setIdEstatusModified( false );
		dto.setFacturadoModified( false );
		dto.setIdVentaMetodoPagoModified( false );
		dto.setCreditoFechaPagoModified( false );
		dto.setPagadaTotalModified( false );
	}

	/** 
	 * Returns all rows from the VENTA table that match the specified arbitrary SQL statement
	 */
	public Venta[] findByDynamicSelect(String sql, Object[] sqlParams) throws VentaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the VENTA table that match the specified arbitrary SQL statement
	 */
	public Venta[] findByDynamicWhere(String sql, Object[] sqlParams) throws VentaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
