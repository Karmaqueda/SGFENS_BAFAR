/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class VistaCxcDaoImpl extends AbstractDAO implements VistaCxcDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT C_ID_COMPROBANTE_FISCAL, ID_TIPO_COMPROBANTE, C_ID_EMPRESA, C_ID_CLIENTE, C_ID_ESTATUS, ID_FOLIO, ID_FORMA_PAGO, ID_TIPO_PAGO, CONDICIONES_PAGO, FOLIO_GENERADO, FECHA_IMPRESION, FECHA_CAPTURA, FECHA_PAGO, IMPORTE_SUBTOTAL, IMPUESTOS, IMPORTE_NETO, PARCIALIDAD, CONCEPTO, ARCHIVO_CFD, CADENA_ORIGINAL, SELLO_DIGITAL, C_COMENTARIOS, ID_DIVISAS, ID_TIPO_MONEDA, TIPO_DE_CAMBIO, UUID, SELLO_SAT, ACUSE_CANCELACION, DESCUENTO, MOTIVO_DESCUENTO, FECHA_VIGENCIA, SECOFI, NUMERO_FACTURA, NO_CERTIFICADO_SAT, ID_PRODUCTOR, UNIDAD, FECHA_TIMBRADO, CREADO_AUTOMATICAMENTE, ID_PEDIDO, ID_USUARIO_VENDEDOR, ID_EMPRESA, ID_CLIENTE, CONSECUTIVO_PEDIDO, FOLIO_PEDIDO, FECHA_PEDIDO, TIPO_MONEDA, TIEMPO_ENTREGA_DIAS, COMENTARIOS, DESCUENTO_TASA, DESCUENTO_MONTO, SUBTOTAL, TOTAL, DESCUENTO_MOTIVO, FECHA_ENTREGA, FECHA_TENTATIVA_PAGO, SALDO_PAGADO, ADELANTO, ID_COMPROBANTE_FISCAL, ID_ESTATUS_PEDIDO, LATITUD, LONGITUD, FOLIO_PEDIDO_MOVIL, NOMBRE_IMAGEN_FIRMA, IS_MODIFICADO_CONSOLA, BONIFICACION_DEVOLUCION, ID_USUARIO_CONDUCTOR_ASIGNADO, ID_USUARIO_VENDEDOR_ASIGNADO, ID_USUARIO_VENDEDOR_REASIGNADO, FECHA_LIMITE_REASIGANCION FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column C_ID_COMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_C_ID_COMPROBANTE_FISCAL = 1;

	/** 
	 * Index of column ID_TIPO_COMPROBANTE
	 */
	protected static final int COLUMN_ID_TIPO_COMPROBANTE = 2;

	/** 
	 * Index of column C_ID_EMPRESA
	 */
	protected static final int COLUMN_C_ID_EMPRESA = 3;

	/** 
	 * Index of column C_ID_CLIENTE
	 */
	protected static final int COLUMN_C_ID_CLIENTE = 4;

	/** 
	 * Index of column C_ID_ESTATUS
	 */
	protected static final int COLUMN_C_ID_ESTATUS = 5;

	/** 
	 * Index of column ID_FOLIO
	 */
	protected static final int COLUMN_ID_FOLIO = 6;

	/** 
	 * Index of column ID_FORMA_PAGO
	 */
	protected static final int COLUMN_ID_FORMA_PAGO = 7;

	/** 
	 * Index of column ID_TIPO_PAGO
	 */
	protected static final int COLUMN_ID_TIPO_PAGO = 8;

	/** 
	 * Index of column CONDICIONES_PAGO
	 */
	protected static final int COLUMN_CONDICIONES_PAGO = 9;

	/** 
	 * Index of column FOLIO_GENERADO
	 */
	protected static final int COLUMN_FOLIO_GENERADO = 10;

	/** 
	 * Index of column FECHA_IMPRESION
	 */
	protected static final int COLUMN_FECHA_IMPRESION = 11;

	/** 
	 * Index of column FECHA_CAPTURA
	 */
	protected static final int COLUMN_FECHA_CAPTURA = 12;

	/** 
	 * Index of column FECHA_PAGO
	 */
	protected static final int COLUMN_FECHA_PAGO = 13;

	/** 
	 * Index of column IMPORTE_SUBTOTAL
	 */
	protected static final int COLUMN_IMPORTE_SUBTOTAL = 14;

	/** 
	 * Index of column IMPUESTOS
	 */
	protected static final int COLUMN_IMPUESTOS = 15;

	/** 
	 * Index of column IMPORTE_NETO
	 */
	protected static final int COLUMN_IMPORTE_NETO = 16;

	/** 
	 * Index of column PARCIALIDAD
	 */
	protected static final int COLUMN_PARCIALIDAD = 17;

	/** 
	 * Index of column CONCEPTO
	 */
	protected static final int COLUMN_CONCEPTO = 18;

	/** 
	 * Index of column ARCHIVO_CFD
	 */
	protected static final int COLUMN_ARCHIVO_CFD = 19;

	/** 
	 * Index of column CADENA_ORIGINAL
	 */
	protected static final int COLUMN_CADENA_ORIGINAL = 20;

	/** 
	 * Index of column SELLO_DIGITAL
	 */
	protected static final int COLUMN_SELLO_DIGITAL = 21;

	/** 
	 * Index of column C_COMENTARIOS
	 */
	protected static final int COLUMN_C_COMENTARIOS = 22;

	/** 
	 * Index of column ID_DIVISAS
	 */
	protected static final int COLUMN_ID_DIVISAS = 23;

	/** 
	 * Index of column ID_TIPO_MONEDA
	 */
	protected static final int COLUMN_ID_TIPO_MONEDA = 24;

	/** 
	 * Index of column TIPO_DE_CAMBIO
	 */
	protected static final int COLUMN_TIPO_DE_CAMBIO = 25;

	/** 
	 * Index of column UUID
	 */
	protected static final int COLUMN_UUID = 26;

	/** 
	 * Index of column SELLO_SAT
	 */
	protected static final int COLUMN_SELLO_SAT = 27;

	/** 
	 * Index of column ACUSE_CANCELACION
	 */
	protected static final int COLUMN_ACUSE_CANCELACION = 28;

	/** 
	 * Index of column DESCUENTO
	 */
	protected static final int COLUMN_DESCUENTO = 29;

	/** 
	 * Index of column MOTIVO_DESCUENTO
	 */
	protected static final int COLUMN_MOTIVO_DESCUENTO = 30;

	/** 
	 * Index of column FECHA_VIGENCIA
	 */
	protected static final int COLUMN_FECHA_VIGENCIA = 31;

	/** 
	 * Index of column SECOFI
	 */
	protected static final int COLUMN_SECOFI = 32;

	/** 
	 * Index of column NUMERO_FACTURA
	 */
	protected static final int COLUMN_NUMERO_FACTURA = 33;

	/** 
	 * Index of column NO_CERTIFICADO_SAT
	 */
	protected static final int COLUMN_NO_CERTIFICADO_SAT = 34;

	/** 
	 * Index of column ID_PRODUCTOR
	 */
	protected static final int COLUMN_ID_PRODUCTOR = 35;

	/** 
	 * Index of column UNIDAD
	 */
	protected static final int COLUMN_UNIDAD = 36;

	/** 
	 * Index of column FECHA_TIMBRADO
	 */
	protected static final int COLUMN_FECHA_TIMBRADO = 37;

	/** 
	 * Index of column CREADO_AUTOMATICAMENTE
	 */
	protected static final int COLUMN_CREADO_AUTOMATICAMENTE = 38;

	/** 
	 * Index of column ID_PEDIDO
	 */
	protected static final int COLUMN_ID_PEDIDO = 39;

	/** 
	 * Index of column ID_USUARIO_VENDEDOR
	 */
	protected static final int COLUMN_ID_USUARIO_VENDEDOR = 40;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 41;

	/** 
	 * Index of column ID_CLIENTE
	 */
	protected static final int COLUMN_ID_CLIENTE = 42;

	/** 
	 * Index of column CONSECUTIVO_PEDIDO
	 */
	protected static final int COLUMN_CONSECUTIVO_PEDIDO = 43;

	/** 
	 * Index of column FOLIO_PEDIDO
	 */
	protected static final int COLUMN_FOLIO_PEDIDO = 44;

	/** 
	 * Index of column FECHA_PEDIDO
	 */
	protected static final int COLUMN_FECHA_PEDIDO = 45;

	/** 
	 * Index of column TIPO_MONEDA
	 */
	protected static final int COLUMN_TIPO_MONEDA = 46;

	/** 
	 * Index of column TIEMPO_ENTREGA_DIAS
	 */
	protected static final int COLUMN_TIEMPO_ENTREGA_DIAS = 47;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 48;

	/** 
	 * Index of column DESCUENTO_TASA
	 */
	protected static final int COLUMN_DESCUENTO_TASA = 49;

	/** 
	 * Index of column DESCUENTO_MONTO
	 */
	protected static final int COLUMN_DESCUENTO_MONTO = 50;

	/** 
	 * Index of column SUBTOTAL
	 */
	protected static final int COLUMN_SUBTOTAL = 51;

	/** 
	 * Index of column TOTAL
	 */
	protected static final int COLUMN_TOTAL = 52;

	/** 
	 * Index of column DESCUENTO_MOTIVO
	 */
	protected static final int COLUMN_DESCUENTO_MOTIVO = 53;

	/** 
	 * Index of column FECHA_ENTREGA
	 */
	protected static final int COLUMN_FECHA_ENTREGA = 54;

	/** 
	 * Index of column FECHA_TENTATIVA_PAGO
	 */
	protected static final int COLUMN_FECHA_TENTATIVA_PAGO = 55;

	/** 
	 * Index of column SALDO_PAGADO
	 */
	protected static final int COLUMN_SALDO_PAGADO = 56;

	/** 
	 * Index of column ADELANTO
	 */
	protected static final int COLUMN_ADELANTO = 57;

	/** 
	 * Index of column ID_COMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_ID_COMPROBANTE_FISCAL = 58;

	/** 
	 * Index of column ID_ESTATUS_PEDIDO
	 */
	protected static final int COLUMN_ID_ESTATUS_PEDIDO = 59;

	/** 
	 * Index of column LATITUD
	 */
	protected static final int COLUMN_LATITUD = 60;

	/** 
	 * Index of column LONGITUD
	 */
	protected static final int COLUMN_LONGITUD = 61;

	/** 
	 * Index of column FOLIO_PEDIDO_MOVIL
	 */
	protected static final int COLUMN_FOLIO_PEDIDO_MOVIL = 62;

	/** 
	 * Index of column NOMBRE_IMAGEN_FIRMA
	 */
	protected static final int COLUMN_NOMBRE_IMAGEN_FIRMA = 63;

	/** 
	 * Index of column IS_MODIFICADO_CONSOLA
	 */
	protected static final int COLUMN_IS_MODIFICADO_CONSOLA = 64;

	/** 
	 * Index of column BONIFICACION_DEVOLUCION
	 */
	protected static final int COLUMN_BONIFICACION_DEVOLUCION = 65;

	/** 
	 * Index of column ID_USUARIO_CONDUCTOR_ASIGNADO
	 */
	protected static final int COLUMN_ID_USUARIO_CONDUCTOR_ASIGNADO = 66;

	/** 
	 * Index of column ID_USUARIO_VENDEDOR_ASIGNADO
	 */
	protected static final int COLUMN_ID_USUARIO_VENDEDOR_ASIGNADO = 67;

	/** 
	 * Index of column ID_USUARIO_VENDEDOR_REASIGNADO
	 */
	protected static final int COLUMN_ID_USUARIO_VENDEDOR_REASIGNADO = 68;

	/** 
	 * Index of column FECHA_LIMITE_REASIGANCION
	 */
	protected static final int COLUMN_FECHA_LIMITE_REASIGANCION = 69;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 69;

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria ''.
	 */
	public VistaCxc[] findAll() throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'C_ID_COMPROBANTE_FISCAL = :cIdComprobanteFiscal'.
	 */
	public VistaCxc[] findWhereCIdComprobanteFiscalEquals(int cIdComprobanteFiscal) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE C_ID_COMPROBANTE_FISCAL = ? ORDER BY C_ID_COMPROBANTE_FISCAL", new Object[] {  new Integer(cIdComprobanteFiscal) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_TIPO_COMPROBANTE = :idTipoComprobante'.
	 */
	public VistaCxc[] findWhereIdTipoComprobanteEquals(int idTipoComprobante) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TIPO_COMPROBANTE = ? ORDER BY ID_TIPO_COMPROBANTE", new Object[] {  new Integer(idTipoComprobante) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'C_ID_EMPRESA = :cIdEmpresa'.
	 */
	public VistaCxc[] findWhereCIdEmpresaEquals(int cIdEmpresa) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE C_ID_EMPRESA = ? ORDER BY C_ID_EMPRESA", new Object[] {  new Integer(cIdEmpresa) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'C_ID_CLIENTE = :cIdCliente'.
	 */
	public VistaCxc[] findWhereCIdClienteEquals(int cIdCliente) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE C_ID_CLIENTE = ? ORDER BY C_ID_CLIENTE", new Object[] {  new Integer(cIdCliente) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'C_ID_ESTATUS = :cIdEstatus'.
	 */
	public VistaCxc[] findWhereCIdEstatusEquals(int cIdEstatus) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE C_ID_ESTATUS = ? ORDER BY C_ID_ESTATUS", new Object[] {  new Integer(cIdEstatus) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_FOLIO = :idFolio'.
	 */
	public VistaCxc[] findWhereIdFolioEquals(int idFolio) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_FOLIO = ? ORDER BY ID_FOLIO", new Object[] {  new Integer(idFolio) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_FORMA_PAGO = :idFormaPago'.
	 */
	public VistaCxc[] findWhereIdFormaPagoEquals(int idFormaPago) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_FORMA_PAGO = ? ORDER BY ID_FORMA_PAGO", new Object[] {  new Integer(idFormaPago) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_TIPO_PAGO = :idTipoPago'.
	 */
	public VistaCxc[] findWhereIdTipoPagoEquals(int idTipoPago) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TIPO_PAGO = ? ORDER BY ID_TIPO_PAGO", new Object[] {  new Integer(idTipoPago) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'CONDICIONES_PAGO = :condicionesPago'.
	 */
	public VistaCxc[] findWhereCondicionesPagoEquals(String condicionesPago) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONDICIONES_PAGO = ? ORDER BY CONDICIONES_PAGO", new Object[] { condicionesPago } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'FOLIO_GENERADO = :folioGenerado'.
	 */
	public VistaCxc[] findWhereFolioGeneradoEquals(String folioGenerado) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_GENERADO = ? ORDER BY FOLIO_GENERADO", new Object[] { folioGenerado } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'FECHA_IMPRESION = :fechaImpresion'.
	 */
	public VistaCxc[] findWhereFechaImpresionEquals(Date fechaImpresion) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_IMPRESION = ? ORDER BY FECHA_IMPRESION", new Object[] { fechaImpresion==null ? null : new java.sql.Timestamp( fechaImpresion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'FECHA_CAPTURA = :fechaCaptura'.
	 */
	public VistaCxc[] findWhereFechaCapturaEquals(Date fechaCaptura) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_CAPTURA = ? ORDER BY FECHA_CAPTURA", new Object[] { fechaCaptura==null ? null : new java.sql.Timestamp( fechaCaptura.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'FECHA_PAGO = :fechaPago'.
	 */
	public VistaCxc[] findWhereFechaPagoEquals(Date fechaPago) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_PAGO = ? ORDER BY FECHA_PAGO", new Object[] { fechaPago==null ? null : new java.sql.Timestamp( fechaPago.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'IMPORTE_SUBTOTAL = :importeSubtotal'.
	 */
	public VistaCxc[] findWhereImporteSubtotalEquals(float importeSubtotal) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPORTE_SUBTOTAL = ? ORDER BY IMPORTE_SUBTOTAL", new Object[] {  new Float(importeSubtotal) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'IMPUESTOS = :impuestos'.
	 */
	public VistaCxc[] findWhereImpuestosEquals(float impuestos) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPUESTOS = ? ORDER BY IMPUESTOS", new Object[] {  new Float(impuestos) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'IMPORTE_NETO = :importeNeto'.
	 */
	public VistaCxc[] findWhereImporteNetoEquals(float importeNeto) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPORTE_NETO = ? ORDER BY IMPORTE_NETO", new Object[] {  new Float(importeNeto) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'PARCIALIDAD = :parcialidad'.
	 */
	public VistaCxc[] findWhereParcialidadEquals(String parcialidad) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARCIALIDAD = ? ORDER BY PARCIALIDAD", new Object[] { parcialidad } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'CONCEPTO = :concepto'.
	 */
	public VistaCxc[] findWhereConceptoEquals(String concepto) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONCEPTO = ? ORDER BY CONCEPTO", new Object[] { concepto } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ARCHIVO_CFD = :archivoCfd'.
	 */
	public VistaCxc[] findWhereArchivoCfdEquals(String archivoCfd) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ARCHIVO_CFD = ? ORDER BY ARCHIVO_CFD", new Object[] { archivoCfd } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'CADENA_ORIGINAL = :cadenaOriginal'.
	 */
	public VistaCxc[] findWhereCadenaOriginalEquals(String cadenaOriginal) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CADENA_ORIGINAL = ? ORDER BY CADENA_ORIGINAL", new Object[] { cadenaOriginal } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'SELLO_DIGITAL = :selloDigital'.
	 */
	public VistaCxc[] findWhereSelloDigitalEquals(String selloDigital) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SELLO_DIGITAL = ? ORDER BY SELLO_DIGITAL", new Object[] { selloDigital } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'C_COMENTARIOS = :cComentarios'.
	 */
	public VistaCxc[] findWhereCComentariosEquals(String cComentarios) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE C_COMENTARIOS = ? ORDER BY C_COMENTARIOS", new Object[] { cComentarios } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_DIVISAS = :idDivisas'.
	 */
	public VistaCxc[] findWhereIdDivisasEquals(int idDivisas) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_DIVISAS = ? ORDER BY ID_DIVISAS", new Object[] {  new Integer(idDivisas) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_TIPO_MONEDA = :idTipoMoneda'.
	 */
	public VistaCxc[] findWhereIdTipoMonedaEquals(int idTipoMoneda) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TIPO_MONEDA = ? ORDER BY ID_TIPO_MONEDA", new Object[] {  new Integer(idTipoMoneda) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'TIPO_DE_CAMBIO = :tipoDeCambio'.
	 */
	public VistaCxc[] findWhereTipoDeCambioEquals(float tipoDeCambio) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_DE_CAMBIO = ? ORDER BY TIPO_DE_CAMBIO", new Object[] {  new Float(tipoDeCambio) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'UUID = :uuid'.
	 */
	public VistaCxc[] findWhereUuidEquals(String uuid) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UUID = ? ORDER BY UUID", new Object[] { uuid } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'SELLO_SAT = :selloSat'.
	 */
	public VistaCxc[] findWhereSelloSatEquals(String selloSat) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SELLO_SAT = ? ORDER BY SELLO_SAT", new Object[] { selloSat } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ACUSE_CANCELACION = :acuseCancelacion'.
	 */
	public VistaCxc[] findWhereAcuseCancelacionEquals(String acuseCancelacion) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACUSE_CANCELACION = ? ORDER BY ACUSE_CANCELACION", new Object[] { acuseCancelacion } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'DESCUENTO = :descuento'.
	 */
	public VistaCxc[] findWhereDescuentoEquals(float descuento) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO = ? ORDER BY DESCUENTO", new Object[] {  new Float(descuento) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'MOTIVO_DESCUENTO = :motivoDescuento'.
	 */
	public VistaCxc[] findWhereMotivoDescuentoEquals(String motivoDescuento) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVO_DESCUENTO = ? ORDER BY MOTIVO_DESCUENTO", new Object[] { motivoDescuento } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'FECHA_VIGENCIA = :fechaVigencia'.
	 */
	public VistaCxc[] findWhereFechaVigenciaEquals(String fechaVigencia) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_VIGENCIA = ? ORDER BY FECHA_VIGENCIA", new Object[] { fechaVigencia } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'SECOFI = :secofi'.
	 */
	public VistaCxc[] findWhereSecofiEquals(String secofi) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SECOFI = ? ORDER BY SECOFI", new Object[] { secofi } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'NUMERO_FACTURA = :numeroFactura'.
	 */
	public VistaCxc[] findWhereNumeroFacturaEquals(String numeroFactura) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMERO_FACTURA = ? ORDER BY NUMERO_FACTURA", new Object[] { numeroFactura } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'NO_CERTIFICADO_SAT = :noCertificadoSat'.
	 */
	public VistaCxc[] findWhereNoCertificadoSatEquals(String noCertificadoSat) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NO_CERTIFICADO_SAT = ? ORDER BY NO_CERTIFICADO_SAT", new Object[] { noCertificadoSat } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_PRODUCTOR = :idProductor'.
	 */
	public VistaCxc[] findWhereIdProductorEquals(int idProductor) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PRODUCTOR = ? ORDER BY ID_PRODUCTOR", new Object[] {  new Integer(idProductor) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'UNIDAD = :unidad'.
	 */
	public VistaCxc[] findWhereUnidadEquals(String unidad) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UNIDAD = ? ORDER BY UNIDAD", new Object[] { unidad } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'FECHA_TIMBRADO = :fechaTimbrado'.
	 */
	public VistaCxc[] findWhereFechaTimbradoEquals(Date fechaTimbrado) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_TIMBRADO = ? ORDER BY FECHA_TIMBRADO", new Object[] { fechaTimbrado==null ? null : new java.sql.Timestamp( fechaTimbrado.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'CREADO_AUTOMATICAMENTE = :creadoAutomaticamente'.
	 */
	public VistaCxc[] findWhereCreadoAutomaticamenteEquals(int creadoAutomaticamente) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREADO_AUTOMATICAMENTE = ? ORDER BY CREADO_AUTOMATICAMENTE", new Object[] {  new Integer(creadoAutomaticamente) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_PEDIDO = :idPedido'.
	 */
	public VistaCxc[] findWhereIdPedidoEquals(int idPedido) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PEDIDO = ? ORDER BY ID_PEDIDO", new Object[] {  new Integer(idPedido) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_USUARIO_VENDEDOR = :idUsuarioVendedor'.
	 */
	public VistaCxc[] findWhereIdUsuarioVendedorEquals(int idUsuarioVendedor) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO_VENDEDOR = ? ORDER BY ID_USUARIO_VENDEDOR", new Object[] {  new Integer(idUsuarioVendedor) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public VistaCxc[] findWhereIdEmpresaEquals(int idEmpresa) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public VistaCxc[] findWhereIdClienteEquals(int idCliente) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CLIENTE = ? ORDER BY ID_CLIENTE", new Object[] {  new Integer(idCliente) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'CONSECUTIVO_PEDIDO = :consecutivoPedido'.
	 */
	public VistaCxc[] findWhereConsecutivoPedidoEquals(int consecutivoPedido) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONSECUTIVO_PEDIDO = ? ORDER BY CONSECUTIVO_PEDIDO", new Object[] {  new Integer(consecutivoPedido) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'FOLIO_PEDIDO = :folioPedido'.
	 */
	public VistaCxc[] findWhereFolioPedidoEquals(String folioPedido) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_PEDIDO = ? ORDER BY FOLIO_PEDIDO", new Object[] { folioPedido } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'FECHA_PEDIDO = :fechaPedido'.
	 */
	public VistaCxc[] findWhereFechaPedidoEquals(Date fechaPedido) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_PEDIDO = ? ORDER BY FECHA_PEDIDO", new Object[] { fechaPedido==null ? null : new java.sql.Timestamp( fechaPedido.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'TIPO_MONEDA = :tipoMoneda'.
	 */
	public VistaCxc[] findWhereTipoMonedaEquals(String tipoMoneda) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_MONEDA = ? ORDER BY TIPO_MONEDA", new Object[] { tipoMoneda } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'TIEMPO_ENTREGA_DIAS = :tiempoEntregaDias'.
	 */
	public VistaCxc[] findWhereTiempoEntregaDiasEquals(int tiempoEntregaDias) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIEMPO_ENTREGA_DIAS = ? ORDER BY TIEMPO_ENTREGA_DIAS", new Object[] {  new Integer(tiempoEntregaDias) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public VistaCxc[] findWhereComentariosEquals(String comentarios) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'DESCUENTO_TASA = :descuentoTasa'.
	 */
	public VistaCxc[] findWhereDescuentoTasaEquals(double descuentoTasa) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_TASA = ? ORDER BY DESCUENTO_TASA", new Object[] {  new Double(descuentoTasa) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'DESCUENTO_MONTO = :descuentoMonto'.
	 */
	public VistaCxc[] findWhereDescuentoMontoEquals(double descuentoMonto) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_MONTO = ? ORDER BY DESCUENTO_MONTO", new Object[] {  new Double(descuentoMonto) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'SUBTOTAL = :subtotal'.
	 */
	public VistaCxc[] findWhereSubtotalEquals(double subtotal) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUBTOTAL = ? ORDER BY SUBTOTAL", new Object[] {  new Double(subtotal) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'TOTAL = :total'.
	 */
	public VistaCxc[] findWhereTotalEquals(double total) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TOTAL = ? ORDER BY TOTAL", new Object[] {  new Double(total) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'DESCUENTO_MOTIVO = :descuentoMotivo'.
	 */
	public VistaCxc[] findWhereDescuentoMotivoEquals(String descuentoMotivo) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_MOTIVO = ? ORDER BY DESCUENTO_MOTIVO", new Object[] { descuentoMotivo } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'FECHA_ENTREGA = :fechaEntrega'.
	 */
	public VistaCxc[] findWhereFechaEntregaEquals(Date fechaEntrega) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_ENTREGA = ? ORDER BY FECHA_ENTREGA", new Object[] { fechaEntrega==null ? null : new java.sql.Timestamp( fechaEntrega.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'FECHA_TENTATIVA_PAGO = :fechaTentativaPago'.
	 */
	public VistaCxc[] findWhereFechaTentativaPagoEquals(Date fechaTentativaPago) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_TENTATIVA_PAGO = ? ORDER BY FECHA_TENTATIVA_PAGO", new Object[] { fechaTentativaPago==null ? null : new java.sql.Timestamp( fechaTentativaPago.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'SALDO_PAGADO = :saldoPagado'.
	 */
	public VistaCxc[] findWhereSaldoPagadoEquals(double saldoPagado) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SALDO_PAGADO = ? ORDER BY SALDO_PAGADO", new Object[] {  new Double(saldoPagado) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ADELANTO = :adelanto'.
	 */
	public VistaCxc[] findWhereAdelantoEquals(double adelanto) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ADELANTO = ? ORDER BY ADELANTO", new Object[] {  new Double(adelanto) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public VistaCxc[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_FISCAL = ? ORDER BY ID_COMPROBANTE_FISCAL", new Object[] {  new Integer(idComprobanteFiscal) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_ESTATUS_PEDIDO = :idEstatusPedido'.
	 */
	public VistaCxc[] findWhereIdEstatusPedidoEquals(short idEstatusPedido) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS_PEDIDO = ? ORDER BY ID_ESTATUS_PEDIDO", new Object[] {  new Short(idEstatusPedido) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'LATITUD = :latitud'.
	 */
	public VistaCxc[] findWhereLatitudEquals(double latitud) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATITUD = ? ORDER BY LATITUD", new Object[] {  new Double(latitud) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'LONGITUD = :longitud'.
	 */
	public VistaCxc[] findWhereLongitudEquals(double longitud) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LONGITUD = ? ORDER BY LONGITUD", new Object[] {  new Double(longitud) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'FOLIO_PEDIDO_MOVIL = :folioPedidoMovil'.
	 */
	public VistaCxc[] findWhereFolioPedidoMovilEquals(String folioPedidoMovil) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_PEDIDO_MOVIL = ? ORDER BY FOLIO_PEDIDO_MOVIL", new Object[] { folioPedidoMovil } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'NOMBRE_IMAGEN_FIRMA = :nombreImagenFirma'.
	 */
	public VistaCxc[] findWhereNombreImagenFirmaEquals(String nombreImagenFirma) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_IMAGEN_FIRMA = ? ORDER BY NOMBRE_IMAGEN_FIRMA", new Object[] { nombreImagenFirma } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'IS_MODIFICADO_CONSOLA = :isModificadoConsola'.
	 */
	public VistaCxc[] findWhereIsModificadoConsolaEquals(short isModificadoConsola) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IS_MODIFICADO_CONSOLA = ? ORDER BY IS_MODIFICADO_CONSOLA", new Object[] {  new Short(isModificadoConsola) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'BONIFICACION_DEVOLUCION = :bonificacionDevolucion'.
	 */
	public VistaCxc[] findWhereBonificacionDevolucionEquals(double bonificacionDevolucion) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BONIFICACION_DEVOLUCION = ? ORDER BY BONIFICACION_DEVOLUCION", new Object[] {  new Double(bonificacionDevolucion) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_USUARIO_CONDUCTOR_ASIGNADO = :idUsuarioConductorAsignado'.
	 */
	public VistaCxc[] findWhereIdUsuarioConductorAsignadoEquals(int idUsuarioConductorAsignado) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO_CONDUCTOR_ASIGNADO = ? ORDER BY ID_USUARIO_CONDUCTOR_ASIGNADO", new Object[] {  new Integer(idUsuarioConductorAsignado) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_USUARIO_VENDEDOR_ASIGNADO = :idUsuarioVendedorAsignado'.
	 */
	public VistaCxc[] findWhereIdUsuarioVendedorAsignadoEquals(int idUsuarioVendedorAsignado) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO_VENDEDOR_ASIGNADO = ? ORDER BY ID_USUARIO_VENDEDOR_ASIGNADO", new Object[] {  new Integer(idUsuarioVendedorAsignado) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'ID_USUARIO_VENDEDOR_REASIGNADO = :idUsuarioVendedorReasignado'.
	 */
	public VistaCxc[] findWhereIdUsuarioVendedorReasignadoEquals(int idUsuarioVendedorReasignado) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO_VENDEDOR_REASIGNADO = ? ORDER BY ID_USUARIO_VENDEDOR_REASIGNADO", new Object[] {  new Integer(idUsuarioVendedorReasignado) } );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the criteria 'FECHA_LIMITE_REASIGANCION = :fechaLimiteReasigancion'.
	 */
	public VistaCxc[] findWhereFechaLimiteReasigancionEquals(Date fechaLimiteReasigancion) throws VistaCxcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_LIMITE_REASIGANCION = ? ORDER BY FECHA_LIMITE_REASIGANCION", new Object[] { fechaLimiteReasigancion==null ? null : new java.sql.Date( fechaLimiteReasigancion.getTime() ) } );
	}

	/**
	 * Method 'VistaCxcDaoImpl'
	 * 
	 */
	public VistaCxcDaoImpl()
	{
	}

	/**
	 * Method 'VistaCxcDaoImpl'
	 * 
	 * @param userConn
	 */
	public VistaCxcDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "vista_cxc";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected VistaCxc fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			VistaCxc dto = new VistaCxc();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected VistaCxc[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			VistaCxc dto = new VistaCxc();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		VistaCxc ret[] = new VistaCxc[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(VistaCxc dto, ResultSet rs) throws SQLException
	{
		dto.setCIdComprobanteFiscal( rs.getInt( COLUMN_C_ID_COMPROBANTE_FISCAL ) );
		if (rs.wasNull()) {
			dto.setCIdComprobanteFiscalNull( true );
		}
		
		dto.setIdTipoComprobante( rs.getInt( COLUMN_ID_TIPO_COMPROBANTE ) );
		if (rs.wasNull()) {
			dto.setIdTipoComprobanteNull( true );
		}
		
		dto.setCIdEmpresa( rs.getInt( COLUMN_C_ID_EMPRESA ) );
		if (rs.wasNull()) {
			dto.setCIdEmpresaNull( true );
		}
		
		dto.setCIdCliente( rs.getInt( COLUMN_C_ID_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setCIdClienteNull( true );
		}
		
		dto.setCIdEstatus( rs.getInt( COLUMN_C_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setCIdEstatusNull( true );
		}
		
		dto.setIdFolio( rs.getInt( COLUMN_ID_FOLIO ) );
		if (rs.wasNull()) {
			dto.setIdFolioNull( true );
		}
		
		dto.setIdFormaPago( rs.getInt( COLUMN_ID_FORMA_PAGO ) );
		if (rs.wasNull()) {
			dto.setIdFormaPagoNull( true );
		}
		
		dto.setIdTipoPago( rs.getInt( COLUMN_ID_TIPO_PAGO ) );
		if (rs.wasNull()) {
			dto.setIdTipoPagoNull( true );
		}
		
		dto.setCondicionesPago( rs.getString( COLUMN_CONDICIONES_PAGO ) );
		dto.setFolioGenerado( rs.getString( COLUMN_FOLIO_GENERADO ) );
		dto.setFechaImpresion( rs.getTimestamp(COLUMN_FECHA_IMPRESION ) );
		dto.setFechaCaptura( rs.getTimestamp(COLUMN_FECHA_CAPTURA ) );
		dto.setFechaPago( rs.getTimestamp(COLUMN_FECHA_PAGO ) );
		dto.setImporteSubtotal( rs.getFloat( COLUMN_IMPORTE_SUBTOTAL ) );
		if (rs.wasNull()) {
			dto.setImporteSubtotalNull( true );
		}
		
		dto.setImpuestos( rs.getFloat( COLUMN_IMPUESTOS ) );
		if (rs.wasNull()) {
			dto.setImpuestosNull( true );
		}
		
		dto.setImporteNeto( rs.getFloat( COLUMN_IMPORTE_NETO ) );
		if (rs.wasNull()) {
			dto.setImporteNetoNull( true );
		}
		
		dto.setParcialidad( rs.getString( COLUMN_PARCIALIDAD ) );
		dto.setConcepto( rs.getString( COLUMN_CONCEPTO ) );
		dto.setArchivoCfd( rs.getString( COLUMN_ARCHIVO_CFD ) );
		dto.setCadenaOriginal( rs.getString( COLUMN_CADENA_ORIGINAL ) );
		dto.setSelloDigital( rs.getString( COLUMN_SELLO_DIGITAL ) );
		dto.setCComentarios( rs.getString( COLUMN_C_COMENTARIOS ) );
		dto.setIdDivisas( rs.getInt( COLUMN_ID_DIVISAS ) );
		if (rs.wasNull()) {
			dto.setIdDivisasNull( true );
		}
		
		dto.setIdTipoMoneda( rs.getInt( COLUMN_ID_TIPO_MONEDA ) );
		if (rs.wasNull()) {
			dto.setIdTipoMonedaNull( true );
		}
		
		dto.setTipoDeCambio( rs.getFloat( COLUMN_TIPO_DE_CAMBIO ) );
		if (rs.wasNull()) {
			dto.setTipoDeCambioNull( true );
		}
		
		dto.setUuid( rs.getString( COLUMN_UUID ) );
		dto.setSelloSat( rs.getString( COLUMN_SELLO_SAT ) );
		dto.setAcuseCancelacion( rs.getString( COLUMN_ACUSE_CANCELACION ) );
		dto.setDescuento( rs.getFloat( COLUMN_DESCUENTO ) );
		if (rs.wasNull()) {
			dto.setDescuentoNull( true );
		}
		
		dto.setMotivoDescuento( rs.getString( COLUMN_MOTIVO_DESCUENTO ) );
		dto.setFechaVigencia( rs.getString( COLUMN_FECHA_VIGENCIA ) );
		dto.setSecofi( rs.getString( COLUMN_SECOFI ) );
		dto.setNumeroFactura( rs.getString( COLUMN_NUMERO_FACTURA ) );
		dto.setNoCertificadoSat( rs.getString( COLUMN_NO_CERTIFICADO_SAT ) );
		dto.setIdProductor( rs.getInt( COLUMN_ID_PRODUCTOR ) );
		if (rs.wasNull()) {
			dto.setIdProductorNull( true );
		}
		
		dto.setUnidad( rs.getString( COLUMN_UNIDAD ) );
		dto.setFechaTimbrado( rs.getTimestamp(COLUMN_FECHA_TIMBRADO ) );
		dto.setCreadoAutomaticamente( rs.getInt( COLUMN_CREADO_AUTOMATICAMENTE ) );
		if (rs.wasNull()) {
			dto.setCreadoAutomaticamenteNull( true );
		}
		
		dto.setIdPedido( rs.getInt( COLUMN_ID_PEDIDO ) );
		if (rs.wasNull()) {
			dto.setIdPedidoNull( true );
		}
		
		dto.setIdUsuarioVendedor( rs.getInt( COLUMN_ID_USUARIO_VENDEDOR ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioVendedorNull( true );
		}
		
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		if (rs.wasNull()) {
			dto.setIdEmpresaNull( true );
		}
		
		dto.setIdCliente( rs.getInt( COLUMN_ID_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setIdClienteNull( true );
		}
		
		dto.setConsecutivoPedido( rs.getInt( COLUMN_CONSECUTIVO_PEDIDO ) );
		if (rs.wasNull()) {
			dto.setConsecutivoPedidoNull( true );
		}
		
		dto.setFolioPedido( rs.getString( COLUMN_FOLIO_PEDIDO ) );
		dto.setFechaPedido( rs.getTimestamp(COLUMN_FECHA_PEDIDO ) );
		dto.setTipoMoneda( rs.getString( COLUMN_TIPO_MONEDA ) );
		dto.setTiempoEntregaDias( rs.getInt( COLUMN_TIEMPO_ENTREGA_DIAS ) );
		if (rs.wasNull()) {
			dto.setTiempoEntregaDiasNull( true );
		}
		
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setDescuentoTasa( rs.getDouble( COLUMN_DESCUENTO_TASA ) );
		if (rs.wasNull()) {
			dto.setDescuentoTasaNull( true );
		}
		
		dto.setDescuentoMonto( rs.getDouble( COLUMN_DESCUENTO_MONTO ) );
		if (rs.wasNull()) {
			dto.setDescuentoMontoNull( true );
		}
		
		dto.setSubtotal( rs.getDouble( COLUMN_SUBTOTAL ) );
		if (rs.wasNull()) {
			dto.setSubtotalNull( true );
		}
		
		dto.setTotal( rs.getDouble( COLUMN_TOTAL ) );
		if (rs.wasNull()) {
			dto.setTotalNull( true );
		}
		
		dto.setDescuentoMotivo( rs.getString( COLUMN_DESCUENTO_MOTIVO ) );
		dto.setFechaEntrega( rs.getTimestamp(COLUMN_FECHA_ENTREGA ) );
		dto.setFechaTentativaPago( rs.getTimestamp(COLUMN_FECHA_TENTATIVA_PAGO ) );
		dto.setSaldoPagado( rs.getDouble( COLUMN_SALDO_PAGADO ) );
		if (rs.wasNull()) {
			dto.setSaldoPagadoNull( true );
		}
		
		dto.setAdelanto( rs.getDouble( COLUMN_ADELANTO ) );
		if (rs.wasNull()) {
			dto.setAdelantoNull( true );
		}
		
		dto.setIdComprobanteFiscal( rs.getInt( COLUMN_ID_COMPROBANTE_FISCAL ) );
		if (rs.wasNull()) {
			dto.setIdComprobanteFiscalNull( true );
		}
		
		dto.setIdEstatusPedido( rs.getShort( COLUMN_ID_ESTATUS_PEDIDO ) );
		if (rs.wasNull()) {
			dto.setIdEstatusPedidoNull( true );
		}
		
		dto.setLatitud( rs.getDouble( COLUMN_LATITUD ) );
		if (rs.wasNull()) {
			dto.setLatitudNull( true );
		}
		
		dto.setLongitud( rs.getDouble( COLUMN_LONGITUD ) );
		if (rs.wasNull()) {
			dto.setLongitudNull( true );
		}
		
		dto.setFolioPedidoMovil( rs.getString( COLUMN_FOLIO_PEDIDO_MOVIL ) );
		dto.setNombreImagenFirma( rs.getString( COLUMN_NOMBRE_IMAGEN_FIRMA ) );
		dto.setIsModificadoConsola( rs.getShort( COLUMN_IS_MODIFICADO_CONSOLA ) );
		if (rs.wasNull()) {
			dto.setIsModificadoConsolaNull( true );
		}
		
		dto.setBonificacionDevolucion( rs.getDouble( COLUMN_BONIFICACION_DEVOLUCION ) );
		if (rs.wasNull()) {
			dto.setBonificacionDevolucionNull( true );
		}
		
		dto.setIdUsuarioConductorAsignado( rs.getInt( COLUMN_ID_USUARIO_CONDUCTOR_ASIGNADO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioConductorAsignadoNull( true );
		}
		
		dto.setIdUsuarioVendedorAsignado( rs.getInt( COLUMN_ID_USUARIO_VENDEDOR_ASIGNADO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioVendedorAsignadoNull( true );
		}
		
		dto.setIdUsuarioVendedorReasignado( rs.getInt( COLUMN_ID_USUARIO_VENDEDOR_REASIGNADO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioVendedorReasignadoNull( true );
		}
		
		dto.setFechaLimiteReasigancion( rs.getDate(COLUMN_FECHA_LIMITE_REASIGANCION ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(VistaCxc dto)
	{
		dto.setCIdComprobanteFiscalModified( false );
		dto.setIdTipoComprobanteModified( false );
		dto.setCIdEmpresaModified( false );
		dto.setCIdClienteModified( false );
		dto.setCIdEstatusModified( false );
		dto.setIdFolioModified( false );
		dto.setIdFormaPagoModified( false );
		dto.setIdTipoPagoModified( false );
		dto.setCondicionesPagoModified( false );
		dto.setFolioGeneradoModified( false );
		dto.setFechaImpresionModified( false );
		dto.setFechaCapturaModified( false );
		dto.setFechaPagoModified( false );
		dto.setImporteSubtotalModified( false );
		dto.setImpuestosModified( false );
		dto.setImporteNetoModified( false );
		dto.setParcialidadModified( false );
		dto.setConceptoModified( false );
		dto.setArchivoCfdModified( false );
		dto.setCadenaOriginalModified( false );
		dto.setSelloDigitalModified( false );
		dto.setCComentariosModified( false );
		dto.setIdDivisasModified( false );
		dto.setIdTipoMonedaModified( false );
		dto.setTipoDeCambioModified( false );
		dto.setUuidModified( false );
		dto.setSelloSatModified( false );
		dto.setAcuseCancelacionModified( false );
		dto.setDescuentoModified( false );
		dto.setMotivoDescuentoModified( false );
		dto.setFechaVigenciaModified( false );
		dto.setSecofiModified( false );
		dto.setNumeroFacturaModified( false );
		dto.setNoCertificadoSatModified( false );
		dto.setIdProductorModified( false );
		dto.setUnidadModified( false );
		dto.setFechaTimbradoModified( false );
		dto.setCreadoAutomaticamenteModified( false );
		dto.setIdPedidoModified( false );
		dto.setIdUsuarioVendedorModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdClienteModified( false );
		dto.setConsecutivoPedidoModified( false );
		dto.setFolioPedidoModified( false );
		dto.setFechaPedidoModified( false );
		dto.setTipoMonedaModified( false );
		dto.setTiempoEntregaDiasModified( false );
		dto.setComentariosModified( false );
		dto.setDescuentoTasaModified( false );
		dto.setDescuentoMontoModified( false );
		dto.setSubtotalModified( false );
		dto.setTotalModified( false );
		dto.setDescuentoMotivoModified( false );
		dto.setFechaEntregaModified( false );
		dto.setFechaTentativaPagoModified( false );
		dto.setSaldoPagadoModified( false );
		dto.setAdelantoModified( false );
		dto.setIdComprobanteFiscalModified( false );
		dto.setIdEstatusPedidoModified( false );
		dto.setLatitudModified( false );
		dto.setLongitudModified( false );
		dto.setFolioPedidoMovilModified( false );
		dto.setNombreImagenFirmaModified( false );
		dto.setIsModificadoConsolaModified( false );
		dto.setBonificacionDevolucionModified( false );
		dto.setIdUsuarioConductorAsignadoModified( false );
		dto.setIdUsuarioVendedorAsignadoModified( false );
		dto.setIdUsuarioVendedorReasignadoModified( false );
		dto.setFechaLimiteReasigancionModified( false );
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the specified arbitrary SQL statement
	 */
	public VistaCxc[] findByDynamicSelect(String sql, Object[] sqlParams) throws VistaCxcDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VistaCxcDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the vista_cxc table that match the specified arbitrary SQL statement
	 */
	public VistaCxc[] findByDynamicWhere(String sql, Object[] sqlParams) throws VistaCxcDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VistaCxcDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
