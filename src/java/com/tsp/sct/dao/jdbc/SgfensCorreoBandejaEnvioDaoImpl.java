/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SgfensCorreoBandejaEnvioDaoImpl extends AbstractDAO implements SgfensCorreoBandejaEnvioDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_CORREO, ID_EMPRESA, DESTINATARIO, DESTINATARIO_CC, DESTINATARIO_CCO, ASUNTO, CONTENIDO, ARCHIVOS_ADJUNTOS_ID, FECHA_ORIGINAL, IS_ENVIADO, FECHA_ENVIO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_CORREO, ID_EMPRESA, DESTINATARIO, DESTINATARIO_CC, DESTINATARIO_CCO, ASUNTO, CONTENIDO, ARCHIVOS_ADJUNTOS_ID, FECHA_ORIGINAL, IS_ENVIADO, FECHA_ENVIO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_CORREO = ?, ID_EMPRESA = ?, DESTINATARIO = ?, DESTINATARIO_CC = ?, DESTINATARIO_CCO = ?, ASUNTO = ?, CONTENIDO = ?, ARCHIVOS_ADJUNTOS_ID = ?, FECHA_ORIGINAL = ?, IS_ENVIADO = ?, FECHA_ENVIO = ? WHERE ID_CORREO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_CORREO = ?";

	/** 
	 * Index of column ID_CORREO
	 */
	protected static final int COLUMN_ID_CORREO = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column DESTINATARIO
	 */
	protected static final int COLUMN_DESTINATARIO = 3;

	/** 
	 * Index of column DESTINATARIO_CC
	 */
	protected static final int COLUMN_DESTINATARIO_CC = 4;

	/** 
	 * Index of column DESTINATARIO_CCO
	 */
	protected static final int COLUMN_DESTINATARIO_CCO = 5;

	/** 
	 * Index of column ASUNTO
	 */
	protected static final int COLUMN_ASUNTO = 6;

	/** 
	 * Index of column CONTENIDO
	 */
	protected static final int COLUMN_CONTENIDO = 7;

	/** 
	 * Index of column ARCHIVOS_ADJUNTOS_ID
	 */
	protected static final int COLUMN_ARCHIVOS_ADJUNTOS_ID = 8;

	/** 
	 * Index of column FECHA_ORIGINAL
	 */
	protected static final int COLUMN_FECHA_ORIGINAL = 9;

	/** 
	 * Index of column IS_ENVIADO
	 */
	protected static final int COLUMN_IS_ENVIADO = 10;

	/** 
	 * Index of column FECHA_ENVIO
	 */
	protected static final int COLUMN_FECHA_ENVIO = 11;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 11;

	/** 
	 * Index of primary-key column ID_CORREO
	 */
	protected static final int PK_COLUMN_ID_CORREO = 1;

	/** 
	 * Inserts a new row in the SGFENS_CORREO_BANDEJA_ENVIO table.
	 */
	public SgfensCorreoBandejaEnvioPk insert(SgfensCorreoBandejaEnvio dto) throws SgfensCorreoBandejaEnvioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdCorreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CORREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDestinatarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESTINATARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDestinatarioCcModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESTINATARIO_CC" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDestinatarioCcoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESTINATARIO_CCO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAsuntoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ASUNTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContenidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CONTENIDO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isArchivosAdjuntosIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ARCHIVOS_ADJUNTOS_ID" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaOriginalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_ORIGINAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsEnviadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IS_ENVIADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaEnvioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_ENVIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdCorreoModified()) {
				stmt.setInt( index++, dto.getIdCorreo() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isDestinatarioModified()) {
				stmt.setString( index++, dto.getDestinatario() );
			}
		
			if (dto.isDestinatarioCcModified()) {
				stmt.setString( index++, dto.getDestinatarioCc() );
			}
		
			if (dto.isDestinatarioCcoModified()) {
				stmt.setString( index++, dto.getDestinatarioCco() );
			}
		
			if (dto.isAsuntoModified()) {
				stmt.setString( index++, dto.getAsunto() );
			}
		
			if (dto.isContenidoModified()) {
				stmt.setString( index++, dto.getContenido() );
			}
		
			if (dto.isArchivosAdjuntosIdModified()) {
				stmt.setString( index++, dto.getArchivosAdjuntosId() );
			}
		
			if (dto.isFechaOriginalModified()) {
				stmt.setTimestamp(index++, dto.getFechaOriginal()==null ? null : new java.sql.Timestamp( dto.getFechaOriginal().getTime() ) );
			}
		
			if (dto.isIsEnviadoModified()) {
				stmt.setShort( index++, dto.getIsEnviado() );
			}
		
			if (dto.isFechaEnvioModified()) {
				stmt.setTimestamp(index++, dto.getFechaEnvio()==null ? null : new java.sql.Timestamp( dto.getFechaEnvio().getTime() ) );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdCorreo( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCorreoBandejaEnvioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the SGFENS_CORREO_BANDEJA_ENVIO table.
	 */
	public void update(SgfensCorreoBandejaEnvioPk pk, SgfensCorreoBandejaEnvio dto) throws SgfensCorreoBandejaEnvioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdCorreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CORREO=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isDestinatarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESTINATARIO=?" );
				modified=true;
			}
		
			if (dto.isDestinatarioCcModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESTINATARIO_CC=?" );
				modified=true;
			}
		
			if (dto.isDestinatarioCcoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESTINATARIO_CCO=?" );
				modified=true;
			}
		
			if (dto.isAsuntoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ASUNTO=?" );
				modified=true;
			}
		
			if (dto.isContenidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONTENIDO=?" );
				modified=true;
			}
		
			if (dto.isArchivosAdjuntosIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ARCHIVOS_ADJUNTOS_ID=?" );
				modified=true;
			}
		
			if (dto.isFechaOriginalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_ORIGINAL=?" );
				modified=true;
			}
		
			if (dto.isIsEnviadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IS_ENVIADO=?" );
				modified=true;
			}
		
			if (dto.isFechaEnvioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_ENVIO=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_CORREO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdCorreoModified()) {
				stmt.setInt( index++, dto.getIdCorreo() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isDestinatarioModified()) {
				stmt.setString( index++, dto.getDestinatario() );
			}
		
			if (dto.isDestinatarioCcModified()) {
				stmt.setString( index++, dto.getDestinatarioCc() );
			}
		
			if (dto.isDestinatarioCcoModified()) {
				stmt.setString( index++, dto.getDestinatarioCco() );
			}
		
			if (dto.isAsuntoModified()) {
				stmt.setString( index++, dto.getAsunto() );
			}
		
			if (dto.isContenidoModified()) {
				stmt.setString( index++, dto.getContenido() );
			}
		
			if (dto.isArchivosAdjuntosIdModified()) {
				stmt.setString( index++, dto.getArchivosAdjuntosId() );
			}
		
			if (dto.isFechaOriginalModified()) {
				stmt.setTimestamp(index++, dto.getFechaOriginal()==null ? null : new java.sql.Timestamp( dto.getFechaOriginal().getTime() ) );
			}
		
			if (dto.isIsEnviadoModified()) {
				stmt.setShort( index++, dto.getIsEnviado() );
			}
		
			if (dto.isFechaEnvioModified()) {
				stmt.setTimestamp(index++, dto.getFechaEnvio()==null ? null : new java.sql.Timestamp( dto.getFechaEnvio().getTime() ) );
			}
		
			stmt.setInt( index++, pk.getIdCorreo() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCorreoBandejaEnvioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the SGFENS_CORREO_BANDEJA_ENVIO table.
	 */
	public void delete(SgfensCorreoBandejaEnvioPk pk) throws SgfensCorreoBandejaEnvioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdCorreo() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCorreoBandejaEnvioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the SGFENS_CORREO_BANDEJA_ENVIO table that matches the specified primary-key value.
	 */
	public SgfensCorreoBandejaEnvio findByPrimaryKey(SgfensCorreoBandejaEnvioPk pk) throws SgfensCorreoBandejaEnvioDaoException
	{
		return findByPrimaryKey( pk.getIdCorreo() );
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the criteria 'ID_CORREO = :idCorreo'.
	 */
	public SgfensCorreoBandejaEnvio findByPrimaryKey(int idCorreo) throws SgfensCorreoBandejaEnvioDaoException
	{
		SgfensCorreoBandejaEnvio ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_CORREO = ?", new Object[] {  new Integer(idCorreo) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the criteria ''.
	 */
	public SgfensCorreoBandejaEnvio[] findAll() throws SgfensCorreoBandejaEnvioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_CORREO", null );
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the criteria 'ID_CORREO = :idCorreo'.
	 */
	public SgfensCorreoBandejaEnvio[] findWhereIdCorreoEquals(int idCorreo) throws SgfensCorreoBandejaEnvioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CORREO = ? ORDER BY ID_CORREO", new Object[] {  new Integer(idCorreo) } );
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public SgfensCorreoBandejaEnvio[] findWhereIdEmpresaEquals(int idEmpresa) throws SgfensCorreoBandejaEnvioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the criteria 'DESTINATARIO = :destinatario'.
	 */
	public SgfensCorreoBandejaEnvio[] findWhereDestinatarioEquals(String destinatario) throws SgfensCorreoBandejaEnvioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESTINATARIO = ? ORDER BY DESTINATARIO", new Object[] { destinatario } );
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the criteria 'DESTINATARIO_CC = :destinatarioCc'.
	 */
	public SgfensCorreoBandejaEnvio[] findWhereDestinatarioCcEquals(String destinatarioCc) throws SgfensCorreoBandejaEnvioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESTINATARIO_CC = ? ORDER BY DESTINATARIO_CC", new Object[] { destinatarioCc } );
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the criteria 'DESTINATARIO_CCO = :destinatarioCco'.
	 */
	public SgfensCorreoBandejaEnvio[] findWhereDestinatarioCcoEquals(String destinatarioCco) throws SgfensCorreoBandejaEnvioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESTINATARIO_CCO = ? ORDER BY DESTINATARIO_CCO", new Object[] { destinatarioCco } );
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the criteria 'ASUNTO = :asunto'.
	 */
	public SgfensCorreoBandejaEnvio[] findWhereAsuntoEquals(String asunto) throws SgfensCorreoBandejaEnvioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ASUNTO = ? ORDER BY ASUNTO", new Object[] { asunto } );
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the criteria 'CONTENIDO = :contenido'.
	 */
	public SgfensCorreoBandejaEnvio[] findWhereContenidoEquals(String contenido) throws SgfensCorreoBandejaEnvioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTENIDO = ? ORDER BY CONTENIDO", new Object[] { contenido } );
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the criteria 'ARCHIVOS_ADJUNTOS_ID = :archivosAdjuntosId'.
	 */
	public SgfensCorreoBandejaEnvio[] findWhereArchivosAdjuntosIdEquals(String archivosAdjuntosId) throws SgfensCorreoBandejaEnvioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ARCHIVOS_ADJUNTOS_ID = ? ORDER BY ARCHIVOS_ADJUNTOS_ID", new Object[] { archivosAdjuntosId } );
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the criteria 'FECHA_ORIGINAL = :fechaOriginal'.
	 */
	public SgfensCorreoBandejaEnvio[] findWhereFechaOriginalEquals(Date fechaOriginal) throws SgfensCorreoBandejaEnvioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_ORIGINAL = ? ORDER BY FECHA_ORIGINAL", new Object[] { fechaOriginal==null ? null : new java.sql.Timestamp( fechaOriginal.getTime() ) } );
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the criteria 'IS_ENVIADO = :isEnviado'.
	 */
	public SgfensCorreoBandejaEnvio[] findWhereIsEnviadoEquals(short isEnviado) throws SgfensCorreoBandejaEnvioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IS_ENVIADO = ? ORDER BY IS_ENVIADO", new Object[] {  new Short(isEnviado) } );
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the criteria 'FECHA_ENVIO = :fechaEnvio'.
	 */
	public SgfensCorreoBandejaEnvio[] findWhereFechaEnvioEquals(Date fechaEnvio) throws SgfensCorreoBandejaEnvioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_ENVIO = ? ORDER BY FECHA_ENVIO", new Object[] { fechaEnvio==null ? null : new java.sql.Timestamp( fechaEnvio.getTime() ) } );
	}

	/**
	 * Method 'SgfensCorreoBandejaEnvioDaoImpl'
	 * 
	 */
	public SgfensCorreoBandejaEnvioDaoImpl()
	{
	}

	/**
	 * Method 'SgfensCorreoBandejaEnvioDaoImpl'
	 * 
	 * @param userConn
	 */
	public SgfensCorreoBandejaEnvioDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "SGFENS_CORREO_BANDEJA_ENVIO";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SgfensCorreoBandejaEnvio fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SgfensCorreoBandejaEnvio dto = new SgfensCorreoBandejaEnvio();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SgfensCorreoBandejaEnvio[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SgfensCorreoBandejaEnvio dto = new SgfensCorreoBandejaEnvio();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SgfensCorreoBandejaEnvio ret[] = new SgfensCorreoBandejaEnvio[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SgfensCorreoBandejaEnvio dto, ResultSet rs) throws SQLException
	{
		dto.setIdCorreo( rs.getInt( COLUMN_ID_CORREO ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setDestinatario( rs.getString( COLUMN_DESTINATARIO ) );
		dto.setDestinatarioCc( rs.getString( COLUMN_DESTINATARIO_CC ) );
		dto.setDestinatarioCco( rs.getString( COLUMN_DESTINATARIO_CCO ) );
		dto.setAsunto( rs.getString( COLUMN_ASUNTO ) );
		dto.setContenido( rs.getString( COLUMN_CONTENIDO ) );
		dto.setArchivosAdjuntosId( rs.getString( COLUMN_ARCHIVOS_ADJUNTOS_ID ) );
		dto.setFechaOriginal( rs.getTimestamp(COLUMN_FECHA_ORIGINAL ) );
		dto.setIsEnviado( rs.getShort( COLUMN_IS_ENVIADO ) );
		dto.setFechaEnvio( rs.getTimestamp(COLUMN_FECHA_ENVIO ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SgfensCorreoBandejaEnvio dto)
	{
		dto.setIdCorreoModified( false );
		dto.setIdEmpresaModified( false );
		dto.setDestinatarioModified( false );
		dto.setDestinatarioCcModified( false );
		dto.setDestinatarioCcoModified( false );
		dto.setAsuntoModified( false );
		dto.setContenidoModified( false );
		dto.setArchivosAdjuntosIdModified( false );
		dto.setFechaOriginalModified( false );
		dto.setIsEnviadoModified( false );
		dto.setFechaEnvioModified( false );
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the specified arbitrary SQL statement
	 */
	public SgfensCorreoBandejaEnvio[] findByDynamicSelect(String sql, Object[] sqlParams) throws SgfensCorreoBandejaEnvioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCorreoBandejaEnvioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the SGFENS_CORREO_BANDEJA_ENVIO table that match the specified arbitrary SQL statement
	 */
	public SgfensCorreoBandejaEnvio[] findByDynamicWhere(String sql, Object[] sqlParams) throws SgfensCorreoBandejaEnvioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensCorreoBandejaEnvioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
