/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CrFormularioEventoDaoImpl extends AbstractDAO implements CrFormularioEventoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_formulario_evento, id_grupo_formulario, fecha_hr_creacion, fecha_hr_edicion, id_usuario_capturo, tipo_entidad_respondio, id_entidad_respondio, latitud, longitud, folio_movil, id_empresa, id_estatus FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_formulario_evento, id_grupo_formulario, fecha_hr_creacion, fecha_hr_edicion, id_usuario_capturo, tipo_entidad_respondio, id_entidad_respondio, latitud, longitud, folio_movil, id_empresa, id_estatus ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_formulario_evento = ?, id_grupo_formulario = ?, fecha_hr_creacion = ?, fecha_hr_edicion = ?, id_usuario_capturo = ?, tipo_entidad_respondio = ?, id_entidad_respondio = ?, latitud = ?, longitud = ?, folio_movil = ?, id_empresa = ?, id_estatus = ? WHERE id_formulario_evento = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_formulario_evento = ?";

	/** 
	 * Index of column id_formulario_evento
	 */
	protected static final int COLUMN_ID_FORMULARIO_EVENTO = 1;

	/** 
	 * Index of column id_grupo_formulario
	 */
	protected static final int COLUMN_ID_GRUPO_FORMULARIO = 2;

	/** 
	 * Index of column fecha_hr_creacion
	 */
	protected static final int COLUMN_FECHA_HR_CREACION = 3;

	/** 
	 * Index of column fecha_hr_edicion
	 */
	protected static final int COLUMN_FECHA_HR_EDICION = 4;

	/** 
	 * Index of column id_usuario_capturo
	 */
	protected static final int COLUMN_ID_USUARIO_CAPTURO = 5;

	/** 
	 * Index of column tipo_entidad_respondio
	 */
	protected static final int COLUMN_TIPO_ENTIDAD_RESPONDIO = 6;

	/** 
	 * Index of column id_entidad_respondio
	 */
	protected static final int COLUMN_ID_ENTIDAD_RESPONDIO = 7;

	/** 
	 * Index of column latitud
	 */
	protected static final int COLUMN_LATITUD = 8;

	/** 
	 * Index of column longitud
	 */
	protected static final int COLUMN_LONGITUD = 9;

	/** 
	 * Index of column folio_movil
	 */
	protected static final int COLUMN_FOLIO_MOVIL = 10;

	/** 
	 * Index of column id_empresa
	 */
	protected static final int COLUMN_ID_EMPRESA = 11;

	/** 
	 * Index of column id_estatus
	 */
	protected static final int COLUMN_ID_ESTATUS = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column id_formulario_evento
	 */
	protected static final int PK_COLUMN_ID_FORMULARIO_EVENTO = 1;

	/** 
	 * Inserts a new row in the cr_formulario_evento table.
	 */
	public CrFormularioEventoPk insert(CrFormularioEvento dto) throws CrFormularioEventoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdFormularioEventoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_formulario_evento" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdGrupoFormularioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_grupo_formulario" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrCreacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_creacion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrEdicionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha_hr_edicion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioCapturoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_usuario_capturo" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoEntidadRespondioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "tipo_entidad_respondio" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEntidadRespondioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_entidad_respondio" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLatitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "latitud" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLongitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "longitud" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioMovilModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "folio_movil" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_empresa" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_estatus" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdFormularioEventoModified()) {
				stmt.setInt( index++, dto.getIdFormularioEvento() );
			}
		
			if (dto.isIdGrupoFormularioModified()) {
				stmt.setInt( index++, dto.getIdGrupoFormulario() );
			}
		
			if (dto.isFechaHrCreacionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaHrCreacion().getTime() ) );
			}
		
			if (dto.isFechaHrEdicionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrEdicion()==null ? null : new java.sql.Timestamp( dto.getFechaHrEdicion().getTime() ) );
			}
		
			if (dto.isIdUsuarioCapturoModified()) {
				stmt.setInt( index++, dto.getIdUsuarioCapturo() );
			}
		
			if (dto.isTipoEntidadRespondioModified()) {
				stmt.setString( index++, dto.getTipoEntidadRespondio() );
			}
		
			if (dto.isIdEntidadRespondioModified()) {
				stmt.setInt( index++, dto.getIdEntidadRespondio() );
			}
		
			if (dto.isLatitudModified()) {
				if (dto.isLatitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLatitud() );
				}
		
			}
		
			if (dto.isLongitudModified()) {
				if (dto.isLongitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLongitud() );
				}
		
			}
		
			if (dto.isFolioMovilModified()) {
				stmt.setString( index++, dto.getFolioMovil() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdFormularioEvento( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFormularioEventoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the cr_formulario_evento table.
	 */
	public void update(CrFormularioEventoPk pk, CrFormularioEvento dto) throws CrFormularioEventoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdFormularioEventoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_formulario_evento=?" );
				modified=true;
			}
		
			if (dto.isIdGrupoFormularioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_grupo_formulario=?" );
				modified=true;
			}
		
			if (dto.isFechaHrCreacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_creacion=?" );
				modified=true;
			}
		
			if (dto.isFechaHrEdicionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha_hr_edicion=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioCapturoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_usuario_capturo=?" );
				modified=true;
			}
		
			if (dto.isTipoEntidadRespondioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "tipo_entidad_respondio=?" );
				modified=true;
			}
		
			if (dto.isIdEntidadRespondioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_entidad_respondio=?" );
				modified=true;
			}
		
			if (dto.isLatitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "latitud=?" );
				modified=true;
			}
		
			if (dto.isLongitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "longitud=?" );
				modified=true;
			}
		
			if (dto.isFolioMovilModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "folio_movil=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_empresa=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_estatus=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_formulario_evento=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdFormularioEventoModified()) {
				stmt.setInt( index++, dto.getIdFormularioEvento() );
			}
		
			if (dto.isIdGrupoFormularioModified()) {
				stmt.setInt( index++, dto.getIdGrupoFormulario() );
			}
		
			if (dto.isFechaHrCreacionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaHrCreacion().getTime() ) );
			}
		
			if (dto.isFechaHrEdicionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrEdicion()==null ? null : new java.sql.Timestamp( dto.getFechaHrEdicion().getTime() ) );
			}
		
			if (dto.isIdUsuarioCapturoModified()) {
				stmt.setInt( index++, dto.getIdUsuarioCapturo() );
			}
		
			if (dto.isTipoEntidadRespondioModified()) {
				stmt.setString( index++, dto.getTipoEntidadRespondio() );
			}
		
			if (dto.isIdEntidadRespondioModified()) {
				stmt.setInt( index++, dto.getIdEntidadRespondio() );
			}
		
			if (dto.isLatitudModified()) {
				if (dto.isLatitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLatitud() );
				}
		
			}
		
			if (dto.isLongitudModified()) {
				if (dto.isLongitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLongitud() );
				}
		
			}
		
			if (dto.isFolioMovilModified()) {
				stmt.setString( index++, dto.getFolioMovil() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			stmt.setInt( index++, pk.getIdFormularioEvento() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFormularioEventoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the cr_formulario_evento table.
	 */
	public void delete(CrFormularioEventoPk pk) throws CrFormularioEventoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdFormularioEvento() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFormularioEventoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the cr_formulario_evento table that matches the specified primary-key value.
	 */
	public CrFormularioEvento findByPrimaryKey(CrFormularioEventoPk pk) throws CrFormularioEventoDaoException
	{
		return findByPrimaryKey( pk.getIdFormularioEvento() );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria 'id_formulario_evento = :idFormularioEvento'.
	 */
	public CrFormularioEvento findByPrimaryKey(int idFormularioEvento) throws CrFormularioEventoDaoException
	{
		CrFormularioEvento ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_formulario_evento = ?", new Object[] {  new Integer(idFormularioEvento) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria ''.
	 */
	public CrFormularioEvento[] findAll() throws CrFormularioEventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_formulario_evento", null );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria 'id_formulario_evento = :idFormularioEvento'.
	 */
	public CrFormularioEvento[] findWhereIdFormularioEventoEquals(int idFormularioEvento) throws CrFormularioEventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_formulario_evento = ? ORDER BY id_formulario_evento", new Object[] {  new Integer(idFormularioEvento) } );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria 'id_grupo_formulario = :idGrupoFormulario'.
	 */
	public CrFormularioEvento[] findWhereIdGrupoFormularioEquals(int idGrupoFormulario) throws CrFormularioEventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_grupo_formulario = ? ORDER BY id_grupo_formulario", new Object[] {  new Integer(idGrupoFormulario) } );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria 'fecha_hr_creacion = :fechaHrCreacion'.
	 */
	public CrFormularioEvento[] findWhereFechaHrCreacionEquals(Date fechaHrCreacion) throws CrFormularioEventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_creacion = ? ORDER BY fecha_hr_creacion", new Object[] { fechaHrCreacion==null ? null : new java.sql.Timestamp( fechaHrCreacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria 'fecha_hr_edicion = :fechaHrEdicion'.
	 */
	public CrFormularioEvento[] findWhereFechaHrEdicionEquals(Date fechaHrEdicion) throws CrFormularioEventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_hr_edicion = ? ORDER BY fecha_hr_edicion", new Object[] { fechaHrEdicion==null ? null : new java.sql.Timestamp( fechaHrEdicion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria 'id_usuario_capturo = :idUsuarioCapturo'.
	 */
	public CrFormularioEvento[] findWhereIdUsuarioCapturoEquals(int idUsuarioCapturo) throws CrFormularioEventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_usuario_capturo = ? ORDER BY id_usuario_capturo", new Object[] {  new Integer(idUsuarioCapturo) } );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria 'tipo_entidad_respondio = :tipoEntidadRespondio'.
	 */
	public CrFormularioEvento[] findWhereTipoEntidadRespondioEquals(String tipoEntidadRespondio) throws CrFormularioEventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipo_entidad_respondio = ? ORDER BY tipo_entidad_respondio", new Object[] { tipoEntidadRespondio } );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria 'id_entidad_respondio = :idEntidadRespondio'.
	 */
	public CrFormularioEvento[] findWhereIdEntidadRespondioEquals(int idEntidadRespondio) throws CrFormularioEventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_entidad_respondio = ? ORDER BY id_entidad_respondio", new Object[] {  new Integer(idEntidadRespondio) } );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria 'latitud = :latitud'.
	 */
	public CrFormularioEvento[] findWhereLatitudEquals(double latitud) throws CrFormularioEventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE latitud = ? ORDER BY latitud", new Object[] {  new Double(latitud) } );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria 'longitud = :longitud'.
	 */
	public CrFormularioEvento[] findWhereLongitudEquals(double longitud) throws CrFormularioEventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE longitud = ? ORDER BY longitud", new Object[] {  new Double(longitud) } );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria 'folio_movil = :folioMovil'.
	 */
	public CrFormularioEvento[] findWhereFolioMovilEquals(String folioMovil) throws CrFormularioEventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE folio_movil = ? ORDER BY folio_movil", new Object[] { folioMovil } );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public CrFormularioEvento[] findWhereIdEmpresaEquals(int idEmpresa) throws CrFormularioEventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_empresa = ? ORDER BY id_empresa", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public CrFormularioEvento[] findWhereIdEstatusEquals(int idEstatus) throws CrFormularioEventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_estatus = ? ORDER BY id_estatus", new Object[] {  new Integer(idEstatus) } );
	}

	/**
	 * Method 'CrFormularioEventoDaoImpl'
	 * 
	 */
	public CrFormularioEventoDaoImpl()
	{
	}

	/**
	 * Method 'CrFormularioEventoDaoImpl'
	 * 
	 * @param userConn
	 */
	public CrFormularioEventoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "cr_formulario_evento";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CrFormularioEvento fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CrFormularioEvento dto = new CrFormularioEvento();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CrFormularioEvento[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CrFormularioEvento dto = new CrFormularioEvento();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CrFormularioEvento ret[] = new CrFormularioEvento[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CrFormularioEvento dto, ResultSet rs) throws SQLException
	{
		dto.setIdFormularioEvento( rs.getInt( COLUMN_ID_FORMULARIO_EVENTO ) );
		dto.setIdGrupoFormulario( rs.getInt( COLUMN_ID_GRUPO_FORMULARIO ) );
		dto.setFechaHrCreacion( rs.getTimestamp(COLUMN_FECHA_HR_CREACION ) );
		dto.setFechaHrEdicion( rs.getTimestamp(COLUMN_FECHA_HR_EDICION ) );
		dto.setIdUsuarioCapturo( rs.getInt( COLUMN_ID_USUARIO_CAPTURO ) );
		dto.setTipoEntidadRespondio( rs.getString( COLUMN_TIPO_ENTIDAD_RESPONDIO ) );
		dto.setIdEntidadRespondio( rs.getInt( COLUMN_ID_ENTIDAD_RESPONDIO ) );
		dto.setLatitud( rs.getDouble( COLUMN_LATITUD ) );
		if (rs.wasNull()) {
			dto.setLatitudNull( true );
		}
		
		dto.setLongitud( rs.getDouble( COLUMN_LONGITUD ) );
		if (rs.wasNull()) {
			dto.setLongitudNull( true );
		}
		
		dto.setFolioMovil( rs.getString( COLUMN_FOLIO_MOVIL ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CrFormularioEvento dto)
	{
		dto.setIdFormularioEventoModified( false );
		dto.setIdGrupoFormularioModified( false );
		dto.setFechaHrCreacionModified( false );
		dto.setFechaHrEdicionModified( false );
		dto.setIdUsuarioCapturoModified( false );
		dto.setTipoEntidadRespondioModified( false );
		dto.setIdEntidadRespondioModified( false );
		dto.setLatitudModified( false );
		dto.setLongitudModified( false );
		dto.setFolioMovilModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEstatusModified( false );
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the specified arbitrary SQL statement
	 */
	public CrFormularioEvento[] findByDynamicSelect(String sql, Object[] sqlParams) throws CrFormularioEventoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFormularioEventoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the cr_formulario_evento table that match the specified arbitrary SQL statement
	 */
	public CrFormularioEvento[] findByDynamicWhere(String sql, Object[] sqlParams) throws CrFormularioEventoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CrFormularioEventoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
