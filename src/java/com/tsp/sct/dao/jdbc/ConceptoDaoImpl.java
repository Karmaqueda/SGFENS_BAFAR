/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ConceptoDaoImpl extends AbstractDAO implements ConceptoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_CONCEPTO, ID_EMPRESA, NOMBRE, DESCRIPCION, PRECIO, ID_ESTATUS, IDENTIFICACION, id_categoria, ID_MARCA, ID_SUBCATEGORIA, ID_EMBALAJE, ID_IMPUESTO, PRECIO_COMPRA, NUMERO_LOTE, FECHA_CADUCIDAD, NUM_ARTICULOS_DISPONIBLES, GENERICO, IMAGEN_CARPETA_ARCHIVO, IMAGEN_NOMBRE_ARCHIVO, DESCRIPCION_CORTA, ID_ALMACEN, STOCK_MINIMO, STOCK_AVISO_MIN, DETALLE, FECHA_ALTA, VOLUMEN, PESO, OBSERVACIONES, PRECIO_DOCENA, PRECIO_MAYOREO, PRECIO_ESPECIAL, IMPUESTO_X_CONCEPTO, DESCUENTO_PORCENTAJE, DESCUENTO_MONTO, CLAVEART_SAE, PRECIO_MEDIO_MAYOREO, MAX_MENUDEO, MIN_MEDIO_MAYOREO, MAX_MEDIO_MAYOREO, MIN_MAYOREO, ID_SUBCATEGORIA2, ID_SUBCATEGORIA3, ID_SUBCATEGORIA4, PRECIO_MINIMO_VENTA, NOMBRE_DESENCRIPTADO, RUTA_IMAGEN, RUTA_VIDEO, CARACTERISTISCAS, COMISION_PORCENTAJE, COMISION_MONTO, SINCRONIZACION_MICROSIP, CLAVE, DESGLOSE_PIEZAS, FOLIO_CONCEPTO_MOVIL, PRECIO_UNITARIO_GRANEL, PRECIO_MEDIO_GRANEL, PRECIO_MAYOREO_GRANEL, PRECIO_ESPECIAL_GRANEL, ID_CONCEPTO_PADRE, MATERIA_PRIMA FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_CONCEPTO, ID_EMPRESA, NOMBRE, DESCRIPCION, PRECIO, ID_ESTATUS, IDENTIFICACION, id_categoria, ID_MARCA, ID_SUBCATEGORIA, ID_EMBALAJE, ID_IMPUESTO, PRECIO_COMPRA, NUMERO_LOTE, FECHA_CADUCIDAD, NUM_ARTICULOS_DISPONIBLES, GENERICO, IMAGEN_CARPETA_ARCHIVO, IMAGEN_NOMBRE_ARCHIVO, DESCRIPCION_CORTA, ID_ALMACEN, STOCK_MINIMO, STOCK_AVISO_MIN, DETALLE, FECHA_ALTA, VOLUMEN, PESO, OBSERVACIONES, PRECIO_DOCENA, PRECIO_MAYOREO, PRECIO_ESPECIAL, IMPUESTO_X_CONCEPTO, DESCUENTO_PORCENTAJE, DESCUENTO_MONTO, CLAVEART_SAE, PRECIO_MEDIO_MAYOREO, MAX_MENUDEO, MIN_MEDIO_MAYOREO, MAX_MEDIO_MAYOREO, MIN_MAYOREO, ID_SUBCATEGORIA2, ID_SUBCATEGORIA3, ID_SUBCATEGORIA4, PRECIO_MINIMO_VENTA, NOMBRE_DESENCRIPTADO, RUTA_IMAGEN, RUTA_VIDEO, CARACTERISTISCAS, COMISION_PORCENTAJE, COMISION_MONTO, SINCRONIZACION_MICROSIP, CLAVE, DESGLOSE_PIEZAS, FOLIO_CONCEPTO_MOVIL, PRECIO_UNITARIO_GRANEL, PRECIO_MEDIO_GRANEL, PRECIO_MAYOREO_GRANEL, PRECIO_ESPECIAL_GRANEL, ID_CONCEPTO_PADRE, MATERIA_PRIMA ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_CONCEPTO = ?, ID_EMPRESA = ?, NOMBRE = ?, DESCRIPCION = ?, PRECIO = ?, ID_ESTATUS = ?, IDENTIFICACION = ?, id_categoria = ?, ID_MARCA = ?, ID_SUBCATEGORIA = ?, ID_EMBALAJE = ?, ID_IMPUESTO = ?, PRECIO_COMPRA = ?, NUMERO_LOTE = ?, FECHA_CADUCIDAD = ?, NUM_ARTICULOS_DISPONIBLES = ?, GENERICO = ?, IMAGEN_CARPETA_ARCHIVO = ?, IMAGEN_NOMBRE_ARCHIVO = ?, DESCRIPCION_CORTA = ?, ID_ALMACEN = ?, STOCK_MINIMO = ?, STOCK_AVISO_MIN = ?, DETALLE = ?, FECHA_ALTA = ?, VOLUMEN = ?, PESO = ?, OBSERVACIONES = ?, PRECIO_DOCENA = ?, PRECIO_MAYOREO = ?, PRECIO_ESPECIAL = ?, IMPUESTO_X_CONCEPTO = ?, DESCUENTO_PORCENTAJE = ?, DESCUENTO_MONTO = ?, CLAVEART_SAE = ?, PRECIO_MEDIO_MAYOREO = ?, MAX_MENUDEO = ?, MIN_MEDIO_MAYOREO = ?, MAX_MEDIO_MAYOREO = ?, MIN_MAYOREO = ?, ID_SUBCATEGORIA2 = ?, ID_SUBCATEGORIA3 = ?, ID_SUBCATEGORIA4 = ?, PRECIO_MINIMO_VENTA = ?, NOMBRE_DESENCRIPTADO = ?, RUTA_IMAGEN = ?, RUTA_VIDEO = ?, CARACTERISTISCAS = ?, COMISION_PORCENTAJE = ?, COMISION_MONTO = ?, SINCRONIZACION_MICROSIP = ?, CLAVE = ?, DESGLOSE_PIEZAS = ?, FOLIO_CONCEPTO_MOVIL = ?, PRECIO_UNITARIO_GRANEL = ?, PRECIO_MEDIO_GRANEL = ?, PRECIO_MAYOREO_GRANEL = ?, PRECIO_ESPECIAL_GRANEL = ?, ID_CONCEPTO_PADRE = ?, MATERIA_PRIMA = ? WHERE ID_CONCEPTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_CONCEPTO = ?";

	/** 
	 * Index of column ID_CONCEPTO
	 */
	protected static final int COLUMN_ID_CONCEPTO = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column NOMBRE
	 */
	protected static final int COLUMN_NOMBRE = 3;

	/** 
	 * Index of column DESCRIPCION
	 */
	protected static final int COLUMN_DESCRIPCION = 4;

	/** 
	 * Index of column PRECIO
	 */
	protected static final int COLUMN_PRECIO = 5;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 6;

	/** 
	 * Index of column IDENTIFICACION
	 */
	protected static final int COLUMN_IDENTIFICACION = 7;

	/** 
	 * Index of column id_categoria
	 */
	protected static final int COLUMN_ID_CATEGORIA = 8;

	/** 
	 * Index of column ID_MARCA
	 */
	protected static final int COLUMN_ID_MARCA = 9;

	/** 
	 * Index of column ID_SUBCATEGORIA
	 */
	protected static final int COLUMN_ID_SUBCATEGORIA = 10;

	/** 
	 * Index of column ID_EMBALAJE
	 */
	protected static final int COLUMN_ID_EMBALAJE = 11;

	/** 
	 * Index of column ID_IMPUESTO
	 */
	protected static final int COLUMN_ID_IMPUESTO = 12;

	/** 
	 * Index of column PRECIO_COMPRA
	 */
	protected static final int COLUMN_PRECIO_COMPRA = 13;

	/** 
	 * Index of column NUMERO_LOTE
	 */
	protected static final int COLUMN_NUMERO_LOTE = 14;

	/** 
	 * Index of column FECHA_CADUCIDAD
	 */
	protected static final int COLUMN_FECHA_CADUCIDAD = 15;

	/** 
	 * Index of column NUM_ARTICULOS_DISPONIBLES
	 */
	protected static final int COLUMN_NUM_ARTICULOS_DISPONIBLES = 16;

	/** 
	 * Index of column GENERICO
	 */
	protected static final int COLUMN_GENERICO = 17;

	/** 
	 * Index of column IMAGEN_CARPETA_ARCHIVO
	 */
	protected static final int COLUMN_IMAGEN_CARPETA_ARCHIVO = 18;

	/** 
	 * Index of column IMAGEN_NOMBRE_ARCHIVO
	 */
	protected static final int COLUMN_IMAGEN_NOMBRE_ARCHIVO = 19;

	/** 
	 * Index of column DESCRIPCION_CORTA
	 */
	protected static final int COLUMN_DESCRIPCION_CORTA = 20;

	/** 
	 * Index of column ID_ALMACEN
	 */
	protected static final int COLUMN_ID_ALMACEN = 21;

	/** 
	 * Index of column STOCK_MINIMO
	 */
	protected static final int COLUMN_STOCK_MINIMO = 22;

	/** 
	 * Index of column STOCK_AVISO_MIN
	 */
	protected static final int COLUMN_STOCK_AVISO_MIN = 23;

	/** 
	 * Index of column DETALLE
	 */
	protected static final int COLUMN_DETALLE = 24;

	/** 
	 * Index of column FECHA_ALTA
	 */
	protected static final int COLUMN_FECHA_ALTA = 25;

	/** 
	 * Index of column VOLUMEN
	 */
	protected static final int COLUMN_VOLUMEN = 26;

	/** 
	 * Index of column PESO
	 */
	protected static final int COLUMN_PESO = 27;

	/** 
	 * Index of column OBSERVACIONES
	 */
	protected static final int COLUMN_OBSERVACIONES = 28;

	/** 
	 * Index of column PRECIO_DOCENA
	 */
	protected static final int COLUMN_PRECIO_DOCENA = 29;

	/** 
	 * Index of column PRECIO_MAYOREO
	 */
	protected static final int COLUMN_PRECIO_MAYOREO = 30;

	/** 
	 * Index of column PRECIO_ESPECIAL
	 */
	protected static final int COLUMN_PRECIO_ESPECIAL = 31;

	/** 
	 * Index of column IMPUESTO_X_CONCEPTO
	 */
	protected static final int COLUMN_IMPUESTO_X_CONCEPTO = 32;

	/** 
	 * Index of column DESCUENTO_PORCENTAJE
	 */
	protected static final int COLUMN_DESCUENTO_PORCENTAJE = 33;

	/** 
	 * Index of column DESCUENTO_MONTO
	 */
	protected static final int COLUMN_DESCUENTO_MONTO = 34;

	/** 
	 * Index of column CLAVEART_SAE
	 */
	protected static final int COLUMN_CLAVEART_SAE = 35;

	/** 
	 * Index of column PRECIO_MEDIO_MAYOREO
	 */
	protected static final int COLUMN_PRECIO_MEDIO_MAYOREO = 36;

	/** 
	 * Index of column MAX_MENUDEO
	 */
	protected static final int COLUMN_MAX_MENUDEO = 37;

	/** 
	 * Index of column MIN_MEDIO_MAYOREO
	 */
	protected static final int COLUMN_MIN_MEDIO_MAYOREO = 38;

	/** 
	 * Index of column MAX_MEDIO_MAYOREO
	 */
	protected static final int COLUMN_MAX_MEDIO_MAYOREO = 39;

	/** 
	 * Index of column MIN_MAYOREO
	 */
	protected static final int COLUMN_MIN_MAYOREO = 40;

	/** 
	 * Index of column ID_SUBCATEGORIA2
	 */
	protected static final int COLUMN_ID_SUBCATEGORIA2 = 41;

	/** 
	 * Index of column ID_SUBCATEGORIA3
	 */
	protected static final int COLUMN_ID_SUBCATEGORIA3 = 42;

	/** 
	 * Index of column ID_SUBCATEGORIA4
	 */
	protected static final int COLUMN_ID_SUBCATEGORIA4 = 43;

	/** 
	 * Index of column PRECIO_MINIMO_VENTA
	 */
	protected static final int COLUMN_PRECIO_MINIMO_VENTA = 44;

	/** 
	 * Index of column NOMBRE_DESENCRIPTADO
	 */
	protected static final int COLUMN_NOMBRE_DESENCRIPTADO = 45;

	/** 
	 * Index of column RUTA_IMAGEN
	 */
	protected static final int COLUMN_RUTA_IMAGEN = 46;

	/** 
	 * Index of column RUTA_VIDEO
	 */
	protected static final int COLUMN_RUTA_VIDEO = 47;

	/** 
	 * Index of column CARACTERISTISCAS
	 */
	protected static final int COLUMN_CARACTERISTISCAS = 48;

	/** 
	 * Index of column COMISION_PORCENTAJE
	 */
	protected static final int COLUMN_COMISION_PORCENTAJE = 49;

	/** 
	 * Index of column COMISION_MONTO
	 */
	protected static final int COLUMN_COMISION_MONTO = 50;

	/** 
	 * Index of column SINCRONIZACION_MICROSIP
	 */
	protected static final int COLUMN_SINCRONIZACION_MICROSIP = 51;

	/** 
	 * Index of column CLAVE
	 */
	protected static final int COLUMN_CLAVE = 52;

	/** 
	 * Index of column DESGLOSE_PIEZAS
	 */
	protected static final int COLUMN_DESGLOSE_PIEZAS = 53;

	/** 
	 * Index of column FOLIO_CONCEPTO_MOVIL
	 */
	protected static final int COLUMN_FOLIO_CONCEPTO_MOVIL = 54;

	/** 
	 * Index of column PRECIO_UNITARIO_GRANEL
	 */
	protected static final int COLUMN_PRECIO_UNITARIO_GRANEL = 55;

	/** 
	 * Index of column PRECIO_MEDIO_GRANEL
	 */
	protected static final int COLUMN_PRECIO_MEDIO_GRANEL = 56;

	/** 
	 * Index of column PRECIO_MAYOREO_GRANEL
	 */
	protected static final int COLUMN_PRECIO_MAYOREO_GRANEL = 57;

	/** 
	 * Index of column PRECIO_ESPECIAL_GRANEL
	 */
	protected static final int COLUMN_PRECIO_ESPECIAL_GRANEL = 58;

	/** 
	 * Index of column ID_CONCEPTO_PADRE
	 */
	protected static final int COLUMN_ID_CONCEPTO_PADRE = 59;

	/** 
	 * Index of column MATERIA_PRIMA
	 */
	protected static final int COLUMN_MATERIA_PRIMA = 60;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 60;

	/** 
	 * Index of primary-key column ID_CONCEPTO
	 */
	protected static final int PK_COLUMN_ID_CONCEPTO = 1;

	/** 
	 * Inserts a new row in the concepto table.
	 */
	public ConceptoPk insert(Concepto dto) throws ConceptoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCRIPCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdentificacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IDENTIFICACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdCategoriaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_categoria" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdMarcaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_MARCA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSubcategoriaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_SUBCATEGORIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmbalajeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMBALAJE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdImpuestoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_IMPUESTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioCompraModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_COMPRA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumeroLoteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUMERO_LOTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaCaducidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_CADUCIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumArticulosDisponiblesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUM_ARTICULOS_DISPONIBLES" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isGenericoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "GENERICO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isImagenCarpetaArchivoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IMAGEN_CARPETA_ARCHIVO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isImagenNombreArchivoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IMAGEN_NOMBRE_ARCHIVO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescripcionCortaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCRIPCION_CORTA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdAlmacenModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ALMACEN" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isStockMinimoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "STOCK_MINIMO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isStockAvisoMinModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "STOCK_AVISO_MIN" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDetalleModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DETALLE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaAltaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_ALTA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isVolumenModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "VOLUMEN" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPesoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PESO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isObservacionesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "OBSERVACIONES" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioDocenaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_DOCENA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioMayoreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_MAYOREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioEspecialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_ESPECIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isImpuestoXConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IMPUESTO_X_CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_PORCENTAJE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isClaveartSaeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CLAVEART_SAE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioMedioMayoreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_MEDIO_MAYOREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMaxMenudeoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MAX_MENUDEO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMinMedioMayoreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MIN_MEDIO_MAYOREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMaxMedioMayoreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MAX_MEDIO_MAYOREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMinMayoreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MIN_MAYOREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSubcategoria2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_SUBCATEGORIA2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSubcategoria3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_SUBCATEGORIA3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSubcategoria4Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_SUBCATEGORIA4" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioMinimoVentaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_MINIMO_VENTA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreDesencriptadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_DESENCRIPTADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutaImagenModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTA_IMAGEN" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRutaVideoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RUTA_VIDEO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCaracteristiscasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CARACTERISTISCAS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isComisionPorcentajeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "COMISION_PORCENTAJE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isComisionMontoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "COMISION_MONTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SINCRONIZACION_MICROSIP" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isClaveModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CLAVE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDesglosePiezasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESGLOSE_PIEZAS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioConceptoMovilModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIO_CONCEPTO_MOVIL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioUnitarioGranelModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO_GRANEL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioMedioGranelModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_MEDIO_GRANEL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioMayoreoGranelModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_MAYOREO_GRANEL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioEspecialGranelModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_ESPECIAL_GRANEL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdConceptoPadreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO_PADRE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMateriaPrimaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MATERIA_PRIMA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdConceptoModified()) {
				stmt.setInt( index++, dto.getIdConcepto() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isPrecioModified()) {
				if (dto.isPrecioNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getPrecio() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isIdentificacionModified()) {
				stmt.setString( index++, dto.getIdentificacion() );
			}
		
			if (dto.isIdCategoriaModified()) {
				if (dto.isIdCategoriaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCategoria() );
				}
		
			}
		
			if (dto.isIdMarcaModified()) {
				if (dto.isIdMarcaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdMarca() );
				}
		
			}
		
			if (dto.isIdSubcategoriaModified()) {
				if (dto.isIdSubcategoriaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSubcategoria() );
				}
		
			}
		
			if (dto.isIdEmbalajeModified()) {
				if (dto.isIdEmbalajeNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmbalaje() );
				}
		
			}
		
			if (dto.isIdImpuestoModified()) {
				if (dto.isIdImpuestoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdImpuesto() );
				}
		
			}
		
			if (dto.isPrecioCompraModified()) {
				if (dto.isPrecioCompraNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getPrecioCompra() );
				}
		
			}
		
			if (dto.isNumeroLoteModified()) {
				stmt.setString( index++, dto.getNumeroLote() );
			}
		
			if (dto.isFechaCaducidadModified()) {
				stmt.setDate(index++, dto.getFechaCaducidad()==null ? null : new java.sql.Date( dto.getFechaCaducidad().getTime() ) );
			}
		
			if (dto.isNumArticulosDisponiblesModified()) {
				if (dto.isNumArticulosDisponiblesNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getNumArticulosDisponibles() );
				}
		
			}
		
			if (dto.isGenericoModified()) {
				if (dto.isGenericoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getGenerico() );
				}
		
			}
		
			if (dto.isImagenCarpetaArchivoModified()) {
				stmt.setString( index++, dto.getImagenCarpetaArchivo() );
			}
		
			if (dto.isImagenNombreArchivoModified()) {
				stmt.setString( index++, dto.getImagenNombreArchivo() );
			}
		
			if (dto.isDescripcionCortaModified()) {
				stmt.setString( index++, dto.getDescripcionCorta() );
			}
		
			if (dto.isIdAlmacenModified()) {
				if (dto.isIdAlmacenNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdAlmacen() );
				}
		
			}
		
			if (dto.isStockMinimoModified()) {
				if (dto.isStockMinimoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getStockMinimo() );
				}
		
			}
		
			if (dto.isStockAvisoMinModified()) {
				if (dto.isStockAvisoMinNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getStockAvisoMin() );
				}
		
			}
		
			if (dto.isDetalleModified()) {
				stmt.setString( index++, dto.getDetalle() );
			}
		
			if (dto.isFechaAltaModified()) {
				stmt.setTimestamp(index++, dto.getFechaAlta()==null ? null : new java.sql.Timestamp( dto.getFechaAlta().getTime() ) );
			}
		
			if (dto.isVolumenModified()) {
				if (dto.isVolumenNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getVolumen() );
				}
		
			}
		
			if (dto.isPesoModified()) {
				if (dto.isPesoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPeso() );
				}
		
			}
		
			if (dto.isObservacionesModified()) {
				stmt.setString( index++, dto.getObservaciones() );
			}
		
			if (dto.isPrecioDocenaModified()) {
				if (dto.isPrecioDocenaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioDocena() );
				}
		
			}
		
			if (dto.isPrecioMayoreoModified()) {
				if (dto.isPrecioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMayoreo() );
				}
		
			}
		
			if (dto.isPrecioEspecialModified()) {
				if (dto.isPrecioEspecialNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioEspecial() );
				}
		
			}
		
			if (dto.isImpuestoXConceptoModified()) {
				if (dto.isImpuestoXConceptoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getImpuestoXConcepto() );
				}
		
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (dto.isDescuentoPorcentajeNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoPorcentaje() );
				}
		
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (dto.isDescuentoMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoMonto() );
				}
		
			}
		
			if (dto.isClaveartSaeModified()) {
				stmt.setString( index++, dto.getClaveartSae() );
			}
		
			if (dto.isPrecioMedioMayoreoModified()) {
				if (dto.isPrecioMedioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMedioMayoreo() );
				}
		
			}
		
			if (dto.isMaxMenudeoModified()) {
				if (dto.isMaxMenudeoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMaxMenudeo() );
				}
		
			}
		
			if (dto.isMinMedioMayoreoModified()) {
				if (dto.isMinMedioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMinMedioMayoreo() );
				}
		
			}
		
			if (dto.isMaxMedioMayoreoModified()) {
				if (dto.isMaxMedioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMaxMedioMayoreo() );
				}
		
			}
		
			if (dto.isMinMayoreoModified()) {
				if (dto.isMinMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMinMayoreo() );
				}
		
			}
		
			if (dto.isIdSubcategoria2Modified()) {
				if (dto.isIdSubcategoria2Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSubcategoria2() );
				}
		
			}
		
			if (dto.isIdSubcategoria3Modified()) {
				if (dto.isIdSubcategoria3Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSubcategoria3() );
				}
		
			}
		
			if (dto.isIdSubcategoria4Modified()) {
				if (dto.isIdSubcategoria4Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSubcategoria4() );
				}
		
			}
		
			if (dto.isPrecioMinimoVentaModified()) {
				if (dto.isPrecioMinimoVentaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMinimoVenta() );
				}
		
			}
		
			if (dto.isNombreDesencriptadoModified()) {
				stmt.setString( index++, dto.getNombreDesencriptado() );
			}
		
			if (dto.isRutaImagenModified()) {
				stmt.setString( index++, dto.getRutaImagen() );
			}
		
			if (dto.isRutaVideoModified()) {
				stmt.setString( index++, dto.getRutaVideo() );
			}
		
			if (dto.isCaracteristiscasModified()) {
				stmt.setString( index++, dto.getCaracteristiscas() );
			}
		
			if (dto.isComisionPorcentajeModified()) {
				if (dto.isComisionPorcentajeNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getComisionPorcentaje() );
				}
		
			}
		
			if (dto.isComisionMontoModified()) {
				if (dto.isComisionMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getComisionMonto() );
				}
		
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (dto.isSincronizacionMicrosipNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getSincronizacionMicrosip() );
				}
		
			}
		
			if (dto.isClaveModified()) {
				stmt.setString( index++, dto.getClave() );
			}
		
			if (dto.isDesglosePiezasModified()) {
				if (dto.isDesglosePiezasNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDesglosePiezas() );
				}
		
			}
		
			if (dto.isFolioConceptoMovilModified()) {
				stmt.setString( index++, dto.getFolioConceptoMovil() );
			}
		
			if (dto.isPrecioUnitarioGranelModified()) {
				if (dto.isPrecioUnitarioGranelNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioUnitarioGranel() );
				}
		
			}
		
			if (dto.isPrecioMedioGranelModified()) {
				if (dto.isPrecioMedioGranelNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMedioGranel() );
				}
		
			}
		
			if (dto.isPrecioMayoreoGranelModified()) {
				if (dto.isPrecioMayoreoGranelNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMayoreoGranel() );
				}
		
			}
		
			if (dto.isPrecioEspecialGranelModified()) {
				if (dto.isPrecioEspecialGranelNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioEspecialGranel() );
				}
		
			}
		
			if (dto.isIdConceptoPadreModified()) {
				if (dto.isIdConceptoPadreNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdConceptoPadre() );
				}
		
			}
		
			if (dto.isMateriaPrimaModified()) {
				if (dto.isMateriaPrimaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMateriaPrima() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdConcepto( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the concepto table.
	 */
	public void update(ConceptoPk pk, Concepto dto) throws ConceptoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isNombreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE=?" );
				modified=true;
			}
		
			if (dto.isDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCRIPCION=?" );
				modified=true;
			}
		
			if (dto.isPrecioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isIdentificacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IDENTIFICACION=?" );
				modified=true;
			}
		
			if (dto.isIdCategoriaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_categoria=?" );
				modified=true;
			}
		
			if (dto.isIdMarcaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_MARCA=?" );
				modified=true;
			}
		
			if (dto.isIdSubcategoriaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_SUBCATEGORIA=?" );
				modified=true;
			}
		
			if (dto.isIdEmbalajeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMBALAJE=?" );
				modified=true;
			}
		
			if (dto.isIdImpuestoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_IMPUESTO=?" );
				modified=true;
			}
		
			if (dto.isPrecioCompraModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_COMPRA=?" );
				modified=true;
			}
		
			if (dto.isNumeroLoteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUMERO_LOTE=?" );
				modified=true;
			}
		
			if (dto.isFechaCaducidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_CADUCIDAD=?" );
				modified=true;
			}
		
			if (dto.isNumArticulosDisponiblesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUM_ARTICULOS_DISPONIBLES=?" );
				modified=true;
			}
		
			if (dto.isGenericoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "GENERICO=?" );
				modified=true;
			}
		
			if (dto.isImagenCarpetaArchivoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IMAGEN_CARPETA_ARCHIVO=?" );
				modified=true;
			}
		
			if (dto.isImagenNombreArchivoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IMAGEN_NOMBRE_ARCHIVO=?" );
				modified=true;
			}
		
			if (dto.isDescripcionCortaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCRIPCION_CORTA=?" );
				modified=true;
			}
		
			if (dto.isIdAlmacenModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ALMACEN=?" );
				modified=true;
			}
		
			if (dto.isStockMinimoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "STOCK_MINIMO=?" );
				modified=true;
			}
		
			if (dto.isStockAvisoMinModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "STOCK_AVISO_MIN=?" );
				modified=true;
			}
		
			if (dto.isDetalleModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DETALLE=?" );
				modified=true;
			}
		
			if (dto.isFechaAltaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_ALTA=?" );
				modified=true;
			}
		
			if (dto.isVolumenModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "VOLUMEN=?" );
				modified=true;
			}
		
			if (dto.isPesoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PESO=?" );
				modified=true;
			}
		
			if (dto.isObservacionesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "OBSERVACIONES=?" );
				modified=true;
			}
		
			if (dto.isPrecioDocenaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_DOCENA=?" );
				modified=true;
			}
		
			if (dto.isPrecioMayoreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_MAYOREO=?" );
				modified=true;
			}
		
			if (dto.isPrecioEspecialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_ESPECIAL=?" );
				modified=true;
			}
		
			if (dto.isImpuestoXConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IMPUESTO_X_CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_PORCENTAJE=?" );
				modified=true;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO=?" );
				modified=true;
			}
		
			if (dto.isClaveartSaeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CLAVEART_SAE=?" );
				modified=true;
			}
		
			if (dto.isPrecioMedioMayoreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_MEDIO_MAYOREO=?" );
				modified=true;
			}
		
			if (dto.isMaxMenudeoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MAX_MENUDEO=?" );
				modified=true;
			}
		
			if (dto.isMinMedioMayoreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MIN_MEDIO_MAYOREO=?" );
				modified=true;
			}
		
			if (dto.isMaxMedioMayoreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MAX_MEDIO_MAYOREO=?" );
				modified=true;
			}
		
			if (dto.isMinMayoreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MIN_MAYOREO=?" );
				modified=true;
			}
		
			if (dto.isIdSubcategoria2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_SUBCATEGORIA2=?" );
				modified=true;
			}
		
			if (dto.isIdSubcategoria3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_SUBCATEGORIA3=?" );
				modified=true;
			}
		
			if (dto.isIdSubcategoria4Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_SUBCATEGORIA4=?" );
				modified=true;
			}
		
			if (dto.isPrecioMinimoVentaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_MINIMO_VENTA=?" );
				modified=true;
			}
		
			if (dto.isNombreDesencriptadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_DESENCRIPTADO=?" );
				modified=true;
			}
		
			if (dto.isRutaImagenModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTA_IMAGEN=?" );
				modified=true;
			}
		
			if (dto.isRutaVideoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RUTA_VIDEO=?" );
				modified=true;
			}
		
			if (dto.isCaracteristiscasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CARACTERISTISCAS=?" );
				modified=true;
			}
		
			if (dto.isComisionPorcentajeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "COMISION_PORCENTAJE=?" );
				modified=true;
			}
		
			if (dto.isComisionMontoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "COMISION_MONTO=?" );
				modified=true;
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SINCRONIZACION_MICROSIP=?" );
				modified=true;
			}
		
			if (dto.isClaveModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CLAVE=?" );
				modified=true;
			}
		
			if (dto.isDesglosePiezasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESGLOSE_PIEZAS=?" );
				modified=true;
			}
		
			if (dto.isFolioConceptoMovilModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIO_CONCEPTO_MOVIL=?" );
				modified=true;
			}
		
			if (dto.isPrecioUnitarioGranelModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO_GRANEL=?" );
				modified=true;
			}
		
			if (dto.isPrecioMedioGranelModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_MEDIO_GRANEL=?" );
				modified=true;
			}
		
			if (dto.isPrecioMayoreoGranelModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_MAYOREO_GRANEL=?" );
				modified=true;
			}
		
			if (dto.isPrecioEspecialGranelModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_ESPECIAL_GRANEL=?" );
				modified=true;
			}
		
			if (dto.isIdConceptoPadreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO_PADRE=?" );
				modified=true;
			}
		
			if (dto.isMateriaPrimaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MATERIA_PRIMA=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_CONCEPTO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdConceptoModified()) {
				stmt.setInt( index++, dto.getIdConcepto() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isPrecioModified()) {
				if (dto.isPrecioNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getPrecio() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isIdentificacionModified()) {
				stmt.setString( index++, dto.getIdentificacion() );
			}
		
			if (dto.isIdCategoriaModified()) {
				if (dto.isIdCategoriaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCategoria() );
				}
		
			}
		
			if (dto.isIdMarcaModified()) {
				if (dto.isIdMarcaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdMarca() );
				}
		
			}
		
			if (dto.isIdSubcategoriaModified()) {
				if (dto.isIdSubcategoriaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSubcategoria() );
				}
		
			}
		
			if (dto.isIdEmbalajeModified()) {
				if (dto.isIdEmbalajeNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmbalaje() );
				}
		
			}
		
			if (dto.isIdImpuestoModified()) {
				if (dto.isIdImpuestoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdImpuesto() );
				}
		
			}
		
			if (dto.isPrecioCompraModified()) {
				if (dto.isPrecioCompraNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getPrecioCompra() );
				}
		
			}
		
			if (dto.isNumeroLoteModified()) {
				stmt.setString( index++, dto.getNumeroLote() );
			}
		
			if (dto.isFechaCaducidadModified()) {
				stmt.setDate(index++, dto.getFechaCaducidad()==null ? null : new java.sql.Date( dto.getFechaCaducidad().getTime() ) );
			}
		
			if (dto.isNumArticulosDisponiblesModified()) {
				if (dto.isNumArticulosDisponiblesNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getNumArticulosDisponibles() );
				}
		
			}
		
			if (dto.isGenericoModified()) {
				if (dto.isGenericoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getGenerico() );
				}
		
			}
		
			if (dto.isImagenCarpetaArchivoModified()) {
				stmt.setString( index++, dto.getImagenCarpetaArchivo() );
			}
		
			if (dto.isImagenNombreArchivoModified()) {
				stmt.setString( index++, dto.getImagenNombreArchivo() );
			}
		
			if (dto.isDescripcionCortaModified()) {
				stmt.setString( index++, dto.getDescripcionCorta() );
			}
		
			if (dto.isIdAlmacenModified()) {
				if (dto.isIdAlmacenNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdAlmacen() );
				}
		
			}
		
			if (dto.isStockMinimoModified()) {
				if (dto.isStockMinimoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getStockMinimo() );
				}
		
			}
		
			if (dto.isStockAvisoMinModified()) {
				if (dto.isStockAvisoMinNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getStockAvisoMin() );
				}
		
			}
		
			if (dto.isDetalleModified()) {
				stmt.setString( index++, dto.getDetalle() );
			}
		
			if (dto.isFechaAltaModified()) {
				stmt.setTimestamp(index++, dto.getFechaAlta()==null ? null : new java.sql.Timestamp( dto.getFechaAlta().getTime() ) );
			}
		
			if (dto.isVolumenModified()) {
				if (dto.isVolumenNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getVolumen() );
				}
		
			}
		
			if (dto.isPesoModified()) {
				if (dto.isPesoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPeso() );
				}
		
			}
		
			if (dto.isObservacionesModified()) {
				stmt.setString( index++, dto.getObservaciones() );
			}
		
			if (dto.isPrecioDocenaModified()) {
				if (dto.isPrecioDocenaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioDocena() );
				}
		
			}
		
			if (dto.isPrecioMayoreoModified()) {
				if (dto.isPrecioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMayoreo() );
				}
		
			}
		
			if (dto.isPrecioEspecialModified()) {
				if (dto.isPrecioEspecialNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioEspecial() );
				}
		
			}
		
			if (dto.isImpuestoXConceptoModified()) {
				if (dto.isImpuestoXConceptoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getImpuestoXConcepto() );
				}
		
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (dto.isDescuentoPorcentajeNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoPorcentaje() );
				}
		
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (dto.isDescuentoMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoMonto() );
				}
		
			}
		
			if (dto.isClaveartSaeModified()) {
				stmt.setString( index++, dto.getClaveartSae() );
			}
		
			if (dto.isPrecioMedioMayoreoModified()) {
				if (dto.isPrecioMedioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMedioMayoreo() );
				}
		
			}
		
			if (dto.isMaxMenudeoModified()) {
				if (dto.isMaxMenudeoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMaxMenudeo() );
				}
		
			}
		
			if (dto.isMinMedioMayoreoModified()) {
				if (dto.isMinMedioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMinMedioMayoreo() );
				}
		
			}
		
			if (dto.isMaxMedioMayoreoModified()) {
				if (dto.isMaxMedioMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMaxMedioMayoreo() );
				}
		
			}
		
			if (dto.isMinMayoreoModified()) {
				if (dto.isMinMayoreoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMinMayoreo() );
				}
		
			}
		
			if (dto.isIdSubcategoria2Modified()) {
				if (dto.isIdSubcategoria2Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSubcategoria2() );
				}
		
			}
		
			if (dto.isIdSubcategoria3Modified()) {
				if (dto.isIdSubcategoria3Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSubcategoria3() );
				}
		
			}
		
			if (dto.isIdSubcategoria4Modified()) {
				if (dto.isIdSubcategoria4Null()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSubcategoria4() );
				}
		
			}
		
			if (dto.isPrecioMinimoVentaModified()) {
				if (dto.isPrecioMinimoVentaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMinimoVenta() );
				}
		
			}
		
			if (dto.isNombreDesencriptadoModified()) {
				stmt.setString( index++, dto.getNombreDesencriptado() );
			}
		
			if (dto.isRutaImagenModified()) {
				stmt.setString( index++, dto.getRutaImagen() );
			}
		
			if (dto.isRutaVideoModified()) {
				stmt.setString( index++, dto.getRutaVideo() );
			}
		
			if (dto.isCaracteristiscasModified()) {
				stmt.setString( index++, dto.getCaracteristiscas() );
			}
		
			if (dto.isComisionPorcentajeModified()) {
				if (dto.isComisionPorcentajeNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getComisionPorcentaje() );
				}
		
			}
		
			if (dto.isComisionMontoModified()) {
				if (dto.isComisionMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getComisionMonto() );
				}
		
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (dto.isSincronizacionMicrosipNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getSincronizacionMicrosip() );
				}
		
			}
		
			if (dto.isClaveModified()) {
				stmt.setString( index++, dto.getClave() );
			}
		
			if (dto.isDesglosePiezasModified()) {
				if (dto.isDesglosePiezasNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDesglosePiezas() );
				}
		
			}
		
			if (dto.isFolioConceptoMovilModified()) {
				stmt.setString( index++, dto.getFolioConceptoMovil() );
			}
		
			if (dto.isPrecioUnitarioGranelModified()) {
				if (dto.isPrecioUnitarioGranelNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioUnitarioGranel() );
				}
		
			}
		
			if (dto.isPrecioMedioGranelModified()) {
				if (dto.isPrecioMedioGranelNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMedioGranel() );
				}
		
			}
		
			if (dto.isPrecioMayoreoGranelModified()) {
				if (dto.isPrecioMayoreoGranelNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMayoreoGranel() );
				}
		
			}
		
			if (dto.isPrecioEspecialGranelModified()) {
				if (dto.isPrecioEspecialGranelNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioEspecialGranel() );
				}
		
			}
		
			if (dto.isIdConceptoPadreModified()) {
				if (dto.isIdConceptoPadreNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdConceptoPadre() );
				}
		
			}
		
			if (dto.isMateriaPrimaModified()) {
				if (dto.isMateriaPrimaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getMateriaPrima() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdConcepto() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the concepto table.
	 */
	public void delete(ConceptoPk pk) throws ConceptoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdConcepto() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the concepto table that matches the specified primary-key value.
	 */
	public Concepto findByPrimaryKey(ConceptoPk pk) throws ConceptoDaoException
	{
		return findByPrimaryKey( pk.getIdConcepto() );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public Concepto findByPrimaryKey(int idConcepto) throws ConceptoDaoException
	{
		Concepto ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO = ?", new Object[] {  new Integer(idConcepto) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria ''.
	 */
	public Concepto[] findAll() throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_CONCEPTO", null );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public Concepto[] findWhereIdConceptoEquals(int idConcepto) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO = ? ORDER BY ID_CONCEPTO", new Object[] {  new Integer(idConcepto) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Concepto[] findWhereIdEmpresaEquals(int idEmpresa) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'NOMBRE = :nombre'.
	 */
	public Concepto[] findWhereNombreEquals(String nombre) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE = ? ORDER BY NOMBRE", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public Concepto[] findWhereDescripcionEquals(String descripcion) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION = ? ORDER BY DESCRIPCION", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'PRECIO = :precio'.
	 */
	public Concepto[] findWherePrecioEquals(float precio) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO = ? ORDER BY PRECIO", new Object[] {  new Float(precio) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Concepto[] findWhereIdEstatusEquals(int idEstatus) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'IDENTIFICACION = :identificacion'.
	 */
	public Concepto[] findWhereIdentificacionEquals(String identificacion) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDENTIFICACION = ? ORDER BY IDENTIFICACION", new Object[] { identificacion } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'id_categoria = :idCategoria'.
	 */
	public Concepto[] findWhereIdCategoriaEquals(int idCategoria) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_categoria = ? ORDER BY id_categoria", new Object[] {  new Integer(idCategoria) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'ID_MARCA = :idMarca'.
	 */
	public Concepto[] findWhereIdMarcaEquals(int idMarca) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_MARCA = ? ORDER BY ID_MARCA", new Object[] {  new Integer(idMarca) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'ID_SUBCATEGORIA = :idSubcategoria'.
	 */
	public Concepto[] findWhereIdSubcategoriaEquals(int idSubcategoria) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_SUBCATEGORIA = ? ORDER BY ID_SUBCATEGORIA", new Object[] {  new Integer(idSubcategoria) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'ID_EMBALAJE = :idEmbalaje'.
	 */
	public Concepto[] findWhereIdEmbalajeEquals(int idEmbalaje) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMBALAJE = ? ORDER BY ID_EMBALAJE", new Object[] {  new Integer(idEmbalaje) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'ID_IMPUESTO = :idImpuesto'.
	 */
	public Concepto[] findWhereIdImpuestoEquals(int idImpuesto) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_IMPUESTO = ? ORDER BY ID_IMPUESTO", new Object[] {  new Integer(idImpuesto) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'PRECIO_COMPRA = :precioCompra'.
	 */
	public Concepto[] findWherePrecioCompraEquals(float precioCompra) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_COMPRA = ? ORDER BY PRECIO_COMPRA", new Object[] {  new Float(precioCompra) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'NUMERO_LOTE = :numeroLote'.
	 */
	public Concepto[] findWhereNumeroLoteEquals(String numeroLote) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMERO_LOTE = ? ORDER BY NUMERO_LOTE", new Object[] { numeroLote } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'FECHA_CADUCIDAD = :fechaCaducidad'.
	 */
	public Concepto[] findWhereFechaCaducidadEquals(Date fechaCaducidad) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_CADUCIDAD = ? ORDER BY FECHA_CADUCIDAD", new Object[] { fechaCaducidad==null ? null : new java.sql.Date( fechaCaducidad.getTime() ) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'NUM_ARTICULOS_DISPONIBLES = :numArticulosDisponibles'.
	 */
	public Concepto[] findWhereNumArticulosDisponiblesEquals(double numArticulosDisponibles) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUM_ARTICULOS_DISPONIBLES = ? ORDER BY NUM_ARTICULOS_DISPONIBLES", new Object[] {  new Double(numArticulosDisponibles) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'GENERICO = :generico'.
	 */
	public Concepto[] findWhereGenericoEquals(int generico) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GENERICO = ? ORDER BY GENERICO", new Object[] {  new Integer(generico) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'IMAGEN_CARPETA_ARCHIVO = :imagenCarpetaArchivo'.
	 */
	public Concepto[] findWhereImagenCarpetaArchivoEquals(String imagenCarpetaArchivo) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMAGEN_CARPETA_ARCHIVO = ? ORDER BY IMAGEN_CARPETA_ARCHIVO", new Object[] { imagenCarpetaArchivo } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'IMAGEN_NOMBRE_ARCHIVO = :imagenNombreArchivo'.
	 */
	public Concepto[] findWhereImagenNombreArchivoEquals(String imagenNombreArchivo) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMAGEN_NOMBRE_ARCHIVO = ? ORDER BY IMAGEN_NOMBRE_ARCHIVO", new Object[] { imagenNombreArchivo } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'DESCRIPCION_CORTA = :descripcionCorta'.
	 */
	public Concepto[] findWhereDescripcionCortaEquals(String descripcionCorta) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION_CORTA = ? ORDER BY DESCRIPCION_CORTA", new Object[] { descripcionCorta } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'ID_ALMACEN = :idAlmacen'.
	 */
	public Concepto[] findWhereIdAlmacenEquals(int idAlmacen) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ALMACEN = ? ORDER BY ID_ALMACEN", new Object[] {  new Integer(idAlmacen) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'STOCK_MINIMO = :stockMinimo'.
	 */
	public Concepto[] findWhereStockMinimoEquals(double stockMinimo) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STOCK_MINIMO = ? ORDER BY STOCK_MINIMO", new Object[] {  new Double(stockMinimo) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'STOCK_AVISO_MIN = :stockAvisoMin'.
	 */
	public Concepto[] findWhereStockAvisoMinEquals(short stockAvisoMin) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STOCK_AVISO_MIN = ? ORDER BY STOCK_AVISO_MIN", new Object[] {  new Short(stockAvisoMin) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'DETALLE = :detalle'.
	 */
	public Concepto[] findWhereDetalleEquals(String detalle) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DETALLE = ? ORDER BY DETALLE", new Object[] { detalle } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'FECHA_ALTA = :fechaAlta'.
	 */
	public Concepto[] findWhereFechaAltaEquals(Date fechaAlta) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_ALTA = ? ORDER BY FECHA_ALTA", new Object[] { fechaAlta==null ? null : new java.sql.Timestamp( fechaAlta.getTime() ) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'VOLUMEN = :volumen'.
	 */
	public Concepto[] findWhereVolumenEquals(double volumen) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VOLUMEN = ? ORDER BY VOLUMEN", new Object[] {  new Double(volumen) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'PESO = :peso'.
	 */
	public Concepto[] findWherePesoEquals(double peso) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PESO = ? ORDER BY PESO", new Object[] {  new Double(peso) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'OBSERVACIONES = :observaciones'.
	 */
	public Concepto[] findWhereObservacionesEquals(String observaciones) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OBSERVACIONES = ? ORDER BY OBSERVACIONES", new Object[] { observaciones } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'PRECIO_DOCENA = :precioDocena'.
	 */
	public Concepto[] findWherePrecioDocenaEquals(double precioDocena) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_DOCENA = ? ORDER BY PRECIO_DOCENA", new Object[] {  new Double(precioDocena) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'PRECIO_MAYOREO = :precioMayoreo'.
	 */
	public Concepto[] findWherePrecioMayoreoEquals(double precioMayoreo) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_MAYOREO = ? ORDER BY PRECIO_MAYOREO", new Object[] {  new Double(precioMayoreo) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'PRECIO_ESPECIAL = :precioEspecial'.
	 */
	public Concepto[] findWherePrecioEspecialEquals(double precioEspecial) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_ESPECIAL = ? ORDER BY PRECIO_ESPECIAL", new Object[] {  new Double(precioEspecial) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'IMPUESTO_X_CONCEPTO = :impuestoXConcepto'.
	 */
	public Concepto[] findWhereImpuestoXConceptoEquals(int impuestoXConcepto) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPUESTO_X_CONCEPTO = ? ORDER BY IMPUESTO_X_CONCEPTO", new Object[] {  new Integer(impuestoXConcepto) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'DESCUENTO_PORCENTAJE = :descuentoPorcentaje'.
	 */
	public Concepto[] findWhereDescuentoPorcentajeEquals(double descuentoPorcentaje) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_PORCENTAJE = ? ORDER BY DESCUENTO_PORCENTAJE", new Object[] {  new Double(descuentoPorcentaje) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'DESCUENTO_MONTO = :descuentoMonto'.
	 */
	public Concepto[] findWhereDescuentoMontoEquals(double descuentoMonto) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_MONTO = ? ORDER BY DESCUENTO_MONTO", new Object[] {  new Double(descuentoMonto) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'CLAVEART_SAE = :claveartSae'.
	 */
	public Concepto[] findWhereClaveartSaeEquals(String claveartSae) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLAVEART_SAE = ? ORDER BY CLAVEART_SAE", new Object[] { claveartSae } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'PRECIO_MEDIO_MAYOREO = :precioMedioMayoreo'.
	 */
	public Concepto[] findWherePrecioMedioMayoreoEquals(double precioMedioMayoreo) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_MEDIO_MAYOREO = ? ORDER BY PRECIO_MEDIO_MAYOREO", new Object[] {  new Double(precioMedioMayoreo) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'MAX_MENUDEO = :maxMenudeo'.
	 */
	public Concepto[] findWhereMaxMenudeoEquals(double maxMenudeo) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MAX_MENUDEO = ? ORDER BY MAX_MENUDEO", new Object[] {  new Double(maxMenudeo) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'MIN_MEDIO_MAYOREO = :minMedioMayoreo'.
	 */
	public Concepto[] findWhereMinMedioMayoreoEquals(double minMedioMayoreo) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MIN_MEDIO_MAYOREO = ? ORDER BY MIN_MEDIO_MAYOREO", new Object[] {  new Double(minMedioMayoreo) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'MAX_MEDIO_MAYOREO = :maxMedioMayoreo'.
	 */
	public Concepto[] findWhereMaxMedioMayoreoEquals(double maxMedioMayoreo) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MAX_MEDIO_MAYOREO = ? ORDER BY MAX_MEDIO_MAYOREO", new Object[] {  new Double(maxMedioMayoreo) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'MIN_MAYOREO = :minMayoreo'.
	 */
	public Concepto[] findWhereMinMayoreoEquals(double minMayoreo) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MIN_MAYOREO = ? ORDER BY MIN_MAYOREO", new Object[] {  new Double(minMayoreo) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'ID_SUBCATEGORIA2 = :idSubcategoria2'.
	 */
	public Concepto[] findWhereIdSubcategoria2Equals(int idSubcategoria2) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_SUBCATEGORIA2 = ? ORDER BY ID_SUBCATEGORIA2", new Object[] {  new Integer(idSubcategoria2) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'ID_SUBCATEGORIA3 = :idSubcategoria3'.
	 */
	public Concepto[] findWhereIdSubcategoria3Equals(int idSubcategoria3) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_SUBCATEGORIA3 = ? ORDER BY ID_SUBCATEGORIA3", new Object[] {  new Integer(idSubcategoria3) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'ID_SUBCATEGORIA4 = :idSubcategoria4'.
	 */
	public Concepto[] findWhereIdSubcategoria4Equals(int idSubcategoria4) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_SUBCATEGORIA4 = ? ORDER BY ID_SUBCATEGORIA4", new Object[] {  new Integer(idSubcategoria4) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'PRECIO_MINIMO_VENTA = :precioMinimoVenta'.
	 */
	public Concepto[] findWherePrecioMinimoVentaEquals(double precioMinimoVenta) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_MINIMO_VENTA = ? ORDER BY PRECIO_MINIMO_VENTA", new Object[] {  new Double(precioMinimoVenta) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'NOMBRE_DESENCRIPTADO = :nombreDesencriptado'.
	 */
	public Concepto[] findWhereNombreDesencriptadoEquals(String nombreDesencriptado) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_DESENCRIPTADO = ? ORDER BY NOMBRE_DESENCRIPTADO", new Object[] { nombreDesencriptado } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'RUTA_IMAGEN = :rutaImagen'.
	 */
	public Concepto[] findWhereRutaImagenEquals(String rutaImagen) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTA_IMAGEN = ? ORDER BY RUTA_IMAGEN", new Object[] { rutaImagen } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'RUTA_VIDEO = :rutaVideo'.
	 */
	public Concepto[] findWhereRutaVideoEquals(String rutaVideo) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTA_VIDEO = ? ORDER BY RUTA_VIDEO", new Object[] { rutaVideo } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'CARACTERISTISCAS = :caracteristiscas'.
	 */
	public Concepto[] findWhereCaracteristiscasEquals(String caracteristiscas) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CARACTERISTISCAS = ? ORDER BY CARACTERISTISCAS", new Object[] { caracteristiscas } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'COMISION_PORCENTAJE = :comisionPorcentaje'.
	 */
	public Concepto[] findWhereComisionPorcentajeEquals(double comisionPorcentaje) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMISION_PORCENTAJE = ? ORDER BY COMISION_PORCENTAJE", new Object[] {  new Double(comisionPorcentaje) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'COMISION_MONTO = :comisionMonto'.
	 */
	public Concepto[] findWhereComisionMontoEquals(double comisionMonto) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMISION_MONTO = ? ORDER BY COMISION_MONTO", new Object[] {  new Double(comisionMonto) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'SINCRONIZACION_MICROSIP = :sincronizacionMicrosip'.
	 */
	public Concepto[] findWhereSincronizacionMicrosipEquals(int sincronizacionMicrosip) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SINCRONIZACION_MICROSIP = ? ORDER BY SINCRONIZACION_MICROSIP", new Object[] {  new Integer(sincronizacionMicrosip) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'CLAVE = :clave'.
	 */
	public Concepto[] findWhereClaveEquals(String clave) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLAVE = ? ORDER BY CLAVE", new Object[] { clave } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'DESGLOSE_PIEZAS = :desglosePiezas'.
	 */
	public Concepto[] findWhereDesglosePiezasEquals(double desglosePiezas) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESGLOSE_PIEZAS = ? ORDER BY DESGLOSE_PIEZAS", new Object[] {  new Double(desglosePiezas) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'FOLIO_CONCEPTO_MOVIL = :folioConceptoMovil'.
	 */
	public Concepto[] findWhereFolioConceptoMovilEquals(String folioConceptoMovil) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_CONCEPTO_MOVIL = ? ORDER BY FOLIO_CONCEPTO_MOVIL", new Object[] { folioConceptoMovil } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'PRECIO_UNITARIO_GRANEL = :precioUnitarioGranel'.
	 */
	public Concepto[] findWherePrecioUnitarioGranelEquals(double precioUnitarioGranel) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_UNITARIO_GRANEL = ? ORDER BY PRECIO_UNITARIO_GRANEL", new Object[] {  new Double(precioUnitarioGranel) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'PRECIO_MEDIO_GRANEL = :precioMedioGranel'.
	 */
	public Concepto[] findWherePrecioMedioGranelEquals(double precioMedioGranel) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_MEDIO_GRANEL = ? ORDER BY PRECIO_MEDIO_GRANEL", new Object[] {  new Double(precioMedioGranel) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'PRECIO_MAYOREO_GRANEL = :precioMayoreoGranel'.
	 */
	public Concepto[] findWherePrecioMayoreoGranelEquals(double precioMayoreoGranel) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_MAYOREO_GRANEL = ? ORDER BY PRECIO_MAYOREO_GRANEL", new Object[] {  new Double(precioMayoreoGranel) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'PRECIO_ESPECIAL_GRANEL = :precioEspecialGranel'.
	 */
	public Concepto[] findWherePrecioEspecialGranelEquals(double precioEspecialGranel) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_ESPECIAL_GRANEL = ? ORDER BY PRECIO_ESPECIAL_GRANEL", new Object[] {  new Double(precioEspecialGranel) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'ID_CONCEPTO_PADRE = :idConceptoPadre'.
	 */
	public Concepto[] findWhereIdConceptoPadreEquals(int idConceptoPadre) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO_PADRE = ? ORDER BY ID_CONCEPTO_PADRE", new Object[] {  new Integer(idConceptoPadre) } );
	}

	/** 
	 * Returns all rows from the concepto table that match the criteria 'MATERIA_PRIMA = :materiaPrima'.
	 */
	public Concepto[] findWhereMateriaPrimaEquals(int materiaPrima) throws ConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MATERIA_PRIMA = ? ORDER BY MATERIA_PRIMA", new Object[] {  new Integer(materiaPrima) } );
	}

	/**
	 * Method 'ConceptoDaoImpl'
	 * 
	 */
	public ConceptoDaoImpl()
	{
	}

	/**
	 * Method 'ConceptoDaoImpl'
	 * 
	 * @param userConn
	 */
	public ConceptoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "concepto";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Concepto fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Concepto dto = new Concepto();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Concepto[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Concepto dto = new Concepto();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Concepto ret[] = new Concepto[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Concepto dto, ResultSet rs) throws SQLException
	{
		dto.setIdConcepto( rs.getInt( COLUMN_ID_CONCEPTO ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setPrecio( rs.getFloat( COLUMN_PRECIO ) );
		if (rs.wasNull()) {
			dto.setPrecioNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setIdentificacion( rs.getString( COLUMN_IDENTIFICACION ) );
		dto.setIdCategoria( rs.getInt( COLUMN_ID_CATEGORIA ) );
		if (rs.wasNull()) {
			dto.setIdCategoriaNull( true );
		}
		
		dto.setIdMarca( rs.getInt( COLUMN_ID_MARCA ) );
		if (rs.wasNull()) {
			dto.setIdMarcaNull( true );
		}
		
		dto.setIdSubcategoria( rs.getInt( COLUMN_ID_SUBCATEGORIA ) );
		if (rs.wasNull()) {
			dto.setIdSubcategoriaNull( true );
		}
		
		dto.setIdEmbalaje( rs.getInt( COLUMN_ID_EMBALAJE ) );
		if (rs.wasNull()) {
			dto.setIdEmbalajeNull( true );
		}
		
		dto.setIdImpuesto( rs.getInt( COLUMN_ID_IMPUESTO ) );
		if (rs.wasNull()) {
			dto.setIdImpuestoNull( true );
		}
		
		dto.setPrecioCompra( rs.getFloat( COLUMN_PRECIO_COMPRA ) );
		if (rs.wasNull()) {
			dto.setPrecioCompraNull( true );
		}
		
		dto.setNumeroLote( rs.getString( COLUMN_NUMERO_LOTE ) );
		dto.setFechaCaducidad( rs.getDate(COLUMN_FECHA_CADUCIDAD ) );
		dto.setNumArticulosDisponibles( rs.getDouble( COLUMN_NUM_ARTICULOS_DISPONIBLES ) );
		if (rs.wasNull()) {
			dto.setNumArticulosDisponiblesNull( true );
		}
		
		dto.setGenerico( rs.getInt( COLUMN_GENERICO ) );
		if (rs.wasNull()) {
			dto.setGenericoNull( true );
		}
		
		dto.setImagenCarpetaArchivo( rs.getString( COLUMN_IMAGEN_CARPETA_ARCHIVO ) );
		dto.setImagenNombreArchivo( rs.getString( COLUMN_IMAGEN_NOMBRE_ARCHIVO ) );
		dto.setDescripcionCorta( rs.getString( COLUMN_DESCRIPCION_CORTA ) );
		dto.setIdAlmacen( rs.getInt( COLUMN_ID_ALMACEN ) );
		if (rs.wasNull()) {
			dto.setIdAlmacenNull( true );
		}
		
		dto.setStockMinimo( rs.getDouble( COLUMN_STOCK_MINIMO ) );
		if (rs.wasNull()) {
			dto.setStockMinimoNull( true );
		}
		
		dto.setStockAvisoMin( rs.getShort( COLUMN_STOCK_AVISO_MIN ) );
		if (rs.wasNull()) {
			dto.setStockAvisoMinNull( true );
		}
		
		dto.setDetalle( rs.getString( COLUMN_DETALLE ) );
		dto.setFechaAlta( rs.getTimestamp(COLUMN_FECHA_ALTA ) );
		dto.setVolumen( rs.getDouble( COLUMN_VOLUMEN ) );
		if (rs.wasNull()) {
			dto.setVolumenNull( true );
		}
		
		dto.setPeso( rs.getDouble( COLUMN_PESO ) );
		if (rs.wasNull()) {
			dto.setPesoNull( true );
		}
		
		dto.setObservaciones( rs.getString( COLUMN_OBSERVACIONES ) );
		dto.setPrecioDocena( rs.getDouble( COLUMN_PRECIO_DOCENA ) );
		if (rs.wasNull()) {
			dto.setPrecioDocenaNull( true );
		}
		
		dto.setPrecioMayoreo( rs.getDouble( COLUMN_PRECIO_MAYOREO ) );
		if (rs.wasNull()) {
			dto.setPrecioMayoreoNull( true );
		}
		
		dto.setPrecioEspecial( rs.getDouble( COLUMN_PRECIO_ESPECIAL ) );
		if (rs.wasNull()) {
			dto.setPrecioEspecialNull( true );
		}
		
		dto.setImpuestoXConcepto( rs.getInt( COLUMN_IMPUESTO_X_CONCEPTO ) );
		if (rs.wasNull()) {
			dto.setImpuestoXConceptoNull( true );
		}
		
		dto.setDescuentoPorcentaje( rs.getDouble( COLUMN_DESCUENTO_PORCENTAJE ) );
		if (rs.wasNull()) {
			dto.setDescuentoPorcentajeNull( true );
		}
		
		dto.setDescuentoMonto( rs.getDouble( COLUMN_DESCUENTO_MONTO ) );
		if (rs.wasNull()) {
			dto.setDescuentoMontoNull( true );
		}
		
		dto.setClaveartSae( rs.getString( COLUMN_CLAVEART_SAE ) );
		dto.setPrecioMedioMayoreo( rs.getDouble( COLUMN_PRECIO_MEDIO_MAYOREO ) );
		if (rs.wasNull()) {
			dto.setPrecioMedioMayoreoNull( true );
		}
		
		dto.setMaxMenudeo( rs.getDouble( COLUMN_MAX_MENUDEO ) );
		if (rs.wasNull()) {
			dto.setMaxMenudeoNull( true );
		}
		
		dto.setMinMedioMayoreo( rs.getDouble( COLUMN_MIN_MEDIO_MAYOREO ) );
		if (rs.wasNull()) {
			dto.setMinMedioMayoreoNull( true );
		}
		
		dto.setMaxMedioMayoreo( rs.getDouble( COLUMN_MAX_MEDIO_MAYOREO ) );
		if (rs.wasNull()) {
			dto.setMaxMedioMayoreoNull( true );
		}
		
		dto.setMinMayoreo( rs.getDouble( COLUMN_MIN_MAYOREO ) );
		if (rs.wasNull()) {
			dto.setMinMayoreoNull( true );
		}
		
		dto.setIdSubcategoria2( rs.getInt( COLUMN_ID_SUBCATEGORIA2 ) );
		if (rs.wasNull()) {
			dto.setIdSubcategoria2Null( true );
		}
		
		dto.setIdSubcategoria3( rs.getInt( COLUMN_ID_SUBCATEGORIA3 ) );
		if (rs.wasNull()) {
			dto.setIdSubcategoria3Null( true );
		}
		
		dto.setIdSubcategoria4( rs.getInt( COLUMN_ID_SUBCATEGORIA4 ) );
		if (rs.wasNull()) {
			dto.setIdSubcategoria4Null( true );
		}
		
		dto.setPrecioMinimoVenta( rs.getDouble( COLUMN_PRECIO_MINIMO_VENTA ) );
		if (rs.wasNull()) {
			dto.setPrecioMinimoVentaNull( true );
		}
		
		dto.setNombreDesencriptado( rs.getString( COLUMN_NOMBRE_DESENCRIPTADO ) );
		dto.setRutaImagen( rs.getString( COLUMN_RUTA_IMAGEN ) );
		dto.setRutaVideo( rs.getString( COLUMN_RUTA_VIDEO ) );
		dto.setCaracteristiscas( rs.getString( COLUMN_CARACTERISTISCAS ) );
		dto.setComisionPorcentaje( rs.getDouble( COLUMN_COMISION_PORCENTAJE ) );
		if (rs.wasNull()) {
			dto.setComisionPorcentajeNull( true );
		}
		
		dto.setComisionMonto( rs.getDouble( COLUMN_COMISION_MONTO ) );
		if (rs.wasNull()) {
			dto.setComisionMontoNull( true );
		}
		
		dto.setSincronizacionMicrosip( rs.getInt( COLUMN_SINCRONIZACION_MICROSIP ) );
		if (rs.wasNull()) {
			dto.setSincronizacionMicrosipNull( true );
		}
		
		dto.setClave( rs.getString( COLUMN_CLAVE ) );
		dto.setDesglosePiezas( rs.getDouble( COLUMN_DESGLOSE_PIEZAS ) );
		if (rs.wasNull()) {
			dto.setDesglosePiezasNull( true );
		}
		
		dto.setFolioConceptoMovil( rs.getString( COLUMN_FOLIO_CONCEPTO_MOVIL ) );
		dto.setPrecioUnitarioGranel( rs.getDouble( COLUMN_PRECIO_UNITARIO_GRANEL ) );
		if (rs.wasNull()) {
			dto.setPrecioUnitarioGranelNull( true );
		}
		
		dto.setPrecioMedioGranel( rs.getDouble( COLUMN_PRECIO_MEDIO_GRANEL ) );
		if (rs.wasNull()) {
			dto.setPrecioMedioGranelNull( true );
		}
		
		dto.setPrecioMayoreoGranel( rs.getDouble( COLUMN_PRECIO_MAYOREO_GRANEL ) );
		if (rs.wasNull()) {
			dto.setPrecioMayoreoGranelNull( true );
		}
		
		dto.setPrecioEspecialGranel( rs.getDouble( COLUMN_PRECIO_ESPECIAL_GRANEL ) );
		if (rs.wasNull()) {
			dto.setPrecioEspecialGranelNull( true );
		}
		
		dto.setIdConceptoPadre( rs.getInt( COLUMN_ID_CONCEPTO_PADRE ) );
		if (rs.wasNull()) {
			dto.setIdConceptoPadreNull( true );
		}
		
		dto.setMateriaPrima( rs.getInt( COLUMN_MATERIA_PRIMA ) );
		if (rs.wasNull()) {
			dto.setMateriaPrimaNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Concepto dto)
	{
		dto.setIdConceptoModified( false );
		dto.setIdEmpresaModified( false );
		dto.setNombreModified( false );
		dto.setDescripcionModified( false );
		dto.setPrecioModified( false );
		dto.setIdEstatusModified( false );
		dto.setIdentificacionModified( false );
		dto.setIdCategoriaModified( false );
		dto.setIdMarcaModified( false );
		dto.setIdSubcategoriaModified( false );
		dto.setIdEmbalajeModified( false );
		dto.setIdImpuestoModified( false );
		dto.setPrecioCompraModified( false );
		dto.setNumeroLoteModified( false );
		dto.setFechaCaducidadModified( false );
		dto.setNumArticulosDisponiblesModified( false );
		dto.setGenericoModified( false );
		dto.setImagenCarpetaArchivoModified( false );
		dto.setImagenNombreArchivoModified( false );
		dto.setDescripcionCortaModified( false );
		dto.setIdAlmacenModified( false );
		dto.setStockMinimoModified( false );
		dto.setStockAvisoMinModified( false );
		dto.setDetalleModified( false );
		dto.setFechaAltaModified( false );
		dto.setVolumenModified( false );
		dto.setPesoModified( false );
		dto.setObservacionesModified( false );
		dto.setPrecioDocenaModified( false );
		dto.setPrecioMayoreoModified( false );
		dto.setPrecioEspecialModified( false );
		dto.setImpuestoXConceptoModified( false );
		dto.setDescuentoPorcentajeModified( false );
		dto.setDescuentoMontoModified( false );
		dto.setClaveartSaeModified( false );
		dto.setPrecioMedioMayoreoModified( false );
		dto.setMaxMenudeoModified( false );
		dto.setMinMedioMayoreoModified( false );
		dto.setMaxMedioMayoreoModified( false );
		dto.setMinMayoreoModified( false );
		dto.setIdSubcategoria2Modified( false );
		dto.setIdSubcategoria3Modified( false );
		dto.setIdSubcategoria4Modified( false );
		dto.setPrecioMinimoVentaModified( false );
		dto.setNombreDesencriptadoModified( false );
		dto.setRutaImagenModified( false );
		dto.setRutaVideoModified( false );
		dto.setCaracteristiscasModified( false );
		dto.setComisionPorcentajeModified( false );
		dto.setComisionMontoModified( false );
		dto.setSincronizacionMicrosipModified( false );
		dto.setClaveModified( false );
		dto.setDesglosePiezasModified( false );
		dto.setFolioConceptoMovilModified( false );
		dto.setPrecioUnitarioGranelModified( false );
		dto.setPrecioMedioGranelModified( false );
		dto.setPrecioMayoreoGranelModified( false );
		dto.setPrecioEspecialGranelModified( false );
		dto.setIdConceptoPadreModified( false );
		dto.setMateriaPrimaModified( false );
	}

	/** 
	 * Returns all rows from the concepto table that match the specified arbitrary SQL statement
	 */
	public Concepto[] findByDynamicSelect(String sql, Object[] sqlParams) throws ConceptoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the concepto table that match the specified arbitrary SQL statement
	 */
	public Concepto[] findByDynamicWhere(String sql, Object[] sqlParams) throws ConceptoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

        protected final String SQL_SELECT_MAX = "SELECT ID_CONCEPTO, ID_EMPRESA, NOMBRE, DESCRIPCION, PRECIO, ID_ESTATUS, IDENTIFICACION, id_categoria, ID_MARCA, ID_SUBCATEGORIA, ID_EMBALAJE, ID_IMPUESTO, PRECIO_COMPRA, NUMERO_LOTE, FECHA_CADUCIDAD, NUM_ARTICULOS_DISPONIBLES, GENERICO, IMAGEN_CARPETA_ARCHIVO, IMAGEN_NOMBRE_ARCHIVO, DESCRIPCION_CORTA, ID_ALMACEN, STOCK_MINIMO, STOCK_AVISO_MIN, DETALLE, FECHA_ALTA, VOLUMEN, PESO, OBSERVACIONES, PRECIO_DOCENA, PRECIO_MAYOREO, PRECIO_ESPECIAL, IMPUESTO_X_CONCEPTO, DESCUENTO_PORCENTAJE, DESCUENTO_MONTO, CLAVEART_SAE, PRECIO_MEDIO_MAYOREO, MAX_MENUDEO, MIN_MEDIO_MAYOREO, MAX_MEDIO_MAYOREO, MIN_MAYOREO, ID_SUBCATEGORIA2, ID_SUBCATEGORIA3, ID_SUBCATEGORIA4, PRECIO_MINIMO_VENTA, NOMBRE_DESENCRIPTADO, RUTA_IMAGEN, RUTA_VIDEO, CARACTERISTISCAS, COMISION_PORCENTAJE, COMISION_MONTO, SINCRONIZACION_MICROSIP, CLAVE, DESGLOSE_PIEZAS, FOLIO_CONCEPTO_MOVIL, PRECIO_UNITARIO_GRANEL, PRECIO_MEDIO_GRANEL, PRECIO_MAYOREO_GRANEL, PRECIO_ESPECIAL_GRANEL, ID_CONCEPTO_PADRE, MATERIA_PRIMA FROM " + getTableName() + " ORDER BY ID_CONCEPTO DESC LIMIT 1 ";
                
	public Concepto findLast() throws ConceptoDaoException	{
		Concepto ret[] = findByDynamicSelect( SQL_SELECT_MAX , new Object[0] );
		return ret.length==0 ? null : ret[0];
        }

}
