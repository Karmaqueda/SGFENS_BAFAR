/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class InventarioInicialVendedorDaoImpl extends AbstractDAO implements InventarioInicialVendedorDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_EMPLEADO, ID_CONCEPTO, CANTIDAD, FECHA_REGISTRO, FECHA_HR_ULT_ADICION, OBSERVACION_ULT_ADICION FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_EMPLEADO, ID_CONCEPTO, CANTIDAD, FECHA_REGISTRO, FECHA_HR_ULT_ADICION, OBSERVACION_ULT_ADICION ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * Index of column ID_EMPLEADO
	 */
	protected static final int COLUMN_ID_EMPLEADO = 1;

	/** 
	 * Index of column ID_CONCEPTO
	 */
	protected static final int COLUMN_ID_CONCEPTO = 2;

	/** 
	 * Index of column CANTIDAD
	 */
	protected static final int COLUMN_CANTIDAD = 3;

	/** 
	 * Index of column FECHA_REGISTRO
	 */
	protected static final int COLUMN_FECHA_REGISTRO = 4;

	/** 
	 * Index of column FECHA_HR_ULT_ADICION
	 */
	protected static final int COLUMN_FECHA_HR_ULT_ADICION = 5;

	/** 
	 * Index of column OBSERVACION_ULT_ADICION
	 */
	protected static final int COLUMN_OBSERVACION_ULT_ADICION = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Inserts a new row in the inventario_inicial_vendedor table.
	 */
	public void insert(InventarioInicialVendedor dto) throws InventarioInicialVendedorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdEmpleadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPLEADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CANTIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaRegistroModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_REGISTRO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHrUltAdicionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_HR_ULT_ADICION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isObservacionUltAdicionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "OBSERVACION_ULT_ADICION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdEmpleado() );
			}
		
			if (dto.isIdConceptoModified()) {
				stmt.setInt( index++, dto.getIdConcepto() );
			}
		
			if (dto.isCantidadModified()) {
				stmt.setDouble( index++, dto.getCantidad() );
			}
		
			if (dto.isFechaRegistroModified()) {
				stmt.setTimestamp(index++, dto.getFechaRegistro()==null ? null : new java.sql.Timestamp( dto.getFechaRegistro().getTime() ) );
			}
		
			if (dto.isFechaHrUltAdicionModified()) {
				stmt.setTimestamp(index++, dto.getFechaHrUltAdicion()==null ? null : new java.sql.Timestamp( dto.getFechaHrUltAdicion().getTime() ) );
			}
		
			if (dto.isObservacionUltAdicionModified()) {
				stmt.setString( index++, dto.getObservacionUltAdicion() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InventarioInicialVendedorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the inventario_inicial_vendedor table that match the criteria ''.
	 */
	public InventarioInicialVendedor[] findAll() throws InventarioInicialVendedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the inventario_inicial_vendedor table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public InventarioInicialVendedor[] findWhereIdEmpleadoEquals(int idEmpleado) throws InventarioInicialVendedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPLEADO = ? ORDER BY ID_EMPLEADO", new Object[] {  new Integer(idEmpleado) } );
	}

	/** 
	 * Returns all rows from the inventario_inicial_vendedor table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public InventarioInicialVendedor[] findWhereIdConceptoEquals(int idConcepto) throws InventarioInicialVendedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO = ? ORDER BY ID_CONCEPTO", new Object[] {  new Integer(idConcepto) } );
	}

	/** 
	 * Returns all rows from the inventario_inicial_vendedor table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public InventarioInicialVendedor[] findWhereCantidadEquals(double cantidad) throws InventarioInicialVendedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD = ? ORDER BY CANTIDAD", new Object[] {  new Double(cantidad) } );
	}

	/** 
	 * Returns all rows from the inventario_inicial_vendedor table that match the criteria 'FECHA_REGISTRO = :fechaRegistro'.
	 */
	public InventarioInicialVendedor[] findWhereFechaRegistroEquals(Date fechaRegistro) throws InventarioInicialVendedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_REGISTRO = ? ORDER BY FECHA_REGISTRO", new Object[] { fechaRegistro==null ? null : new java.sql.Timestamp( fechaRegistro.getTime() ) } );
	}

	/** 
	 * Returns all rows from the inventario_inicial_vendedor table that match the criteria 'FECHA_HR_ULT_ADICION = :fechaHrUltAdicion'.
	 */
	public InventarioInicialVendedor[] findWhereFechaHrUltAdicionEquals(Date fechaHrUltAdicion) throws InventarioInicialVendedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_HR_ULT_ADICION = ? ORDER BY FECHA_HR_ULT_ADICION", new Object[] { fechaHrUltAdicion==null ? null : new java.sql.Timestamp( fechaHrUltAdicion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the inventario_inicial_vendedor table that match the criteria 'OBSERVACION_ULT_ADICION = :observacionUltAdicion'.
	 */
	public InventarioInicialVendedor[] findWhereObservacionUltAdicionEquals(String observacionUltAdicion) throws InventarioInicialVendedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OBSERVACION_ULT_ADICION = ? ORDER BY OBSERVACION_ULT_ADICION", new Object[] { observacionUltAdicion } );
	}

	/**
	 * Method 'InventarioInicialVendedorDaoImpl'
	 * 
	 */
	public InventarioInicialVendedorDaoImpl()
	{
	}

	/**
	 * Method 'InventarioInicialVendedorDaoImpl'
	 * 
	 * @param userConn
	 */
	public InventarioInicialVendedorDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "inventario_inicial_vendedor";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected InventarioInicialVendedor fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			InventarioInicialVendedor dto = new InventarioInicialVendedor();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected InventarioInicialVendedor[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			InventarioInicialVendedor dto = new InventarioInicialVendedor();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		InventarioInicialVendedor ret[] = new InventarioInicialVendedor[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(InventarioInicialVendedor dto, ResultSet rs) throws SQLException
	{
		dto.setIdEmpleado( rs.getInt( COLUMN_ID_EMPLEADO ) );
		dto.setIdConcepto( rs.getInt( COLUMN_ID_CONCEPTO ) );
		dto.setCantidad( rs.getDouble( COLUMN_CANTIDAD ) );
		dto.setFechaRegistro( rs.getTimestamp(COLUMN_FECHA_REGISTRO ) );
		dto.setFechaHrUltAdicion( rs.getTimestamp(COLUMN_FECHA_HR_ULT_ADICION ) );
		dto.setObservacionUltAdicion( rs.getString( COLUMN_OBSERVACION_ULT_ADICION ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(InventarioInicialVendedor dto)
	{
		dto.setIdEmpleadoModified( false );
		dto.setIdConceptoModified( false );
		dto.setCantidadModified( false );
		dto.setFechaRegistroModified( false );
		dto.setFechaHrUltAdicionModified( false );
		dto.setObservacionUltAdicionModified( false );
	}

	/** 
	 * Returns all rows from the inventario_inicial_vendedor table that match the specified arbitrary SQL statement
	 */
	public InventarioInicialVendedor[] findByDynamicSelect(String sql, Object[] sqlParams) throws InventarioInicialVendedorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InventarioInicialVendedorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the inventario_inicial_vendedor table that match the specified arbitrary SQL statement
	 */
	public InventarioInicialVendedor[] findByDynamicWhere(String sql, Object[] sqlParams) throws InventarioInicialVendedorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InventarioInicialVendedorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

        
        /** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName();
        
        /** 
	 * Deletes a rows in the inventario_inicial_vendedor table.
	 */
	public void delete(String sql) throws InventarioInicialVendedorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + sql);
			stmt = conn.prepareStatement( SQL_DELETE + sql);			
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
                }
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InventarioInicialVendedorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
        
               
        /** 
	 * Updates a single row in the CATEGORIA table.
	 */
	public void update(InventarioInicialVendedor dto) throws InventarioInicialVendedorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdEmpleadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPLEADO=?" );
				modified=true;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isCantidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CANTIDAD=?" );
				modified=true;
			}
		
			if (dto.isFechaRegistroModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_REGISTRO=?" );
				modified=true;
			}
		
			if (dto.isFechaHrUltAdicionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_HR_ULT_ADICION=?" );
				modified=true;
			}
		
			if (dto.isObservacionUltAdicionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "OBSERVACION_ULT_ADICION=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_EMPLEADO=? AND ID_CONCEPTO=? " );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdEmpleado());
			}
		
			if (dto.isIdConceptoModified()) {
				stmt.setInt( index++, dto.getIdConcepto());
			}
		
			if (dto.isCantidadModified()) {
				stmt.setDouble(index++, dto.getCantidad());
			}
		
			if (dto.isFechaRegistroModified()) {
                                stmt.setTimestamp(index++, dto.getFechaRegistro()==null ? null : new java.sql.Timestamp( dto.getFechaRegistro().getTime() ) );
			}
                        
                        if (dto.isFechaHrUltAdicionModified()) {
                                stmt.setTimestamp(index++, dto.getFechaHrUltAdicion()==null ? null : new java.sql.Timestamp( dto.getFechaHrUltAdicion().getTime() ) );
			}
		
			if (dto.isObservacionUltAdicionModified()) {
                                stmt.setString(index++, dto.getObservacionUltAdicion());
			}
		
			stmt.setInt( index++, dto.getIdEmpleado());
                        stmt.setInt( index++, dto.getIdConcepto());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InventarioInicialVendedorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
        

}
