/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class GeocercaDaoImpl extends AbstractDAO implements GeocercaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_GEOCERCA, ID_EMPRESA, TIPO_GEOCERCA, COORDENADAS, ID_ESTATUS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_GEOCERCA, ID_EMPRESA, TIPO_GEOCERCA, COORDENADAS, ID_ESTATUS ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_GEOCERCA = ?, ID_EMPRESA = ?, TIPO_GEOCERCA = ?, COORDENADAS = ?, ID_ESTATUS = ? WHERE ID_GEOCERCA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_GEOCERCA = ?";

	/** 
	 * Index of column ID_GEOCERCA
	 */
	protected static final int COLUMN_ID_GEOCERCA = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column TIPO_GEOCERCA
	 */
	protected static final int COLUMN_TIPO_GEOCERCA = 3;

	/** 
	 * Index of column COORDENADAS
	 */
	protected static final int COLUMN_COORDENADAS = 4;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column ID_GEOCERCA
	 */
	protected static final int PK_COLUMN_ID_GEOCERCA = 1;

	/** 
	 * Inserts a new row in the geocerca table.
	 */
	public GeocercaPk insert(Geocerca dto) throws GeocercaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdGeocercaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_GEOCERCA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoGeocercaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIPO_GEOCERCA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCoordenadasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "COORDENADAS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdGeocercaModified()) {
				stmt.setInt( index++, dto.getIdGeocerca() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isTipoGeocercaModified()) {
				if (dto.isTipoGeocercaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoGeocerca() );
				}
		
			}
		
			if (dto.isCoordenadasModified()) {
				stmt.setString( index++, dto.getCoordenadas() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdGeocerca( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GeocercaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the geocerca table.
	 */
	public void update(GeocercaPk pk, Geocerca dto) throws GeocercaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdGeocercaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_GEOCERCA=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isTipoGeocercaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIPO_GEOCERCA=?" );
				modified=true;
			}
		
			if (dto.isCoordenadasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "COORDENADAS=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_GEOCERCA=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdGeocercaModified()) {
				stmt.setInt( index++, dto.getIdGeocerca() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isTipoGeocercaModified()) {
				if (dto.isTipoGeocercaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTipoGeocerca() );
				}
		
			}
		
			if (dto.isCoordenadasModified()) {
				stmt.setString( index++, dto.getCoordenadas() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdGeocerca() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GeocercaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the geocerca table.
	 */
	public void delete(GeocercaPk pk) throws GeocercaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdGeocerca() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GeocercaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the geocerca table that matches the specified primary-key value.
	 */
	public Geocerca findByPrimaryKey(GeocercaPk pk) throws GeocercaDaoException
	{
		return findByPrimaryKey( pk.getIdGeocerca() );
	}

	/** 
	 * Returns all rows from the geocerca table that match the criteria 'ID_GEOCERCA = :idGeocerca'.
	 */
	public Geocerca findByPrimaryKey(int idGeocerca) throws GeocercaDaoException
	{
		Geocerca ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_GEOCERCA = ?", new Object[] {  new Integer(idGeocerca) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the geocerca table that match the criteria ''.
	 */
	public Geocerca[] findAll() throws GeocercaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_GEOCERCA", null );
	}

	/** 
	 * Returns all rows from the geocerca table that match the criteria 'ID_GEOCERCA = :idGeocerca'.
	 */
	public Geocerca[] findWhereIdGeocercaEquals(int idGeocerca) throws GeocercaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_GEOCERCA = ? ORDER BY ID_GEOCERCA", new Object[] {  new Integer(idGeocerca) } );
	}

	/** 
	 * Returns all rows from the geocerca table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Geocerca[] findWhereIdEmpresaEquals(int idEmpresa) throws GeocercaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the geocerca table that match the criteria 'TIPO_GEOCERCA = :tipoGeocerca'.
	 */
	public Geocerca[] findWhereTipoGeocercaEquals(int tipoGeocerca) throws GeocercaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_GEOCERCA = ? ORDER BY TIPO_GEOCERCA", new Object[] {  new Integer(tipoGeocerca) } );
	}

	/** 
	 * Returns all rows from the geocerca table that match the criteria 'COORDENADAS = :coordenadas'.
	 */
	public Geocerca[] findWhereCoordenadasEquals(String coordenadas) throws GeocercaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COORDENADAS = ? ORDER BY COORDENADAS", new Object[] { coordenadas } );
	}

	/** 
	 * Returns all rows from the geocerca table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Geocerca[] findWhereIdEstatusEquals(int idEstatus) throws GeocercaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/**
	 * Method 'GeocercaDaoImpl'
	 * 
	 */
	public GeocercaDaoImpl()
	{
	}

	/**
	 * Method 'GeocercaDaoImpl'
	 * 
	 * @param userConn
	 */
	public GeocercaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "GEOCERCA";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Geocerca fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Geocerca dto = new Geocerca();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Geocerca[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Geocerca dto = new Geocerca();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Geocerca ret[] = new Geocerca[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Geocerca dto, ResultSet rs) throws SQLException
	{
		dto.setIdGeocerca( rs.getInt( COLUMN_ID_GEOCERCA ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setTipoGeocerca( rs.getInt( COLUMN_TIPO_GEOCERCA ) );
		if (rs.wasNull()) {
			dto.setTipoGeocercaNull( true );
		}
		
		dto.setCoordenadas( rs.getString( COLUMN_COORDENADAS ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Geocerca dto)
	{
		dto.setIdGeocercaModified( false );
		dto.setIdEmpresaModified( false );
		dto.setTipoGeocercaModified( false );
		dto.setCoordenadasModified( false );
		dto.setIdEstatusModified( false );
	}

	/** 
	 * Returns all rows from the geocerca table that match the specified arbitrary SQL statement
	 */
	public Geocerca[] findByDynamicSelect(String sql, Object[] sqlParams) throws GeocercaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GeocercaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the geocerca table that match the specified arbitrary SQL statement
	 */
	public Geocerca[] findByDynamicWhere(String sql, Object[] sqlParams) throws GeocercaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GeocercaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
