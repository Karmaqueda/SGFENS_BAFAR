/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EmergenciaCreditoDaoImpl extends AbstractDAO implements EmergenciaCreditoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_EMERGENCIA, ID_EMPRESA, FECHA_INICIO, FECHA_PAGO, MONTO_PAGADO, CREDITOS_OCUPADOS, RFC_EMPRESA FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_EMERGENCIA, ID_EMPRESA, FECHA_INICIO, FECHA_PAGO, MONTO_PAGADO, CREDITOS_OCUPADOS, RFC_EMPRESA ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_EMERGENCIA = ?, ID_EMPRESA = ?, FECHA_INICIO = ?, FECHA_PAGO = ?, MONTO_PAGADO = ?, CREDITOS_OCUPADOS = ?, RFC_EMPRESA = ? WHERE ID_EMERGENCIA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_EMERGENCIA = ?";

	/** 
	 * Index of column ID_EMERGENCIA
	 */
	protected static final int COLUMN_ID_EMERGENCIA = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column FECHA_INICIO
	 */
	protected static final int COLUMN_FECHA_INICIO = 3;

	/** 
	 * Index of column FECHA_PAGO
	 */
	protected static final int COLUMN_FECHA_PAGO = 4;

	/** 
	 * Index of column MONTO_PAGADO
	 */
	protected static final int COLUMN_MONTO_PAGADO = 5;

	/** 
	 * Index of column CREDITOS_OCUPADOS
	 */
	protected static final int COLUMN_CREDITOS_OCUPADOS = 6;

	/** 
	 * Index of column RFC_EMPRESA
	 */
	protected static final int COLUMN_RFC_EMPRESA = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column ID_EMERGENCIA
	 */
	protected static final int PK_COLUMN_ID_EMERGENCIA = 1;

	/** 
	 * Inserts a new row in the emergencia_credito table.
	 */
	public EmergenciaCreditoPk insert(EmergenciaCredito dto) throws EmergenciaCreditoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdEmergenciaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMERGENCIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaInicioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_INICIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMontoPagadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MONTO_PAGADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCreditosOcupadosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CREDITOS_OCUPADOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRfcEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RFC_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdEmergenciaModified()) {
				stmt.setInt( index++, dto.getIdEmergencia() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isFechaInicioModified()) {
				stmt.setTimestamp(index++, dto.getFechaInicio()==null ? null : new java.sql.Timestamp( dto.getFechaInicio().getTime() ) );
			}
		
			if (dto.isFechaPagoModified()) {
				stmt.setTimestamp(index++, dto.getFechaPago()==null ? null : new java.sql.Timestamp( dto.getFechaPago().getTime() ) );
			}
		
			if (dto.isMontoPagadoModified()) {
				if (dto.isMontoPagadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMontoPagado() );
				}
		
			}
		
			if (dto.isCreditosOcupadosModified()) {
				if (dto.isCreditosOcupadosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreditosOcupados() );
				}
		
			}
		
			if (dto.isRfcEmpresaModified()) {
				stmt.setString( index++, dto.getRfcEmpresa() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdEmergencia( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmergenciaCreditoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the emergencia_credito table.
	 */
	public void update(EmergenciaCreditoPk pk, EmergenciaCredito dto) throws EmergenciaCreditoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdEmergenciaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMERGENCIA=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isFechaInicioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_INICIO=?" );
				modified=true;
			}
		
			if (dto.isFechaPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_PAGO=?" );
				modified=true;
			}
		
			if (dto.isMontoPagadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MONTO_PAGADO=?" );
				modified=true;
			}
		
			if (dto.isCreditosOcupadosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CREDITOS_OCUPADOS=?" );
				modified=true;
			}
		
			if (dto.isRfcEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RFC_EMPRESA=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_EMERGENCIA=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdEmergenciaModified()) {
				stmt.setInt( index++, dto.getIdEmergencia() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isFechaInicioModified()) {
				stmt.setTimestamp(index++, dto.getFechaInicio()==null ? null : new java.sql.Timestamp( dto.getFechaInicio().getTime() ) );
			}
		
			if (dto.isFechaPagoModified()) {
				stmt.setTimestamp(index++, dto.getFechaPago()==null ? null : new java.sql.Timestamp( dto.getFechaPago().getTime() ) );
			}
		
			if (dto.isMontoPagadoModified()) {
				if (dto.isMontoPagadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getMontoPagado() );
				}
		
			}
		
			if (dto.isCreditosOcupadosModified()) {
				if (dto.isCreditosOcupadosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreditosOcupados() );
				}
		
			}
		
			if (dto.isRfcEmpresaModified()) {
				stmt.setString( index++, dto.getRfcEmpresa() );
			}
		
			stmt.setInt( index++, pk.getIdEmergencia() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmergenciaCreditoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the emergencia_credito table.
	 */
	public void delete(EmergenciaCreditoPk pk) throws EmergenciaCreditoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdEmergencia() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmergenciaCreditoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the emergencia_credito table that matches the specified primary-key value.
	 */
	public EmergenciaCredito findByPrimaryKey(EmergenciaCreditoPk pk) throws EmergenciaCreditoDaoException
	{
		return findByPrimaryKey( pk.getIdEmergencia() );
	}

	/** 
	 * Returns all rows from the emergencia_credito table that match the criteria 'ID_EMERGENCIA = :idEmergencia'.
	 */
	public EmergenciaCredito findByPrimaryKey(int idEmergencia) throws EmergenciaCreditoDaoException
	{
		EmergenciaCredito ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_EMERGENCIA = ?", new Object[] {  new Integer(idEmergencia) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the emergencia_credito table that match the criteria ''.
	 */
	public EmergenciaCredito[] findAll() throws EmergenciaCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_EMERGENCIA", null );
	}

	/** 
	 * Returns all rows from the emergencia_credito table that match the criteria 'ID_EMERGENCIA = :idEmergencia'.
	 */
	public EmergenciaCredito[] findWhereIdEmergenciaEquals(int idEmergencia) throws EmergenciaCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMERGENCIA = ? ORDER BY ID_EMERGENCIA", new Object[] {  new Integer(idEmergencia) } );
	}

	/** 
	 * Returns all rows from the emergencia_credito table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public EmergenciaCredito[] findWhereIdEmpresaEquals(int idEmpresa) throws EmergenciaCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the emergencia_credito table that match the criteria 'FECHA_INICIO = :fechaInicio'.
	 */
	public EmergenciaCredito[] findWhereFechaInicioEquals(Date fechaInicio) throws EmergenciaCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_INICIO = ? ORDER BY FECHA_INICIO", new Object[] { fechaInicio==null ? null : new java.sql.Timestamp( fechaInicio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the emergencia_credito table that match the criteria 'FECHA_PAGO = :fechaPago'.
	 */
	public EmergenciaCredito[] findWhereFechaPagoEquals(Date fechaPago) throws EmergenciaCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_PAGO = ? ORDER BY FECHA_PAGO", new Object[] { fechaPago==null ? null : new java.sql.Timestamp( fechaPago.getTime() ) } );
	}

	/** 
	 * Returns all rows from the emergencia_credito table that match the criteria 'MONTO_PAGADO = :montoPagado'.
	 */
	public EmergenciaCredito[] findWhereMontoPagadoEquals(double montoPagado) throws EmergenciaCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONTO_PAGADO = ? ORDER BY MONTO_PAGADO", new Object[] {  new Double(montoPagado) } );
	}

	/** 
	 * Returns all rows from the emergencia_credito table that match the criteria 'CREDITOS_OCUPADOS = :creditosOcupados'.
	 */
	public EmergenciaCredito[] findWhereCreditosOcupadosEquals(int creditosOcupados) throws EmergenciaCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREDITOS_OCUPADOS = ? ORDER BY CREDITOS_OCUPADOS", new Object[] {  new Integer(creditosOcupados) } );
	}

	/** 
	 * Returns all rows from the emergencia_credito table that match the criteria 'RFC_EMPRESA = :rfcEmpresa'.
	 */
	public EmergenciaCredito[] findWhereRfcEmpresaEquals(String rfcEmpresa) throws EmergenciaCreditoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC_EMPRESA = ? ORDER BY RFC_EMPRESA", new Object[] { rfcEmpresa } );
	}

	/**
	 * Method 'EmergenciaCreditoDaoImpl'
	 * 
	 */
	public EmergenciaCreditoDaoImpl()
	{
	}

	/**
	 * Method 'EmergenciaCreditoDaoImpl'
	 * 
	 * @param userConn
	 */
	public EmergenciaCreditoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "emergencia_credito";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected EmergenciaCredito fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			EmergenciaCredito dto = new EmergenciaCredito();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected EmergenciaCredito[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			EmergenciaCredito dto = new EmergenciaCredito();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		EmergenciaCredito ret[] = new EmergenciaCredito[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(EmergenciaCredito dto, ResultSet rs) throws SQLException
	{
		dto.setIdEmergencia( rs.getInt( COLUMN_ID_EMERGENCIA ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setFechaInicio( rs.getTimestamp(COLUMN_FECHA_INICIO ) );
		dto.setFechaPago( rs.getTimestamp(COLUMN_FECHA_PAGO ) );
		dto.setMontoPagado( rs.getDouble( COLUMN_MONTO_PAGADO ) );
		if (rs.wasNull()) {
			dto.setMontoPagadoNull( true );
		}
		
		dto.setCreditosOcupados( rs.getInt( COLUMN_CREDITOS_OCUPADOS ) );
		if (rs.wasNull()) {
			dto.setCreditosOcupadosNull( true );
		}
		
		dto.setRfcEmpresa( rs.getString( COLUMN_RFC_EMPRESA ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(EmergenciaCredito dto)
	{
		dto.setIdEmergenciaModified( false );
		dto.setIdEmpresaModified( false );
		dto.setFechaInicioModified( false );
		dto.setFechaPagoModified( false );
		dto.setMontoPagadoModified( false );
		dto.setCreditosOcupadosModified( false );
		dto.setRfcEmpresaModified( false );
	}

	/** 
	 * Returns all rows from the emergencia_credito table that match the specified arbitrary SQL statement
	 */
	public EmergenciaCredito[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmergenciaCreditoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmergenciaCreditoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the emergencia_credito table that match the specified arbitrary SQL statement
	 */
	public EmergenciaCredito[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmergenciaCreditoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmergenciaCreditoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
