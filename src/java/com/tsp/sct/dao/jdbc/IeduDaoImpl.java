/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class IeduDaoImpl extends AbstractDAO implements IeduDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_IEDU, VERSION, NOMBRE_ALUMNO, CURP, NIVEL_EDUCATIVO, AUT_RVOE, RFC_PAGO, ID_COMPROBANTE_FISCAL FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_IEDU, VERSION, NOMBRE_ALUMNO, CURP, NIVEL_EDUCATIVO, AUT_RVOE, RFC_PAGO, ID_COMPROBANTE_FISCAL ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_IEDU = ?, VERSION = ?, NOMBRE_ALUMNO = ?, CURP = ?, NIVEL_EDUCATIVO = ?, AUT_RVOE = ?, RFC_PAGO = ?, ID_COMPROBANTE_FISCAL = ? WHERE ID_IEDU = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_IEDU = ?";

	/** 
	 * Index of column ID_IEDU
	 */
	protected static final int COLUMN_ID_IEDU = 1;

	/** 
	 * Index of column VERSION
	 */
	protected static final int COLUMN_VERSION = 2;

	/** 
	 * Index of column NOMBRE_ALUMNO
	 */
	protected static final int COLUMN_NOMBRE_ALUMNO = 3;

	/** 
	 * Index of column CURP
	 */
	protected static final int COLUMN_CURP = 4;

	/** 
	 * Index of column NIVEL_EDUCATIVO
	 */
	protected static final int COLUMN_NIVEL_EDUCATIVO = 5;

	/** 
	 * Index of column AUT_RVOE
	 */
	protected static final int COLUMN_AUT_RVOE = 6;

	/** 
	 * Index of column RFC_PAGO
	 */
	protected static final int COLUMN_RFC_PAGO = 7;

	/** 
	 * Index of column ID_COMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_ID_COMPROBANTE_FISCAL = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column ID_IEDU
	 */
	protected static final int PK_COLUMN_ID_IEDU = 1;

	/** 
	 * Inserts a new row in the iedu table.
	 */
	public IeduPk insert(Iedu dto) throws IeduDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getIdIedu() );
			stmt.setString( index++, dto.getVersion() );
			stmt.setString( index++, dto.getNombreAlumno() );
			stmt.setString( index++, dto.getCurp() );
			stmt.setString( index++, dto.getNivelEducativo() );
			stmt.setString( index++, dto.getAutRvoe() );
			stmt.setString( index++, dto.getRfcPago() );
			if (dto.isIdComprobanteFiscalNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIdComprobanteFiscal() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IeduDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the iedu table.
	 */
	public void update(IeduPk pk, Iedu dto) throws IeduDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdIedu() );
			stmt.setString( index++, dto.getVersion() );
			stmt.setString( index++, dto.getNombreAlumno() );
			stmt.setString( index++, dto.getCurp() );
			stmt.setString( index++, dto.getNivelEducativo() );
			stmt.setString( index++, dto.getAutRvoe() );
			stmt.setString( index++, dto.getRfcPago() );
			if (dto.isIdComprobanteFiscalNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIdComprobanteFiscal() );
			}
		
			stmt.setInt( 9, pk.getIdIedu() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IeduDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the iedu table.
	 */
	public void delete(IeduPk pk) throws IeduDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdIedu() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IeduDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the iedu table that matches the specified primary-key value.
	 */
	public Iedu findByPrimaryKey(IeduPk pk) throws IeduDaoException
	{
		return findByPrimaryKey( pk.getIdIedu() );
	}

	/** 
	 * Returns all rows from the iedu table that match the criteria 'ID_IEDU = :idIedu'.
	 */
	public Iedu findByPrimaryKey(int idIedu) throws IeduDaoException
	{
		Iedu ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_IEDU = ?", new Object[] {  new Integer(idIedu) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the iedu table that match the criteria ''.
	 */
	public Iedu[] findAll() throws IeduDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_IEDU", null );
	}

	/** 
	 * Returns all rows from the iedu table that match the criteria 'ID_IEDU = :idIedu'.
	 */
	public Iedu[] findWhereIdIeduEquals(int idIedu) throws IeduDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_IEDU = ? ORDER BY ID_IEDU", new Object[] {  new Integer(idIedu) } );
	}

	/** 
	 * Returns all rows from the iedu table that match the criteria 'VERSION = :version'.
	 */
	public Iedu[] findWhereVersionEquals(String version) throws IeduDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VERSION = ? ORDER BY VERSION", new Object[] { version } );
	}

	/** 
	 * Returns all rows from the iedu table that match the criteria 'NOMBRE_ALUMNO = :nombreAlumno'.
	 */
	public Iedu[] findWhereNombreAlumnoEquals(String nombreAlumno) throws IeduDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_ALUMNO = ? ORDER BY NOMBRE_ALUMNO", new Object[] { nombreAlumno } );
	}

	/** 
	 * Returns all rows from the iedu table that match the criteria 'CURP = :curp'.
	 */
	public Iedu[] findWhereCurpEquals(String curp) throws IeduDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CURP = ? ORDER BY CURP", new Object[] { curp } );
	}

	/** 
	 * Returns all rows from the iedu table that match the criteria 'NIVEL_EDUCATIVO = :nivelEducativo'.
	 */
	public Iedu[] findWhereNivelEducativoEquals(String nivelEducativo) throws IeduDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NIVEL_EDUCATIVO = ? ORDER BY NIVEL_EDUCATIVO", new Object[] { nivelEducativo } );
	}

	/** 
	 * Returns all rows from the iedu table that match the criteria 'AUT_RVOE = :autRvoe'.
	 */
	public Iedu[] findWhereAutRvoeEquals(String autRvoe) throws IeduDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AUT_RVOE = ? ORDER BY AUT_RVOE", new Object[] { autRvoe } );
	}

	/** 
	 * Returns all rows from the iedu table that match the criteria 'RFC_PAGO = :rfcPago'.
	 */
	public Iedu[] findWhereRfcPagoEquals(String rfcPago) throws IeduDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC_PAGO = ? ORDER BY RFC_PAGO", new Object[] { rfcPago } );
	}

	/** 
	 * Returns all rows from the iedu table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public Iedu[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws IeduDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_FISCAL = ? ORDER BY ID_COMPROBANTE_FISCAL", new Object[] {  new Integer(idComprobanteFiscal) } );
	}

	/**
	 * Method 'IeduDaoImpl'
	 * 
	 */
	public IeduDaoImpl()
	{
	}

	/**
	 * Method 'IeduDaoImpl'
	 * 
	 * @param userConn
	 */
	public IeduDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "IEDU";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Iedu fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Iedu dto = new Iedu();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Iedu[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Iedu dto = new Iedu();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Iedu ret[] = new Iedu[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Iedu dto, ResultSet rs) throws SQLException
	{
		dto.setIdIedu( rs.getInt( COLUMN_ID_IEDU ) );
		dto.setVersion( rs.getString( COLUMN_VERSION ) );
		dto.setNombreAlumno( rs.getString( COLUMN_NOMBRE_ALUMNO ) );
		dto.setCurp( rs.getString( COLUMN_CURP ) );
		dto.setNivelEducativo( rs.getString( COLUMN_NIVEL_EDUCATIVO ) );
		dto.setAutRvoe( rs.getString( COLUMN_AUT_RVOE ) );
		dto.setRfcPago( rs.getString( COLUMN_RFC_PAGO ) );
		dto.setIdComprobanteFiscal( rs.getInt( COLUMN_ID_COMPROBANTE_FISCAL ) );
		if (rs.wasNull()) {
			dto.setIdComprobanteFiscalNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Iedu dto)
	{
	}

	/** 
	 * Returns all rows from the iedu table that match the specified arbitrary SQL statement
	 */
	public Iedu[] findByDynamicSelect(String sql, Object[] sqlParams) throws IeduDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IeduDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the iedu table that match the specified arbitrary SQL statement
	 */
	public Iedu[] findByDynamicWhere(String sql, Object[] sqlParams) throws IeduDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IeduDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
