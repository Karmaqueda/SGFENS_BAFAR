/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ComprobanteFiscalDaoImpl extends AbstractDAO implements ComprobanteFiscalDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_COMPROBANTE_FISCAL, ID_TIPO_COMPROBANTE, ID_EMPRESA, ID_CLIENTE, ID_ESTATUS, ID_FOLIO, ID_FORMA_PAGO, ID_TIPO_PAGO, CONDICIONES_PAGO, FOLIO_GENERADO, FECHA_IMPRESION, FECHA_CAPTURA, FECHA_PAGO, IMPORTE_SUBTOTAL, IMPUESTOS, IMPORTE_NETO, PARCIALIDAD, CONCEPTO, ARCHIVO_CFD, CADENA_ORIGINAL, SELLO_DIGITAL, COMENTARIOS, ID_DIVISAS, ID_TIPO_MONEDA, TIPO_DE_CAMBIO, UUID, SELLO_SAT, ACUSE_CANCELACION, DESCUENTO, MOTIVO_DESCUENTO, FECHA_VIGENCIA, SECOFI, NUMERO_FACTURA, NO_CERTIFICADO_SAT, ID_PRODUCTOR, UNIDAD, FECHA_TIMBRADO, CREADO_AUTOMATICAMENTE, SALDO_PAGADO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_COMPROBANTE_FISCAL, ID_TIPO_COMPROBANTE, ID_EMPRESA, ID_CLIENTE, ID_ESTATUS, ID_FOLIO, ID_FORMA_PAGO, ID_TIPO_PAGO, CONDICIONES_PAGO, FOLIO_GENERADO, FECHA_IMPRESION, FECHA_CAPTURA, FECHA_PAGO, IMPORTE_SUBTOTAL, IMPUESTOS, IMPORTE_NETO, PARCIALIDAD, CONCEPTO, ARCHIVO_CFD, CADENA_ORIGINAL, SELLO_DIGITAL, COMENTARIOS, ID_DIVISAS, ID_TIPO_MONEDA, TIPO_DE_CAMBIO, UUID, SELLO_SAT, ACUSE_CANCELACION, DESCUENTO, MOTIVO_DESCUENTO, FECHA_VIGENCIA, SECOFI, NUMERO_FACTURA, NO_CERTIFICADO_SAT, ID_PRODUCTOR, UNIDAD, FECHA_TIMBRADO, CREADO_AUTOMATICAMENTE, SALDO_PAGADO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_COMPROBANTE_FISCAL = ?, ID_TIPO_COMPROBANTE = ?, ID_EMPRESA = ?, ID_CLIENTE = ?, ID_ESTATUS = ?, ID_FOLIO = ?, ID_FORMA_PAGO = ?, ID_TIPO_PAGO = ?, CONDICIONES_PAGO = ?, FOLIO_GENERADO = ?, FECHA_IMPRESION = ?, FECHA_CAPTURA = ?, FECHA_PAGO = ?, IMPORTE_SUBTOTAL = ?, IMPUESTOS = ?, IMPORTE_NETO = ?, PARCIALIDAD = ?, CONCEPTO = ?, ARCHIVO_CFD = ?, CADENA_ORIGINAL = ?, SELLO_DIGITAL = ?, COMENTARIOS = ?, ID_DIVISAS = ?, ID_TIPO_MONEDA = ?, TIPO_DE_CAMBIO = ?, UUID = ?, SELLO_SAT = ?, ACUSE_CANCELACION = ?, DESCUENTO = ?, MOTIVO_DESCUENTO = ?, FECHA_VIGENCIA = ?, SECOFI = ?, NUMERO_FACTURA = ?, NO_CERTIFICADO_SAT = ?, ID_PRODUCTOR = ?, UNIDAD = ?, FECHA_TIMBRADO = ?, CREADO_AUTOMATICAMENTE = ?, SALDO_PAGADO = ? WHERE ID_COMPROBANTE_FISCAL = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_COMPROBANTE_FISCAL = ?";

	/** 
	 * Index of column ID_COMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_ID_COMPROBANTE_FISCAL = 1;

	/** 
	 * Index of column ID_TIPO_COMPROBANTE
	 */
	protected static final int COLUMN_ID_TIPO_COMPROBANTE = 2;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 3;

	/** 
	 * Index of column ID_CLIENTE
	 */
	protected static final int COLUMN_ID_CLIENTE = 4;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 5;

	/** 
	 * Index of column ID_FOLIO
	 */
	protected static final int COLUMN_ID_FOLIO = 6;

	/** 
	 * Index of column ID_FORMA_PAGO
	 */
	protected static final int COLUMN_ID_FORMA_PAGO = 7;

	/** 
	 * Index of column ID_TIPO_PAGO
	 */
	protected static final int COLUMN_ID_TIPO_PAGO = 8;

	/** 
	 * Index of column CONDICIONES_PAGO
	 */
	protected static final int COLUMN_CONDICIONES_PAGO = 9;

	/** 
	 * Index of column FOLIO_GENERADO
	 */
	protected static final int COLUMN_FOLIO_GENERADO = 10;

	/** 
	 * Index of column FECHA_IMPRESION
	 */
	protected static final int COLUMN_FECHA_IMPRESION = 11;

	/** 
	 * Index of column FECHA_CAPTURA
	 */
	protected static final int COLUMN_FECHA_CAPTURA = 12;

	/** 
	 * Index of column FECHA_PAGO
	 */
	protected static final int COLUMN_FECHA_PAGO = 13;

	/** 
	 * Index of column IMPORTE_SUBTOTAL
	 */
	protected static final int COLUMN_IMPORTE_SUBTOTAL = 14;

	/** 
	 * Index of column IMPUESTOS
	 */
	protected static final int COLUMN_IMPUESTOS = 15;

	/** 
	 * Index of column IMPORTE_NETO
	 */
	protected static final int COLUMN_IMPORTE_NETO = 16;

	/** 
	 * Index of column PARCIALIDAD
	 */
	protected static final int COLUMN_PARCIALIDAD = 17;

	/** 
	 * Index of column CONCEPTO
	 */
	protected static final int COLUMN_CONCEPTO = 18;

	/** 
	 * Index of column ARCHIVO_CFD
	 */
	protected static final int COLUMN_ARCHIVO_CFD = 19;

	/** 
	 * Index of column CADENA_ORIGINAL
	 */
	protected static final int COLUMN_CADENA_ORIGINAL = 20;

	/** 
	 * Index of column SELLO_DIGITAL
	 */
	protected static final int COLUMN_SELLO_DIGITAL = 21;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 22;

	/** 
	 * Index of column ID_DIVISAS
	 */
	protected static final int COLUMN_ID_DIVISAS = 23;

	/** 
	 * Index of column ID_TIPO_MONEDA
	 */
	protected static final int COLUMN_ID_TIPO_MONEDA = 24;

	/** 
	 * Index of column TIPO_DE_CAMBIO
	 */
	protected static final int COLUMN_TIPO_DE_CAMBIO = 25;

	/** 
	 * Index of column UUID
	 */
	protected static final int COLUMN_UUID = 26;

	/** 
	 * Index of column SELLO_SAT
	 */
	protected static final int COLUMN_SELLO_SAT = 27;

	/** 
	 * Index of column ACUSE_CANCELACION
	 */
	protected static final int COLUMN_ACUSE_CANCELACION = 28;

	/** 
	 * Index of column DESCUENTO
	 */
	protected static final int COLUMN_DESCUENTO = 29;

	/** 
	 * Index of column MOTIVO_DESCUENTO
	 */
	protected static final int COLUMN_MOTIVO_DESCUENTO = 30;

	/** 
	 * Index of column FECHA_VIGENCIA
	 */
	protected static final int COLUMN_FECHA_VIGENCIA = 31;

	/** 
	 * Index of column SECOFI
	 */
	protected static final int COLUMN_SECOFI = 32;

	/** 
	 * Index of column NUMERO_FACTURA
	 */
	protected static final int COLUMN_NUMERO_FACTURA = 33;

	/** 
	 * Index of column NO_CERTIFICADO_SAT
	 */
	protected static final int COLUMN_NO_CERTIFICADO_SAT = 34;

	/** 
	 * Index of column ID_PRODUCTOR
	 */
	protected static final int COLUMN_ID_PRODUCTOR = 35;

	/** 
	 * Index of column UNIDAD
	 */
	protected static final int COLUMN_UNIDAD = 36;

	/** 
	 * Index of column FECHA_TIMBRADO
	 */
	protected static final int COLUMN_FECHA_TIMBRADO = 37;

	/** 
	 * Index of column CREADO_AUTOMATICAMENTE
	 */
	protected static final int COLUMN_CREADO_AUTOMATICAMENTE = 38;

	/** 
	 * Index of column SALDO_PAGADO
	 */
	protected static final int COLUMN_SALDO_PAGADO = 39;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 39;

	/** 
	 * Index of primary-key column ID_COMPROBANTE_FISCAL
	 */
	protected static final int PK_COLUMN_ID_COMPROBANTE_FISCAL = 1;

	/** 
	 * Inserts a new row in the comprobante_fiscal table.
	 */
	public ComprobanteFiscalPk insert(ComprobanteFiscal dto) throws ComprobanteFiscalDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdComprobanteFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdTipoComprobanteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_TIPO_COMPROBANTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdFolioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_FOLIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdFormaPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_FORMA_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdTipoPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_TIPO_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCondicionesPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CONDICIONES_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioGeneradoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIO_GENERADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaImpresionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_IMPRESION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaCapturaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_CAPTURA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isImporteSubtotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IMPORTE_SUBTOTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isImpuestosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IMPUESTOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isImporteNetoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IMPORTE_NETO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParcialidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARCIALIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isArchivoCfdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ARCHIVO_CFD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCadenaOriginalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CADENA_ORIGINAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSelloDigitalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SELLO_DIGITAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isComentariosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "COMENTARIOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdDivisasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_DIVISAS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdTipoMonedaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_TIPO_MONEDA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoDeCambioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIPO_DE_CAMBIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUuidModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "UUID" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSelloSatModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SELLO_SAT" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAcuseCancelacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ACUSE_CANCELACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMotivoDescuentoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MOTIVO_DESCUENTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaVigenciaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_VIGENCIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSecofiModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SECOFI" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumeroFacturaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUMERO_FACTURA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNoCertificadoSatModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NO_CERTIFICADO_SAT" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdProductorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PRODUCTOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUnidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "UNIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaTimbradoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_TIMBRADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCreadoAutomaticamenteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CREADO_AUTOMATICAMENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSaldoPagadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SALDO_PAGADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdComprobanteFiscalModified()) {
				stmt.setInt( index++, dto.getIdComprobanteFiscal() );
			}
		
			if (dto.isIdTipoComprobanteModified()) {
				stmt.setInt( index++, dto.getIdTipoComprobante() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdClienteModified()) {
				stmt.setInt( index++, dto.getIdCliente() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isIdFolioModified()) {
				if (dto.isIdFolioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFolio() );
				}
		
			}
		
			if (dto.isIdFormaPagoModified()) {
				if (dto.isIdFormaPagoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFormaPago() );
				}
		
			}
		
			if (dto.isIdTipoPagoModified()) {
				if (dto.isIdTipoPagoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdTipoPago() );
				}
		
			}
		
			if (dto.isCondicionesPagoModified()) {
				stmt.setString( index++, dto.getCondicionesPago() );
			}
		
			if (dto.isFolioGeneradoModified()) {
				stmt.setString( index++, dto.getFolioGenerado() );
			}
		
			if (dto.isFechaImpresionModified()) {
				stmt.setTimestamp(index++, dto.getFechaImpresion()==null ? null : new java.sql.Timestamp( dto.getFechaImpresion().getTime() ) );
			}
		
			if (dto.isFechaCapturaModified()) {
				stmt.setTimestamp(index++, dto.getFechaCaptura()==null ? null : new java.sql.Timestamp( dto.getFechaCaptura().getTime() ) );
			}
		
			if (dto.isFechaPagoModified()) {
				stmt.setTimestamp(index++, dto.getFechaPago()==null ? null : new java.sql.Timestamp( dto.getFechaPago().getTime() ) );
			}
		
			if (dto.isImporteSubtotalModified()) {
				if (dto.isImporteSubtotalNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getImporteSubtotal() );
				}
		
			}
		
			if (dto.isImpuestosModified()) {
				if (dto.isImpuestosNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getImpuestos() );
				}
		
			}
		
			if (dto.isImporteNetoModified()) {
				if (dto.isImporteNetoNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getImporteNeto() );
				}
		
			}
		
			if (dto.isParcialidadModified()) {
				stmt.setString( index++, dto.getParcialidad() );
			}
		
			if (dto.isConceptoModified()) {
				stmt.setString( index++, dto.getConcepto() );
			}
		
			if (dto.isArchivoCfdModified()) {
				stmt.setString( index++, dto.getArchivoCfd() );
			}
		
			if (dto.isCadenaOriginalModified()) {
				stmt.setString( index++, dto.getCadenaOriginal() );
			}
		
			if (dto.isSelloDigitalModified()) {
				stmt.setString( index++, dto.getSelloDigital() );
			}
		
			if (dto.isComentariosModified()) {
				stmt.setString( index++, dto.getComentarios() );
			}
		
			if (dto.isIdDivisasModified()) {
				if (dto.isIdDivisasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdDivisas() );
				}
		
			}
		
			if (dto.isIdTipoMonedaModified()) {
				if (dto.isIdTipoMonedaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdTipoMoneda() );
				}
		
			}
		
			if (dto.isTipoDeCambioModified()) {
				if (dto.isTipoDeCambioNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getTipoDeCambio() );
				}
		
			}
		
			if (dto.isUuidModified()) {
				stmt.setString( index++, dto.getUuid() );
			}
		
			if (dto.isSelloSatModified()) {
				stmt.setString( index++, dto.getSelloSat() );
			}
		
			if (dto.isAcuseCancelacionModified()) {
				stmt.setString( index++, dto.getAcuseCancelacion() );
			}
		
			if (dto.isDescuentoModified()) {
				if (dto.isDescuentoNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getDescuento() );
				}
		
			}
		
			if (dto.isMotivoDescuentoModified()) {
				stmt.setString( index++, dto.getMotivoDescuento() );
			}
		
			if (dto.isFechaVigenciaModified()) {
				stmt.setString( index++, dto.getFechaVigencia() );
			}
		
			if (dto.isSecofiModified()) {
				stmt.setString( index++, dto.getSecofi() );
			}
		
			if (dto.isNumeroFacturaModified()) {
				stmt.setString( index++, dto.getNumeroFactura() );
			}
		
			if (dto.isNoCertificadoSatModified()) {
				stmt.setString( index++, dto.getNoCertificadoSat() );
			}
		
			if (dto.isIdProductorModified()) {
				if (dto.isIdProductorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdProductor() );
				}
		
			}
		
			if (dto.isUnidadModified()) {
				stmt.setString( index++, dto.getUnidad() );
			}
		
			if (dto.isFechaTimbradoModified()) {
				stmt.setTimestamp(index++, dto.getFechaTimbrado()==null ? null : new java.sql.Timestamp( dto.getFechaTimbrado().getTime() ) );
			}
		
			if (dto.isCreadoAutomaticamenteModified()) {
				if (dto.isCreadoAutomaticamenteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreadoAutomaticamente() );
				}
		
			}
		
			if (dto.isSaldoPagadoModified()) {
				if (dto.isSaldoPagadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSaldoPagado() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteFiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the comprobante_fiscal table.
	 */
	public void update(ComprobanteFiscalPk pk, ComprobanteFiscal dto) throws ComprobanteFiscalDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdComprobanteFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isIdTipoComprobanteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_TIPO_COMPROBANTE=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isIdFolioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_FOLIO=?" );
				modified=true;
			}
		
			if (dto.isIdFormaPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_FORMA_PAGO=?" );
				modified=true;
			}
		
			if (dto.isIdTipoPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_TIPO_PAGO=?" );
				modified=true;
			}
		
			if (dto.isCondicionesPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONDICIONES_PAGO=?" );
				modified=true;
			}
		
			if (dto.isFolioGeneradoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIO_GENERADO=?" );
				modified=true;
			}
		
			if (dto.isFechaImpresionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_IMPRESION=?" );
				modified=true;
			}
		
			if (dto.isFechaCapturaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_CAPTURA=?" );
				modified=true;
			}
		
			if (dto.isFechaPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_PAGO=?" );
				modified=true;
			}
		
			if (dto.isImporteSubtotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IMPORTE_SUBTOTAL=?" );
				modified=true;
			}
		
			if (dto.isImpuestosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IMPUESTOS=?" );
				modified=true;
			}
		
			if (dto.isImporteNetoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IMPORTE_NETO=?" );
				modified=true;
			}
		
			if (dto.isParcialidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARCIALIDAD=?" );
				modified=true;
			}
		
			if (dto.isConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isArchivoCfdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ARCHIVO_CFD=?" );
				modified=true;
			}
		
			if (dto.isCadenaOriginalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CADENA_ORIGINAL=?" );
				modified=true;
			}
		
			if (dto.isSelloDigitalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SELLO_DIGITAL=?" );
				modified=true;
			}
		
			if (dto.isComentariosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "COMENTARIOS=?" );
				modified=true;
			}
		
			if (dto.isIdDivisasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_DIVISAS=?" );
				modified=true;
			}
		
			if (dto.isIdTipoMonedaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_TIPO_MONEDA=?" );
				modified=true;
			}
		
			if (dto.isTipoDeCambioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIPO_DE_CAMBIO=?" );
				modified=true;
			}
		
			if (dto.isUuidModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "UUID=?" );
				modified=true;
			}
		
			if (dto.isSelloSatModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SELLO_SAT=?" );
				modified=true;
			}
		
			if (dto.isAcuseCancelacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ACUSE_CANCELACION=?" );
				modified=true;
			}
		
			if (dto.isDescuentoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO=?" );
				modified=true;
			}
		
			if (dto.isMotivoDescuentoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MOTIVO_DESCUENTO=?" );
				modified=true;
			}
		
			if (dto.isFechaVigenciaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_VIGENCIA=?" );
				modified=true;
			}
		
			if (dto.isSecofiModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SECOFI=?" );
				modified=true;
			}
		
			if (dto.isNumeroFacturaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUMERO_FACTURA=?" );
				modified=true;
			}
		
			if (dto.isNoCertificadoSatModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NO_CERTIFICADO_SAT=?" );
				modified=true;
			}
		
			if (dto.isIdProductorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PRODUCTOR=?" );
				modified=true;
			}
		
			if (dto.isUnidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "UNIDAD=?" );
				modified=true;
			}
		
			if (dto.isFechaTimbradoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_TIMBRADO=?" );
				modified=true;
			}
		
			if (dto.isCreadoAutomaticamenteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CREADO_AUTOMATICAMENTE=?" );
				modified=true;
			}
		
			if (dto.isSaldoPagadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SALDO_PAGADO=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_COMPROBANTE_FISCAL=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdComprobanteFiscalModified()) {
				stmt.setInt( index++, dto.getIdComprobanteFiscal() );
			}
		
			if (dto.isIdTipoComprobanteModified()) {
				stmt.setInt( index++, dto.getIdTipoComprobante() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdClienteModified()) {
				stmt.setInt( index++, dto.getIdCliente() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isIdFolioModified()) {
				if (dto.isIdFolioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFolio() );
				}
		
			}
		
			if (dto.isIdFormaPagoModified()) {
				if (dto.isIdFormaPagoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFormaPago() );
				}
		
			}
		
			if (dto.isIdTipoPagoModified()) {
				if (dto.isIdTipoPagoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdTipoPago() );
				}
		
			}
		
			if (dto.isCondicionesPagoModified()) {
				stmt.setString( index++, dto.getCondicionesPago() );
			}
		
			if (dto.isFolioGeneradoModified()) {
				stmt.setString( index++, dto.getFolioGenerado() );
			}
		
			if (dto.isFechaImpresionModified()) {
				stmt.setTimestamp(index++, dto.getFechaImpresion()==null ? null : new java.sql.Timestamp( dto.getFechaImpresion().getTime() ) );
			}
		
			if (dto.isFechaCapturaModified()) {
				stmt.setTimestamp(index++, dto.getFechaCaptura()==null ? null : new java.sql.Timestamp( dto.getFechaCaptura().getTime() ) );
			}
		
			if (dto.isFechaPagoModified()) {
				stmt.setTimestamp(index++, dto.getFechaPago()==null ? null : new java.sql.Timestamp( dto.getFechaPago().getTime() ) );
			}
		
			if (dto.isImporteSubtotalModified()) {
				if (dto.isImporteSubtotalNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getImporteSubtotal() );
				}
		
			}
		
			if (dto.isImpuestosModified()) {
				if (dto.isImpuestosNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getImpuestos() );
				}
		
			}
		
			if (dto.isImporteNetoModified()) {
				if (dto.isImporteNetoNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getImporteNeto() );
				}
		
			}
		
			if (dto.isParcialidadModified()) {
				stmt.setString( index++, dto.getParcialidad() );
			}
		
			if (dto.isConceptoModified()) {
				stmt.setString( index++, dto.getConcepto() );
			}
		
			if (dto.isArchivoCfdModified()) {
				stmt.setString( index++, dto.getArchivoCfd() );
			}
		
			if (dto.isCadenaOriginalModified()) {
				stmt.setString( index++, dto.getCadenaOriginal() );
			}
		
			if (dto.isSelloDigitalModified()) {
				stmt.setString( index++, dto.getSelloDigital() );
			}
		
			if (dto.isComentariosModified()) {
				stmt.setString( index++, dto.getComentarios() );
			}
		
			if (dto.isIdDivisasModified()) {
				if (dto.isIdDivisasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdDivisas() );
				}
		
			}
		
			if (dto.isIdTipoMonedaModified()) {
				if (dto.isIdTipoMonedaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdTipoMoneda() );
				}
		
			}
		
			if (dto.isTipoDeCambioModified()) {
				if (dto.isTipoDeCambioNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getTipoDeCambio() );
				}
		
			}
		
			if (dto.isUuidModified()) {
				stmt.setString( index++, dto.getUuid() );
			}
		
			if (dto.isSelloSatModified()) {
				stmt.setString( index++, dto.getSelloSat() );
			}
		
			if (dto.isAcuseCancelacionModified()) {
				stmt.setString( index++, dto.getAcuseCancelacion() );
			}
		
			if (dto.isDescuentoModified()) {
				if (dto.isDescuentoNull()) {
					stmt.setNull( index++, java.sql.Types.FLOAT );
				} else {
					stmt.setFloat( index++, dto.getDescuento() );
				}
		
			}
		
			if (dto.isMotivoDescuentoModified()) {
				stmt.setString( index++, dto.getMotivoDescuento() );
			}
		
			if (dto.isFechaVigenciaModified()) {
				stmt.setString( index++, dto.getFechaVigencia() );
			}
		
			if (dto.isSecofiModified()) {
				stmt.setString( index++, dto.getSecofi() );
			}
		
			if (dto.isNumeroFacturaModified()) {
				stmt.setString( index++, dto.getNumeroFactura() );
			}
		
			if (dto.isNoCertificadoSatModified()) {
				stmt.setString( index++, dto.getNoCertificadoSat() );
			}
		
			if (dto.isIdProductorModified()) {
				if (dto.isIdProductorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdProductor() );
				}
		
			}
		
			if (dto.isUnidadModified()) {
				stmt.setString( index++, dto.getUnidad() );
			}
		
			if (dto.isFechaTimbradoModified()) {
				stmt.setTimestamp(index++, dto.getFechaTimbrado()==null ? null : new java.sql.Timestamp( dto.getFechaTimbrado().getTime() ) );
			}
		
			if (dto.isCreadoAutomaticamenteModified()) {
				if (dto.isCreadoAutomaticamenteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getCreadoAutomaticamente() );
				}
		
			}
		
			if (dto.isSaldoPagadoModified()) {
				if (dto.isSaldoPagadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSaldoPagado() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdComprobanteFiscal() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteFiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the comprobante_fiscal table.
	 */
	public void delete(ComprobanteFiscalPk pk) throws ComprobanteFiscalDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdComprobanteFiscal() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteFiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the comprobante_fiscal table that matches the specified primary-key value.
	 */
	public ComprobanteFiscal findByPrimaryKey(ComprobanteFiscalPk pk) throws ComprobanteFiscalDaoException
	{
		return findByPrimaryKey( pk.getIdComprobanteFiscal() );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public ComprobanteFiscal findByPrimaryKey(int idComprobanteFiscal) throws ComprobanteFiscalDaoException
	{
		ComprobanteFiscal ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_FISCAL = ?", new Object[] {  new Integer(idComprobanteFiscal) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria ''.
	 */
	public ComprobanteFiscal[] findAll() throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_COMPROBANTE_FISCAL", null );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public ComprobanteFiscal[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_FISCAL = ? ORDER BY ID_COMPROBANTE_FISCAL", new Object[] {  new Integer(idComprobanteFiscal) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ID_TIPO_COMPROBANTE = :idTipoComprobante'.
	 */
	public ComprobanteFiscal[] findWhereIdTipoComprobanteEquals(int idTipoComprobante) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TIPO_COMPROBANTE = ? ORDER BY ID_TIPO_COMPROBANTE", new Object[] {  new Integer(idTipoComprobante) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public ComprobanteFiscal[] findWhereIdEmpresaEquals(int idEmpresa) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public ComprobanteFiscal[] findWhereIdClienteEquals(int idCliente) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CLIENTE = ? ORDER BY ID_CLIENTE", new Object[] {  new Integer(idCliente) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public ComprobanteFiscal[] findWhereIdEstatusEquals(int idEstatus) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ID_FOLIO = :idFolio'.
	 */
	public ComprobanteFiscal[] findWhereIdFolioEquals(int idFolio) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_FOLIO = ? ORDER BY ID_FOLIO", new Object[] {  new Integer(idFolio) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ID_FORMA_PAGO = :idFormaPago'.
	 */
	public ComprobanteFiscal[] findWhereIdFormaPagoEquals(int idFormaPago) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_FORMA_PAGO = ? ORDER BY ID_FORMA_PAGO", new Object[] {  new Integer(idFormaPago) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ID_TIPO_PAGO = :idTipoPago'.
	 */
	public ComprobanteFiscal[] findWhereIdTipoPagoEquals(int idTipoPago) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TIPO_PAGO = ? ORDER BY ID_TIPO_PAGO", new Object[] {  new Integer(idTipoPago) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'CONDICIONES_PAGO = :condicionesPago'.
	 */
	public ComprobanteFiscal[] findWhereCondicionesPagoEquals(String condicionesPago) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONDICIONES_PAGO = ? ORDER BY CONDICIONES_PAGO", new Object[] { condicionesPago } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'FOLIO_GENERADO = :folioGenerado'.
	 */
	public ComprobanteFiscal[] findWhereFolioGeneradoEquals(String folioGenerado) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_GENERADO = ? ORDER BY FOLIO_GENERADO", new Object[] { folioGenerado } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'FECHA_IMPRESION = :fechaImpresion'.
	 */
	public ComprobanteFiscal[] findWhereFechaImpresionEquals(Date fechaImpresion) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_IMPRESION = ? ORDER BY FECHA_IMPRESION", new Object[] { fechaImpresion==null ? null : new java.sql.Timestamp( fechaImpresion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'FECHA_CAPTURA = :fechaCaptura'.
	 */
	public ComprobanteFiscal[] findWhereFechaCapturaEquals(Date fechaCaptura) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_CAPTURA = ? ORDER BY FECHA_CAPTURA", new Object[] { fechaCaptura==null ? null : new java.sql.Timestamp( fechaCaptura.getTime() ) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'FECHA_PAGO = :fechaPago'.
	 */
	public ComprobanteFiscal[] findWhereFechaPagoEquals(Date fechaPago) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_PAGO = ? ORDER BY FECHA_PAGO", new Object[] { fechaPago==null ? null : new java.sql.Timestamp( fechaPago.getTime() ) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'IMPORTE_SUBTOTAL = :importeSubtotal'.
	 */
	public ComprobanteFiscal[] findWhereImporteSubtotalEquals(float importeSubtotal) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPORTE_SUBTOTAL = ? ORDER BY IMPORTE_SUBTOTAL", new Object[] {  new Float(importeSubtotal) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'IMPUESTOS = :impuestos'.
	 */
	public ComprobanteFiscal[] findWhereImpuestosEquals(float impuestos) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPUESTOS = ? ORDER BY IMPUESTOS", new Object[] {  new Float(impuestos) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'IMPORTE_NETO = :importeNeto'.
	 */
	public ComprobanteFiscal[] findWhereImporteNetoEquals(float importeNeto) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPORTE_NETO = ? ORDER BY IMPORTE_NETO", new Object[] {  new Float(importeNeto) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'PARCIALIDAD = :parcialidad'.
	 */
	public ComprobanteFiscal[] findWhereParcialidadEquals(String parcialidad) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARCIALIDAD = ? ORDER BY PARCIALIDAD", new Object[] { parcialidad } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'CONCEPTO = :concepto'.
	 */
	public ComprobanteFiscal[] findWhereConceptoEquals(String concepto) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONCEPTO = ? ORDER BY CONCEPTO", new Object[] { concepto } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ARCHIVO_CFD = :archivoCfd'.
	 */
	public ComprobanteFiscal[] findWhereArchivoCfdEquals(String archivoCfd) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ARCHIVO_CFD = ? ORDER BY ARCHIVO_CFD", new Object[] { archivoCfd } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'CADENA_ORIGINAL = :cadenaOriginal'.
	 */
	public ComprobanteFiscal[] findWhereCadenaOriginalEquals(String cadenaOriginal) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CADENA_ORIGINAL = ? ORDER BY CADENA_ORIGINAL", new Object[] { cadenaOriginal } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'SELLO_DIGITAL = :selloDigital'.
	 */
	public ComprobanteFiscal[] findWhereSelloDigitalEquals(String selloDigital) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SELLO_DIGITAL = ? ORDER BY SELLO_DIGITAL", new Object[] { selloDigital } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ComprobanteFiscal[] findWhereComentariosEquals(String comentarios) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ID_DIVISAS = :idDivisas'.
	 */
	public ComprobanteFiscal[] findWhereIdDivisasEquals(int idDivisas) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_DIVISAS = ? ORDER BY ID_DIVISAS", new Object[] {  new Integer(idDivisas) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ID_TIPO_MONEDA = :idTipoMoneda'.
	 */
	public ComprobanteFiscal[] findWhereIdTipoMonedaEquals(int idTipoMoneda) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_TIPO_MONEDA = ? ORDER BY ID_TIPO_MONEDA", new Object[] {  new Integer(idTipoMoneda) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'TIPO_DE_CAMBIO = :tipoDeCambio'.
	 */
	public ComprobanteFiscal[] findWhereTipoDeCambioEquals(float tipoDeCambio) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_DE_CAMBIO = ? ORDER BY TIPO_DE_CAMBIO", new Object[] {  new Float(tipoDeCambio) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'UUID = :uuid'.
	 */
	public ComprobanteFiscal[] findWhereUuidEquals(String uuid) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UUID = ? ORDER BY UUID", new Object[] { uuid } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'SELLO_SAT = :selloSat'.
	 */
	public ComprobanteFiscal[] findWhereSelloSatEquals(String selloSat) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SELLO_SAT = ? ORDER BY SELLO_SAT", new Object[] { selloSat } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ACUSE_CANCELACION = :acuseCancelacion'.
	 */
	public ComprobanteFiscal[] findWhereAcuseCancelacionEquals(String acuseCancelacion) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACUSE_CANCELACION = ? ORDER BY ACUSE_CANCELACION", new Object[] { acuseCancelacion } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'DESCUENTO = :descuento'.
	 */
	public ComprobanteFiscal[] findWhereDescuentoEquals(float descuento) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO = ? ORDER BY DESCUENTO", new Object[] {  new Float(descuento) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'MOTIVO_DESCUENTO = :motivoDescuento'.
	 */
	public ComprobanteFiscal[] findWhereMotivoDescuentoEquals(String motivoDescuento) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVO_DESCUENTO = ? ORDER BY MOTIVO_DESCUENTO", new Object[] { motivoDescuento } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'FECHA_VIGENCIA = :fechaVigencia'.
	 */
	public ComprobanteFiscal[] findWhereFechaVigenciaEquals(String fechaVigencia) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_VIGENCIA = ? ORDER BY FECHA_VIGENCIA", new Object[] { fechaVigencia } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'SECOFI = :secofi'.
	 */
	public ComprobanteFiscal[] findWhereSecofiEquals(String secofi) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SECOFI = ? ORDER BY SECOFI", new Object[] { secofi } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'NUMERO_FACTURA = :numeroFactura'.
	 */
	public ComprobanteFiscal[] findWhereNumeroFacturaEquals(String numeroFactura) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMERO_FACTURA = ? ORDER BY NUMERO_FACTURA", new Object[] { numeroFactura } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'NO_CERTIFICADO_SAT = :noCertificadoSat'.
	 */
	public ComprobanteFiscal[] findWhereNoCertificadoSatEquals(String noCertificadoSat) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NO_CERTIFICADO_SAT = ? ORDER BY NO_CERTIFICADO_SAT", new Object[] { noCertificadoSat } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'ID_PRODUCTOR = :idProductor'.
	 */
	public ComprobanteFiscal[] findWhereIdProductorEquals(int idProductor) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PRODUCTOR = ? ORDER BY ID_PRODUCTOR", new Object[] {  new Integer(idProductor) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'UNIDAD = :unidad'.
	 */
	public ComprobanteFiscal[] findWhereUnidadEquals(String unidad) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UNIDAD = ? ORDER BY UNIDAD", new Object[] { unidad } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'FECHA_TIMBRADO = :fechaTimbrado'.
	 */
	public ComprobanteFiscal[] findWhereFechaTimbradoEquals(Date fechaTimbrado) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_TIMBRADO = ? ORDER BY FECHA_TIMBRADO", new Object[] { fechaTimbrado==null ? null : new java.sql.Timestamp( fechaTimbrado.getTime() ) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'CREADO_AUTOMATICAMENTE = :creadoAutomaticamente'.
	 */
	public ComprobanteFiscal[] findWhereCreadoAutomaticamenteEquals(int creadoAutomaticamente) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREADO_AUTOMATICAMENTE = ? ORDER BY CREADO_AUTOMATICAMENTE", new Object[] {  new Integer(creadoAutomaticamente) } );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the criteria 'SALDO_PAGADO = :saldoPagado'.
	 */
	public ComprobanteFiscal[] findWhereSaldoPagadoEquals(double saldoPagado) throws ComprobanteFiscalDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SALDO_PAGADO = ? ORDER BY SALDO_PAGADO", new Object[] {  new Double(saldoPagado) } );
	}

	/**
	 * Method 'ComprobanteFiscalDaoImpl'
	 * 
	 */
	public ComprobanteFiscalDaoImpl()
	{
	}

	/**
	 * Method 'ComprobanteFiscalDaoImpl'
	 * 
	 * @param userConn
	 */
	public ComprobanteFiscalDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "comprobante_fiscal";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ComprobanteFiscal fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ComprobanteFiscal dto = new ComprobanteFiscal();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ComprobanteFiscal[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ComprobanteFiscal dto = new ComprobanteFiscal();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ComprobanteFiscal ret[] = new ComprobanteFiscal[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ComprobanteFiscal dto, ResultSet rs) throws SQLException
	{
		dto.setIdComprobanteFiscal( rs.getInt( COLUMN_ID_COMPROBANTE_FISCAL ) );
		dto.setIdTipoComprobante( rs.getInt( COLUMN_ID_TIPO_COMPROBANTE ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdCliente( rs.getInt( COLUMN_ID_CLIENTE ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		dto.setIdFolio( rs.getInt( COLUMN_ID_FOLIO ) );
		if (rs.wasNull()) {
			dto.setIdFolioNull( true );
		}
		
		dto.setIdFormaPago( rs.getInt( COLUMN_ID_FORMA_PAGO ) );
		if (rs.wasNull()) {
			dto.setIdFormaPagoNull( true );
		}
		
		dto.setIdTipoPago( rs.getInt( COLUMN_ID_TIPO_PAGO ) );
		if (rs.wasNull()) {
			dto.setIdTipoPagoNull( true );
		}
		
		dto.setCondicionesPago( rs.getString( COLUMN_CONDICIONES_PAGO ) );
		dto.setFolioGenerado( rs.getString( COLUMN_FOLIO_GENERADO ) );
		dto.setFechaImpresion( rs.getTimestamp(COLUMN_FECHA_IMPRESION ) );
		dto.setFechaCaptura( rs.getTimestamp(COLUMN_FECHA_CAPTURA ) );
		dto.setFechaPago( rs.getTimestamp(COLUMN_FECHA_PAGO ) );
		dto.setImporteSubtotal( rs.getFloat( COLUMN_IMPORTE_SUBTOTAL ) );
		if (rs.wasNull()) {
			dto.setImporteSubtotalNull( true );
		}
		
		dto.setImpuestos( rs.getFloat( COLUMN_IMPUESTOS ) );
		if (rs.wasNull()) {
			dto.setImpuestosNull( true );
		}
		
		dto.setImporteNeto( rs.getFloat( COLUMN_IMPORTE_NETO ) );
		if (rs.wasNull()) {
			dto.setImporteNetoNull( true );
		}
		
		dto.setParcialidad( rs.getString( COLUMN_PARCIALIDAD ) );
		dto.setConcepto( rs.getString( COLUMN_CONCEPTO ) );
		dto.setArchivoCfd( rs.getString( COLUMN_ARCHIVO_CFD ) );
		dto.setCadenaOriginal( rs.getString( COLUMN_CADENA_ORIGINAL ) );
		dto.setSelloDigital( rs.getString( COLUMN_SELLO_DIGITAL ) );
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setIdDivisas( rs.getInt( COLUMN_ID_DIVISAS ) );
		if (rs.wasNull()) {
			dto.setIdDivisasNull( true );
		}
		
		dto.setIdTipoMoneda( rs.getInt( COLUMN_ID_TIPO_MONEDA ) );
		if (rs.wasNull()) {
			dto.setIdTipoMonedaNull( true );
		}
		
		dto.setTipoDeCambio( rs.getFloat( COLUMN_TIPO_DE_CAMBIO ) );
		if (rs.wasNull()) {
			dto.setTipoDeCambioNull( true );
		}
		
		dto.setUuid( rs.getString( COLUMN_UUID ) );
		dto.setSelloSat( rs.getString( COLUMN_SELLO_SAT ) );
		dto.setAcuseCancelacion( rs.getString( COLUMN_ACUSE_CANCELACION ) );
		dto.setDescuento( rs.getFloat( COLUMN_DESCUENTO ) );
		if (rs.wasNull()) {
			dto.setDescuentoNull( true );
		}
		
		dto.setMotivoDescuento( rs.getString( COLUMN_MOTIVO_DESCUENTO ) );
		dto.setFechaVigencia( rs.getString( COLUMN_FECHA_VIGENCIA ) );
		dto.setSecofi( rs.getString( COLUMN_SECOFI ) );
		dto.setNumeroFactura( rs.getString( COLUMN_NUMERO_FACTURA ) );
		dto.setNoCertificadoSat( rs.getString( COLUMN_NO_CERTIFICADO_SAT ) );
		dto.setIdProductor( rs.getInt( COLUMN_ID_PRODUCTOR ) );
		if (rs.wasNull()) {
			dto.setIdProductorNull( true );
		}
		
		dto.setUnidad( rs.getString( COLUMN_UNIDAD ) );
		dto.setFechaTimbrado( rs.getTimestamp(COLUMN_FECHA_TIMBRADO ) );
		dto.setCreadoAutomaticamente( rs.getInt( COLUMN_CREADO_AUTOMATICAMENTE ) );
		if (rs.wasNull()) {
			dto.setCreadoAutomaticamenteNull( true );
		}
		
		dto.setSaldoPagado( rs.getDouble( COLUMN_SALDO_PAGADO ) );
		if (rs.wasNull()) {
			dto.setSaldoPagadoNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ComprobanteFiscal dto)
	{
		dto.setIdComprobanteFiscalModified( false );
		dto.setIdTipoComprobanteModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdClienteModified( false );
		dto.setIdEstatusModified( false );
		dto.setIdFolioModified( false );
		dto.setIdFormaPagoModified( false );
		dto.setIdTipoPagoModified( false );
		dto.setCondicionesPagoModified( false );
		dto.setFolioGeneradoModified( false );
		dto.setFechaImpresionModified( false );
		dto.setFechaCapturaModified( false );
		dto.setFechaPagoModified( false );
		dto.setImporteSubtotalModified( false );
		dto.setImpuestosModified( false );
		dto.setImporteNetoModified( false );
		dto.setParcialidadModified( false );
		dto.setConceptoModified( false );
		dto.setArchivoCfdModified( false );
		dto.setCadenaOriginalModified( false );
		dto.setSelloDigitalModified( false );
		dto.setComentariosModified( false );
		dto.setIdDivisasModified( false );
		dto.setIdTipoMonedaModified( false );
		dto.setTipoDeCambioModified( false );
		dto.setUuidModified( false );
		dto.setSelloSatModified( false );
		dto.setAcuseCancelacionModified( false );
		dto.setDescuentoModified( false );
		dto.setMotivoDescuentoModified( false );
		dto.setFechaVigenciaModified( false );
		dto.setSecofiModified( false );
		dto.setNumeroFacturaModified( false );
		dto.setNoCertificadoSatModified( false );
		dto.setIdProductorModified( false );
		dto.setUnidadModified( false );
		dto.setFechaTimbradoModified( false );
		dto.setCreadoAutomaticamenteModified( false );
		dto.setSaldoPagadoModified( false );
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the specified arbitrary SQL statement
	 */
	public ComprobanteFiscal[] findByDynamicSelect(String sql, Object[] sqlParams) throws ComprobanteFiscalDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteFiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the comprobante_fiscal table that match the specified arbitrary SQL statement
	 */
	public ComprobanteFiscal[] findByDynamicWhere(String sql, Object[] sqlParams) throws ComprobanteFiscalDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ComprobanteFiscalDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

        protected final String SQL_SELECT_MAX = "SELECT ID_COMPROBANTE_FISCAL, ID_TIPO_COMPROBANTE, ID_EMPRESA, ID_CLIENTE, ID_ESTATUS, ID_FOLIO, ID_FORMA_PAGO, ID_TIPO_PAGO, CONDICIONES_PAGO, FOLIO_GENERADO, FECHA_IMPRESION, FECHA_CAPTURA, FECHA_PAGO, IMPORTE_SUBTOTAL, IMPUESTOS, IMPORTE_NETO, PARCIALIDAD, CONCEPTO, ARCHIVO_CFD, CADENA_ORIGINAL, SELLO_DIGITAL, COMENTARIOS, ID_DIVISAS, ID_TIPO_MONEDA, TIPO_DE_CAMBIO, UUID, SELLO_SAT, ACUSE_CANCELACION, DESCUENTO, MOTIVO_DESCUENTO, FECHA_VIGENCIA, SECOFI, NUMERO_FACTURA, NO_CERTIFICADO_SAT, ID_PRODUCTOR, UNIDAD, FECHA_TIMBRADO, CREADO_AUTOMATICAMENTE, SALDO_PAGADO FROM " + getTableName() + " ORDER BY ID_COMPROBANTE_FISCAL DESC LIMIT 1 ";
        
        public ComprobanteFiscal findLast() throws ComprobanteFiscalDaoException
        {
          ComprobanteFiscal ret[] = findByDynamicSelect( SQL_SELECT_MAX , new Object[0] );
          return ret.length==0 ? null : ret[0];
        }

}
