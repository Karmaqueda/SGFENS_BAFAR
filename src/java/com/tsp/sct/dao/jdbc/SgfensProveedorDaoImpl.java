/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SgfensProveedorDaoImpl extends AbstractDAO implements SgfensProveedorDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_PROVEEDOR, ID_EMPRESA, NUMERO_PROVEEDOR, RFC, RAZON_SOCIAL, CALLE, NUMERO, NUMERO_INTERIOR, COLONIA, CODIGO_POSTAL, PAIS, ESTADO, MUNICIPIO, LADA, TELEFONO, EXTENSION, CELULAR, CORREO, CONTACTO, ID_ESTATUS, DESCRIPCION, NOMBRE_EMPRESA, LATITUD, LONGITUD, ID_CATEGORIA_PROVEEDOR, NOMBRE_IMAGEN_PROVEEDOR FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_PROVEEDOR, ID_EMPRESA, NUMERO_PROVEEDOR, RFC, RAZON_SOCIAL, CALLE, NUMERO, NUMERO_INTERIOR, COLONIA, CODIGO_POSTAL, PAIS, ESTADO, MUNICIPIO, LADA, TELEFONO, EXTENSION, CELULAR, CORREO, CONTACTO, ID_ESTATUS, DESCRIPCION, NOMBRE_EMPRESA, LATITUD, LONGITUD, ID_CATEGORIA_PROVEEDOR, NOMBRE_IMAGEN_PROVEEDOR ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_PROVEEDOR = ?, ID_EMPRESA = ?, NUMERO_PROVEEDOR = ?, RFC = ?, RAZON_SOCIAL = ?, CALLE = ?, NUMERO = ?, NUMERO_INTERIOR = ?, COLONIA = ?, CODIGO_POSTAL = ?, PAIS = ?, ESTADO = ?, MUNICIPIO = ?, LADA = ?, TELEFONO = ?, EXTENSION = ?, CELULAR = ?, CORREO = ?, CONTACTO = ?, ID_ESTATUS = ?, DESCRIPCION = ?, NOMBRE_EMPRESA = ?, LATITUD = ?, LONGITUD = ?, ID_CATEGORIA_PROVEEDOR = ?, NOMBRE_IMAGEN_PROVEEDOR = ? WHERE ID_PROVEEDOR = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_PROVEEDOR = ?";

	/** 
	 * Index of column ID_PROVEEDOR
	 */
	protected static final int COLUMN_ID_PROVEEDOR = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column NUMERO_PROVEEDOR
	 */
	protected static final int COLUMN_NUMERO_PROVEEDOR = 3;

	/** 
	 * Index of column RFC
	 */
	protected static final int COLUMN_RFC = 4;

	/** 
	 * Index of column RAZON_SOCIAL
	 */
	protected static final int COLUMN_RAZON_SOCIAL = 5;

	/** 
	 * Index of column CALLE
	 */
	protected static final int COLUMN_CALLE = 6;

	/** 
	 * Index of column NUMERO
	 */
	protected static final int COLUMN_NUMERO = 7;

	/** 
	 * Index of column NUMERO_INTERIOR
	 */
	protected static final int COLUMN_NUMERO_INTERIOR = 8;

	/** 
	 * Index of column COLONIA
	 */
	protected static final int COLUMN_COLONIA = 9;

	/** 
	 * Index of column CODIGO_POSTAL
	 */
	protected static final int COLUMN_CODIGO_POSTAL = 10;

	/** 
	 * Index of column PAIS
	 */
	protected static final int COLUMN_PAIS = 11;

	/** 
	 * Index of column ESTADO
	 */
	protected static final int COLUMN_ESTADO = 12;

	/** 
	 * Index of column MUNICIPIO
	 */
	protected static final int COLUMN_MUNICIPIO = 13;

	/** 
	 * Index of column LADA
	 */
	protected static final int COLUMN_LADA = 14;

	/** 
	 * Index of column TELEFONO
	 */
	protected static final int COLUMN_TELEFONO = 15;

	/** 
	 * Index of column EXTENSION
	 */
	protected static final int COLUMN_EXTENSION = 16;

	/** 
	 * Index of column CELULAR
	 */
	protected static final int COLUMN_CELULAR = 17;

	/** 
	 * Index of column CORREO
	 */
	protected static final int COLUMN_CORREO = 18;

	/** 
	 * Index of column CONTACTO
	 */
	protected static final int COLUMN_CONTACTO = 19;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 20;

	/** 
	 * Index of column DESCRIPCION
	 */
	protected static final int COLUMN_DESCRIPCION = 21;

	/** 
	 * Index of column NOMBRE_EMPRESA
	 */
	protected static final int COLUMN_NOMBRE_EMPRESA = 22;

	/** 
	 * Index of column LATITUD
	 */
	protected static final int COLUMN_LATITUD = 23;

	/** 
	 * Index of column LONGITUD
	 */
	protected static final int COLUMN_LONGITUD = 24;

	/** 
	 * Index of column ID_CATEGORIA_PROVEEDOR
	 */
	protected static final int COLUMN_ID_CATEGORIA_PROVEEDOR = 25;

	/** 
	 * Index of column NOMBRE_IMAGEN_PROVEEDOR
	 */
	protected static final int COLUMN_NOMBRE_IMAGEN_PROVEEDOR = 26;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 26;

	/** 
	 * Index of primary-key column ID_PROVEEDOR
	 */
	protected static final int PK_COLUMN_ID_PROVEEDOR = 1;

	/** 
	 * Inserts a new row in the sgfens_proveedor table.
	 */
	public SgfensProveedorPk insert(SgfensProveedor dto) throws SgfensProveedorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdProveedorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PROVEEDOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumeroProveedorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUMERO_PROVEEDOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRfcModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RFC" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRazonSocialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RAZON_SOCIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCalleModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CALLE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumeroModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUMERO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumeroInteriorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUMERO_INTERIOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isColoniaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "COLONIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCodigoPostalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CODIGO_POSTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPaisModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PAIS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEstadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ESTADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMunicipioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MUNICIPIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLadaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LADA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTelefonoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TELEFONO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isExtensionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "EXTENSION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCelularModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CELULAR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCorreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CORREO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CONTACTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCRIPCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLatitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LATITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLongitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LONGITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdCategoriaProveedorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CATEGORIA_PROVEEDOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreImagenProveedorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_IMAGEN_PROVEEDOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdProveedorModified()) {
				stmt.setInt( index++, dto.getIdProveedor() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isNumeroProveedorModified()) {
				stmt.setString( index++, dto.getNumeroProveedor() );
			}
		
			if (dto.isRfcModified()) {
				stmt.setString( index++, dto.getRfc() );
			}
		
			if (dto.isRazonSocialModified()) {
				stmt.setString( index++, dto.getRazonSocial() );
			}
		
			if (dto.isCalleModified()) {
				stmt.setString( index++, dto.getCalle() );
			}
		
			if (dto.isNumeroModified()) {
				stmt.setString( index++, dto.getNumero() );
			}
		
			if (dto.isNumeroInteriorModified()) {
				stmt.setString( index++, dto.getNumeroInterior() );
			}
		
			if (dto.isColoniaModified()) {
				stmt.setString( index++, dto.getColonia() );
			}
		
			if (dto.isCodigoPostalModified()) {
				stmt.setString( index++, dto.getCodigoPostal() );
			}
		
			if (dto.isPaisModified()) {
				stmt.setString( index++, dto.getPais() );
			}
		
			if (dto.isEstadoModified()) {
				stmt.setString( index++, dto.getEstado() );
			}
		
			if (dto.isMunicipioModified()) {
				stmt.setString( index++, dto.getMunicipio() );
			}
		
			if (dto.isLadaModified()) {
				stmt.setString( index++, dto.getLada() );
			}
		
			if (dto.isTelefonoModified()) {
				stmt.setString( index++, dto.getTelefono() );
			}
		
			if (dto.isExtensionModified()) {
				stmt.setString( index++, dto.getExtension() );
			}
		
			if (dto.isCelularModified()) {
				stmt.setString( index++, dto.getCelular() );
			}
		
			if (dto.isCorreoModified()) {
				stmt.setString( index++, dto.getCorreo() );
			}
		
			if (dto.isContactoModified()) {
				stmt.setString( index++, dto.getContacto() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isNombreEmpresaModified()) {
				stmt.setString( index++, dto.getNombreEmpresa() );
			}
		
			if (dto.isLatitudModified()) {
				stmt.setString( index++, dto.getLatitud() );
			}
		
			if (dto.isLongitudModified()) {
				stmt.setString( index++, dto.getLongitud() );
			}
		
			if (dto.isIdCategoriaProveedorModified()) {
				if (dto.isIdCategoriaProveedorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCategoriaProveedor() );
				}
		
			}
		
			if (dto.isNombreImagenProveedorModified()) {
				stmt.setString( index++, dto.getNombreImagenProveedor() );
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdProveedor( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new SgfensProveedorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sgfens_proveedor table.
	 */
	public void update(SgfensProveedorPk pk, SgfensProveedor dto) throws SgfensProveedorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdProveedorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PROVEEDOR=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isNumeroProveedorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUMERO_PROVEEDOR=?" );
				modified=true;
			}
		
			if (dto.isRfcModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RFC=?" );
				modified=true;
			}
		
			if (dto.isRazonSocialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RAZON_SOCIAL=?" );
				modified=true;
			}
		
			if (dto.isCalleModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CALLE=?" );
				modified=true;
			}
		
			if (dto.isNumeroModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUMERO=?" );
				modified=true;
			}
		
			if (dto.isNumeroInteriorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUMERO_INTERIOR=?" );
				modified=true;
			}
		
			if (dto.isColoniaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "COLONIA=?" );
				modified=true;
			}
		
			if (dto.isCodigoPostalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CODIGO_POSTAL=?" );
				modified=true;
			}
		
			if (dto.isPaisModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PAIS=?" );
				modified=true;
			}
		
			if (dto.isEstadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ESTADO=?" );
				modified=true;
			}
		
			if (dto.isMunicipioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MUNICIPIO=?" );
				modified=true;
			}
		
			if (dto.isLadaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LADA=?" );
				modified=true;
			}
		
			if (dto.isTelefonoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TELEFONO=?" );
				modified=true;
			}
		
			if (dto.isExtensionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "EXTENSION=?" );
				modified=true;
			}
		
			if (dto.isCelularModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CELULAR=?" );
				modified=true;
			}
		
			if (dto.isCorreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CORREO=?" );
				modified=true;
			}
		
			if (dto.isContactoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONTACTO=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCRIPCION=?" );
				modified=true;
			}
		
			if (dto.isNombreEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isLatitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LATITUD=?" );
				modified=true;
			}
		
			if (dto.isLongitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LONGITUD=?" );
				modified=true;
			}
		
			if (dto.isIdCategoriaProveedorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CATEGORIA_PROVEEDOR=?" );
				modified=true;
			}
		
			if (dto.isNombreImagenProveedorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_IMAGEN_PROVEEDOR=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_PROVEEDOR=?" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdProveedorModified()) {
				stmt.setInt( index++, dto.getIdProveedor() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isNumeroProveedorModified()) {
				stmt.setString( index++, dto.getNumeroProveedor() );
			}
		
			if (dto.isRfcModified()) {
				stmt.setString( index++, dto.getRfc() );
			}
		
			if (dto.isRazonSocialModified()) {
				stmt.setString( index++, dto.getRazonSocial() );
			}
		
			if (dto.isCalleModified()) {
				stmt.setString( index++, dto.getCalle() );
			}
		
			if (dto.isNumeroModified()) {
				stmt.setString( index++, dto.getNumero() );
			}
		
			if (dto.isNumeroInteriorModified()) {
				stmt.setString( index++, dto.getNumeroInterior() );
			}
		
			if (dto.isColoniaModified()) {
				stmt.setString( index++, dto.getColonia() );
			}
		
			if (dto.isCodigoPostalModified()) {
				stmt.setString( index++, dto.getCodigoPostal() );
			}
		
			if (dto.isPaisModified()) {
				stmt.setString( index++, dto.getPais() );
			}
		
			if (dto.isEstadoModified()) {
				stmt.setString( index++, dto.getEstado() );
			}
		
			if (dto.isMunicipioModified()) {
				stmt.setString( index++, dto.getMunicipio() );
			}
		
			if (dto.isLadaModified()) {
				stmt.setString( index++, dto.getLada() );
			}
		
			if (dto.isTelefonoModified()) {
				stmt.setString( index++, dto.getTelefono() );
			}
		
			if (dto.isExtensionModified()) {
				stmt.setString( index++, dto.getExtension() );
			}
		
			if (dto.isCelularModified()) {
				stmt.setString( index++, dto.getCelular() );
			}
		
			if (dto.isCorreoModified()) {
				stmt.setString( index++, dto.getCorreo() );
			}
		
			if (dto.isContactoModified()) {
				stmt.setString( index++, dto.getContacto() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isNombreEmpresaModified()) {
				stmt.setString( index++, dto.getNombreEmpresa() );
			}
		
			if (dto.isLatitudModified()) {
				stmt.setString( index++, dto.getLatitud() );
			}
		
			if (dto.isLongitudModified()) {
				stmt.setString( index++, dto.getLongitud() );
			}
		
			if (dto.isIdCategoriaProveedorModified()) {
				if (dto.isIdCategoriaProveedorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCategoriaProveedor() );
				}
		
			}
		
			if (dto.isNombreImagenProveedorModified()) {
				stmt.setString( index++, dto.getNombreImagenProveedor() );
			}
		
			stmt.setInt( index++, pk.getIdProveedor() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new SgfensProveedorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sgfens_proveedor table.
	 */
	public void delete(SgfensProveedorPk pk) throws SgfensProveedorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdProveedor() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new SgfensProveedorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sgfens_proveedor table that matches the specified primary-key value.
	 */
	public SgfensProveedor findByPrimaryKey(SgfensProveedorPk pk) throws SgfensProveedorDaoException
	{
		return findByPrimaryKey( pk.getIdProveedor() );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'ID_PROVEEDOR = :idProveedor'.
	 */
	public SgfensProveedor findByPrimaryKey(int idProveedor) throws SgfensProveedorDaoException
	{
		SgfensProveedor ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_PROVEEDOR = ?", new Object[] {  new Integer(idProveedor) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria ''.
	 */
	public SgfensProveedor[] findAll() throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_PROVEEDOR", null );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'ID_PROVEEDOR = :idProveedor'.
	 */
	public SgfensProveedor[] findWhereIdProveedorEquals(int idProveedor) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PROVEEDOR = ? ORDER BY ID_PROVEEDOR", new Object[] {  new Integer(idProveedor) } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public SgfensProveedor[] findWhereIdEmpresaEquals(int idEmpresa) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'NUMERO_PROVEEDOR = :numeroProveedor'.
	 */
	public SgfensProveedor[] findWhereNumeroProveedorEquals(String numeroProveedor) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMERO_PROVEEDOR = ? ORDER BY NUMERO_PROVEEDOR", new Object[] { numeroProveedor } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'RFC = :rfc'.
	 */
	public SgfensProveedor[] findWhereRfcEquals(String rfc) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RFC = ? ORDER BY RFC", new Object[] { rfc } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'RAZON_SOCIAL = :razonSocial'.
	 */
	public SgfensProveedor[] findWhereRazonSocialEquals(String razonSocial) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RAZON_SOCIAL = ? ORDER BY RAZON_SOCIAL", new Object[] { razonSocial } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'CALLE = :calle'.
	 */
	public SgfensProveedor[] findWhereCalleEquals(String calle) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CALLE = ? ORDER BY CALLE", new Object[] { calle } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'NUMERO = :numero'.
	 */
	public SgfensProveedor[] findWhereNumeroEquals(String numero) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMERO = ? ORDER BY NUMERO", new Object[] { numero } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'NUMERO_INTERIOR = :numeroInterior'.
	 */
	public SgfensProveedor[] findWhereNumeroInteriorEquals(String numeroInterior) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMERO_INTERIOR = ? ORDER BY NUMERO_INTERIOR", new Object[] { numeroInterior } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'COLONIA = :colonia'.
	 */
	public SgfensProveedor[] findWhereColoniaEquals(String colonia) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COLONIA = ? ORDER BY COLONIA", new Object[] { colonia } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'CODIGO_POSTAL = :codigoPostal'.
	 */
	public SgfensProveedor[] findWhereCodigoPostalEquals(String codigoPostal) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGO_POSTAL = ? ORDER BY CODIGO_POSTAL", new Object[] { codigoPostal } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'PAIS = :pais'.
	 */
	public SgfensProveedor[] findWherePaisEquals(String pais) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAIS = ? ORDER BY PAIS", new Object[] { pais } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'ESTADO = :estado'.
	 */
	public SgfensProveedor[] findWhereEstadoEquals(String estado) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTADO = ? ORDER BY ESTADO", new Object[] { estado } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'MUNICIPIO = :municipio'.
	 */
	public SgfensProveedor[] findWhereMunicipioEquals(String municipio) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MUNICIPIO = ? ORDER BY MUNICIPIO", new Object[] { municipio } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'LADA = :lada'.
	 */
	public SgfensProveedor[] findWhereLadaEquals(String lada) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LADA = ? ORDER BY LADA", new Object[] { lada } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'TELEFONO = :telefono'.
	 */
	public SgfensProveedor[] findWhereTelefonoEquals(String telefono) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TELEFONO = ? ORDER BY TELEFONO", new Object[] { telefono } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'EXTENSION = :extension'.
	 */
	public SgfensProveedor[] findWhereExtensionEquals(String extension) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXTENSION = ? ORDER BY EXTENSION", new Object[] { extension } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'CELULAR = :celular'.
	 */
	public SgfensProveedor[] findWhereCelularEquals(String celular) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CELULAR = ? ORDER BY CELULAR", new Object[] { celular } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'CORREO = :correo'.
	 */
	public SgfensProveedor[] findWhereCorreoEquals(String correo) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CORREO = ? ORDER BY CORREO", new Object[] { correo } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'CONTACTO = :contacto'.
	 */
	public SgfensProveedor[] findWhereContactoEquals(String contacto) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTACTO = ? ORDER BY CONTACTO", new Object[] { contacto } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public SgfensProveedor[] findWhereIdEstatusEquals(int idEstatus) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public SgfensProveedor[] findWhereDescripcionEquals(String descripcion) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION = ? ORDER BY DESCRIPCION", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'NOMBRE_EMPRESA = :nombreEmpresa'.
	 */
	public SgfensProveedor[] findWhereNombreEmpresaEquals(String nombreEmpresa) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_EMPRESA = ? ORDER BY NOMBRE_EMPRESA", new Object[] { nombreEmpresa } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'LATITUD = :latitud'.
	 */
	public SgfensProveedor[] findWhereLatitudEquals(String latitud) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATITUD = ? ORDER BY LATITUD", new Object[] { latitud } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'LONGITUD = :longitud'.
	 */
	public SgfensProveedor[] findWhereLongitudEquals(String longitud) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LONGITUD = ? ORDER BY LONGITUD", new Object[] { longitud } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'ID_CATEGORIA_PROVEEDOR = :idCategoriaProveedor'.
	 */
	public SgfensProveedor[] findWhereIdCategoriaProveedorEquals(int idCategoriaProveedor) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CATEGORIA_PROVEEDOR = ? ORDER BY ID_CATEGORIA_PROVEEDOR", new Object[] {  new Integer(idCategoriaProveedor) } );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the criteria 'NOMBRE_IMAGEN_PROVEEDOR = :nombreImagenProveedor'.
	 */
	public SgfensProveedor[] findWhereNombreImagenProveedorEquals(String nombreImagenProveedor) throws SgfensProveedorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_IMAGEN_PROVEEDOR = ? ORDER BY NOMBRE_IMAGEN_PROVEEDOR", new Object[] { nombreImagenProveedor } );
	}

	/**
	 * Method 'SgfensProveedorDaoImpl'
	 * 
	 */
	public SgfensProveedorDaoImpl()
	{
	}

	/**
	 * Method 'SgfensProveedorDaoImpl'
	 * 
	 * @param userConn
	 */
	public SgfensProveedorDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sgfens_proveedor";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SgfensProveedor fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SgfensProveedor dto = new SgfensProveedor();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SgfensProveedor[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SgfensProveedor dto = new SgfensProveedor();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SgfensProveedor ret[] = new SgfensProveedor[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SgfensProveedor dto, ResultSet rs) throws SQLException
	{
		dto.setIdProveedor( rs.getInt( COLUMN_ID_PROVEEDOR ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setNumeroProveedor( rs.getString( COLUMN_NUMERO_PROVEEDOR ) );
		dto.setRfc( rs.getString( COLUMN_RFC ) );
		dto.setRazonSocial( rs.getString( COLUMN_RAZON_SOCIAL ) );
		dto.setCalle( rs.getString( COLUMN_CALLE ) );
		dto.setNumero( rs.getString( COLUMN_NUMERO ) );
		dto.setNumeroInterior( rs.getString( COLUMN_NUMERO_INTERIOR ) );
		dto.setColonia( rs.getString( COLUMN_COLONIA ) );
		dto.setCodigoPostal( rs.getString( COLUMN_CODIGO_POSTAL ) );
		dto.setPais( rs.getString( COLUMN_PAIS ) );
		dto.setEstado( rs.getString( COLUMN_ESTADO ) );
		dto.setMunicipio( rs.getString( COLUMN_MUNICIPIO ) );
		dto.setLada( rs.getString( COLUMN_LADA ) );
		dto.setTelefono( rs.getString( COLUMN_TELEFONO ) );
		dto.setExtension( rs.getString( COLUMN_EXTENSION ) );
		dto.setCelular( rs.getString( COLUMN_CELULAR ) );
		dto.setCorreo( rs.getString( COLUMN_CORREO ) );
		dto.setContacto( rs.getString( COLUMN_CONTACTO ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setNombreEmpresa( rs.getString( COLUMN_NOMBRE_EMPRESA ) );
		dto.setLatitud( rs.getString( COLUMN_LATITUD ) );
		dto.setLongitud( rs.getString( COLUMN_LONGITUD ) );
		dto.setIdCategoriaProveedor( rs.getInt( COLUMN_ID_CATEGORIA_PROVEEDOR ) );
		if (rs.wasNull()) {
			dto.setIdCategoriaProveedorNull( true );
		}
		
		dto.setNombreImagenProveedor( rs.getString( COLUMN_NOMBRE_IMAGEN_PROVEEDOR ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SgfensProveedor dto)
	{
		dto.setIdProveedorModified( false );
		dto.setIdEmpresaModified( false );
		dto.setNumeroProveedorModified( false );
		dto.setRfcModified( false );
		dto.setRazonSocialModified( false );
		dto.setCalleModified( false );
		dto.setNumeroModified( false );
		dto.setNumeroInteriorModified( false );
		dto.setColoniaModified( false );
		dto.setCodigoPostalModified( false );
		dto.setPaisModified( false );
		dto.setEstadoModified( false );
		dto.setMunicipioModified( false );
		dto.setLadaModified( false );
		dto.setTelefonoModified( false );
		dto.setExtensionModified( false );
		dto.setCelularModified( false );
		dto.setCorreoModified( false );
		dto.setContactoModified( false );
		dto.setIdEstatusModified( false );
		dto.setDescripcionModified( false );
		dto.setNombreEmpresaModified( false );
		dto.setLatitudModified( false );
		dto.setLongitudModified( false );
		dto.setIdCategoriaProveedorModified( false );
		dto.setNombreImagenProveedorModified( false );
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the specified arbitrary SQL statement
	 */
	public SgfensProveedor[] findByDynamicSelect(String sql, Object[] sqlParams) throws SgfensProveedorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new SgfensProveedorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sgfens_proveedor table that match the specified arbitrary SQL statement
	 */
	public SgfensProveedor[] findByDynamicWhere(String sql, Object[] sqlParams) throws SgfensProveedorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new SgfensProveedorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
