/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SarComprobanteAdjuntoDaoImpl extends AbstractDAO implements SarComprobanteAdjuntoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_SAR_COMPROBANTE_ADJUNTO, ID_COMPROBANTE_FISCAL, NOMBRE_ARCHIVO, ID_PEDIDO, ID_CXP_VALE_AZUL, ID_CXP_COMPROBANTE_FISCAL FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_SAR_COMPROBANTE_ADJUNTO, ID_COMPROBANTE_FISCAL, NOMBRE_ARCHIVO, ID_PEDIDO, ID_CXP_VALE_AZUL, ID_CXP_COMPROBANTE_FISCAL ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_SAR_COMPROBANTE_ADJUNTO = ?, ID_COMPROBANTE_FISCAL = ?, NOMBRE_ARCHIVO = ?, ID_PEDIDO = ?, ID_CXP_VALE_AZUL = ?, ID_CXP_COMPROBANTE_FISCAL = ? WHERE ID_SAR_COMPROBANTE_ADJUNTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_SAR_COMPROBANTE_ADJUNTO = ?";

	/** 
	 * Index of column ID_SAR_COMPROBANTE_ADJUNTO
	 */
	protected static final int COLUMN_ID_SAR_COMPROBANTE_ADJUNTO = 1;

	/** 
	 * Index of column ID_COMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_ID_COMPROBANTE_FISCAL = 2;

	/** 
	 * Index of column NOMBRE_ARCHIVO
	 */
	protected static final int COLUMN_NOMBRE_ARCHIVO = 3;

	/** 
	 * Index of column ID_PEDIDO
	 */
	protected static final int COLUMN_ID_PEDIDO = 4;

	/** 
	 * Index of column ID_CXP_VALE_AZUL
	 */
	protected static final int COLUMN_ID_CXP_VALE_AZUL = 5;

	/** 
	 * Index of column ID_CXP_COMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_ID_CXP_COMPROBANTE_FISCAL = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column ID_SAR_COMPROBANTE_ADJUNTO
	 */
	protected static final int PK_COLUMN_ID_SAR_COMPROBANTE_ADJUNTO = 1;

	/** 
	 * Inserts a new row in the sar_comprobante_adjunto table.
	 */
	public SarComprobanteAdjuntoPk insert(SarComprobanteAdjunto dto) throws SarComprobanteAdjuntoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdSarComprobanteAdjuntoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_SAR_COMPROBANTE_ADJUNTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreArchivoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_ARCHIVO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdPedidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PEDIDO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdCxpValeAzulModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CXP_VALE_AZUL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdCxpComprobanteFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CXP_COMPROBANTE_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdSarComprobanteAdjuntoModified()) {
				stmt.setInt( index++, dto.getIdSarComprobanteAdjunto() );
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (dto.isIdComprobanteFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdComprobanteFiscal() );
				}
		
			}
		
			if (dto.isNombreArchivoModified()) {
				stmt.setString( index++, dto.getNombreArchivo() );
			}
		
			if (dto.isIdPedidoModified()) {
				if (dto.isIdPedidoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPedido() );
				}
		
			}
		
			if (dto.isIdCxpValeAzulModified()) {
				if (dto.isIdCxpValeAzulNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCxpValeAzul() );
				}
		
			}
		
			if (dto.isIdCxpComprobanteFiscalModified()) {
				if (dto.isIdCxpComprobanteFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCxpComprobanteFiscal() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdSarComprobanteAdjunto( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SarComprobanteAdjuntoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sar_comprobante_adjunto table.
	 */
	public void update(SarComprobanteAdjuntoPk pk, SarComprobanteAdjunto dto) throws SarComprobanteAdjuntoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdSarComprobanteAdjuntoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_SAR_COMPROBANTE_ADJUNTO=?" );
				modified=true;
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isNombreArchivoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_ARCHIVO=?" );
				modified=true;
			}
		
			if (dto.isIdPedidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PEDIDO=?" );
				modified=true;
			}
		
			if (dto.isIdCxpValeAzulModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CXP_VALE_AZUL=?" );
				modified=true;
			}
		
			if (dto.isIdCxpComprobanteFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CXP_COMPROBANTE_FISCAL=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_SAR_COMPROBANTE_ADJUNTO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdSarComprobanteAdjuntoModified()) {
				stmt.setInt( index++, dto.getIdSarComprobanteAdjunto() );
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (dto.isIdComprobanteFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdComprobanteFiscal() );
				}
		
			}
		
			if (dto.isNombreArchivoModified()) {
				stmt.setString( index++, dto.getNombreArchivo() );
			}
		
			if (dto.isIdPedidoModified()) {
				if (dto.isIdPedidoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPedido() );
				}
		
			}
		
			if (dto.isIdCxpValeAzulModified()) {
				if (dto.isIdCxpValeAzulNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCxpValeAzul() );
				}
		
			}
		
			if (dto.isIdCxpComprobanteFiscalModified()) {
				if (dto.isIdCxpComprobanteFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCxpComprobanteFiscal() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdSarComprobanteAdjunto() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SarComprobanteAdjuntoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sar_comprobante_adjunto table.
	 */
	public void delete(SarComprobanteAdjuntoPk pk) throws SarComprobanteAdjuntoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdSarComprobanteAdjunto() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SarComprobanteAdjuntoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sar_comprobante_adjunto table that matches the specified primary-key value.
	 */
	public SarComprobanteAdjunto findByPrimaryKey(SarComprobanteAdjuntoPk pk) throws SarComprobanteAdjuntoDaoException
	{
		return findByPrimaryKey( pk.getIdSarComprobanteAdjunto() );
	}

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'ID_SAR_COMPROBANTE_ADJUNTO = :idSarComprobanteAdjunto'.
	 */
	public SarComprobanteAdjunto findByPrimaryKey(int idSarComprobanteAdjunto) throws SarComprobanteAdjuntoDaoException
	{
		SarComprobanteAdjunto ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_SAR_COMPROBANTE_ADJUNTO = ?", new Object[] {  new Integer(idSarComprobanteAdjunto) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria ''.
	 */
	public SarComprobanteAdjunto[] findAll() throws SarComprobanteAdjuntoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_SAR_COMPROBANTE_ADJUNTO", null );
	}

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'ID_SAR_COMPROBANTE_ADJUNTO = :idSarComprobanteAdjunto'.
	 */
	public SarComprobanteAdjunto[] findWhereIdSarComprobanteAdjuntoEquals(int idSarComprobanteAdjunto) throws SarComprobanteAdjuntoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_SAR_COMPROBANTE_ADJUNTO = ? ORDER BY ID_SAR_COMPROBANTE_ADJUNTO", new Object[] {  new Integer(idSarComprobanteAdjunto) } );
	}

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public SarComprobanteAdjunto[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws SarComprobanteAdjuntoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_FISCAL = ? ORDER BY ID_COMPROBANTE_FISCAL", new Object[] {  new Integer(idComprobanteFiscal) } );
	}

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'NOMBRE_ARCHIVO = :nombreArchivo'.
	 */
	public SarComprobanteAdjunto[] findWhereNombreArchivoEquals(String nombreArchivo) throws SarComprobanteAdjuntoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_ARCHIVO = ? ORDER BY NOMBRE_ARCHIVO", new Object[] { nombreArchivo } );
	}

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'ID_PEDIDO = :idPedido'.
	 */
	public SarComprobanteAdjunto[] findWhereIdPedidoEquals(int idPedido) throws SarComprobanteAdjuntoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PEDIDO = ? ORDER BY ID_PEDIDO", new Object[] {  new Integer(idPedido) } );
	}

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'ID_CXP_VALE_AZUL = :idCxpValeAzul'.
	 */
	public SarComprobanteAdjunto[] findWhereIdCxpValeAzulEquals(int idCxpValeAzul) throws SarComprobanteAdjuntoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CXP_VALE_AZUL = ? ORDER BY ID_CXP_VALE_AZUL", new Object[] {  new Integer(idCxpValeAzul) } );
	}

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'ID_CXP_COMPROBANTE_FISCAL = :idCxpComprobanteFiscal'.
	 */
	public SarComprobanteAdjunto[] findWhereIdCxpComprobanteFiscalEquals(int idCxpComprobanteFiscal) throws SarComprobanteAdjuntoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CXP_COMPROBANTE_FISCAL = ? ORDER BY ID_CXP_COMPROBANTE_FISCAL", new Object[] {  new Integer(idCxpComprobanteFiscal) } );
	}

	/**
	 * Method 'SarComprobanteAdjuntoDaoImpl'
	 * 
	 */
	public SarComprobanteAdjuntoDaoImpl()
	{
	}

	/**
	 * Method 'SarComprobanteAdjuntoDaoImpl'
	 * 
	 * @param userConn
	 */
	public SarComprobanteAdjuntoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sar_comprobante_adjunto";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SarComprobanteAdjunto fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SarComprobanteAdjunto dto = new SarComprobanteAdjunto();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SarComprobanteAdjunto[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SarComprobanteAdjunto dto = new SarComprobanteAdjunto();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SarComprobanteAdjunto ret[] = new SarComprobanteAdjunto[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SarComprobanteAdjunto dto, ResultSet rs) throws SQLException
	{
		dto.setIdSarComprobanteAdjunto( rs.getInt( COLUMN_ID_SAR_COMPROBANTE_ADJUNTO ) );
		dto.setIdComprobanteFiscal( rs.getInt( COLUMN_ID_COMPROBANTE_FISCAL ) );
		if (rs.wasNull()) {
			dto.setIdComprobanteFiscalNull( true );
		}
		
		dto.setNombreArchivo( rs.getString( COLUMN_NOMBRE_ARCHIVO ) );
		dto.setIdPedido( rs.getInt( COLUMN_ID_PEDIDO ) );
		if (rs.wasNull()) {
			dto.setIdPedidoNull( true );
		}
		
		dto.setIdCxpValeAzul( rs.getInt( COLUMN_ID_CXP_VALE_AZUL ) );
		if (rs.wasNull()) {
			dto.setIdCxpValeAzulNull( true );
		}
		
		dto.setIdCxpComprobanteFiscal( rs.getInt( COLUMN_ID_CXP_COMPROBANTE_FISCAL ) );
		if (rs.wasNull()) {
			dto.setIdCxpComprobanteFiscalNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SarComprobanteAdjunto dto)
	{
		dto.setIdSarComprobanteAdjuntoModified( false );
		dto.setIdComprobanteFiscalModified( false );
		dto.setNombreArchivoModified( false );
		dto.setIdPedidoModified( false );
		dto.setIdCxpValeAzulModified( false );
		dto.setIdCxpComprobanteFiscalModified( false );
	}

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the specified arbitrary SQL statement
	 */
	public SarComprobanteAdjunto[] findByDynamicSelect(String sql, Object[] sqlParams) throws SarComprobanteAdjuntoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SarComprobanteAdjuntoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the specified arbitrary SQL statement
	 */
	public SarComprobanteAdjunto[] findByDynamicWhere(String sql, Object[] sqlParams) throws SarComprobanteAdjuntoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SarComprobanteAdjuntoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
