/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EmpleadoDaoImpl extends AbstractDAO implements EmpleadoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_EMPLEADO, ID_EMPRESA, ID_ESTATUS, NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO, TELEFONO_LOCAL, NUM_EMPLEADO, CORREO_ELECTRONICO, ID_SUCURSAL, ID_DISPOSITIVO, LATITUD, LONGITUD, ID_MOVIL_EMPLEADO_ROL, ID_USUARIOS, USUARIO, PASSWORD, ID_ESTADO, FECHA_HORA, ID_GEOCERCA, HORA_INICIO, HORA_FIN, REPARTIDOR, ID_REGION, SUELDO, PORCENTAJE_COMISION, ID_PERIODO_PAGO, PERMISO_VENTA_RAPIDA, SINCRONIZACION_MICROSIP, VENTA_CONSIGNA, PERMISO_VENTA_CREDITO, TRABAJAR_FUERA_LINEA, CLIENTES_CODIGO_BARRAS, DISTANCIA_OBLIGATORIO, PRECIO_DE_COMPRA, PERMISO_CREAR_CLIENTE, PERMISO_ACCIONES_CLIENTE, ID_HORARIO, ID_FOLIO_MOVIL_EMPLEADO, PERMISO_DEVOLUCIONES, PERMISO_AUTO_SERV_INVENTARIO, PERMISO_NO_COBRO_PARCIAL, PERMISO_VER_PROVEEDORES, CONTACTO_CELULAR, INTERVALO_UBICACION_SEG FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_EMPLEADO, ID_EMPRESA, ID_ESTATUS, NOMBRE, APELLIDO_PATERNO, APELLIDO_MATERNO, TELEFONO_LOCAL, NUM_EMPLEADO, CORREO_ELECTRONICO, ID_SUCURSAL, ID_DISPOSITIVO, LATITUD, LONGITUD, ID_MOVIL_EMPLEADO_ROL, ID_USUARIOS, USUARIO, PASSWORD, ID_ESTADO, FECHA_HORA, ID_GEOCERCA, HORA_INICIO, HORA_FIN, REPARTIDOR, ID_REGION, SUELDO, PORCENTAJE_COMISION, ID_PERIODO_PAGO, PERMISO_VENTA_RAPIDA, SINCRONIZACION_MICROSIP, VENTA_CONSIGNA, PERMISO_VENTA_CREDITO, TRABAJAR_FUERA_LINEA, CLIENTES_CODIGO_BARRAS, DISTANCIA_OBLIGATORIO, PRECIO_DE_COMPRA, PERMISO_CREAR_CLIENTE, PERMISO_ACCIONES_CLIENTE, ID_HORARIO, ID_FOLIO_MOVIL_EMPLEADO, PERMISO_DEVOLUCIONES, PERMISO_AUTO_SERV_INVENTARIO, PERMISO_NO_COBRO_PARCIAL, PERMISO_VER_PROVEEDORES, CONTACTO_CELULAR, INTERVALO_UBICACION_SEG ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_EMPLEADO = ?, ID_EMPRESA = ?, ID_ESTATUS = ?, NOMBRE = ?, APELLIDO_PATERNO = ?, APELLIDO_MATERNO = ?, TELEFONO_LOCAL = ?, NUM_EMPLEADO = ?, CORREO_ELECTRONICO = ?, ID_SUCURSAL = ?, ID_DISPOSITIVO = ?, LATITUD = ?, LONGITUD = ?, ID_MOVIL_EMPLEADO_ROL = ?, ID_USUARIOS = ?, USUARIO = ?, PASSWORD = ?, ID_ESTADO = ?, FECHA_HORA = ?, ID_GEOCERCA = ?, HORA_INICIO = ?, HORA_FIN = ?, REPARTIDOR = ?, ID_REGION = ?, SUELDO = ?, PORCENTAJE_COMISION = ?, ID_PERIODO_PAGO = ?, PERMISO_VENTA_RAPIDA = ?, SINCRONIZACION_MICROSIP = ?, VENTA_CONSIGNA = ?, PERMISO_VENTA_CREDITO = ?, TRABAJAR_FUERA_LINEA = ?, CLIENTES_CODIGO_BARRAS = ?, DISTANCIA_OBLIGATORIO = ?, PRECIO_DE_COMPRA = ?, PERMISO_CREAR_CLIENTE = ?, PERMISO_ACCIONES_CLIENTE = ?, ID_HORARIO = ?, ID_FOLIO_MOVIL_EMPLEADO = ?, PERMISO_DEVOLUCIONES = ?, PERMISO_AUTO_SERV_INVENTARIO = ?, PERMISO_NO_COBRO_PARCIAL = ?, PERMISO_VER_PROVEEDORES = ?, CONTACTO_CELULAR = ?, INTERVALO_UBICACION_SEG = ? WHERE ID_EMPLEADO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_EMPLEADO = ?";

	/** 
	 * Index of column ID_EMPLEADO
	 */
	protected static final int COLUMN_ID_EMPLEADO = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 3;

	/** 
	 * Index of column NOMBRE
	 */
	protected static final int COLUMN_NOMBRE = 4;

	/** 
	 * Index of column APELLIDO_PATERNO
	 */
	protected static final int COLUMN_APELLIDO_PATERNO = 5;

	/** 
	 * Index of column APELLIDO_MATERNO
	 */
	protected static final int COLUMN_APELLIDO_MATERNO = 6;

	/** 
	 * Index of column TELEFONO_LOCAL
	 */
	protected static final int COLUMN_TELEFONO_LOCAL = 7;

	/** 
	 * Index of column NUM_EMPLEADO
	 */
	protected static final int COLUMN_NUM_EMPLEADO = 8;

	/** 
	 * Index of column CORREO_ELECTRONICO
	 */
	protected static final int COLUMN_CORREO_ELECTRONICO = 9;

	/** 
	 * Index of column ID_SUCURSAL
	 */
	protected static final int COLUMN_ID_SUCURSAL = 10;

	/** 
	 * Index of column ID_DISPOSITIVO
	 */
	protected static final int COLUMN_ID_DISPOSITIVO = 11;

	/** 
	 * Index of column LATITUD
	 */
	protected static final int COLUMN_LATITUD = 12;

	/** 
	 * Index of column LONGITUD
	 */
	protected static final int COLUMN_LONGITUD = 13;

	/** 
	 * Index of column ID_MOVIL_EMPLEADO_ROL
	 */
	protected static final int COLUMN_ID_MOVIL_EMPLEADO_ROL = 14;

	/** 
	 * Index of column ID_USUARIOS
	 */
	protected static final int COLUMN_ID_USUARIOS = 15;

	/** 
	 * Index of column USUARIO
	 */
	protected static final int COLUMN_USUARIO = 16;

	/** 
	 * Index of column PASSWORD
	 */
	protected static final int COLUMN_PASSWORD = 17;

	/** 
	 * Index of column ID_ESTADO
	 */
	protected static final int COLUMN_ID_ESTADO = 18;

	/** 
	 * Index of column FECHA_HORA
	 */
	protected static final int COLUMN_FECHA_HORA = 19;

	/** 
	 * Index of column ID_GEOCERCA
	 */
	protected static final int COLUMN_ID_GEOCERCA = 20;

	/** 
	 * Index of column HORA_INICIO
	 */
	protected static final int COLUMN_HORA_INICIO = 21;

	/** 
	 * Index of column HORA_FIN
	 */
	protected static final int COLUMN_HORA_FIN = 22;

	/** 
	 * Index of column REPARTIDOR
	 */
	protected static final int COLUMN_REPARTIDOR = 23;

	/** 
	 * Index of column ID_REGION
	 */
	protected static final int COLUMN_ID_REGION = 24;

	/** 
	 * Index of column SUELDO
	 */
	protected static final int COLUMN_SUELDO = 25;

	/** 
	 * Index of column PORCENTAJE_COMISION
	 */
	protected static final int COLUMN_PORCENTAJE_COMISION = 26;

	/** 
	 * Index of column ID_PERIODO_PAGO
	 */
	protected static final int COLUMN_ID_PERIODO_PAGO = 27;

	/** 
	 * Index of column PERMISO_VENTA_RAPIDA
	 */
	protected static final int COLUMN_PERMISO_VENTA_RAPIDA = 28;

	/** 
	 * Index of column SINCRONIZACION_MICROSIP
	 */
	protected static final int COLUMN_SINCRONIZACION_MICROSIP = 29;

	/** 
	 * Index of column VENTA_CONSIGNA
	 */
	protected static final int COLUMN_VENTA_CONSIGNA = 30;

	/** 
	 * Index of column PERMISO_VENTA_CREDITO
	 */
	protected static final int COLUMN_PERMISO_VENTA_CREDITO = 31;

	/** 
	 * Index of column TRABAJAR_FUERA_LINEA
	 */
	protected static final int COLUMN_TRABAJAR_FUERA_LINEA = 32;

	/** 
	 * Index of column CLIENTES_CODIGO_BARRAS
	 */
	protected static final int COLUMN_CLIENTES_CODIGO_BARRAS = 33;

	/** 
	 * Index of column DISTANCIA_OBLIGATORIO
	 */
	protected static final int COLUMN_DISTANCIA_OBLIGATORIO = 34;

	/** 
	 * Index of column PRECIO_DE_COMPRA
	 */
	protected static final int COLUMN_PRECIO_DE_COMPRA = 35;

	/** 
	 * Index of column PERMISO_CREAR_CLIENTE
	 */
	protected static final int COLUMN_PERMISO_CREAR_CLIENTE = 36;

	/** 
	 * Index of column PERMISO_ACCIONES_CLIENTE
	 */
	protected static final int COLUMN_PERMISO_ACCIONES_CLIENTE = 37;

	/** 
	 * Index of column ID_HORARIO
	 */
	protected static final int COLUMN_ID_HORARIO = 38;

	/** 
	 * Index of column ID_FOLIO_MOVIL_EMPLEADO
	 */
	protected static final int COLUMN_ID_FOLIO_MOVIL_EMPLEADO = 39;

	/** 
	 * Index of column PERMISO_DEVOLUCIONES
	 */
	protected static final int COLUMN_PERMISO_DEVOLUCIONES = 40;

	/** 
	 * Index of column PERMISO_AUTO_SERV_INVENTARIO
	 */
	protected static final int COLUMN_PERMISO_AUTO_SERV_INVENTARIO = 41;

	/** 
	 * Index of column PERMISO_NO_COBRO_PARCIAL
	 */
	protected static final int COLUMN_PERMISO_NO_COBRO_PARCIAL = 42;

	/** 
	 * Index of column PERMISO_VER_PROVEEDORES
	 */
	protected static final int COLUMN_PERMISO_VER_PROVEEDORES = 43;

	/** 
	 * Index of column CONTACTO_CELULAR
	 */
	protected static final int COLUMN_CONTACTO_CELULAR = 44;

	/** 
	 * Index of column INTERVALO_UBICACION_SEG
	 */
	protected static final int COLUMN_INTERVALO_UBICACION_SEG = 45;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 45;

	/** 
	 * Index of primary-key column ID_EMPLEADO
	 */
	protected static final int PK_COLUMN_ID_EMPLEADO = 1;

	/** 
	 * Inserts a new row in the empleado table.
	 */
	public EmpleadoPk insert(Empleado dto) throws EmpleadoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdEmpleadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPLEADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isApellidoPaternoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "APELLIDO_PATERNO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isApellidoMaternoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "APELLIDO_MATERNO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTelefonoLocalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TELEFONO_LOCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumEmpleadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUM_EMPLEADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCorreoElectronicoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CORREO_ELECTRONICO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSucursalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_SUCURSAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdDispositivoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_DISPOSITIVO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLatitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LATITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLongitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LONGITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdMovilEmpleadoRolModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_MOVIL_EMPLEADO_ROL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuariosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_USUARIOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUsuarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "USUARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPasswordModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PASSWORD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaHoraModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_HORA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdGeocercaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_GEOCERCA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isHoraInicioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "HORA_INICIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isHoraFinModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "HORA_FIN" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRepartidorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "REPARTIDOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdRegionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_REGION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSueldoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SUELDO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPorcentajeComisionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PORCENTAJE_COMISION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdPeriodoPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PERIODO_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPermisoVentaRapidaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PERMISO_VENTA_RAPIDA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SINCRONIZACION_MICROSIP" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isVentaConsignaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "VENTA_CONSIGNA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPermisoVentaCreditoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PERMISO_VENTA_CREDITO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTrabajarFueraLineaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TRABAJAR_FUERA_LINEA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isClientesCodigoBarrasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CLIENTES_CODIGO_BARRAS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDistanciaObligatorioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DISTANCIA_OBLIGATORIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioDeCompraModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_DE_COMPRA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPermisoCrearClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PERMISO_CREAR_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPermisoAccionesClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PERMISO_ACCIONES_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdHorarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_HORARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdFolioMovilEmpleadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_FOLIO_MOVIL_EMPLEADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPermisoDevolucionesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PERMISO_DEVOLUCIONES" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPermisoAutoServInventarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PERMISO_AUTO_SERV_INVENTARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPermisoNoCobroParcialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PERMISO_NO_COBRO_PARCIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPermisoVerProveedoresModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PERMISO_VER_PROVEEDORES" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactoCelularModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CONTACTO_CELULAR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIntervaloUbicacionSegModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "INTERVALO_UBICACION_SEG" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdEmpleado() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isApellidoPaternoModified()) {
				stmt.setString( index++, dto.getApellidoPaterno() );
			}
		
			if (dto.isApellidoMaternoModified()) {
				stmt.setString( index++, dto.getApellidoMaterno() );
			}
		
			if (dto.isTelefonoLocalModified()) {
				stmt.setString( index++, dto.getTelefonoLocal() );
			}
		
			if (dto.isNumEmpleadoModified()) {
				stmt.setString( index++, dto.getNumEmpleado() );
			}
		
			if (dto.isCorreoElectronicoModified()) {
				stmt.setString( index++, dto.getCorreoElectronico() );
			}
		
			if (dto.isIdSucursalModified()) {
				stmt.setInt( index++, dto.getIdSucursal() );
			}
		
			if (dto.isIdDispositivoModified()) {
				stmt.setInt( index++, dto.getIdDispositivo() );
			}
		
			if (dto.isLatitudModified()) {
				if (dto.isLatitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLatitud() );
				}
		
			}
		
			if (dto.isLongitudModified()) {
				if (dto.isLongitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLongitud() );
				}
		
			}
		
			if (dto.isIdMovilEmpleadoRolModified()) {
				stmt.setInt( index++, dto.getIdMovilEmpleadoRol() );
			}
		
			if (dto.isIdUsuariosModified()) {
				stmt.setInt( index++, dto.getIdUsuarios() );
			}
		
			if (dto.isUsuarioModified()) {
				stmt.setString( index++, dto.getUsuario() );
			}
		
			if (dto.isPasswordModified()) {
				stmt.setString( index++, dto.getPassword() );
			}
		
			if (dto.isIdEstadoModified()) {
				if (dto.isIdEstadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstado() );
				}
		
			}
		
			if (dto.isFechaHoraModified()) {
				stmt.setTimestamp(index++, dto.getFechaHora()==null ? null : new java.sql.Timestamp( dto.getFechaHora().getTime() ) );
			}
		
			if (dto.isIdGeocercaModified()) {
				if (dto.isIdGeocercaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdGeocerca() );
				}
		
			}
		
			if (dto.isHoraInicioModified()) {
				stmt.setTime(index++, dto.getHoraInicio()==null ? null : new java.sql.Time( dto.getHoraInicio().getTime() ) );
			}
		
			if (dto.isHoraFinModified()) {
				stmt.setTime(index++, dto.getHoraFin()==null ? null : new java.sql.Time( dto.getHoraFin().getTime() ) );
			}
		
			if (dto.isRepartidorModified()) {
				if (dto.isRepartidorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getRepartidor() );
				}
		
			}
		
			if (dto.isIdRegionModified()) {
				if (dto.isIdRegionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdRegion() );
				}
		
			}
		
			if (dto.isSueldoModified()) {
				if (dto.isSueldoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSueldo() );
				}
		
			}
		
			if (dto.isPorcentajeComisionModified()) {
				if (dto.isPorcentajeComisionNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPorcentajeComision() );
				}
		
			}
		
			if (dto.isIdPeriodoPagoModified()) {
				if (dto.isIdPeriodoPagoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPeriodoPago() );
				}
		
			}
		
			if (dto.isPermisoVentaRapidaModified()) {
				if (dto.isPermisoVentaRapidaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoVentaRapida() );
				}
		
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (dto.isSincronizacionMicrosipNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getSincronizacionMicrosip() );
				}
		
			}
		
			if (dto.isVentaConsignaModified()) {
				if (dto.isVentaConsignaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getVentaConsigna() );
				}
		
			}
		
			if (dto.isPermisoVentaCreditoModified()) {
				if (dto.isPermisoVentaCreditoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoVentaCredito() );
				}
		
			}
		
			if (dto.isTrabajarFueraLineaModified()) {
				if (dto.isTrabajarFueraLineaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTrabajarFueraLinea() );
				}
		
			}
		
			if (dto.isClientesCodigoBarrasModified()) {
				if (dto.isClientesCodigoBarrasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getClientesCodigoBarras() );
				}
		
			}
		
			if (dto.isDistanciaObligatorioModified()) {
				if (dto.isDistanciaObligatorioNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDistanciaObligatorio() );
				}
		
			}
		
			if (dto.isPrecioDeCompraModified()) {
				if (dto.isPrecioDeCompraNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPrecioDeCompra() );
				}
		
			}
		
			if (dto.isPermisoCrearClienteModified()) {
				if (dto.isPermisoCrearClienteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoCrearCliente() );
				}
		
			}
		
			if (dto.isPermisoAccionesClienteModified()) {
				if (dto.isPermisoAccionesClienteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoAccionesCliente() );
				}
		
			}
		
			if (dto.isIdHorarioModified()) {
				if (dto.isIdHorarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdHorario() );
				}
		
			}
		
			if (dto.isIdFolioMovilEmpleadoModified()) {
				if (dto.isIdFolioMovilEmpleadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFolioMovilEmpleado() );
				}
		
			}
		
			if (dto.isPermisoDevolucionesModified()) {
				if (dto.isPermisoDevolucionesNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoDevoluciones() );
				}
		
			}
		
			if (dto.isPermisoAutoServInventarioModified()) {
				if (dto.isPermisoAutoServInventarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoAutoServInventario() );
				}
		
			}
		
			if (dto.isPermisoNoCobroParcialModified()) {
				if (dto.isPermisoNoCobroParcialNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoNoCobroParcial() );
				}
		
			}
		
			if (dto.isPermisoVerProveedoresModified()) {
				if (dto.isPermisoVerProveedoresNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoVerProveedores() );
				}
		
			}
		
			if (dto.isContactoCelularModified()) {
				stmt.setString( index++, dto.getContactoCelular() );
			}
		
			if (dto.isIntervaloUbicacionSegModified()) {
				if (dto.isIntervaloUbicacionSegNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIntervaloUbicacionSeg() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdEmpleado( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the empleado table.
	 */
	public void update(EmpleadoPk pk, Empleado dto) throws EmpleadoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdEmpleadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPLEADO=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isNombreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE=?" );
				modified=true;
			}
		
			if (dto.isApellidoPaternoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "APELLIDO_PATERNO=?" );
				modified=true;
			}
		
			if (dto.isApellidoMaternoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "APELLIDO_MATERNO=?" );
				modified=true;
			}
		
			if (dto.isTelefonoLocalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TELEFONO_LOCAL=?" );
				modified=true;
			}
		
			if (dto.isNumEmpleadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUM_EMPLEADO=?" );
				modified=true;
			}
		
			if (dto.isCorreoElectronicoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CORREO_ELECTRONICO=?" );
				modified=true;
			}
		
			if (dto.isIdSucursalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_SUCURSAL=?" );
				modified=true;
			}
		
			if (dto.isIdDispositivoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_DISPOSITIVO=?" );
				modified=true;
			}
		
			if (dto.isLatitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LATITUD=?" );
				modified=true;
			}
		
			if (dto.isLongitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LONGITUD=?" );
				modified=true;
			}
		
			if (dto.isIdMovilEmpleadoRolModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_MOVIL_EMPLEADO_ROL=?" );
				modified=true;
			}
		
			if (dto.isIdUsuariosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_USUARIOS=?" );
				modified=true;
			}
		
			if (dto.isUsuarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "USUARIO=?" );
				modified=true;
			}
		
			if (dto.isPasswordModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PASSWORD=?" );
				modified=true;
			}
		
			if (dto.isIdEstadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTADO=?" );
				modified=true;
			}
		
			if (dto.isFechaHoraModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_HORA=?" );
				modified=true;
			}
		
			if (dto.isIdGeocercaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_GEOCERCA=?" );
				modified=true;
			}
		
			if (dto.isHoraInicioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "HORA_INICIO=?" );
				modified=true;
			}
		
			if (dto.isHoraFinModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "HORA_FIN=?" );
				modified=true;
			}
		
			if (dto.isRepartidorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "REPARTIDOR=?" );
				modified=true;
			}
		
			if (dto.isIdRegionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_REGION=?" );
				modified=true;
			}
		
			if (dto.isSueldoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SUELDO=?" );
				modified=true;
			}
		
			if (dto.isPorcentajeComisionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PORCENTAJE_COMISION=?" );
				modified=true;
			}
		
			if (dto.isIdPeriodoPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PERIODO_PAGO=?" );
				modified=true;
			}
		
			if (dto.isPermisoVentaRapidaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PERMISO_VENTA_RAPIDA=?" );
				modified=true;
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SINCRONIZACION_MICROSIP=?" );
				modified=true;
			}
		
			if (dto.isVentaConsignaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "VENTA_CONSIGNA=?" );
				modified=true;
			}
		
			if (dto.isPermisoVentaCreditoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PERMISO_VENTA_CREDITO=?" );
				modified=true;
			}
		
			if (dto.isTrabajarFueraLineaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TRABAJAR_FUERA_LINEA=?" );
				modified=true;
			}
		
			if (dto.isClientesCodigoBarrasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CLIENTES_CODIGO_BARRAS=?" );
				modified=true;
			}
		
			if (dto.isDistanciaObligatorioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DISTANCIA_OBLIGATORIO=?" );
				modified=true;
			}
		
			if (dto.isPrecioDeCompraModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_DE_COMPRA=?" );
				modified=true;
			}
		
			if (dto.isPermisoCrearClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PERMISO_CREAR_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isPermisoAccionesClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PERMISO_ACCIONES_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isIdHorarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_HORARIO=?" );
				modified=true;
			}
		
			if (dto.isIdFolioMovilEmpleadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_FOLIO_MOVIL_EMPLEADO=?" );
				modified=true;
			}
		
			if (dto.isPermisoDevolucionesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PERMISO_DEVOLUCIONES=?" );
				modified=true;
			}
		
			if (dto.isPermisoAutoServInventarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PERMISO_AUTO_SERV_INVENTARIO=?" );
				modified=true;
			}
		
			if (dto.isPermisoNoCobroParcialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PERMISO_NO_COBRO_PARCIAL=?" );
				modified=true;
			}
		
			if (dto.isPermisoVerProveedoresModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PERMISO_VER_PROVEEDORES=?" );
				modified=true;
			}
		
			if (dto.isContactoCelularModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONTACTO_CELULAR=?" );
				modified=true;
			}
		
			if (dto.isIntervaloUbicacionSegModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "INTERVALO_UBICACION_SEG=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_EMPLEADO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdEmpleado() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isApellidoPaternoModified()) {
				stmt.setString( index++, dto.getApellidoPaterno() );
			}
		
			if (dto.isApellidoMaternoModified()) {
				stmt.setString( index++, dto.getApellidoMaterno() );
			}
		
			if (dto.isTelefonoLocalModified()) {
				stmt.setString( index++, dto.getTelefonoLocal() );
			}
		
			if (dto.isNumEmpleadoModified()) {
				stmt.setString( index++, dto.getNumEmpleado() );
			}
		
			if (dto.isCorreoElectronicoModified()) {
				stmt.setString( index++, dto.getCorreoElectronico() );
			}
		
			if (dto.isIdSucursalModified()) {
				stmt.setInt( index++, dto.getIdSucursal() );
			}
		
			if (dto.isIdDispositivoModified()) {
				stmt.setInt( index++, dto.getIdDispositivo() );
			}
		
			if (dto.isLatitudModified()) {
				if (dto.isLatitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLatitud() );
				}
		
			}
		
			if (dto.isLongitudModified()) {
				if (dto.isLongitudNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getLongitud() );
				}
		
			}
		
			if (dto.isIdMovilEmpleadoRolModified()) {
				stmt.setInt( index++, dto.getIdMovilEmpleadoRol() );
			}
		
			if (dto.isIdUsuariosModified()) {
				stmt.setInt( index++, dto.getIdUsuarios() );
			}
		
			if (dto.isUsuarioModified()) {
				stmt.setString( index++, dto.getUsuario() );
			}
		
			if (dto.isPasswordModified()) {
				stmt.setString( index++, dto.getPassword() );
			}
		
			if (dto.isIdEstadoModified()) {
				if (dto.isIdEstadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstado() );
				}
		
			}
		
			if (dto.isFechaHoraModified()) {
				stmt.setTimestamp(index++, dto.getFechaHora()==null ? null : new java.sql.Timestamp( dto.getFechaHora().getTime() ) );
			}
		
			if (dto.isIdGeocercaModified()) {
				if (dto.isIdGeocercaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdGeocerca() );
				}
		
			}
		
			if (dto.isHoraInicioModified()) {
				stmt.setTime(index++, dto.getHoraInicio()==null ? null : new java.sql.Time( dto.getHoraInicio().getTime() ) );
			}
		
			if (dto.isHoraFinModified()) {
				stmt.setTime(index++, dto.getHoraFin()==null ? null : new java.sql.Time( dto.getHoraFin().getTime() ) );
			}
		
			if (dto.isRepartidorModified()) {
				if (dto.isRepartidorNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getRepartidor() );
				}
		
			}
		
			if (dto.isIdRegionModified()) {
				if (dto.isIdRegionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdRegion() );
				}
		
			}
		
			if (dto.isSueldoModified()) {
				if (dto.isSueldoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getSueldo() );
				}
		
			}
		
			if (dto.isPorcentajeComisionModified()) {
				if (dto.isPorcentajeComisionNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPorcentajeComision() );
				}
		
			}
		
			if (dto.isIdPeriodoPagoModified()) {
				if (dto.isIdPeriodoPagoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPeriodoPago() );
				}
		
			}
		
			if (dto.isPermisoVentaRapidaModified()) {
				if (dto.isPermisoVentaRapidaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoVentaRapida() );
				}
		
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (dto.isSincronizacionMicrosipNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getSincronizacionMicrosip() );
				}
		
			}
		
			if (dto.isVentaConsignaModified()) {
				if (dto.isVentaConsignaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getVentaConsigna() );
				}
		
			}
		
			if (dto.isPermisoVentaCreditoModified()) {
				if (dto.isPermisoVentaCreditoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoVentaCredito() );
				}
		
			}
		
			if (dto.isTrabajarFueraLineaModified()) {
				if (dto.isTrabajarFueraLineaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTrabajarFueraLinea() );
				}
		
			}
		
			if (dto.isClientesCodigoBarrasModified()) {
				if (dto.isClientesCodigoBarrasNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getClientesCodigoBarras() );
				}
		
			}
		
			if (dto.isDistanciaObligatorioModified()) {
				if (dto.isDistanciaObligatorioNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDistanciaObligatorio() );
				}
		
			}
		
			if (dto.isPrecioDeCompraModified()) {
				if (dto.isPrecioDeCompraNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPrecioDeCompra() );
				}
		
			}
		
			if (dto.isPermisoCrearClienteModified()) {
				if (dto.isPermisoCrearClienteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoCrearCliente() );
				}
		
			}
		
			if (dto.isPermisoAccionesClienteModified()) {
				if (dto.isPermisoAccionesClienteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoAccionesCliente() );
				}
		
			}
		
			if (dto.isIdHorarioModified()) {
				if (dto.isIdHorarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdHorario() );
				}
		
			}
		
			if (dto.isIdFolioMovilEmpleadoModified()) {
				if (dto.isIdFolioMovilEmpleadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFolioMovilEmpleado() );
				}
		
			}
		
			if (dto.isPermisoDevolucionesModified()) {
				if (dto.isPermisoDevolucionesNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoDevoluciones() );
				}
		
			}
		
			if (dto.isPermisoAutoServInventarioModified()) {
				if (dto.isPermisoAutoServInventarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoAutoServInventario() );
				}
		
			}
		
			if (dto.isPermisoNoCobroParcialModified()) {
				if (dto.isPermisoNoCobroParcialNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoNoCobroParcial() );
				}
		
			}
		
			if (dto.isPermisoVerProveedoresModified()) {
				if (dto.isPermisoVerProveedoresNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getPermisoVerProveedores() );
				}
		
			}
		
			if (dto.isContactoCelularModified()) {
				stmt.setString( index++, dto.getContactoCelular() );
			}
		
			if (dto.isIntervaloUbicacionSegModified()) {
				if (dto.isIntervaloUbicacionSegNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIntervaloUbicacionSeg() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdEmpleado() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the empleado table.
	 */
	public void delete(EmpleadoPk pk) throws EmpleadoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdEmpleado() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the empleado table that matches the specified primary-key value.
	 */
	public Empleado findByPrimaryKey(EmpleadoPk pk) throws EmpleadoDaoException
	{
		return findByPrimaryKey( pk.getIdEmpleado() );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public Empleado findByPrimaryKey(int idEmpleado) throws EmpleadoDaoException
	{
		Empleado ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPLEADO = ?", new Object[] {  new Integer(idEmpleado) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria ''.
	 */
	public Empleado[] findAll() throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_EMPLEADO", null );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public Empleado[] findWhereIdEmpleadoEquals(int idEmpleado) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPLEADO = ? ORDER BY ID_EMPLEADO", new Object[] {  new Integer(idEmpleado) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Empleado[] findWhereIdEmpresaEquals(int idEmpresa) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Empleado[] findWhereIdEstatusEquals(int idEstatus) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'NOMBRE = :nombre'.
	 */
	public Empleado[] findWhereNombreEquals(String nombre) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE = ? ORDER BY NOMBRE", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'APELLIDO_PATERNO = :apellidoPaterno'.
	 */
	public Empleado[] findWhereApellidoPaternoEquals(String apellidoPaterno) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APELLIDO_PATERNO = ? ORDER BY APELLIDO_PATERNO", new Object[] { apellidoPaterno } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'APELLIDO_MATERNO = :apellidoMaterno'.
	 */
	public Empleado[] findWhereApellidoMaternoEquals(String apellidoMaterno) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APELLIDO_MATERNO = ? ORDER BY APELLIDO_MATERNO", new Object[] { apellidoMaterno } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'TELEFONO_LOCAL = :telefonoLocal'.
	 */
	public Empleado[] findWhereTelefonoLocalEquals(String telefonoLocal) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TELEFONO_LOCAL = ? ORDER BY TELEFONO_LOCAL", new Object[] { telefonoLocal } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'NUM_EMPLEADO = :numEmpleado'.
	 */
	public Empleado[] findWhereNumEmpleadoEquals(String numEmpleado) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUM_EMPLEADO = ? ORDER BY NUM_EMPLEADO", new Object[] { numEmpleado } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'CORREO_ELECTRONICO = :correoElectronico'.
	 */
	public Empleado[] findWhereCorreoElectronicoEquals(String correoElectronico) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CORREO_ELECTRONICO = ? ORDER BY CORREO_ELECTRONICO", new Object[] { correoElectronico } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_SUCURSAL = :idSucursal'.
	 */
	public Empleado[] findWhereIdSucursalEquals(int idSucursal) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_SUCURSAL = ? ORDER BY ID_SUCURSAL", new Object[] {  new Integer(idSucursal) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_DISPOSITIVO = :idDispositivo'.
	 */
	public Empleado[] findWhereIdDispositivoEquals(int idDispositivo) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_DISPOSITIVO = ? ORDER BY ID_DISPOSITIVO", new Object[] {  new Integer(idDispositivo) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'LATITUD = :latitud'.
	 */
	public Empleado[] findWhereLatitudEquals(double latitud) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATITUD = ? ORDER BY LATITUD", new Object[] {  new Double(latitud) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'LONGITUD = :longitud'.
	 */
	public Empleado[] findWhereLongitudEquals(double longitud) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LONGITUD = ? ORDER BY LONGITUD", new Object[] {  new Double(longitud) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_MOVIL_EMPLEADO_ROL = :idMovilEmpleadoRol'.
	 */
	public Empleado[] findWhereIdMovilEmpleadoRolEquals(int idMovilEmpleadoRol) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_MOVIL_EMPLEADO_ROL = ? ORDER BY ID_MOVIL_EMPLEADO_ROL", new Object[] {  new Integer(idMovilEmpleadoRol) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_USUARIOS = :idUsuarios'.
	 */
	public Empleado[] findWhereIdUsuariosEquals(int idUsuarios) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIOS = ? ORDER BY ID_USUARIOS", new Object[] {  new Integer(idUsuarios) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'USUARIO = :usuario'.
	 */
	public Empleado[] findWhereUsuarioEquals(String usuario) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USUARIO = ? ORDER BY USUARIO", new Object[] { usuario } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PASSWORD = :password'.
	 */
	public Empleado[] findWherePasswordEquals(String password) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PASSWORD = ? ORDER BY PASSWORD", new Object[] { password } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_ESTADO = :idEstado'.
	 */
	public Empleado[] findWhereIdEstadoEquals(int idEstado) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTADO = ? ORDER BY ID_ESTADO", new Object[] {  new Integer(idEstado) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'FECHA_HORA = :fechaHora'.
	 */
	public Empleado[] findWhereFechaHoraEquals(Date fechaHora) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_HORA = ? ORDER BY FECHA_HORA", new Object[] { fechaHora==null ? null : new java.sql.Timestamp( fechaHora.getTime() ) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_GEOCERCA = :idGeocerca'.
	 */
	public Empleado[] findWhereIdGeocercaEquals(int idGeocerca) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_GEOCERCA = ? ORDER BY ID_GEOCERCA", new Object[] {  new Integer(idGeocerca) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'HORA_INICIO = :horaInicio'.
	 */
	public Empleado[] findWhereHoraInicioEquals(Date horaInicio) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HORA_INICIO = ? ORDER BY HORA_INICIO", new Object[] { horaInicio==null ? null : new java.sql.Time( horaInicio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'HORA_FIN = :horaFin'.
	 */
	public Empleado[] findWhereHoraFinEquals(Date horaFin) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HORA_FIN = ? ORDER BY HORA_FIN", new Object[] { horaFin==null ? null : new java.sql.Time( horaFin.getTime() ) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'REPARTIDOR = :repartidor'.
	 */
	public Empleado[] findWhereRepartidorEquals(int repartidor) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REPARTIDOR = ? ORDER BY REPARTIDOR", new Object[] {  new Integer(repartidor) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_REGION = :idRegion'.
	 */
	public Empleado[] findWhereIdRegionEquals(int idRegion) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_REGION = ? ORDER BY ID_REGION", new Object[] {  new Integer(idRegion) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'SUELDO = :sueldo'.
	 */
	public Empleado[] findWhereSueldoEquals(double sueldo) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUELDO = ? ORDER BY SUELDO", new Object[] {  new Double(sueldo) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PORCENTAJE_COMISION = :porcentajeComision'.
	 */
	public Empleado[] findWherePorcentajeComisionEquals(double porcentajeComision) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PORCENTAJE_COMISION = ? ORDER BY PORCENTAJE_COMISION", new Object[] {  new Double(porcentajeComision) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_PERIODO_PAGO = :idPeriodoPago'.
	 */
	public Empleado[] findWhereIdPeriodoPagoEquals(int idPeriodoPago) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PERIODO_PAGO = ? ORDER BY ID_PERIODO_PAGO", new Object[] {  new Integer(idPeriodoPago) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_VENTA_RAPIDA = :permisoVentaRapida'.
	 */
	public Empleado[] findWherePermisoVentaRapidaEquals(int permisoVentaRapida) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERMISO_VENTA_RAPIDA = ? ORDER BY PERMISO_VENTA_RAPIDA", new Object[] {  new Integer(permisoVentaRapida) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'SINCRONIZACION_MICROSIP = :sincronizacionMicrosip'.
	 */
	public Empleado[] findWhereSincronizacionMicrosipEquals(int sincronizacionMicrosip) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SINCRONIZACION_MICROSIP = ? ORDER BY SINCRONIZACION_MICROSIP", new Object[] {  new Integer(sincronizacionMicrosip) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'VENTA_CONSIGNA = :ventaConsigna'.
	 */
	public Empleado[] findWhereVentaConsignaEquals(int ventaConsigna) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VENTA_CONSIGNA = ? ORDER BY VENTA_CONSIGNA", new Object[] {  new Integer(ventaConsigna) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_VENTA_CREDITO = :permisoVentaCredito'.
	 */
	public Empleado[] findWherePermisoVentaCreditoEquals(int permisoVentaCredito) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERMISO_VENTA_CREDITO = ? ORDER BY PERMISO_VENTA_CREDITO", new Object[] {  new Integer(permisoVentaCredito) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'TRABAJAR_FUERA_LINEA = :trabajarFueraLinea'.
	 */
	public Empleado[] findWhereTrabajarFueraLineaEquals(int trabajarFueraLinea) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TRABAJAR_FUERA_LINEA = ? ORDER BY TRABAJAR_FUERA_LINEA", new Object[] {  new Integer(trabajarFueraLinea) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'CLIENTES_CODIGO_BARRAS = :clientesCodigoBarras'.
	 */
	public Empleado[] findWhereClientesCodigoBarrasEquals(int clientesCodigoBarras) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTES_CODIGO_BARRAS = ? ORDER BY CLIENTES_CODIGO_BARRAS", new Object[] {  new Integer(clientesCodigoBarras) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'DISTANCIA_OBLIGATORIO = :distanciaObligatorio'.
	 */
	public Empleado[] findWhereDistanciaObligatorioEquals(double distanciaObligatorio) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DISTANCIA_OBLIGATORIO = ? ORDER BY DISTANCIA_OBLIGATORIO", new Object[] {  new Double(distanciaObligatorio) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PRECIO_DE_COMPRA = :precioDeCompra'.
	 */
	public Empleado[] findWherePrecioDeCompraEquals(int precioDeCompra) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_DE_COMPRA = ? ORDER BY PRECIO_DE_COMPRA", new Object[] {  new Integer(precioDeCompra) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_CREAR_CLIENTE = :permisoCrearCliente'.
	 */
	public Empleado[] findWherePermisoCrearClienteEquals(int permisoCrearCliente) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERMISO_CREAR_CLIENTE = ? ORDER BY PERMISO_CREAR_CLIENTE", new Object[] {  new Integer(permisoCrearCliente) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_ACCIONES_CLIENTE = :permisoAccionesCliente'.
	 */
	public Empleado[] findWherePermisoAccionesClienteEquals(int permisoAccionesCliente) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERMISO_ACCIONES_CLIENTE = ? ORDER BY PERMISO_ACCIONES_CLIENTE", new Object[] {  new Integer(permisoAccionesCliente) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_HORARIO = :idHorario'.
	 */
	public Empleado[] findWhereIdHorarioEquals(int idHorario) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_HORARIO = ? ORDER BY ID_HORARIO", new Object[] {  new Integer(idHorario) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_FOLIO_MOVIL_EMPLEADO = :idFolioMovilEmpleado'.
	 */
	public Empleado[] findWhereIdFolioMovilEmpleadoEquals(int idFolioMovilEmpleado) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_FOLIO_MOVIL_EMPLEADO = ? ORDER BY ID_FOLIO_MOVIL_EMPLEADO", new Object[] {  new Integer(idFolioMovilEmpleado) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_DEVOLUCIONES = :permisoDevoluciones'.
	 */
	public Empleado[] findWherePermisoDevolucionesEquals(int permisoDevoluciones) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERMISO_DEVOLUCIONES = ? ORDER BY PERMISO_DEVOLUCIONES", new Object[] {  new Integer(permisoDevoluciones) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_AUTO_SERV_INVENTARIO = :permisoAutoServInventario'.
	 */
	public Empleado[] findWherePermisoAutoServInventarioEquals(int permisoAutoServInventario) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERMISO_AUTO_SERV_INVENTARIO = ? ORDER BY PERMISO_AUTO_SERV_INVENTARIO", new Object[] {  new Integer(permisoAutoServInventario) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_NO_COBRO_PARCIAL = :permisoNoCobroParcial'.
	 */
	public Empleado[] findWherePermisoNoCobroParcialEquals(int permisoNoCobroParcial) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERMISO_NO_COBRO_PARCIAL = ? ORDER BY PERMISO_NO_COBRO_PARCIAL", new Object[] {  new Integer(permisoNoCobroParcial) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_VER_PROVEEDORES = :permisoVerProveedores'.
	 */
	public Empleado[] findWherePermisoVerProveedoresEquals(int permisoVerProveedores) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERMISO_VER_PROVEEDORES = ? ORDER BY PERMISO_VER_PROVEEDORES", new Object[] {  new Integer(permisoVerProveedores) } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'CONTACTO_CELULAR = :contactoCelular'.
	 */
	public Empleado[] findWhereContactoCelularEquals(String contactoCelular) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTACTO_CELULAR = ? ORDER BY CONTACTO_CELULAR", new Object[] { contactoCelular } );
	}

	/** 
	 * Returns all rows from the empleado table that match the criteria 'INTERVALO_UBICACION_SEG = :intervaloUbicacionSeg'.
	 */
	public Empleado[] findWhereIntervaloUbicacionSegEquals(int intervaloUbicacionSeg) throws EmpleadoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INTERVALO_UBICACION_SEG = ? ORDER BY INTERVALO_UBICACION_SEG", new Object[] {  new Integer(intervaloUbicacionSeg) } );
	}

	/**
	 * Method 'EmpleadoDaoImpl'
	 * 
	 */
	public EmpleadoDaoImpl()
	{
	}

	/**
	 * Method 'EmpleadoDaoImpl'
	 * 
	 * @param userConn
	 */
	public EmpleadoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "empleado";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Empleado fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Empleado dto = new Empleado();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Empleado[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Empleado dto = new Empleado();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Empleado ret[] = new Empleado[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Empleado dto, ResultSet rs) throws SQLException
	{
		dto.setIdEmpleado( rs.getInt( COLUMN_ID_EMPLEADO ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setApellidoPaterno( rs.getString( COLUMN_APELLIDO_PATERNO ) );
		dto.setApellidoMaterno( rs.getString( COLUMN_APELLIDO_MATERNO ) );
		dto.setTelefonoLocal( rs.getString( COLUMN_TELEFONO_LOCAL ) );
		dto.setNumEmpleado( rs.getString( COLUMN_NUM_EMPLEADO ) );
		dto.setCorreoElectronico( rs.getString( COLUMN_CORREO_ELECTRONICO ) );
		dto.setIdSucursal( rs.getInt( COLUMN_ID_SUCURSAL ) );
		dto.setIdDispositivo( rs.getInt( COLUMN_ID_DISPOSITIVO ) );
		dto.setLatitud( rs.getDouble( COLUMN_LATITUD ) );
		if (rs.wasNull()) {
			dto.setLatitudNull( true );
		}
		
		dto.setLongitud( rs.getDouble( COLUMN_LONGITUD ) );
		if (rs.wasNull()) {
			dto.setLongitudNull( true );
		}
		
		dto.setIdMovilEmpleadoRol( rs.getInt( COLUMN_ID_MOVIL_EMPLEADO_ROL ) );
		dto.setIdUsuarios( rs.getInt( COLUMN_ID_USUARIOS ) );
		dto.setUsuario( rs.getString( COLUMN_USUARIO ) );
		dto.setPassword( rs.getString( COLUMN_PASSWORD ) );
		dto.setIdEstado( rs.getInt( COLUMN_ID_ESTADO ) );
		if (rs.wasNull()) {
			dto.setIdEstadoNull( true );
		}
		
		dto.setFechaHora( rs.getTimestamp(COLUMN_FECHA_HORA ) );
		dto.setIdGeocerca( rs.getInt( COLUMN_ID_GEOCERCA ) );
		if (rs.wasNull()) {
			dto.setIdGeocercaNull( true );
		}
		
		dto.setHoraInicio( rs.getTime(COLUMN_HORA_INICIO ) );
		dto.setHoraFin( rs.getTime(COLUMN_HORA_FIN ) );
		dto.setRepartidor( rs.getInt( COLUMN_REPARTIDOR ) );
		if (rs.wasNull()) {
			dto.setRepartidorNull( true );
		}
		
		dto.setIdRegion( rs.getInt( COLUMN_ID_REGION ) );
		if (rs.wasNull()) {
			dto.setIdRegionNull( true );
		}
		
		dto.setSueldo( rs.getDouble( COLUMN_SUELDO ) );
		if (rs.wasNull()) {
			dto.setSueldoNull( true );
		}
		
		dto.setPorcentajeComision( rs.getDouble( COLUMN_PORCENTAJE_COMISION ) );
		if (rs.wasNull()) {
			dto.setPorcentajeComisionNull( true );
		}
		
		dto.setIdPeriodoPago( rs.getInt( COLUMN_ID_PERIODO_PAGO ) );
		if (rs.wasNull()) {
			dto.setIdPeriodoPagoNull( true );
		}
		
		dto.setPermisoVentaRapida( rs.getInt( COLUMN_PERMISO_VENTA_RAPIDA ) );
		if (rs.wasNull()) {
			dto.setPermisoVentaRapidaNull( true );
		}
		
		dto.setSincronizacionMicrosip( rs.getInt( COLUMN_SINCRONIZACION_MICROSIP ) );
		if (rs.wasNull()) {
			dto.setSincronizacionMicrosipNull( true );
		}
		
		dto.setVentaConsigna( rs.getInt( COLUMN_VENTA_CONSIGNA ) );
		if (rs.wasNull()) {
			dto.setVentaConsignaNull( true );
		}
		
		dto.setPermisoVentaCredito( rs.getInt( COLUMN_PERMISO_VENTA_CREDITO ) );
		if (rs.wasNull()) {
			dto.setPermisoVentaCreditoNull( true );
		}
		
		dto.setTrabajarFueraLinea( rs.getInt( COLUMN_TRABAJAR_FUERA_LINEA ) );
		if (rs.wasNull()) {
			dto.setTrabajarFueraLineaNull( true );
		}
		
		dto.setClientesCodigoBarras( rs.getInt( COLUMN_CLIENTES_CODIGO_BARRAS ) );
		if (rs.wasNull()) {
			dto.setClientesCodigoBarrasNull( true );
		}
		
		dto.setDistanciaObligatorio( rs.getDouble( COLUMN_DISTANCIA_OBLIGATORIO ) );
		if (rs.wasNull()) {
			dto.setDistanciaObligatorioNull( true );
		}
		
		dto.setPrecioDeCompra( rs.getInt( COLUMN_PRECIO_DE_COMPRA ) );
		if (rs.wasNull()) {
			dto.setPrecioDeCompraNull( true );
		}
		
		dto.setPermisoCrearCliente( rs.getInt( COLUMN_PERMISO_CREAR_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setPermisoCrearClienteNull( true );
		}
		
		dto.setPermisoAccionesCliente( rs.getInt( COLUMN_PERMISO_ACCIONES_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setPermisoAccionesClienteNull( true );
		}
		
		dto.setIdHorario( rs.getInt( COLUMN_ID_HORARIO ) );
		if (rs.wasNull()) {
			dto.setIdHorarioNull( true );
		}
		
		dto.setIdFolioMovilEmpleado( rs.getInt( COLUMN_ID_FOLIO_MOVIL_EMPLEADO ) );
		if (rs.wasNull()) {
			dto.setIdFolioMovilEmpleadoNull( true );
		}
		
		dto.setPermisoDevoluciones( rs.getInt( COLUMN_PERMISO_DEVOLUCIONES ) );
		if (rs.wasNull()) {
			dto.setPermisoDevolucionesNull( true );
		}
		
		dto.setPermisoAutoServInventario( rs.getInt( COLUMN_PERMISO_AUTO_SERV_INVENTARIO ) );
		if (rs.wasNull()) {
			dto.setPermisoAutoServInventarioNull( true );
		}
		
		dto.setPermisoNoCobroParcial( rs.getInt( COLUMN_PERMISO_NO_COBRO_PARCIAL ) );
		if (rs.wasNull()) {
			dto.setPermisoNoCobroParcialNull( true );
		}
		
		dto.setPermisoVerProveedores( rs.getInt( COLUMN_PERMISO_VER_PROVEEDORES ) );
		if (rs.wasNull()) {
			dto.setPermisoVerProveedoresNull( true );
		}
		
		dto.setContactoCelular( rs.getString( COLUMN_CONTACTO_CELULAR ) );
		dto.setIntervaloUbicacionSeg( rs.getInt( COLUMN_INTERVALO_UBICACION_SEG ) );
		if (rs.wasNull()) {
			dto.setIntervaloUbicacionSegNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Empleado dto)
	{
		dto.setIdEmpleadoModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEstatusModified( false );
		dto.setNombreModified( false );
		dto.setApellidoPaternoModified( false );
		dto.setApellidoMaternoModified( false );
		dto.setTelefonoLocalModified( false );
		dto.setNumEmpleadoModified( false );
		dto.setCorreoElectronicoModified( false );
		dto.setIdSucursalModified( false );
		dto.setIdDispositivoModified( false );
		dto.setLatitudModified( false );
		dto.setLongitudModified( false );
		dto.setIdMovilEmpleadoRolModified( false );
		dto.setIdUsuariosModified( false );
		dto.setUsuarioModified( false );
		dto.setPasswordModified( false );
		dto.setIdEstadoModified( false );
		dto.setFechaHoraModified( false );
		dto.setIdGeocercaModified( false );
		dto.setHoraInicioModified( false );
		dto.setHoraFinModified( false );
		dto.setRepartidorModified( false );
		dto.setIdRegionModified( false );
		dto.setSueldoModified( false );
		dto.setPorcentajeComisionModified( false );
		dto.setIdPeriodoPagoModified( false );
		dto.setPermisoVentaRapidaModified( false );
		dto.setSincronizacionMicrosipModified( false );
		dto.setVentaConsignaModified( false );
		dto.setPermisoVentaCreditoModified( false );
		dto.setTrabajarFueraLineaModified( false );
		dto.setClientesCodigoBarrasModified( false );
		dto.setDistanciaObligatorioModified( false );
		dto.setPrecioDeCompraModified( false );
		dto.setPermisoCrearClienteModified( false );
		dto.setPermisoAccionesClienteModified( false );
		dto.setIdHorarioModified( false );
		dto.setIdFolioMovilEmpleadoModified( false );
		dto.setPermisoDevolucionesModified( false );
		dto.setPermisoAutoServInventarioModified( false );
		dto.setPermisoNoCobroParcialModified( false );
		dto.setPermisoVerProveedoresModified( false );
		dto.setContactoCelularModified( false );
		dto.setIntervaloUbicacionSegModified( false );
	}

	/** 
	 * Returns all rows from the empleado table that match the specified arbitrary SQL statement
	 */
	public Empleado[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmpleadoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the empleado table that match the specified arbitrary SQL statement
	 */
	public Empleado[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmpleadoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpleadoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
