/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class BitacoraFoliosFensDaoImpl extends AbstractDAO implements BitacoraFoliosFensDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_BITACORA_FOLIOS_FENS, ID_EMPRESA, FOLIOS_AGREGADOS, FOLIOS_ELIMINADOS, FOLIOS_UTILIZADOS, FOLIOS_TOTALES, FECHA FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_BITACORA_FOLIOS_FENS, ID_EMPRESA, FOLIOS_AGREGADOS, FOLIOS_ELIMINADOS, FOLIOS_UTILIZADOS, FOLIOS_TOTALES, FECHA ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_BITACORA_FOLIOS_FENS = ?, ID_EMPRESA = ?, FOLIOS_AGREGADOS = ?, FOLIOS_ELIMINADOS = ?, FOLIOS_UTILIZADOS = ?, FOLIOS_TOTALES = ?, FECHA = ? WHERE ID_BITACORA_FOLIOS_FENS = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_BITACORA_FOLIOS_FENS = ?";

	/** 
	 * Index of column ID_BITACORA_FOLIOS_FENS
	 */
	protected static final int COLUMN_ID_BITACORA_FOLIOS_FENS = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column FOLIOS_AGREGADOS
	 */
	protected static final int COLUMN_FOLIOS_AGREGADOS = 3;

	/** 
	 * Index of column FOLIOS_ELIMINADOS
	 */
	protected static final int COLUMN_FOLIOS_ELIMINADOS = 4;

	/** 
	 * Index of column FOLIOS_UTILIZADOS
	 */
	protected static final int COLUMN_FOLIOS_UTILIZADOS = 5;

	/** 
	 * Index of column FOLIOS_TOTALES
	 */
	protected static final int COLUMN_FOLIOS_TOTALES = 6;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column ID_BITACORA_FOLIOS_FENS
	 */
	protected static final int PK_COLUMN_ID_BITACORA_FOLIOS_FENS = 1;

	/** 
	 * Inserts a new row in the bitacora_folios_fens table.
	 */
	public BitacoraFoliosFensPk insert(BitacoraFoliosFens dto) throws BitacoraFoliosFensDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getIdBitacoraFoliosFens() );
			stmt.setInt( index++, dto.getIdEmpresa() );
			if (dto.isFoliosAgregadosNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFoliosAgregados() );
			}
		
			if (dto.isFoliosEliminadosNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFoliosEliminados() );
			}
		
			if (dto.isFoliosUtilizadosNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFoliosUtilizados() );
			}
		
			if (dto.isFoliosTotalesNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFoliosTotales() );
			}
		
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BitacoraFoliosFensDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the bitacora_folios_fens table.
	 */
	public void update(BitacoraFoliosFensPk pk, BitacoraFoliosFens dto) throws BitacoraFoliosFensDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdBitacoraFoliosFens() );
			stmt.setInt( index++, dto.getIdEmpresa() );
			if (dto.isFoliosAgregadosNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFoliosAgregados() );
			}
		
			if (dto.isFoliosEliminadosNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFoliosEliminados() );
			}
		
			if (dto.isFoliosUtilizadosNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFoliosUtilizados() );
			}
		
			if (dto.isFoliosTotalesNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFoliosTotales() );
			}
		
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			stmt.setInt( 8, pk.getIdBitacoraFoliosFens() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BitacoraFoliosFensDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the bitacora_folios_fens table.
	 */
	public void delete(BitacoraFoliosFensPk pk) throws BitacoraFoliosFensDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdBitacoraFoliosFens() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BitacoraFoliosFensDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the bitacora_folios_fens table that matches the specified primary-key value.
	 */
	public BitacoraFoliosFens findByPrimaryKey(BitacoraFoliosFensPk pk) throws BitacoraFoliosFensDaoException
	{
		return findByPrimaryKey( pk.getIdBitacoraFoliosFens() );
	}

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'ID_BITACORA_FOLIOS_FENS = :idBitacoraFoliosFens'.
	 */
	public BitacoraFoliosFens findByPrimaryKey(int idBitacoraFoliosFens) throws BitacoraFoliosFensDaoException
	{
		BitacoraFoliosFens ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_BITACORA_FOLIOS_FENS = ?", new Object[] {  new Integer(idBitacoraFoliosFens) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria ''.
	 */
	public BitacoraFoliosFens[] findAll() throws BitacoraFoliosFensDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_BITACORA_FOLIOS_FENS", null );
	}

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'ID_BITACORA_FOLIOS_FENS = :idBitacoraFoliosFens'.
	 */
	public BitacoraFoliosFens[] findWhereIdBitacoraFoliosFensEquals(int idBitacoraFoliosFens) throws BitacoraFoliosFensDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_BITACORA_FOLIOS_FENS = ? ORDER BY ID_BITACORA_FOLIOS_FENS", new Object[] {  new Integer(idBitacoraFoliosFens) } );
	}

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public BitacoraFoliosFens[] findWhereIdEmpresaEquals(int idEmpresa) throws BitacoraFoliosFensDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'FOLIOS_AGREGADOS = :foliosAgregados'.
	 */
	public BitacoraFoliosFens[] findWhereFoliosAgregadosEquals(int foliosAgregados) throws BitacoraFoliosFensDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIOS_AGREGADOS = ? ORDER BY FOLIOS_AGREGADOS", new Object[] {  new Integer(foliosAgregados) } );
	}

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'FOLIOS_ELIMINADOS = :foliosEliminados'.
	 */
	public BitacoraFoliosFens[] findWhereFoliosEliminadosEquals(int foliosEliminados) throws BitacoraFoliosFensDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIOS_ELIMINADOS = ? ORDER BY FOLIOS_ELIMINADOS", new Object[] {  new Integer(foliosEliminados) } );
	}

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'FOLIOS_UTILIZADOS = :foliosUtilizados'.
	 */
	public BitacoraFoliosFens[] findWhereFoliosUtilizadosEquals(int foliosUtilizados) throws BitacoraFoliosFensDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIOS_UTILIZADOS = ? ORDER BY FOLIOS_UTILIZADOS", new Object[] {  new Integer(foliosUtilizados) } );
	}

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'FOLIOS_TOTALES = :foliosTotales'.
	 */
	public BitacoraFoliosFens[] findWhereFoliosTotalesEquals(int foliosTotales) throws BitacoraFoliosFensDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIOS_TOTALES = ? ORDER BY FOLIOS_TOTALES", new Object[] {  new Integer(foliosTotales) } );
	}

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'FECHA = :fecha'.
	 */
	public BitacoraFoliosFens[] findWhereFechaEquals(Date fecha) throws BitacoraFoliosFensDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Date( fecha.getTime() ) } );
	}

	/**
	 * Method 'BitacoraFoliosFensDaoImpl'
	 * 
	 */
	public BitacoraFoliosFensDaoImpl()
	{
	}

	/**
	 * Method 'BitacoraFoliosFensDaoImpl'
	 * 
	 * @param userConn
	 */
	public BitacoraFoliosFensDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "bitacora_folios_fens";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected BitacoraFoliosFens fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			BitacoraFoliosFens dto = new BitacoraFoliosFens();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected BitacoraFoliosFens[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			BitacoraFoliosFens dto = new BitacoraFoliosFens();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		BitacoraFoliosFens ret[] = new BitacoraFoliosFens[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(BitacoraFoliosFens dto, ResultSet rs) throws SQLException
	{
		dto.setIdBitacoraFoliosFens( rs.getInt( COLUMN_ID_BITACORA_FOLIOS_FENS ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setFoliosAgregados( rs.getInt( COLUMN_FOLIOS_AGREGADOS ) );
		if (rs.wasNull()) {
			dto.setFoliosAgregadosNull( true );
		}
		
		dto.setFoliosEliminados( rs.getInt( COLUMN_FOLIOS_ELIMINADOS ) );
		if (rs.wasNull()) {
			dto.setFoliosEliminadosNull( true );
		}
		
		dto.setFoliosUtilizados( rs.getInt( COLUMN_FOLIOS_UTILIZADOS ) );
		if (rs.wasNull()) {
			dto.setFoliosUtilizadosNull( true );
		}
		
		dto.setFoliosTotales( rs.getInt( COLUMN_FOLIOS_TOTALES ) );
		if (rs.wasNull()) {
			dto.setFoliosTotalesNull( true );
		}
		
		dto.setFecha( rs.getDate(COLUMN_FECHA ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(BitacoraFoliosFens dto)
	{
	}

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the specified arbitrary SQL statement
	 */
	public BitacoraFoliosFens[] findByDynamicSelect(String sql, Object[] sqlParams) throws BitacoraFoliosFensDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BitacoraFoliosFensDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the specified arbitrary SQL statement
	 */
	public BitacoraFoliosFens[] findByDynamicWhere(String sql, Object[] sqlParams) throws BitacoraFoliosFensDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BitacoraFoliosFensDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
