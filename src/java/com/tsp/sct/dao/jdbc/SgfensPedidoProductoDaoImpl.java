/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SgfensPedidoProductoDaoImpl extends AbstractDAO implements SgfensPedidoProductoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_PEDIDO, ID_CONCEPTO, DESCRIPCION, UNIDAD, IDENTIFICACION, CANTIDAD, PRECIO_UNITARIO, DESCUENTO_PORCENTAJE, DESCUENTO_MONTO, SUBTOTAL, COSTO_UNITARIO, PORCENTAJE_COMISION_EMPLEADO, CANTIDAD_ENTREGADA, FECHA_ENTREGA, ESTATUS, id_Almacen_Origen, PESO_UNITARIO, CANTIDAD_PESO, CANTIDAD_ENTREGADA_PESO, PRECIO_UNITARIO_GRANEL FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_PEDIDO, ID_CONCEPTO, DESCRIPCION, UNIDAD, IDENTIFICACION, CANTIDAD, PRECIO_UNITARIO, DESCUENTO_PORCENTAJE, DESCUENTO_MONTO, SUBTOTAL, COSTO_UNITARIO, PORCENTAJE_COMISION_EMPLEADO, CANTIDAD_ENTREGADA, FECHA_ENTREGA, ESTATUS, id_Almacen_Origen, PESO_UNITARIO, CANTIDAD_PESO, CANTIDAD_ENTREGADA_PESO, PRECIO_UNITARIO_GRANEL ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_PEDIDO = ?, ID_CONCEPTO = ?, DESCRIPCION = ?, UNIDAD = ?, IDENTIFICACION = ?, CANTIDAD = ?, PRECIO_UNITARIO = ?, DESCUENTO_PORCENTAJE = ?, DESCUENTO_MONTO = ?, SUBTOTAL = ?, COSTO_UNITARIO = ?, PORCENTAJE_COMISION_EMPLEADO = ?, CANTIDAD_ENTREGADA = ?, FECHA_ENTREGA = ?, ESTATUS = ?, id_Almacen_Origen = ?, PESO_UNITARIO = ?, CANTIDAD_PESO = ?, CANTIDAD_ENTREGADA_PESO = ?, PRECIO_UNITARIO_GRANEL = ? WHERE ID_PEDIDO = ? AND ID_CONCEPTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_PEDIDO = ? AND ID_CONCEPTO = ?";

	/** 
	 * Index of column ID_PEDIDO
	 */
	protected static final int COLUMN_ID_PEDIDO = 1;

	/** 
	 * Index of column ID_CONCEPTO
	 */
	protected static final int COLUMN_ID_CONCEPTO = 2;

	/** 
	 * Index of column DESCRIPCION
	 */
	protected static final int COLUMN_DESCRIPCION = 3;

	/** 
	 * Index of column UNIDAD
	 */
	protected static final int COLUMN_UNIDAD = 4;

	/** 
	 * Index of column IDENTIFICACION
	 */
	protected static final int COLUMN_IDENTIFICACION = 5;

	/** 
	 * Index of column CANTIDAD
	 */
	protected static final int COLUMN_CANTIDAD = 6;

	/** 
	 * Index of column PRECIO_UNITARIO
	 */
	protected static final int COLUMN_PRECIO_UNITARIO = 7;

	/** 
	 * Index of column DESCUENTO_PORCENTAJE
	 */
	protected static final int COLUMN_DESCUENTO_PORCENTAJE = 8;

	/** 
	 * Index of column DESCUENTO_MONTO
	 */
	protected static final int COLUMN_DESCUENTO_MONTO = 9;

	/** 
	 * Index of column SUBTOTAL
	 */
	protected static final int COLUMN_SUBTOTAL = 10;

	/** 
	 * Index of column COSTO_UNITARIO
	 */
	protected static final int COLUMN_COSTO_UNITARIO = 11;

	/** 
	 * Index of column PORCENTAJE_COMISION_EMPLEADO
	 */
	protected static final int COLUMN_PORCENTAJE_COMISION_EMPLEADO = 12;

	/** 
	 * Index of column CANTIDAD_ENTREGADA
	 */
	protected static final int COLUMN_CANTIDAD_ENTREGADA = 13;

	/** 
	 * Index of column FECHA_ENTREGA
	 */
	protected static final int COLUMN_FECHA_ENTREGA = 14;

	/** 
	 * Index of column ESTATUS
	 */
	protected static final int COLUMN_ESTATUS = 15;

	/** 
	 * Index of column id_Almacen_Origen
	 */
	protected static final int COLUMN_ID_ALMACEN_ORIGEN = 16;

	/** 
	 * Index of column PESO_UNITARIO
	 */
	protected static final int COLUMN_PESO_UNITARIO = 17;

	/** 
	 * Index of column CANTIDAD_PESO
	 */
	protected static final int COLUMN_CANTIDAD_PESO = 18;

	/** 
	 * Index of column CANTIDAD_ENTREGADA_PESO
	 */
	protected static final int COLUMN_CANTIDAD_ENTREGADA_PESO = 19;

	/** 
	 * Index of column PRECIO_UNITARIO_GRANEL
	 */
	protected static final int COLUMN_PRECIO_UNITARIO_GRANEL = 20;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 20;

	/** 
	 * Index of primary-key column ID_PEDIDO
	 */
	protected static final int PK_COLUMN_ID_PEDIDO = 1;

	/** 
	 * Index of primary-key column ID_CONCEPTO
	 */
	protected static final int PK_COLUMN_ID_CONCEPTO = 2;

	/** 
	 * Inserts a new row in the sgfens_pedido_producto table.
	 */
	public SgfensPedidoProductoPk insert(SgfensPedidoProducto dto) throws SgfensPedidoProductoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdPedidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PEDIDO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescripcionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCRIPCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUnidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "UNIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdentificacionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IDENTIFICACION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CANTIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioUnitarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_PORCENTAJE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSubtotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SUBTOTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCostoUnitarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "COSTO_UNITARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPorcentajeComisionEmpleadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PORCENTAJE_COMISION_EMPLEADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadEntregadaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CANTIDAD_ENTREGADA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaEntregaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_ENTREGA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdAlmacenOrigenModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_Almacen_Origen" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPesoUnitarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PESO_UNITARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadPesoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CANTIDAD_PESO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadEntregadaPesoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CANTIDAD_ENTREGADA_PESO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioUnitarioGranelModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO_GRANEL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdPedidoModified()) {
				stmt.setInt( index++, dto.getIdPedido() );
			}
		
			if (dto.isIdConceptoModified()) {
				stmt.setInt( index++, dto.getIdConcepto() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isUnidadModified()) {
				stmt.setString( index++, dto.getUnidad() );
			}
		
			if (dto.isIdentificacionModified()) {
				stmt.setString( index++, dto.getIdentificacion() );
			}
		
			if (dto.isCantidadModified()) {
				stmt.setDouble( index++, dto.getCantidad() );
			}
		
			if (dto.isPrecioUnitarioModified()) {
				stmt.setDouble( index++, dto.getPrecioUnitario() );
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (dto.isDescuentoPorcentajeNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoPorcentaje() );
				}
		
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (dto.isDescuentoMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoMonto() );
				}
		
			}
		
			if (dto.isSubtotalModified()) {
				stmt.setDouble( index++, dto.getSubtotal() );
			}
		
			if (dto.isCostoUnitarioModified()) {
				if (dto.isCostoUnitarioNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCostoUnitario() );
				}
		
			}
		
			if (dto.isPorcentajeComisionEmpleadoModified()) {
				if (dto.isPorcentajeComisionEmpleadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPorcentajeComisionEmpleado() );
				}
		
			}
		
			if (dto.isCantidadEntregadaModified()) {
				if (dto.isCantidadEntregadaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidadEntregada() );
				}
		
			}
		
			if (dto.isFechaEntregaModified()) {
				stmt.setTimestamp(index++, dto.getFechaEntrega()==null ? null : new java.sql.Timestamp( dto.getFechaEntrega().getTime() ) );
			}
		
			if (dto.isEstatusModified()) {
				if (dto.isEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getEstatus() );
				}
		
			}
		
			if (dto.isIdAlmacenOrigenModified()) {
				if (dto.isIdAlmacenOrigenNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdAlmacenOrigen() );
				}
		
			}
		
			if (dto.isPesoUnitarioModified()) {
				if (dto.isPesoUnitarioNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPesoUnitario() );
				}
		
			}
		
			if (dto.isCantidadPesoModified()) {
				if (dto.isCantidadPesoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidadPeso() );
				}
		
			}
		
			if (dto.isCantidadEntregadaPesoModified()) {
				if (dto.isCantidadEntregadaPesoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidadEntregadaPeso() );
				}
		
			}
		
			if (dto.isPrecioUnitarioGranelModified()) {
				if (dto.isPrecioUnitarioGranelNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioUnitarioGranel() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sgfens_pedido_producto table.
	 */
	public void update(SgfensPedidoProductoPk pk, SgfensPedidoProducto dto) throws SgfensPedidoProductoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdPedidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PEDIDO=?" );
				modified=true;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isDescripcionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCRIPCION=?" );
				modified=true;
			}
		
			if (dto.isUnidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "UNIDAD=?" );
				modified=true;
			}
		
			if (dto.isIdentificacionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IDENTIFICACION=?" );
				modified=true;
			}
		
			if (dto.isCantidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CANTIDAD=?" );
				modified=true;
			}
		
			if (dto.isPrecioUnitarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO=?" );
				modified=true;
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_PORCENTAJE=?" );
				modified=true;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO=?" );
				modified=true;
			}
		
			if (dto.isSubtotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SUBTOTAL=?" );
				modified=true;
			}
		
			if (dto.isCostoUnitarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "COSTO_UNITARIO=?" );
				modified=true;
			}
		
			if (dto.isPorcentajeComisionEmpleadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PORCENTAJE_COMISION_EMPLEADO=?" );
				modified=true;
			}
		
			if (dto.isCantidadEntregadaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CANTIDAD_ENTREGADA=?" );
				modified=true;
			}
		
			if (dto.isFechaEntregaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_ENTREGA=?" );
				modified=true;
			}
		
			if (dto.isEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isIdAlmacenOrigenModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_Almacen_Origen=?" );
				modified=true;
			}
		
			if (dto.isPesoUnitarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PESO_UNITARIO=?" );
				modified=true;
			}
		
			if (dto.isCantidadPesoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CANTIDAD_PESO=?" );
				modified=true;
			}
		
			if (dto.isCantidadEntregadaPesoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CANTIDAD_ENTREGADA_PESO=?" );
				modified=true;
			}
		
			if (dto.isPrecioUnitarioGranelModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO_GRANEL=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_PEDIDO=? AND ID_CONCEPTO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdPedidoModified()) {
				stmt.setInt( index++, dto.getIdPedido() );
			}
		
			if (dto.isIdConceptoModified()) {
				stmt.setInt( index++, dto.getIdConcepto() );
			}
		
			if (dto.isDescripcionModified()) {
				stmt.setString( index++, dto.getDescripcion() );
			}
		
			if (dto.isUnidadModified()) {
				stmt.setString( index++, dto.getUnidad() );
			}
		
			if (dto.isIdentificacionModified()) {
				stmt.setString( index++, dto.getIdentificacion() );
			}
		
			if (dto.isCantidadModified()) {
				stmt.setDouble( index++, dto.getCantidad() );
			}
		
			if (dto.isPrecioUnitarioModified()) {
				stmt.setDouble( index++, dto.getPrecioUnitario() );
			}
		
			if (dto.isDescuentoPorcentajeModified()) {
				if (dto.isDescuentoPorcentajeNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoPorcentaje() );
				}
		
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (dto.isDescuentoMontoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDescuentoMonto() );
				}
		
			}
		
			if (dto.isSubtotalModified()) {
				stmt.setDouble( index++, dto.getSubtotal() );
			}
		
			if (dto.isCostoUnitarioModified()) {
				if (dto.isCostoUnitarioNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCostoUnitario() );
				}
		
			}
		
			if (dto.isPorcentajeComisionEmpleadoModified()) {
				if (dto.isPorcentajeComisionEmpleadoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPorcentajeComisionEmpleado() );
				}
		
			}
		
			if (dto.isCantidadEntregadaModified()) {
				if (dto.isCantidadEntregadaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidadEntregada() );
				}
		
			}
		
			if (dto.isFechaEntregaModified()) {
				stmt.setTimestamp(index++, dto.getFechaEntrega()==null ? null : new java.sql.Timestamp( dto.getFechaEntrega().getTime() ) );
			}
		
			if (dto.isEstatusModified()) {
				if (dto.isEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getEstatus() );
				}
		
			}
		
			if (dto.isIdAlmacenOrigenModified()) {
				if (dto.isIdAlmacenOrigenNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdAlmacenOrigen() );
				}
		
			}
		
			if (dto.isPesoUnitarioModified()) {
				if (dto.isPesoUnitarioNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPesoUnitario() );
				}
		
			}
		
			if (dto.isCantidadPesoModified()) {
				if (dto.isCantidadPesoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidadPeso() );
				}
		
			}
		
			if (dto.isCantidadEntregadaPesoModified()) {
				if (dto.isCantidadEntregadaPesoNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidadEntregadaPeso() );
				}
		
			}
		
			if (dto.isPrecioUnitarioGranelModified()) {
				if (dto.isPrecioUnitarioGranelNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioUnitarioGranel() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdPedido() );
			stmt.setInt( index++, pk.getIdConcepto() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sgfens_pedido_producto table.
	 */
	public void delete(SgfensPedidoProductoPk pk) throws SgfensPedidoProductoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdPedido() );
			stmt.setInt( 2, pk.getIdConcepto() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sgfens_pedido_producto table that matches the specified primary-key value.
	 */
	public SgfensPedidoProducto findByPrimaryKey(SgfensPedidoProductoPk pk) throws SgfensPedidoProductoDaoException
	{
		return findByPrimaryKey( pk.getIdPedido(), pk.getIdConcepto() );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'ID_PEDIDO = :idPedido AND ID_CONCEPTO = :idConcepto'.
	 */
	public SgfensPedidoProducto findByPrimaryKey(int idPedido, int idConcepto) throws SgfensPedidoProductoDaoException
	{
		SgfensPedidoProducto ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_PEDIDO = ? AND ID_CONCEPTO = ?", new Object[] {  new Integer(idPedido),  new Integer(idConcepto) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria ''.
	 */
	public SgfensPedidoProducto[] findAll() throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_PEDIDO, ID_CONCEPTO", null );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'ID_PEDIDO = :idPedido'.
	 */
	public SgfensPedidoProducto[] findWhereIdPedidoEquals(int idPedido) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PEDIDO = ? ORDER BY ID_PEDIDO", new Object[] {  new Integer(idPedido) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public SgfensPedidoProducto[] findWhereIdConceptoEquals(int idConcepto) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO = ? ORDER BY ID_CONCEPTO", new Object[] {  new Integer(idConcepto) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public SgfensPedidoProducto[] findWhereDescripcionEquals(String descripcion) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION = ? ORDER BY DESCRIPCION", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'UNIDAD = :unidad'.
	 */
	public SgfensPedidoProducto[] findWhereUnidadEquals(String unidad) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UNIDAD = ? ORDER BY UNIDAD", new Object[] { unidad } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'IDENTIFICACION = :identificacion'.
	 */
	public SgfensPedidoProducto[] findWhereIdentificacionEquals(String identificacion) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDENTIFICACION = ? ORDER BY IDENTIFICACION", new Object[] { identificacion } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public SgfensPedidoProducto[] findWhereCantidadEquals(double cantidad) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD = ? ORDER BY CANTIDAD", new Object[] {  new Double(cantidad) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'PRECIO_UNITARIO = :precioUnitario'.
	 */
	public SgfensPedidoProducto[] findWherePrecioUnitarioEquals(double precioUnitario) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_UNITARIO = ? ORDER BY PRECIO_UNITARIO", new Object[] {  new Double(precioUnitario) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'DESCUENTO_PORCENTAJE = :descuentoPorcentaje'.
	 */
	public SgfensPedidoProducto[] findWhereDescuentoPorcentajeEquals(double descuentoPorcentaje) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_PORCENTAJE = ? ORDER BY DESCUENTO_PORCENTAJE", new Object[] {  new Double(descuentoPorcentaje) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'DESCUENTO_MONTO = :descuentoMonto'.
	 */
	public SgfensPedidoProducto[] findWhereDescuentoMontoEquals(double descuentoMonto) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_MONTO = ? ORDER BY DESCUENTO_MONTO", new Object[] {  new Double(descuentoMonto) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'SUBTOTAL = :subtotal'.
	 */
	public SgfensPedidoProducto[] findWhereSubtotalEquals(double subtotal) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUBTOTAL = ? ORDER BY SUBTOTAL", new Object[] {  new Double(subtotal) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'COSTO_UNITARIO = :costoUnitario'.
	 */
	public SgfensPedidoProducto[] findWhereCostoUnitarioEquals(double costoUnitario) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COSTO_UNITARIO = ? ORDER BY COSTO_UNITARIO", new Object[] {  new Double(costoUnitario) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'PORCENTAJE_COMISION_EMPLEADO = :porcentajeComisionEmpleado'.
	 */
	public SgfensPedidoProducto[] findWherePorcentajeComisionEmpleadoEquals(double porcentajeComisionEmpleado) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PORCENTAJE_COMISION_EMPLEADO = ? ORDER BY PORCENTAJE_COMISION_EMPLEADO", new Object[] {  new Double(porcentajeComisionEmpleado) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'CANTIDAD_ENTREGADA = :cantidadEntregada'.
	 */
	public SgfensPedidoProducto[] findWhereCantidadEntregadaEquals(double cantidadEntregada) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD_ENTREGADA = ? ORDER BY CANTIDAD_ENTREGADA", new Object[] {  new Double(cantidadEntregada) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'FECHA_ENTREGA = :fechaEntrega'.
	 */
	public SgfensPedidoProducto[] findWhereFechaEntregaEquals(Date fechaEntrega) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_ENTREGA = ? ORDER BY FECHA_ENTREGA", new Object[] { fechaEntrega==null ? null : new java.sql.Timestamp( fechaEntrega.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'ESTATUS = :estatus'.
	 */
	public SgfensPedidoProducto[] findWhereEstatusEquals(short estatus) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTATUS = ? ORDER BY ESTATUS", new Object[] {  new Short(estatus) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'id_Almacen_Origen = :idAlmacenOrigen'.
	 */
	public SgfensPedidoProducto[] findWhereIdAlmacenOrigenEquals(int idAlmacenOrigen) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_Almacen_Origen = ? ORDER BY id_Almacen_Origen", new Object[] {  new Integer(idAlmacenOrigen) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'PESO_UNITARIO = :pesoUnitario'.
	 */
	public SgfensPedidoProducto[] findWherePesoUnitarioEquals(double pesoUnitario) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PESO_UNITARIO = ? ORDER BY PESO_UNITARIO", new Object[] {  new Double(pesoUnitario) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'CANTIDAD_PESO = :cantidadPeso'.
	 */
	public SgfensPedidoProducto[] findWhereCantidadPesoEquals(double cantidadPeso) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD_PESO = ? ORDER BY CANTIDAD_PESO", new Object[] {  new Double(cantidadPeso) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'CANTIDAD_ENTREGADA_PESO = :cantidadEntregadaPeso'.
	 */
	public SgfensPedidoProducto[] findWhereCantidadEntregadaPesoEquals(double cantidadEntregadaPeso) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD_ENTREGADA_PESO = ? ORDER BY CANTIDAD_ENTREGADA_PESO", new Object[] {  new Double(cantidadEntregadaPeso) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the criteria 'PRECIO_UNITARIO_GRANEL = :precioUnitarioGranel'.
	 */
	public SgfensPedidoProducto[] findWherePrecioUnitarioGranelEquals(double precioUnitarioGranel) throws SgfensPedidoProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_UNITARIO_GRANEL = ? ORDER BY PRECIO_UNITARIO_GRANEL", new Object[] {  new Double(precioUnitarioGranel) } );
	}

	/**
	 * Method 'SgfensPedidoProductoDaoImpl'
	 * 
	 */
	public SgfensPedidoProductoDaoImpl()
	{
	}

	/**
	 * Method 'SgfensPedidoProductoDaoImpl'
	 * 
	 * @param userConn
	 */
	public SgfensPedidoProductoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sgfens_pedido_producto";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SgfensPedidoProducto fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SgfensPedidoProducto dto = new SgfensPedidoProducto();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SgfensPedidoProducto[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SgfensPedidoProducto dto = new SgfensPedidoProducto();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SgfensPedidoProducto ret[] = new SgfensPedidoProducto[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SgfensPedidoProducto dto, ResultSet rs) throws SQLException
	{
		dto.setIdPedido( rs.getInt( COLUMN_ID_PEDIDO ) );
		dto.setIdConcepto( rs.getInt( COLUMN_ID_CONCEPTO ) );
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setUnidad( rs.getString( COLUMN_UNIDAD ) );
		dto.setIdentificacion( rs.getString( COLUMN_IDENTIFICACION ) );
		dto.setCantidad( rs.getDouble( COLUMN_CANTIDAD ) );
		dto.setPrecioUnitario( rs.getDouble( COLUMN_PRECIO_UNITARIO ) );
		dto.setDescuentoPorcentaje( rs.getDouble( COLUMN_DESCUENTO_PORCENTAJE ) );
		if (rs.wasNull()) {
			dto.setDescuentoPorcentajeNull( true );
		}
		
		dto.setDescuentoMonto( rs.getDouble( COLUMN_DESCUENTO_MONTO ) );
		if (rs.wasNull()) {
			dto.setDescuentoMontoNull( true );
		}
		
		dto.setSubtotal( rs.getDouble( COLUMN_SUBTOTAL ) );
		dto.setCostoUnitario( rs.getDouble( COLUMN_COSTO_UNITARIO ) );
		if (rs.wasNull()) {
			dto.setCostoUnitarioNull( true );
		}
		
		dto.setPorcentajeComisionEmpleado( rs.getDouble( COLUMN_PORCENTAJE_COMISION_EMPLEADO ) );
		if (rs.wasNull()) {
			dto.setPorcentajeComisionEmpleadoNull( true );
		}
		
		dto.setCantidadEntregada( rs.getDouble( COLUMN_CANTIDAD_ENTREGADA ) );
		if (rs.wasNull()) {
			dto.setCantidadEntregadaNull( true );
		}
		
		dto.setFechaEntrega( rs.getTimestamp(COLUMN_FECHA_ENTREGA ) );
		dto.setEstatus( rs.getShort( COLUMN_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setEstatusNull( true );
		}
		
		dto.setIdAlmacenOrigen( rs.getInt( COLUMN_ID_ALMACEN_ORIGEN ) );
		if (rs.wasNull()) {
			dto.setIdAlmacenOrigenNull( true );
		}
		
		dto.setPesoUnitario( rs.getDouble( COLUMN_PESO_UNITARIO ) );
		if (rs.wasNull()) {
			dto.setPesoUnitarioNull( true );
		}
		
		dto.setCantidadPeso( rs.getDouble( COLUMN_CANTIDAD_PESO ) );
		if (rs.wasNull()) {
			dto.setCantidadPesoNull( true );
		}
		
		dto.setCantidadEntregadaPeso( rs.getDouble( COLUMN_CANTIDAD_ENTREGADA_PESO ) );
		if (rs.wasNull()) {
			dto.setCantidadEntregadaPesoNull( true );
		}
		
		dto.setPrecioUnitarioGranel( rs.getDouble( COLUMN_PRECIO_UNITARIO_GRANEL ) );
		if (rs.wasNull()) {
			dto.setPrecioUnitarioGranelNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SgfensPedidoProducto dto)
	{
		dto.setIdPedidoModified( false );
		dto.setIdConceptoModified( false );
		dto.setDescripcionModified( false );
		dto.setUnidadModified( false );
		dto.setIdentificacionModified( false );
		dto.setCantidadModified( false );
		dto.setPrecioUnitarioModified( false );
		dto.setDescuentoPorcentajeModified( false );
		dto.setDescuentoMontoModified( false );
		dto.setSubtotalModified( false );
		dto.setCostoUnitarioModified( false );
		dto.setPorcentajeComisionEmpleadoModified( false );
		dto.setCantidadEntregadaModified( false );
		dto.setFechaEntregaModified( false );
		dto.setEstatusModified( false );
		dto.setIdAlmacenOrigenModified( false );
		dto.setPesoUnitarioModified( false );
		dto.setCantidadPesoModified( false );
		dto.setCantidadEntregadaPesoModified( false );
		dto.setPrecioUnitarioGranelModified( false );
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the specified arbitrary SQL statement
	 */
	public SgfensPedidoProducto[] findByDynamicSelect(String sql, Object[] sqlParams) throws SgfensPedidoProductoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sgfens_pedido_producto table that match the specified arbitrary SQL statement
	 */
	public SgfensPedidoProducto[] findByDynamicWhere(String sql, Object[] sqlParams) throws SgfensPedidoProductoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
