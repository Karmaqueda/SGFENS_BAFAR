/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SgfensPedidoDaoImpl extends AbstractDAO implements SgfensPedidoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_PEDIDO, ID_USUARIO_VENDEDOR, ID_EMPRESA, ID_CLIENTE, CONSECUTIVO_PEDIDO, FOLIO_PEDIDO, FECHA_PEDIDO, TIPO_MONEDA, TIEMPO_ENTREGA_DIAS, COMENTARIOS, DESCUENTO_TASA, DESCUENTO_MONTO, SUBTOTAL, TOTAL, DESCUENTO_MOTIVO, FECHA_ENTREGA, FECHA_TENTATIVA_PAGO, SALDO_PAGADO, ADELANTO, ID_COMPROBANTE_FISCAL, ID_ESTATUS_PEDIDO, LATITUD, LONGITUD, FOLIO_PEDIDO_MOVIL, NOMBRE_IMAGEN_FIRMA, IS_MODIFICADO_CONSOLA, BONIFICACION_DEVOLUCION, ID_USUARIO_CONDUCTOR_ASIGNADO, ID_USUARIO_VENDEDOR_ASIGNADO, ID_USUARIO_VENDEDOR_REASIGNADO, FECHA_LIMITE_REASIGANCION, CONSIGNA, SINCRONIZACION_MICROSIP, ID_VIA_EMBARQUE, ID_FOLIO_MOVIL_EMPLEADO, FOLIO_MOVIL_EMPLEADO_GENERADO, ID_ESTATUS_PEDIDO_SISTEMA_TERCERO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_PEDIDO, ID_USUARIO_VENDEDOR, ID_EMPRESA, ID_CLIENTE, CONSECUTIVO_PEDIDO, FOLIO_PEDIDO, FECHA_PEDIDO, TIPO_MONEDA, TIEMPO_ENTREGA_DIAS, COMENTARIOS, DESCUENTO_TASA, DESCUENTO_MONTO, SUBTOTAL, TOTAL, DESCUENTO_MOTIVO, FECHA_ENTREGA, FECHA_TENTATIVA_PAGO, SALDO_PAGADO, ADELANTO, ID_COMPROBANTE_FISCAL, ID_ESTATUS_PEDIDO, LATITUD, LONGITUD, FOLIO_PEDIDO_MOVIL, NOMBRE_IMAGEN_FIRMA, IS_MODIFICADO_CONSOLA, BONIFICACION_DEVOLUCION, ID_USUARIO_CONDUCTOR_ASIGNADO, ID_USUARIO_VENDEDOR_ASIGNADO, ID_USUARIO_VENDEDOR_REASIGNADO, FECHA_LIMITE_REASIGANCION, CONSIGNA, SINCRONIZACION_MICROSIP, ID_VIA_EMBARQUE, ID_FOLIO_MOVIL_EMPLEADO, FOLIO_MOVIL_EMPLEADO_GENERADO, ID_ESTATUS_PEDIDO_SISTEMA_TERCERO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_PEDIDO = ?, ID_USUARIO_VENDEDOR = ?, ID_EMPRESA = ?, ID_CLIENTE = ?, CONSECUTIVO_PEDIDO = ?, FOLIO_PEDIDO = ?, FECHA_PEDIDO = ?, TIPO_MONEDA = ?, TIEMPO_ENTREGA_DIAS = ?, COMENTARIOS = ?, DESCUENTO_TASA = ?, DESCUENTO_MONTO = ?, SUBTOTAL = ?, TOTAL = ?, DESCUENTO_MOTIVO = ?, FECHA_ENTREGA = ?, FECHA_TENTATIVA_PAGO = ?, SALDO_PAGADO = ?, ADELANTO = ?, ID_COMPROBANTE_FISCAL = ?, ID_ESTATUS_PEDIDO = ?, LATITUD = ?, LONGITUD = ?, FOLIO_PEDIDO_MOVIL = ?, NOMBRE_IMAGEN_FIRMA = ?, IS_MODIFICADO_CONSOLA = ?, BONIFICACION_DEVOLUCION = ?, ID_USUARIO_CONDUCTOR_ASIGNADO = ?, ID_USUARIO_VENDEDOR_ASIGNADO = ?, ID_USUARIO_VENDEDOR_REASIGNADO = ?, FECHA_LIMITE_REASIGANCION = ?, CONSIGNA = ?, SINCRONIZACION_MICROSIP = ?, ID_VIA_EMBARQUE = ?, ID_FOLIO_MOVIL_EMPLEADO = ?, FOLIO_MOVIL_EMPLEADO_GENERADO = ?, ID_ESTATUS_PEDIDO_SISTEMA_TERCERO = ? WHERE ID_PEDIDO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_PEDIDO = ?";

	/** 
	 * Index of column ID_PEDIDO
	 */
	protected static final int COLUMN_ID_PEDIDO = 1;

	/** 
	 * Index of column ID_USUARIO_VENDEDOR
	 */
	protected static final int COLUMN_ID_USUARIO_VENDEDOR = 2;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 3;

	/** 
	 * Index of column ID_CLIENTE
	 */
	protected static final int COLUMN_ID_CLIENTE = 4;

	/** 
	 * Index of column CONSECUTIVO_PEDIDO
	 */
	protected static final int COLUMN_CONSECUTIVO_PEDIDO = 5;

	/** 
	 * Index of column FOLIO_PEDIDO
	 */
	protected static final int COLUMN_FOLIO_PEDIDO = 6;

	/** 
	 * Index of column FECHA_PEDIDO
	 */
	protected static final int COLUMN_FECHA_PEDIDO = 7;

	/** 
	 * Index of column TIPO_MONEDA
	 */
	protected static final int COLUMN_TIPO_MONEDA = 8;

	/** 
	 * Index of column TIEMPO_ENTREGA_DIAS
	 */
	protected static final int COLUMN_TIEMPO_ENTREGA_DIAS = 9;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 10;

	/** 
	 * Index of column DESCUENTO_TASA
	 */
	protected static final int COLUMN_DESCUENTO_TASA = 11;

	/** 
	 * Index of column DESCUENTO_MONTO
	 */
	protected static final int COLUMN_DESCUENTO_MONTO = 12;

	/** 
	 * Index of column SUBTOTAL
	 */
	protected static final int COLUMN_SUBTOTAL = 13;

	/** 
	 * Index of column TOTAL
	 */
	protected static final int COLUMN_TOTAL = 14;

	/** 
	 * Index of column DESCUENTO_MOTIVO
	 */
	protected static final int COLUMN_DESCUENTO_MOTIVO = 15;

	/** 
	 * Index of column FECHA_ENTREGA
	 */
	protected static final int COLUMN_FECHA_ENTREGA = 16;

	/** 
	 * Index of column FECHA_TENTATIVA_PAGO
	 */
	protected static final int COLUMN_FECHA_TENTATIVA_PAGO = 17;

	/** 
	 * Index of column SALDO_PAGADO
	 */
	protected static final int COLUMN_SALDO_PAGADO = 18;

	/** 
	 * Index of column ADELANTO
	 */
	protected static final int COLUMN_ADELANTO = 19;

	/** 
	 * Index of column ID_COMPROBANTE_FISCAL
	 */
	protected static final int COLUMN_ID_COMPROBANTE_FISCAL = 20;

	/** 
	 * Index of column ID_ESTATUS_PEDIDO
	 */
	protected static final int COLUMN_ID_ESTATUS_PEDIDO = 21;

	/** 
	 * Index of column LATITUD
	 */
	protected static final int COLUMN_LATITUD = 22;

	/** 
	 * Index of column LONGITUD
	 */
	protected static final int COLUMN_LONGITUD = 23;

	/** 
	 * Index of column FOLIO_PEDIDO_MOVIL
	 */
	protected static final int COLUMN_FOLIO_PEDIDO_MOVIL = 24;

	/** 
	 * Index of column NOMBRE_IMAGEN_FIRMA
	 */
	protected static final int COLUMN_NOMBRE_IMAGEN_FIRMA = 25;

	/** 
	 * Index of column IS_MODIFICADO_CONSOLA
	 */
	protected static final int COLUMN_IS_MODIFICADO_CONSOLA = 26;

	/** 
	 * Index of column BONIFICACION_DEVOLUCION
	 */
	protected static final int COLUMN_BONIFICACION_DEVOLUCION = 27;

	/** 
	 * Index of column ID_USUARIO_CONDUCTOR_ASIGNADO
	 */
	protected static final int COLUMN_ID_USUARIO_CONDUCTOR_ASIGNADO = 28;

	/** 
	 * Index of column ID_USUARIO_VENDEDOR_ASIGNADO
	 */
	protected static final int COLUMN_ID_USUARIO_VENDEDOR_ASIGNADO = 29;

	/** 
	 * Index of column ID_USUARIO_VENDEDOR_REASIGNADO
	 */
	protected static final int COLUMN_ID_USUARIO_VENDEDOR_REASIGNADO = 30;

	/** 
	 * Index of column FECHA_LIMITE_REASIGANCION
	 */
	protected static final int COLUMN_FECHA_LIMITE_REASIGANCION = 31;

	/** 
	 * Index of column CONSIGNA
	 */
	protected static final int COLUMN_CONSIGNA = 32;

	/** 
	 * Index of column SINCRONIZACION_MICROSIP
	 */
	protected static final int COLUMN_SINCRONIZACION_MICROSIP = 33;

	/** 
	 * Index of column ID_VIA_EMBARQUE
	 */
	protected static final int COLUMN_ID_VIA_EMBARQUE = 34;

	/** 
	 * Index of column ID_FOLIO_MOVIL_EMPLEADO
	 */
	protected static final int COLUMN_ID_FOLIO_MOVIL_EMPLEADO = 35;

	/** 
	 * Index of column FOLIO_MOVIL_EMPLEADO_GENERADO
	 */
	protected static final int COLUMN_FOLIO_MOVIL_EMPLEADO_GENERADO = 36;

	/** 
	 * Index of column ID_ESTATUS_PEDIDO_SISTEMA_TERCERO
	 */
	protected static final int COLUMN_ID_ESTATUS_PEDIDO_SISTEMA_TERCERO = 37;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 37;

	/** 
	 * Index of primary-key column ID_PEDIDO
	 */
	protected static final int PK_COLUMN_ID_PEDIDO = 1;

	/** 
	 * Inserts a new row in the sgfens_pedido table.
	 */
	public SgfensPedidoPk insert(SgfensPedido dto) throws SgfensPedidoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdPedidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PEDIDO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_USUARIO_VENDEDOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isConsecutivoPedidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CONSECUTIVO_PEDIDO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioPedidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIO_PEDIDO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaPedidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_PEDIDO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoMonedaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIPO_MONEDA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTiempoEntregaDiasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TIEMPO_ENTREGA_DIAS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isComentariosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "COMENTARIOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoTasaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_TASA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSubtotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SUBTOTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "TOTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentoMotivoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "DESCUENTO_MOTIVO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaEntregaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_ENTREGA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaTentativaPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_TENTATIVA_PAGO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSaldoPagadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SALDO_PAGADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAdelantoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ADELANTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_FISCAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusPedidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS_PEDIDO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLatitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LATITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLongitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "LONGITUD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioPedidoMovilModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIO_PEDIDO_MOVIL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreImagenFirmaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_IMAGEN_FIRMA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsModificadoConsolaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IS_MODIFICADO_CONSOLA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isBonificacionDevolucionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "BONIFICACION_DEVOLUCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioConductorAsignadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_USUARIO_CONDUCTOR_ASIGNADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioVendedorAsignadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_USUARIO_VENDEDOR_ASIGNADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioVendedorReasignadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_USUARIO_VENDEDOR_REASIGNADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaLimiteReasigancionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_LIMITE_REASIGANCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isConsignaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CONSIGNA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SINCRONIZACION_MICROSIP" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdViaEmbarqueModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_VIA_EMBARQUE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdFolioMovilEmpleadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_FOLIO_MOVIL_EMPLEADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFolioMovilEmpleadoGeneradoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FOLIO_MOVIL_EMPLEADO_GENERADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusPedidoSistemaTerceroModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS_PEDIDO_SISTEMA_TERCERO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdPedidoModified()) {
				stmt.setInt( index++, dto.getIdPedido() );
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				stmt.setInt( index++, dto.getIdUsuarioVendedor() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdClienteModified()) {
				stmt.setInt( index++, dto.getIdCliente() );
			}
		
			if (dto.isConsecutivoPedidoModified()) {
				stmt.setInt( index++, dto.getConsecutivoPedido() );
			}
		
			if (dto.isFolioPedidoModified()) {
				stmt.setString( index++, dto.getFolioPedido() );
			}
		
			if (dto.isFechaPedidoModified()) {
				stmt.setTimestamp(index++, dto.getFechaPedido()==null ? null : new java.sql.Timestamp( dto.getFechaPedido().getTime() ) );
			}
		
			if (dto.isTipoMonedaModified()) {
				stmt.setString( index++, dto.getTipoMoneda() );
			}
		
			if (dto.isTiempoEntregaDiasModified()) {
				stmt.setInt( index++, dto.getTiempoEntregaDias() );
			}
		
			if (dto.isComentariosModified()) {
				stmt.setString( index++, dto.getComentarios() );
			}
		
			if (dto.isDescuentoTasaModified()) {
				stmt.setDouble( index++, dto.getDescuentoTasa() );
			}
		
			if (dto.isDescuentoMontoModified()) {
				stmt.setDouble( index++, dto.getDescuentoMonto() );
			}
		
			if (dto.isSubtotalModified()) {
				stmt.setDouble( index++, dto.getSubtotal() );
			}
		
			if (dto.isTotalModified()) {
				stmt.setDouble( index++, dto.getTotal() );
			}
		
			if (dto.isDescuentoMotivoModified()) {
				stmt.setString( index++, dto.getDescuentoMotivo() );
			}
		
			if (dto.isFechaEntregaModified()) {
				stmt.setTimestamp(index++, dto.getFechaEntrega()==null ? null : new java.sql.Timestamp( dto.getFechaEntrega().getTime() ) );
			}
		
			if (dto.isFechaTentativaPagoModified()) {
				stmt.setTimestamp(index++, dto.getFechaTentativaPago()==null ? null : new java.sql.Timestamp( dto.getFechaTentativaPago().getTime() ) );
			}
		
			if (dto.isSaldoPagadoModified()) {
				stmt.setDouble( index++, dto.getSaldoPagado() );
			}
		
			if (dto.isAdelantoModified()) {
				stmt.setDouble( index++, dto.getAdelanto() );
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (dto.isIdComprobanteFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdComprobanteFiscal() );
				}
		
			}
		
			if (dto.isIdEstatusPedidoModified()) {
				if (dto.isIdEstatusPedidoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getIdEstatusPedido() );
				}
		
			}
		
			if (dto.isLatitudModified()) {
				stmt.setDouble( index++, dto.getLatitud() );
			}
		
			if (dto.isLongitudModified()) {
				stmt.setDouble( index++, dto.getLongitud() );
			}
		
			if (dto.isFolioPedidoMovilModified()) {
				stmt.setString( index++, dto.getFolioPedidoMovil() );
			}
		
			if (dto.isNombreImagenFirmaModified()) {
				stmt.setString( index++, dto.getNombreImagenFirma() );
			}
		
			if (dto.isIsModificadoConsolaModified()) {
				stmt.setShort( index++, dto.getIsModificadoConsola() );
			}
		
			if (dto.isBonificacionDevolucionModified()) {
				if (dto.isBonificacionDevolucionNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getBonificacionDevolucion() );
				}
		
			}
		
			if (dto.isIdUsuarioConductorAsignadoModified()) {
				if (dto.isIdUsuarioConductorAsignadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioConductorAsignado() );
				}
		
			}
		
			if (dto.isIdUsuarioVendedorAsignadoModified()) {
				if (dto.isIdUsuarioVendedorAsignadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVendedorAsignado() );
				}
		
			}
		
			if (dto.isIdUsuarioVendedorReasignadoModified()) {
				if (dto.isIdUsuarioVendedorReasignadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVendedorReasignado() );
				}
		
			}
		
			if (dto.isFechaLimiteReasigancionModified()) {
				stmt.setDate(index++, dto.getFechaLimiteReasigancion()==null ? null : new java.sql.Date( dto.getFechaLimiteReasigancion().getTime() ) );
			}
		
			if (dto.isConsignaModified()) {
				if (dto.isConsignaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getConsigna() );
				}
		
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (dto.isSincronizacionMicrosipNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getSincronizacionMicrosip() );
				}
		
			}
		
			if (dto.isIdViaEmbarqueModified()) {
				if (dto.isIdViaEmbarqueNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdViaEmbarque() );
				}
		
			}
		
			if (dto.isIdFolioMovilEmpleadoModified()) {
				if (dto.isIdFolioMovilEmpleadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFolioMovilEmpleado() );
				}
		
			}
		
			if (dto.isFolioMovilEmpleadoGeneradoModified()) {
				stmt.setString( index++, dto.getFolioMovilEmpleadoGenerado() );
			}
		
			if (dto.isIdEstatusPedidoSistemaTerceroModified()) {
				if (dto.isIdEstatusPedidoSistemaTerceroNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatusPedidoSistemaTercero() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdPedido( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the sgfens_pedido table.
	 */
	public void update(SgfensPedidoPk pk, SgfensPedido dto) throws SgfensPedidoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdPedidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PEDIDO=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_USUARIO_VENDEDOR=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isConsecutivoPedidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONSECUTIVO_PEDIDO=?" );
				modified=true;
			}
		
			if (dto.isFolioPedidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIO_PEDIDO=?" );
				modified=true;
			}
		
			if (dto.isFechaPedidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_PEDIDO=?" );
				modified=true;
			}
		
			if (dto.isTipoMonedaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIPO_MONEDA=?" );
				modified=true;
			}
		
			if (dto.isTiempoEntregaDiasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TIEMPO_ENTREGA_DIAS=?" );
				modified=true;
			}
		
			if (dto.isComentariosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "COMENTARIOS=?" );
				modified=true;
			}
		
			if (dto.isDescuentoTasaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_TASA=?" );
				modified=true;
			}
		
			if (dto.isDescuentoMontoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_MONTO=?" );
				modified=true;
			}
		
			if (dto.isSubtotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SUBTOTAL=?" );
				modified=true;
			}
		
			if (dto.isTotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TOTAL=?" );
				modified=true;
			}
		
			if (dto.isDescuentoMotivoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESCUENTO_MOTIVO=?" );
				modified=true;
			}
		
			if (dto.isFechaEntregaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_ENTREGA=?" );
				modified=true;
			}
		
			if (dto.isFechaTentativaPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_TENTATIVA_PAGO=?" );
				modified=true;
			}
		
			if (dto.isSaldoPagadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SALDO_PAGADO=?" );
				modified=true;
			}
		
			if (dto.isAdelantoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ADELANTO=?" );
				modified=true;
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_COMPROBANTE_FISCAL=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusPedidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS_PEDIDO=?" );
				modified=true;
			}
		
			if (dto.isLatitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LATITUD=?" );
				modified=true;
			}
		
			if (dto.isLongitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LONGITUD=?" );
				modified=true;
			}
		
			if (dto.isFolioPedidoMovilModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIO_PEDIDO_MOVIL=?" );
				modified=true;
			}
		
			if (dto.isNombreImagenFirmaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_IMAGEN_FIRMA=?" );
				modified=true;
			}
		
			if (dto.isIsModificadoConsolaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IS_MODIFICADO_CONSOLA=?" );
				modified=true;
			}
		
			if (dto.isBonificacionDevolucionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "BONIFICACION_DEVOLUCION=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioConductorAsignadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_USUARIO_CONDUCTOR_ASIGNADO=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioVendedorAsignadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_USUARIO_VENDEDOR_ASIGNADO=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioVendedorReasignadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_USUARIO_VENDEDOR_REASIGNADO=?" );
				modified=true;
			}
		
			if (dto.isFechaLimiteReasigancionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_LIMITE_REASIGANCION=?" );
				modified=true;
			}
		
			if (dto.isConsignaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONSIGNA=?" );
				modified=true;
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SINCRONIZACION_MICROSIP=?" );
				modified=true;
			}
		
			if (dto.isIdViaEmbarqueModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_VIA_EMBARQUE=?" );
				modified=true;
			}
		
			if (dto.isIdFolioMovilEmpleadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_FOLIO_MOVIL_EMPLEADO=?" );
				modified=true;
			}
		
			if (dto.isFolioMovilEmpleadoGeneradoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FOLIO_MOVIL_EMPLEADO_GENERADO=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusPedidoSistemaTerceroModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS_PEDIDO_SISTEMA_TERCERO=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_PEDIDO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdPedidoModified()) {
				stmt.setInt( index++, dto.getIdPedido() );
			}
		
			if (dto.isIdUsuarioVendedorModified()) {
				stmt.setInt( index++, dto.getIdUsuarioVendedor() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdClienteModified()) {
				stmt.setInt( index++, dto.getIdCliente() );
			}
		
			if (dto.isConsecutivoPedidoModified()) {
				stmt.setInt( index++, dto.getConsecutivoPedido() );
			}
		
			if (dto.isFolioPedidoModified()) {
				stmt.setString( index++, dto.getFolioPedido() );
			}
		
			if (dto.isFechaPedidoModified()) {
				stmt.setTimestamp(index++, dto.getFechaPedido()==null ? null : new java.sql.Timestamp( dto.getFechaPedido().getTime() ) );
			}
		
			if (dto.isTipoMonedaModified()) {
				stmt.setString( index++, dto.getTipoMoneda() );
			}
		
			if (dto.isTiempoEntregaDiasModified()) {
				stmt.setInt( index++, dto.getTiempoEntregaDias() );
			}
		
			if (dto.isComentariosModified()) {
				stmt.setString( index++, dto.getComentarios() );
			}
		
			if (dto.isDescuentoTasaModified()) {
				stmt.setDouble( index++, dto.getDescuentoTasa() );
			}
		
			if (dto.isDescuentoMontoModified()) {
				stmt.setDouble( index++, dto.getDescuentoMonto() );
			}
		
			if (dto.isSubtotalModified()) {
				stmt.setDouble( index++, dto.getSubtotal() );
			}
		
			if (dto.isTotalModified()) {
				stmt.setDouble( index++, dto.getTotal() );
			}
		
			if (dto.isDescuentoMotivoModified()) {
				stmt.setString( index++, dto.getDescuentoMotivo() );
			}
		
			if (dto.isFechaEntregaModified()) {
				stmt.setTimestamp(index++, dto.getFechaEntrega()==null ? null : new java.sql.Timestamp( dto.getFechaEntrega().getTime() ) );
			}
		
			if (dto.isFechaTentativaPagoModified()) {
				stmt.setTimestamp(index++, dto.getFechaTentativaPago()==null ? null : new java.sql.Timestamp( dto.getFechaTentativaPago().getTime() ) );
			}
		
			if (dto.isSaldoPagadoModified()) {
				stmt.setDouble( index++, dto.getSaldoPagado() );
			}
		
			if (dto.isAdelantoModified()) {
				stmt.setDouble( index++, dto.getAdelanto() );
			}
		
			if (dto.isIdComprobanteFiscalModified()) {
				if (dto.isIdComprobanteFiscalNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdComprobanteFiscal() );
				}
		
			}
		
			if (dto.isIdEstatusPedidoModified()) {
				if (dto.isIdEstatusPedidoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getIdEstatusPedido() );
				}
		
			}
		
			if (dto.isLatitudModified()) {
				stmt.setDouble( index++, dto.getLatitud() );
			}
		
			if (dto.isLongitudModified()) {
				stmt.setDouble( index++, dto.getLongitud() );
			}
		
			if (dto.isFolioPedidoMovilModified()) {
				stmt.setString( index++, dto.getFolioPedidoMovil() );
			}
		
			if (dto.isNombreImagenFirmaModified()) {
				stmt.setString( index++, dto.getNombreImagenFirma() );
			}
		
			if (dto.isIsModificadoConsolaModified()) {
				stmt.setShort( index++, dto.getIsModificadoConsola() );
			}
		
			if (dto.isBonificacionDevolucionModified()) {
				if (dto.isBonificacionDevolucionNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getBonificacionDevolucion() );
				}
		
			}
		
			if (dto.isIdUsuarioConductorAsignadoModified()) {
				if (dto.isIdUsuarioConductorAsignadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioConductorAsignado() );
				}
		
			}
		
			if (dto.isIdUsuarioVendedorAsignadoModified()) {
				if (dto.isIdUsuarioVendedorAsignadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVendedorAsignado() );
				}
		
			}
		
			if (dto.isIdUsuarioVendedorReasignadoModified()) {
				if (dto.isIdUsuarioVendedorReasignadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuarioVendedorReasignado() );
				}
		
			}
		
			if (dto.isFechaLimiteReasigancionModified()) {
				stmt.setDate(index++, dto.getFechaLimiteReasigancion()==null ? null : new java.sql.Date( dto.getFechaLimiteReasigancion().getTime() ) );
			}
		
			if (dto.isConsignaModified()) {
				if (dto.isConsignaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getConsigna() );
				}
		
			}
		
			if (dto.isSincronizacionMicrosipModified()) {
				if (dto.isSincronizacionMicrosipNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getSincronizacionMicrosip() );
				}
		
			}
		
			if (dto.isIdViaEmbarqueModified()) {
				if (dto.isIdViaEmbarqueNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdViaEmbarque() );
				}
		
			}
		
			if (dto.isIdFolioMovilEmpleadoModified()) {
				if (dto.isIdFolioMovilEmpleadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFolioMovilEmpleado() );
				}
		
			}
		
			if (dto.isFolioMovilEmpleadoGeneradoModified()) {
				stmt.setString( index++, dto.getFolioMovilEmpleadoGenerado() );
			}
		
			if (dto.isIdEstatusPedidoSistemaTerceroModified()) {
				if (dto.isIdEstatusPedidoSistemaTerceroNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatusPedidoSistemaTercero() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdPedido() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the sgfens_pedido table.
	 */
	public void delete(SgfensPedidoPk pk) throws SgfensPedidoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdPedido() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the sgfens_pedido table that matches the specified primary-key value.
	 */
	public SgfensPedido findByPrimaryKey(SgfensPedidoPk pk) throws SgfensPedidoDaoException
	{
		return findByPrimaryKey( pk.getIdPedido() );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_PEDIDO = :idPedido'.
	 */
	public SgfensPedido findByPrimaryKey(int idPedido) throws SgfensPedidoDaoException
	{
		SgfensPedido ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_PEDIDO = ?", new Object[] {  new Integer(idPedido) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria ''.
	 */
	public SgfensPedido[] findAll() throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_PEDIDO", null );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_PEDIDO = :idPedido'.
	 */
	public SgfensPedido[] findWhereIdPedidoEquals(int idPedido) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PEDIDO = ? ORDER BY ID_PEDIDO", new Object[] {  new Integer(idPedido) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_USUARIO_VENDEDOR = :idUsuarioVendedor'.
	 */
	public SgfensPedido[] findWhereIdUsuarioVendedorEquals(int idUsuarioVendedor) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO_VENDEDOR = ? ORDER BY ID_USUARIO_VENDEDOR", new Object[] {  new Integer(idUsuarioVendedor) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public SgfensPedido[] findWhereIdEmpresaEquals(int idEmpresa) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public SgfensPedido[] findWhereIdClienteEquals(int idCliente) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CLIENTE = ? ORDER BY ID_CLIENTE", new Object[] {  new Integer(idCliente) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'CONSECUTIVO_PEDIDO = :consecutivoPedido'.
	 */
	public SgfensPedido[] findWhereConsecutivoPedidoEquals(int consecutivoPedido) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONSECUTIVO_PEDIDO = ? ORDER BY CONSECUTIVO_PEDIDO", new Object[] {  new Integer(consecutivoPedido) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FOLIO_PEDIDO = :folioPedido'.
	 */
	public SgfensPedido[] findWhereFolioPedidoEquals(String folioPedido) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_PEDIDO = ? ORDER BY FOLIO_PEDIDO", new Object[] { folioPedido } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FECHA_PEDIDO = :fechaPedido'.
	 */
	public SgfensPedido[] findWhereFechaPedidoEquals(Date fechaPedido) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_PEDIDO = ? ORDER BY FECHA_PEDIDO", new Object[] { fechaPedido==null ? null : new java.sql.Timestamp( fechaPedido.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'TIPO_MONEDA = :tipoMoneda'.
	 */
	public SgfensPedido[] findWhereTipoMonedaEquals(String tipoMoneda) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO_MONEDA = ? ORDER BY TIPO_MONEDA", new Object[] { tipoMoneda } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'TIEMPO_ENTREGA_DIAS = :tiempoEntregaDias'.
	 */
	public SgfensPedido[] findWhereTiempoEntregaDiasEquals(int tiempoEntregaDias) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIEMPO_ENTREGA_DIAS = ? ORDER BY TIEMPO_ENTREGA_DIAS", new Object[] {  new Integer(tiempoEntregaDias) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public SgfensPedido[] findWhereComentariosEquals(String comentarios) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'DESCUENTO_TASA = :descuentoTasa'.
	 */
	public SgfensPedido[] findWhereDescuentoTasaEquals(double descuentoTasa) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_TASA = ? ORDER BY DESCUENTO_TASA", new Object[] {  new Double(descuentoTasa) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'DESCUENTO_MONTO = :descuentoMonto'.
	 */
	public SgfensPedido[] findWhereDescuentoMontoEquals(double descuentoMonto) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_MONTO = ? ORDER BY DESCUENTO_MONTO", new Object[] {  new Double(descuentoMonto) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'SUBTOTAL = :subtotal'.
	 */
	public SgfensPedido[] findWhereSubtotalEquals(double subtotal) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUBTOTAL = ? ORDER BY SUBTOTAL", new Object[] {  new Double(subtotal) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'TOTAL = :total'.
	 */
	public SgfensPedido[] findWhereTotalEquals(double total) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TOTAL = ? ORDER BY TOTAL", new Object[] {  new Double(total) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'DESCUENTO_MOTIVO = :descuentoMotivo'.
	 */
	public SgfensPedido[] findWhereDescuentoMotivoEquals(String descuentoMotivo) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCUENTO_MOTIVO = ? ORDER BY DESCUENTO_MOTIVO", new Object[] { descuentoMotivo } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FECHA_ENTREGA = :fechaEntrega'.
	 */
	public SgfensPedido[] findWhereFechaEntregaEquals(Date fechaEntrega) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_ENTREGA = ? ORDER BY FECHA_ENTREGA", new Object[] { fechaEntrega==null ? null : new java.sql.Timestamp( fechaEntrega.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FECHA_TENTATIVA_PAGO = :fechaTentativaPago'.
	 */
	public SgfensPedido[] findWhereFechaTentativaPagoEquals(Date fechaTentativaPago) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_TENTATIVA_PAGO = ? ORDER BY FECHA_TENTATIVA_PAGO", new Object[] { fechaTentativaPago==null ? null : new java.sql.Timestamp( fechaTentativaPago.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'SALDO_PAGADO = :saldoPagado'.
	 */
	public SgfensPedido[] findWhereSaldoPagadoEquals(double saldoPagado) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SALDO_PAGADO = ? ORDER BY SALDO_PAGADO", new Object[] {  new Double(saldoPagado) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ADELANTO = :adelanto'.
	 */
	public SgfensPedido[] findWhereAdelantoEquals(double adelanto) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ADELANTO = ? ORDER BY ADELANTO", new Object[] {  new Double(adelanto) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public SgfensPedido[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_COMPROBANTE_FISCAL = ? ORDER BY ID_COMPROBANTE_FISCAL", new Object[] {  new Integer(idComprobanteFiscal) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_ESTATUS_PEDIDO = :idEstatusPedido'.
	 */
	public SgfensPedido[] findWhereIdEstatusPedidoEquals(short idEstatusPedido) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS_PEDIDO = ? ORDER BY ID_ESTATUS_PEDIDO", new Object[] {  new Short(idEstatusPedido) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'LATITUD = :latitud'.
	 */
	public SgfensPedido[] findWhereLatitudEquals(double latitud) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATITUD = ? ORDER BY LATITUD", new Object[] {  new Double(latitud) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'LONGITUD = :longitud'.
	 */
	public SgfensPedido[] findWhereLongitudEquals(double longitud) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LONGITUD = ? ORDER BY LONGITUD", new Object[] {  new Double(longitud) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FOLIO_PEDIDO_MOVIL = :folioPedidoMovil'.
	 */
	public SgfensPedido[] findWhereFolioPedidoMovilEquals(String folioPedidoMovil) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_PEDIDO_MOVIL = ? ORDER BY FOLIO_PEDIDO_MOVIL", new Object[] { folioPedidoMovil } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'NOMBRE_IMAGEN_FIRMA = :nombreImagenFirma'.
	 */
	public SgfensPedido[] findWhereNombreImagenFirmaEquals(String nombreImagenFirma) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_IMAGEN_FIRMA = ? ORDER BY NOMBRE_IMAGEN_FIRMA", new Object[] { nombreImagenFirma } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'IS_MODIFICADO_CONSOLA = :isModificadoConsola'.
	 */
	public SgfensPedido[] findWhereIsModificadoConsolaEquals(short isModificadoConsola) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IS_MODIFICADO_CONSOLA = ? ORDER BY IS_MODIFICADO_CONSOLA", new Object[] {  new Short(isModificadoConsola) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'BONIFICACION_DEVOLUCION = :bonificacionDevolucion'.
	 */
	public SgfensPedido[] findWhereBonificacionDevolucionEquals(double bonificacionDevolucion) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BONIFICACION_DEVOLUCION = ? ORDER BY BONIFICACION_DEVOLUCION", new Object[] {  new Double(bonificacionDevolucion) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_USUARIO_CONDUCTOR_ASIGNADO = :idUsuarioConductorAsignado'.
	 */
	public SgfensPedido[] findWhereIdUsuarioConductorAsignadoEquals(int idUsuarioConductorAsignado) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO_CONDUCTOR_ASIGNADO = ? ORDER BY ID_USUARIO_CONDUCTOR_ASIGNADO", new Object[] {  new Integer(idUsuarioConductorAsignado) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_USUARIO_VENDEDOR_ASIGNADO = :idUsuarioVendedorAsignado'.
	 */
	public SgfensPedido[] findWhereIdUsuarioVendedorAsignadoEquals(int idUsuarioVendedorAsignado) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO_VENDEDOR_ASIGNADO = ? ORDER BY ID_USUARIO_VENDEDOR_ASIGNADO", new Object[] {  new Integer(idUsuarioVendedorAsignado) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_USUARIO_VENDEDOR_REASIGNADO = :idUsuarioVendedorReasignado'.
	 */
	public SgfensPedido[] findWhereIdUsuarioVendedorReasignadoEquals(int idUsuarioVendedorReasignado) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO_VENDEDOR_REASIGNADO = ? ORDER BY ID_USUARIO_VENDEDOR_REASIGNADO", new Object[] {  new Integer(idUsuarioVendedorReasignado) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FECHA_LIMITE_REASIGANCION = :fechaLimiteReasigancion'.
	 */
	public SgfensPedido[] findWhereFechaLimiteReasigancionEquals(Date fechaLimiteReasigancion) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_LIMITE_REASIGANCION = ? ORDER BY FECHA_LIMITE_REASIGANCION", new Object[] { fechaLimiteReasigancion==null ? null : new java.sql.Date( fechaLimiteReasigancion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'CONSIGNA = :consigna'.
	 */
	public SgfensPedido[] findWhereConsignaEquals(int consigna) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONSIGNA = ? ORDER BY CONSIGNA", new Object[] {  new Integer(consigna) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'SINCRONIZACION_MICROSIP = :sincronizacionMicrosip'.
	 */
	public SgfensPedido[] findWhereSincronizacionMicrosipEquals(int sincronizacionMicrosip) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SINCRONIZACION_MICROSIP = ? ORDER BY SINCRONIZACION_MICROSIP", new Object[] {  new Integer(sincronizacionMicrosip) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_VIA_EMBARQUE = :idViaEmbarque'.
	 */
	public SgfensPedido[] findWhereIdViaEmbarqueEquals(int idViaEmbarque) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_VIA_EMBARQUE = ? ORDER BY ID_VIA_EMBARQUE", new Object[] {  new Integer(idViaEmbarque) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_FOLIO_MOVIL_EMPLEADO = :idFolioMovilEmpleado'.
	 */
	public SgfensPedido[] findWhereIdFolioMovilEmpleadoEquals(int idFolioMovilEmpleado) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_FOLIO_MOVIL_EMPLEADO = ? ORDER BY ID_FOLIO_MOVIL_EMPLEADO", new Object[] {  new Integer(idFolioMovilEmpleado) } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FOLIO_MOVIL_EMPLEADO_GENERADO = :folioMovilEmpleadoGenerado'.
	 */
	public SgfensPedido[] findWhereFolioMovilEmpleadoGeneradoEquals(String folioMovilEmpleadoGenerado) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FOLIO_MOVIL_EMPLEADO_GENERADO = ? ORDER BY FOLIO_MOVIL_EMPLEADO_GENERADO", new Object[] { folioMovilEmpleadoGenerado } );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_ESTATUS_PEDIDO_SISTEMA_TERCERO = :idEstatusPedidoSistemaTercero'.
	 */
	public SgfensPedido[] findWhereIdEstatusPedidoSistemaTerceroEquals(int idEstatusPedidoSistemaTercero) throws SgfensPedidoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS_PEDIDO_SISTEMA_TERCERO = ? ORDER BY ID_ESTATUS_PEDIDO_SISTEMA_TERCERO", new Object[] {  new Integer(idEstatusPedidoSistemaTercero) } );
	}

	/**
	 * Method 'SgfensPedidoDaoImpl'
	 * 
	 */
	public SgfensPedidoDaoImpl()
	{
	}

	/**
	 * Method 'SgfensPedidoDaoImpl'
	 * 
	 * @param userConn
	 */
	public SgfensPedidoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "sgfens_pedido";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SgfensPedido fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SgfensPedido dto = new SgfensPedido();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SgfensPedido[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SgfensPedido dto = new SgfensPedido();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SgfensPedido ret[] = new SgfensPedido[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SgfensPedido dto, ResultSet rs) throws SQLException
	{
		dto.setIdPedido( rs.getInt( COLUMN_ID_PEDIDO ) );
		dto.setIdUsuarioVendedor( rs.getInt( COLUMN_ID_USUARIO_VENDEDOR ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdCliente( rs.getInt( COLUMN_ID_CLIENTE ) );
		dto.setConsecutivoPedido( rs.getInt( COLUMN_CONSECUTIVO_PEDIDO ) );
		dto.setFolioPedido( rs.getString( COLUMN_FOLIO_PEDIDO ) );
		dto.setFechaPedido( rs.getTimestamp(COLUMN_FECHA_PEDIDO ) );
		dto.setTipoMoneda( rs.getString( COLUMN_TIPO_MONEDA ) );
		dto.setTiempoEntregaDias( rs.getInt( COLUMN_TIEMPO_ENTREGA_DIAS ) );
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setDescuentoTasa( rs.getDouble( COLUMN_DESCUENTO_TASA ) );
		dto.setDescuentoMonto( rs.getDouble( COLUMN_DESCUENTO_MONTO ) );
		dto.setSubtotal( rs.getDouble( COLUMN_SUBTOTAL ) );
		dto.setTotal( rs.getDouble( COLUMN_TOTAL ) );
		dto.setDescuentoMotivo( rs.getString( COLUMN_DESCUENTO_MOTIVO ) );
		dto.setFechaEntrega( rs.getTimestamp(COLUMN_FECHA_ENTREGA ) );
		dto.setFechaTentativaPago( rs.getTimestamp(COLUMN_FECHA_TENTATIVA_PAGO ) );
		dto.setSaldoPagado( rs.getDouble( COLUMN_SALDO_PAGADO ) );
		dto.setAdelanto( rs.getDouble( COLUMN_ADELANTO ) );
		dto.setIdComprobanteFiscal( rs.getInt( COLUMN_ID_COMPROBANTE_FISCAL ) );
		if (rs.wasNull()) {
			dto.setIdComprobanteFiscalNull( true );
		}
		
		dto.setIdEstatusPedido( rs.getShort( COLUMN_ID_ESTATUS_PEDIDO ) );
		if (rs.wasNull()) {
			dto.setIdEstatusPedidoNull( true );
		}
		
		dto.setLatitud( rs.getDouble( COLUMN_LATITUD ) );
		dto.setLongitud( rs.getDouble( COLUMN_LONGITUD ) );
		dto.setFolioPedidoMovil( rs.getString( COLUMN_FOLIO_PEDIDO_MOVIL ) );
		dto.setNombreImagenFirma( rs.getString( COLUMN_NOMBRE_IMAGEN_FIRMA ) );
		dto.setIsModificadoConsola( rs.getShort( COLUMN_IS_MODIFICADO_CONSOLA ) );
		dto.setBonificacionDevolucion( rs.getDouble( COLUMN_BONIFICACION_DEVOLUCION ) );
		if (rs.wasNull()) {
			dto.setBonificacionDevolucionNull( true );
		}
		
		dto.setIdUsuarioConductorAsignado( rs.getInt( COLUMN_ID_USUARIO_CONDUCTOR_ASIGNADO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioConductorAsignadoNull( true );
		}
		
		dto.setIdUsuarioVendedorAsignado( rs.getInt( COLUMN_ID_USUARIO_VENDEDOR_ASIGNADO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioVendedorAsignadoNull( true );
		}
		
		dto.setIdUsuarioVendedorReasignado( rs.getInt( COLUMN_ID_USUARIO_VENDEDOR_REASIGNADO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioVendedorReasignadoNull( true );
		}
		
		dto.setFechaLimiteReasigancion( rs.getDate(COLUMN_FECHA_LIMITE_REASIGANCION ) );
		dto.setConsigna( rs.getInt( COLUMN_CONSIGNA ) );
		if (rs.wasNull()) {
			dto.setConsignaNull( true );
		}
		
		dto.setSincronizacionMicrosip( rs.getInt( COLUMN_SINCRONIZACION_MICROSIP ) );
		if (rs.wasNull()) {
			dto.setSincronizacionMicrosipNull( true );
		}
		
		dto.setIdViaEmbarque( rs.getInt( COLUMN_ID_VIA_EMBARQUE ) );
		if (rs.wasNull()) {
			dto.setIdViaEmbarqueNull( true );
		}
		
		dto.setIdFolioMovilEmpleado( rs.getInt( COLUMN_ID_FOLIO_MOVIL_EMPLEADO ) );
		if (rs.wasNull()) {
			dto.setIdFolioMovilEmpleadoNull( true );
		}
		
		dto.setFolioMovilEmpleadoGenerado( rs.getString( COLUMN_FOLIO_MOVIL_EMPLEADO_GENERADO ) );
		dto.setIdEstatusPedidoSistemaTercero( rs.getInt( COLUMN_ID_ESTATUS_PEDIDO_SISTEMA_TERCERO ) );
		if (rs.wasNull()) {
			dto.setIdEstatusPedidoSistemaTerceroNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SgfensPedido dto)
	{
		dto.setIdPedidoModified( false );
		dto.setIdUsuarioVendedorModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdClienteModified( false );
		dto.setConsecutivoPedidoModified( false );
		dto.setFolioPedidoModified( false );
		dto.setFechaPedidoModified( false );
		dto.setTipoMonedaModified( false );
		dto.setTiempoEntregaDiasModified( false );
		dto.setComentariosModified( false );
		dto.setDescuentoTasaModified( false );
		dto.setDescuentoMontoModified( false );
		dto.setSubtotalModified( false );
		dto.setTotalModified( false );
		dto.setDescuentoMotivoModified( false );
		dto.setFechaEntregaModified( false );
		dto.setFechaTentativaPagoModified( false );
		dto.setSaldoPagadoModified( false );
		dto.setAdelantoModified( false );
		dto.setIdComprobanteFiscalModified( false );
		dto.setIdEstatusPedidoModified( false );
		dto.setLatitudModified( false );
		dto.setLongitudModified( false );
		dto.setFolioPedidoMovilModified( false );
		dto.setNombreImagenFirmaModified( false );
		dto.setIsModificadoConsolaModified( false );
		dto.setBonificacionDevolucionModified( false );
		dto.setIdUsuarioConductorAsignadoModified( false );
		dto.setIdUsuarioVendedorAsignadoModified( false );
		dto.setIdUsuarioVendedorReasignadoModified( false );
		dto.setFechaLimiteReasigancionModified( false );
		dto.setConsignaModified( false );
		dto.setSincronizacionMicrosipModified( false );
		dto.setIdViaEmbarqueModified( false );
		dto.setIdFolioMovilEmpleadoModified( false );
		dto.setFolioMovilEmpleadoGeneradoModified( false );
		dto.setIdEstatusPedidoSistemaTerceroModified( false );
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the specified arbitrary SQL statement
	 */
	public SgfensPedido[] findByDynamicSelect(String sql, Object[] sqlParams) throws SgfensPedidoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sgfens_pedido table that match the specified arbitrary SQL statement
	 */
	public SgfensPedido[] findByDynamicWhere(String sql, Object[] sqlParams) throws SgfensPedidoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SgfensPedidoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
