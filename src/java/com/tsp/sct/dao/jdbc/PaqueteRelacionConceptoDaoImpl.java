/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class PaqueteRelacionConceptoDaoImpl extends AbstractDAO implements PaqueteRelacionConceptoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_PAQUETE_RELACION_CONCEPTO, ID_ESTATUS, ID_PAQUETE, ID_CONCEPTO, CANTIDAD, PRECIO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_PAQUETE_RELACION_CONCEPTO, ID_ESTATUS, ID_PAQUETE, ID_CONCEPTO, CANTIDAD, PRECIO ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_PAQUETE_RELACION_CONCEPTO = ?, ID_ESTATUS = ?, ID_PAQUETE = ?, ID_CONCEPTO = ?, CANTIDAD = ?, PRECIO = ? WHERE ID_PAQUETE_RELACION_CONCEPTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_PAQUETE_RELACION_CONCEPTO = ?";

	/** 
	 * Index of column ID_PAQUETE_RELACION_CONCEPTO
	 */
	protected static final int COLUMN_ID_PAQUETE_RELACION_CONCEPTO = 1;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 2;

	/** 
	 * Index of column ID_PAQUETE
	 */
	protected static final int COLUMN_ID_PAQUETE = 3;

	/** 
	 * Index of column ID_CONCEPTO
	 */
	protected static final int COLUMN_ID_CONCEPTO = 4;

	/** 
	 * Index of column CANTIDAD
	 */
	protected static final int COLUMN_CANTIDAD = 5;

	/** 
	 * Index of column PRECIO
	 */
	protected static final int COLUMN_PRECIO = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column ID_PAQUETE_RELACION_CONCEPTO
	 */
	protected static final int PK_COLUMN_ID_PAQUETE_RELACION_CONCEPTO = 1;

	/** 
	 * Inserts a new row in the paquete_relacion_concepto table.
	 */
	public PaqueteRelacionConceptoPk insert(PaqueteRelacionConcepto dto) throws PaqueteRelacionConceptoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdPaqueteRelacionConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PAQUETE_RELACION_CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdPaqueteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PAQUETE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CANTIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdPaqueteRelacionConceptoModified()) {
				stmt.setInt( index++, dto.getIdPaqueteRelacionConcepto() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isIdPaqueteModified()) {
				if (dto.isIdPaqueteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPaquete() );
				}
		
			}
		
			if (dto.isIdConceptoModified()) {
				if (dto.isIdConceptoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdConcepto() );
				}
		
			}
		
			if (dto.isCantidadModified()) {
				if (dto.isCantidadNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidad() );
				}
		
			}
		
			if (dto.isPrecioModified()) {
				if (dto.isPrecioNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecio() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PaqueteRelacionConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the paquete_relacion_concepto table.
	 */
	public void update(PaqueteRelacionConceptoPk pk, PaqueteRelacionConcepto dto) throws PaqueteRelacionConceptoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdPaqueteRelacionConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PAQUETE_RELACION_CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isIdPaqueteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PAQUETE=?" );
				modified=true;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isCantidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CANTIDAD=?" );
				modified=true;
			}
		
			if (dto.isPrecioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_PAQUETE_RELACION_CONCEPTO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdPaqueteRelacionConceptoModified()) {
				stmt.setInt( index++, dto.getIdPaqueteRelacionConcepto() );
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isIdPaqueteModified()) {
				if (dto.isIdPaqueteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdPaquete() );
				}
		
			}
		
			if (dto.isIdConceptoModified()) {
				if (dto.isIdConceptoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdConcepto() );
				}
		
			}
		
			if (dto.isCantidadModified()) {
				if (dto.isCantidadNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidad() );
				}
		
			}
		
			if (dto.isPrecioModified()) {
				if (dto.isPrecioNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecio() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdPaqueteRelacionConcepto() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PaqueteRelacionConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the paquete_relacion_concepto table.
	 */
	public void delete(PaqueteRelacionConceptoPk pk) throws PaqueteRelacionConceptoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdPaqueteRelacionConcepto() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PaqueteRelacionConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the paquete_relacion_concepto table that matches the specified primary-key value.
	 */
	public PaqueteRelacionConcepto findByPrimaryKey(PaqueteRelacionConceptoPk pk) throws PaqueteRelacionConceptoDaoException
	{
		return findByPrimaryKey( pk.getIdPaqueteRelacionConcepto() );
	}

	/** 
	 * Returns all rows from the paquete_relacion_concepto table that match the criteria 'ID_PAQUETE_RELACION_CONCEPTO = :idPaqueteRelacionConcepto'.
	 */
	public PaqueteRelacionConcepto findByPrimaryKey(int idPaqueteRelacionConcepto) throws PaqueteRelacionConceptoDaoException
	{
		PaqueteRelacionConcepto ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_PAQUETE_RELACION_CONCEPTO = ?", new Object[] {  new Integer(idPaqueteRelacionConcepto) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the paquete_relacion_concepto table that match the criteria ''.
	 */
	public PaqueteRelacionConcepto[] findAll() throws PaqueteRelacionConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_PAQUETE_RELACION_CONCEPTO", null );
	}

	/** 
	 * Returns all rows from the paquete_relacion_concepto table that match the criteria 'ID_PAQUETE_RELACION_CONCEPTO = :idPaqueteRelacionConcepto'.
	 */
	public PaqueteRelacionConcepto[] findWhereIdPaqueteRelacionConceptoEquals(int idPaqueteRelacionConcepto) throws PaqueteRelacionConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PAQUETE_RELACION_CONCEPTO = ? ORDER BY ID_PAQUETE_RELACION_CONCEPTO", new Object[] {  new Integer(idPaqueteRelacionConcepto) } );
	}

	/** 
	 * Returns all rows from the paquete_relacion_concepto table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public PaqueteRelacionConcepto[] findWhereIdEstatusEquals(int idEstatus) throws PaqueteRelacionConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the paquete_relacion_concepto table that match the criteria 'ID_PAQUETE = :idPaquete'.
	 */
	public PaqueteRelacionConcepto[] findWhereIdPaqueteEquals(int idPaquete) throws PaqueteRelacionConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PAQUETE = ? ORDER BY ID_PAQUETE", new Object[] {  new Integer(idPaquete) } );
	}

	/** 
	 * Returns all rows from the paquete_relacion_concepto table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public PaqueteRelacionConcepto[] findWhereIdConceptoEquals(int idConcepto) throws PaqueteRelacionConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO = ? ORDER BY ID_CONCEPTO", new Object[] {  new Integer(idConcepto) } );
	}

	/** 
	 * Returns all rows from the paquete_relacion_concepto table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public PaqueteRelacionConcepto[] findWhereCantidadEquals(double cantidad) throws PaqueteRelacionConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD = ? ORDER BY CANTIDAD", new Object[] {  new Double(cantidad) } );
	}

	/** 
	 * Returns all rows from the paquete_relacion_concepto table that match the criteria 'PRECIO = :precio'.
	 */
	public PaqueteRelacionConcepto[] findWherePrecioEquals(double precio) throws PaqueteRelacionConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO = ? ORDER BY PRECIO", new Object[] {  new Double(precio) } );
	}

	/**
	 * Method 'PaqueteRelacionConceptoDaoImpl'
	 * 
	 */
	public PaqueteRelacionConceptoDaoImpl()
	{
	}

	/**
	 * Method 'PaqueteRelacionConceptoDaoImpl'
	 * 
	 * @param userConn
	 */
	public PaqueteRelacionConceptoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "paquete_relacion_concepto";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected PaqueteRelacionConcepto fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			PaqueteRelacionConcepto dto = new PaqueteRelacionConcepto();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected PaqueteRelacionConcepto[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			PaqueteRelacionConcepto dto = new PaqueteRelacionConcepto();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		PaqueteRelacionConcepto ret[] = new PaqueteRelacionConcepto[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(PaqueteRelacionConcepto dto, ResultSet rs) throws SQLException
	{
		dto.setIdPaqueteRelacionConcepto( rs.getInt( COLUMN_ID_PAQUETE_RELACION_CONCEPTO ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setIdPaquete( rs.getInt( COLUMN_ID_PAQUETE ) );
		if (rs.wasNull()) {
			dto.setIdPaqueteNull( true );
		}
		
		dto.setIdConcepto( rs.getInt( COLUMN_ID_CONCEPTO ) );
		if (rs.wasNull()) {
			dto.setIdConceptoNull( true );
		}
		
		dto.setCantidad( rs.getDouble( COLUMN_CANTIDAD ) );
		if (rs.wasNull()) {
			dto.setCantidadNull( true );
		}
		
		dto.setPrecio( rs.getDouble( COLUMN_PRECIO ) );
		if (rs.wasNull()) {
			dto.setPrecioNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(PaqueteRelacionConcepto dto)
	{
		dto.setIdPaqueteRelacionConceptoModified( false );
		dto.setIdEstatusModified( false );
		dto.setIdPaqueteModified( false );
		dto.setIdConceptoModified( false );
		dto.setCantidadModified( false );
		dto.setPrecioModified( false );
	}

	/** 
	 * Returns all rows from the paquete_relacion_concepto table that match the specified arbitrary SQL statement
	 */
	public PaqueteRelacionConcepto[] findByDynamicSelect(String sql, Object[] sqlParams) throws PaqueteRelacionConceptoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PaqueteRelacionConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the paquete_relacion_concepto table that match the specified arbitrary SQL statement
	 */
	public PaqueteRelacionConcepto[] findByDynamicWhere(String sql, Object[] sqlParams) throws PaqueteRelacionConceptoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PaqueteRelacionConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
