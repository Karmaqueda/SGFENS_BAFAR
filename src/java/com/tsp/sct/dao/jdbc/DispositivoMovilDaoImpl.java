/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class DispositivoMovilDaoImpl extends AbstractDAO implements DispositivoMovilDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_DISPOSITIVO, ID_EMPRESA, ID_ESTATUS, IMEI, MARCA, MODELO, NUMERO_SERIE, ASIGNADO, ALIAS_TELEFONO, REPORTE_ROBO, PCT_PILA FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_DISPOSITIVO, ID_EMPRESA, ID_ESTATUS, IMEI, MARCA, MODELO, NUMERO_SERIE, ASIGNADO, ALIAS_TELEFONO, REPORTE_ROBO, PCT_PILA ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_DISPOSITIVO = ?, ID_EMPRESA = ?, ID_ESTATUS = ?, IMEI = ?, MARCA = ?, MODELO = ?, NUMERO_SERIE = ?, ASIGNADO = ?, ALIAS_TELEFONO = ?, REPORTE_ROBO = ?, PCT_PILA = ? WHERE ID_DISPOSITIVO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_DISPOSITIVO = ?";

	/** 
	 * Index of column ID_DISPOSITIVO
	 */
	protected static final int COLUMN_ID_DISPOSITIVO = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 3;

	/** 
	 * Index of column IMEI
	 */
	protected static final int COLUMN_IMEI = 4;

	/** 
	 * Index of column MARCA
	 */
	protected static final int COLUMN_MARCA = 5;

	/** 
	 * Index of column MODELO
	 */
	protected static final int COLUMN_MODELO = 6;

	/** 
	 * Index of column NUMERO_SERIE
	 */
	protected static final int COLUMN_NUMERO_SERIE = 7;

	/** 
	 * Index of column ASIGNADO
	 */
	protected static final int COLUMN_ASIGNADO = 8;

	/** 
	 * Index of column ALIAS_TELEFONO
	 */
	protected static final int COLUMN_ALIAS_TELEFONO = 9;

	/** 
	 * Index of column REPORTE_ROBO
	 */
	protected static final int COLUMN_REPORTE_ROBO = 10;

	/** 
	 * Index of column PCT_PILA
	 */
	protected static final int COLUMN_PCT_PILA = 11;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 11;

	/** 
	 * Index of primary-key column ID_DISPOSITIVO
	 */
	protected static final int PK_COLUMN_ID_DISPOSITIVO = 1;

	/** 
	 * Inserts a new row in the dispositivo_movil table.
	 */
	public DispositivoMovilPk insert(DispositivoMovil dto) throws DispositivoMovilDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdDispositivoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_DISPOSITIVO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isImeiModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "IMEI" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMarcaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MARCA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isModeloModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MODELO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumeroSerieModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUMERO_SERIE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAsignadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ASIGNADO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAliasTelefonoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ALIAS_TELEFONO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isReporteRoboModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "REPORTE_ROBO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPctPilaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PCT_PILA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdDispositivoModified()) {
				stmt.setInt( index++, dto.getIdDispositivo() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isImeiModified()) {
				stmt.setString( index++, dto.getImei() );
			}
		
			if (dto.isMarcaModified()) {
				stmt.setString( index++, dto.getMarca() );
			}
		
			if (dto.isModeloModified()) {
				stmt.setString( index++, dto.getModelo() );
			}
		
			if (dto.isNumeroSerieModified()) {
				stmt.setString( index++, dto.getNumeroSerie() );
			}
		
			if (dto.isAsignadoModified()) {
				if (dto.isAsignadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getAsignado() );
				}
		
			}
		
			if (dto.isAliasTelefonoModified()) {
				stmt.setString( index++, dto.getAliasTelefono() );
			}
		
			if (dto.isReporteRoboModified()) {
				if (dto.isReporteRoboNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getReporteRobo() );
				}
		
			}
		
			if (dto.isPctPilaModified()) {
				if (dto.isPctPilaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPctPila() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdDispositivo( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DispositivoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the dispositivo_movil table.
	 */
	public void update(DispositivoMovilPk pk, DispositivoMovil dto) throws DispositivoMovilDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdDispositivoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_DISPOSITIVO=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isImeiModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IMEI=?" );
				modified=true;
			}
		
			if (dto.isMarcaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MARCA=?" );
				modified=true;
			}
		
			if (dto.isModeloModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MODELO=?" );
				modified=true;
			}
		
			if (dto.isNumeroSerieModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUMERO_SERIE=?" );
				modified=true;
			}
		
			if (dto.isAsignadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ASIGNADO=?" );
				modified=true;
			}
		
			if (dto.isAliasTelefonoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ALIAS_TELEFONO=?" );
				modified=true;
			}
		
			if (dto.isReporteRoboModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "REPORTE_ROBO=?" );
				modified=true;
			}
		
			if (dto.isPctPilaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PCT_PILA=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_DISPOSITIVO=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdDispositivoModified()) {
				stmt.setInt( index++, dto.getIdDispositivo() );
			}
		
			if (dto.isIdEmpresaModified()) {
				stmt.setInt( index++, dto.getIdEmpresa() );
			}
		
			if (dto.isIdEstatusModified()) {
				stmt.setInt( index++, dto.getIdEstatus() );
			}
		
			if (dto.isImeiModified()) {
				stmt.setString( index++, dto.getImei() );
			}
		
			if (dto.isMarcaModified()) {
				stmt.setString( index++, dto.getMarca() );
			}
		
			if (dto.isModeloModified()) {
				stmt.setString( index++, dto.getModelo() );
			}
		
			if (dto.isNumeroSerieModified()) {
				stmt.setString( index++, dto.getNumeroSerie() );
			}
		
			if (dto.isAsignadoModified()) {
				if (dto.isAsignadoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setShort( index++, dto.getAsignado() );
				}
		
			}
		
			if (dto.isAliasTelefonoModified()) {
				stmt.setString( index++, dto.getAliasTelefono() );
			}
		
			if (dto.isReporteRoboModified()) {
				if (dto.isReporteRoboNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getReporteRobo() );
				}
		
			}
		
			if (dto.isPctPilaModified()) {
				if (dto.isPctPilaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPctPila() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdDispositivo() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DispositivoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the dispositivo_movil table.
	 */
	public void delete(DispositivoMovilPk pk) throws DispositivoMovilDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdDispositivo() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DispositivoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the dispositivo_movil table that matches the specified primary-key value.
	 */
	public DispositivoMovil findByPrimaryKey(DispositivoMovilPk pk) throws DispositivoMovilDaoException
	{
		return findByPrimaryKey( pk.getIdDispositivo() );
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'ID_DISPOSITIVO = :idDispositivo'.
	 */
	public DispositivoMovil findByPrimaryKey(int idDispositivo) throws DispositivoMovilDaoException
	{
		DispositivoMovil ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_DISPOSITIVO = ?", new Object[] {  new Integer(idDispositivo) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria ''.
	 */
	public DispositivoMovil[] findAll() throws DispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_DISPOSITIVO", null );
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'ID_DISPOSITIVO = :idDispositivo'.
	 */
	public DispositivoMovil[] findWhereIdDispositivoEquals(int idDispositivo) throws DispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_DISPOSITIVO = ? ORDER BY ID_DISPOSITIVO", new Object[] {  new Integer(idDispositivo) } );
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public DispositivoMovil[] findWhereIdEmpresaEquals(int idEmpresa) throws DispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public DispositivoMovil[] findWhereIdEstatusEquals(int idEstatus) throws DispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'IMEI = :imei'.
	 */
	public DispositivoMovil[] findWhereImeiEquals(String imei) throws DispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMEI = ? ORDER BY IMEI", new Object[] { imei } );
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'MARCA = :marca'.
	 */
	public DispositivoMovil[] findWhereMarcaEquals(String marca) throws DispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MARCA = ? ORDER BY MARCA", new Object[] { marca } );
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'MODELO = :modelo'.
	 */
	public DispositivoMovil[] findWhereModeloEquals(String modelo) throws DispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MODELO = ? ORDER BY MODELO", new Object[] { modelo } );
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'NUMERO_SERIE = :numeroSerie'.
	 */
	public DispositivoMovil[] findWhereNumeroSerieEquals(String numeroSerie) throws DispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMERO_SERIE = ? ORDER BY NUMERO_SERIE", new Object[] { numeroSerie } );
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'ASIGNADO = :asignado'.
	 */
	public DispositivoMovil[] findWhereAsignadoEquals(short asignado) throws DispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ASIGNADO = ? ORDER BY ASIGNADO", new Object[] {  new Short(asignado) } );
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'ALIAS_TELEFONO = :aliasTelefono'.
	 */
	public DispositivoMovil[] findWhereAliasTelefonoEquals(String aliasTelefono) throws DispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ALIAS_TELEFONO = ? ORDER BY ALIAS_TELEFONO", new Object[] { aliasTelefono } );
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'REPORTE_ROBO = :reporteRobo'.
	 */
	public DispositivoMovil[] findWhereReporteRoboEquals(int reporteRobo) throws DispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REPORTE_ROBO = ? ORDER BY REPORTE_ROBO", new Object[] {  new Integer(reporteRobo) } );
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'PCT_PILA = :pctPila'.
	 */
	public DispositivoMovil[] findWherePctPilaEquals(double pctPila) throws DispositivoMovilDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PCT_PILA = ? ORDER BY PCT_PILA", new Object[] {  new Double(pctPila) } );
	}

	/**
	 * Method 'DispositivoMovilDaoImpl'
	 * 
	 */
	public DispositivoMovilDaoImpl()
	{
	}

	/**
	 * Method 'DispositivoMovilDaoImpl'
	 * 
	 * @param userConn
	 */
	public DispositivoMovilDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "dispositivo_movil";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected DispositivoMovil fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			DispositivoMovil dto = new DispositivoMovil();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected DispositivoMovil[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			DispositivoMovil dto = new DispositivoMovil();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		DispositivoMovil ret[] = new DispositivoMovil[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(DispositivoMovil dto, ResultSet rs) throws SQLException
	{
		dto.setIdDispositivo( rs.getInt( COLUMN_ID_DISPOSITIVO ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		dto.setImei( rs.getString( COLUMN_IMEI ) );
		dto.setMarca( rs.getString( COLUMN_MARCA ) );
		dto.setModelo( rs.getString( COLUMN_MODELO ) );
		dto.setNumeroSerie( rs.getString( COLUMN_NUMERO_SERIE ) );
		dto.setAsignado( rs.getShort( COLUMN_ASIGNADO ) );
		if (rs.wasNull()) {
			dto.setAsignadoNull( true );
		}
		
		dto.setAliasTelefono( rs.getString( COLUMN_ALIAS_TELEFONO ) );
		dto.setReporteRobo( rs.getInt( COLUMN_REPORTE_ROBO ) );
		if (rs.wasNull()) {
			dto.setReporteRoboNull( true );
		}
		
		dto.setPctPila( rs.getDouble( COLUMN_PCT_PILA ) );
		if (rs.wasNull()) {
			dto.setPctPilaNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(DispositivoMovil dto)
	{
		dto.setIdDispositivoModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEstatusModified( false );
		dto.setImeiModified( false );
		dto.setMarcaModified( false );
		dto.setModeloModified( false );
		dto.setNumeroSerieModified( false );
		dto.setAsignadoModified( false );
		dto.setAliasTelefonoModified( false );
		dto.setReporteRoboModified( false );
		dto.setPctPilaModified( false );
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the specified arbitrary SQL statement
	 */
	public DispositivoMovil[] findByDynamicSelect(String sql, Object[] sqlParams) throws DispositivoMovilDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DispositivoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the dispositivo_movil table that match the specified arbitrary SQL statement
	 */
	public DispositivoMovil[] findByDynamicWhere(String sql, Object[] sqlParams) throws DispositivoMovilDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new DispositivoMovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
