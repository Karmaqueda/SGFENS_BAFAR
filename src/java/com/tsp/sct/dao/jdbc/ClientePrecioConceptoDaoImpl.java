/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ClientePrecioConceptoDaoImpl extends AbstractDAO implements ClientePrecioConceptoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_CONCEPTO, ID_CLIENTE, PRECIO_UNITARIO_CLIENTE, PRECIO_MEDIO_CLIENTE, PRECIO_MAYOREO_CLIENTE, PRECIO_ESPECIAL_CLIENTE, PRECIO_DOCENA_CLIENTE, ID_ESTATUS, PRECIO_UNITARIO_GRANEL_CLIENTE, PRECIO_MEDIO_GRANEL_CLIENTE, PRECIO_MAYOREO_GRANEL_CLIENTE, PRECIO_ESPECIAL_GRANEL_CLIENTE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_CONCEPTO, ID_CLIENTE, PRECIO_UNITARIO_CLIENTE, PRECIO_MEDIO_CLIENTE, PRECIO_MAYOREO_CLIENTE, PRECIO_ESPECIAL_CLIENTE, PRECIO_DOCENA_CLIENTE, ID_ESTATUS, PRECIO_UNITARIO_GRANEL_CLIENTE, PRECIO_MEDIO_GRANEL_CLIENTE, PRECIO_MAYOREO_GRANEL_CLIENTE, PRECIO_ESPECIAL_GRANEL_CLIENTE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_CONCEPTO = ?, ID_CLIENTE = ?, PRECIO_UNITARIO_CLIENTE = ?, PRECIO_MEDIO_CLIENTE = ?, PRECIO_MAYOREO_CLIENTE = ?, PRECIO_ESPECIAL_CLIENTE = ?, PRECIO_DOCENA_CLIENTE = ?, ID_ESTATUS = ?, PRECIO_UNITARIO_GRANEL_CLIENTE = ?, PRECIO_MEDIO_GRANEL_CLIENTE = ?, PRECIO_MAYOREO_GRANEL_CLIENTE = ?, PRECIO_ESPECIAL_GRANEL_CLIENTE = ? WHERE ID_CLIENTE = ? AND ID_CONCEPTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_CLIENTE = ? AND ID_CONCEPTO = ?";

	/** 
	 * Index of column ID_CONCEPTO
	 */
	protected static final int COLUMN_ID_CONCEPTO = 1;

	/** 
	 * Index of column ID_CLIENTE
	 */
	protected static final int COLUMN_ID_CLIENTE = 2;

	/** 
	 * Index of column PRECIO_UNITARIO_CLIENTE
	 */
	protected static final int COLUMN_PRECIO_UNITARIO_CLIENTE = 3;

	/** 
	 * Index of column PRECIO_MEDIO_CLIENTE
	 */
	protected static final int COLUMN_PRECIO_MEDIO_CLIENTE = 4;

	/** 
	 * Index of column PRECIO_MAYOREO_CLIENTE
	 */
	protected static final int COLUMN_PRECIO_MAYOREO_CLIENTE = 5;

	/** 
	 * Index of column PRECIO_ESPECIAL_CLIENTE
	 */
	protected static final int COLUMN_PRECIO_ESPECIAL_CLIENTE = 6;

	/** 
	 * Index of column PRECIO_DOCENA_CLIENTE
	 */
	protected static final int COLUMN_PRECIO_DOCENA_CLIENTE = 7;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 8;

	/** 
	 * Index of column PRECIO_UNITARIO_GRANEL_CLIENTE
	 */
	protected static final int COLUMN_PRECIO_UNITARIO_GRANEL_CLIENTE = 9;

	/** 
	 * Index of column PRECIO_MEDIO_GRANEL_CLIENTE
	 */
	protected static final int COLUMN_PRECIO_MEDIO_GRANEL_CLIENTE = 10;

	/** 
	 * Index of column PRECIO_MAYOREO_GRANEL_CLIENTE
	 */
	protected static final int COLUMN_PRECIO_MAYOREO_GRANEL_CLIENTE = 11;

	/** 
	 * Index of column PRECIO_ESPECIAL_GRANEL_CLIENTE
	 */
	protected static final int COLUMN_PRECIO_ESPECIAL_GRANEL_CLIENTE = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column ID_CLIENTE
	 */
	protected static final int PK_COLUMN_ID_CLIENTE = 1;

	/** 
	 * Index of primary-key column ID_CONCEPTO
	 */
	protected static final int PK_COLUMN_ID_CONCEPTO = 2;

	/** 
	 * Inserts a new row in the cliente_precio_concepto table.
	 */
	public ClientePrecioConceptoPk insert(ClientePrecioConcepto dto) throws ClientePrecioConceptoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioUnitarioClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioMedioClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_MEDIO_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioMayoreoClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_MAYOREO_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioEspecialClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_ESPECIAL_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioDocenaClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_DOCENA_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioUnitarioGranelClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO_GRANEL_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioMedioGranelClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_MEDIO_GRANEL_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioMayoreoGranelClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_MAYOREO_GRANEL_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioEspecialGranelClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_ESPECIAL_GRANEL_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdConceptoModified()) {
				stmt.setInt( index++, dto.getIdConcepto() );
			}
		
			if (dto.isIdClienteModified()) {
				stmt.setInt( index++, dto.getIdCliente() );
			}
		
			if (dto.isPrecioUnitarioClienteModified()) {
				if (dto.isPrecioUnitarioClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioUnitarioCliente() );
				}
		
			}
		
			if (dto.isPrecioMedioClienteModified()) {
				if (dto.isPrecioMedioClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMedioCliente() );
				}
		
			}
		
			if (dto.isPrecioMayoreoClienteModified()) {
				if (dto.isPrecioMayoreoClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMayoreoCliente() );
				}
		
			}
		
			if (dto.isPrecioEspecialClienteModified()) {
				if (dto.isPrecioEspecialClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioEspecialCliente() );
				}
		
			}
		
			if (dto.isPrecioDocenaClienteModified()) {
				if (dto.isPrecioDocenaClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioDocenaCliente() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isPrecioUnitarioGranelClienteModified()) {
				if (dto.isPrecioUnitarioGranelClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioUnitarioGranelCliente() );
				}
		
			}
		
			if (dto.isPrecioMedioGranelClienteModified()) {
				if (dto.isPrecioMedioGranelClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMedioGranelCliente() );
				}
		
			}
		
			if (dto.isPrecioMayoreoGranelClienteModified()) {
				if (dto.isPrecioMayoreoGranelClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMayoreoGranelCliente() );
				}
		
			}
		
			if (dto.isPrecioEspecialGranelClienteModified()) {
				if (dto.isPrecioEspecialGranelClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioEspecialGranelCliente() );
				}
		
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new ClientePrecioConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the cliente_precio_concepto table.
	 */
	public void update(ClientePrecioConceptoPk pk, ClientePrecioConcepto dto) throws ClientePrecioConceptoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isIdClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isPrecioUnitarioClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isPrecioMedioClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_MEDIO_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isPrecioMayoreoClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_MAYOREO_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isPrecioEspecialClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_ESPECIAL_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isPrecioDocenaClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_DOCENA_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isPrecioUnitarioGranelClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_UNITARIO_GRANEL_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isPrecioMedioGranelClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_MEDIO_GRANEL_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isPrecioMayoreoGranelClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_MAYOREO_GRANEL_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isPrecioEspecialGranelClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_ESPECIAL_GRANEL_CLIENTE=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_CLIENTE=? AND ID_CONCEPTO=?" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdConceptoModified()) {
				stmt.setInt( index++, dto.getIdConcepto() );
			}
		
			if (dto.isIdClienteModified()) {
				stmt.setInt( index++, dto.getIdCliente() );
			}
		
			if (dto.isPrecioUnitarioClienteModified()) {
				if (dto.isPrecioUnitarioClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioUnitarioCliente() );
				}
		
			}
		
			if (dto.isPrecioMedioClienteModified()) {
				if (dto.isPrecioMedioClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMedioCliente() );
				}
		
			}
		
			if (dto.isPrecioMayoreoClienteModified()) {
				if (dto.isPrecioMayoreoClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMayoreoCliente() );
				}
		
			}
		
			if (dto.isPrecioEspecialClienteModified()) {
				if (dto.isPrecioEspecialClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioEspecialCliente() );
				}
		
			}
		
			if (dto.isPrecioDocenaClienteModified()) {
				if (dto.isPrecioDocenaClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioDocenaCliente() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isPrecioUnitarioGranelClienteModified()) {
				if (dto.isPrecioUnitarioGranelClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioUnitarioGranelCliente() );
				}
		
			}
		
			if (dto.isPrecioMedioGranelClienteModified()) {
				if (dto.isPrecioMedioGranelClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMedioGranelCliente() );
				}
		
			}
		
			if (dto.isPrecioMayoreoGranelClienteModified()) {
				if (dto.isPrecioMayoreoGranelClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioMayoreoGranelCliente() );
				}
		
			}
		
			if (dto.isPrecioEspecialGranelClienteModified()) {
				if (dto.isPrecioEspecialGranelClienteNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioEspecialGranelCliente() );
				}
		
			}
		
			stmt.setInt( index++, pk.getIdCliente() );
			stmt.setInt( index++, pk.getIdConcepto() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ClientePrecioConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the cliente_precio_concepto table.
	 */
	public void delete(ClientePrecioConceptoPk pk) throws ClientePrecioConceptoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdCliente() );
			stmt.setInt( 2, pk.getIdConcepto() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ClientePrecioConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the cliente_precio_concepto table that matches the specified primary-key value.
	 */
	public ClientePrecioConcepto findByPrimaryKey(ClientePrecioConceptoPk pk) throws ClientePrecioConceptoDaoException
	{
		return findByPrimaryKey( pk.getIdCliente(), pk.getIdConcepto() );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria 'ID_CLIENTE = :idCliente AND ID_CONCEPTO = :idConcepto'.
	 */
	public ClientePrecioConcepto findByPrimaryKey(int idCliente, int idConcepto) throws ClientePrecioConceptoDaoException
	{
		ClientePrecioConcepto ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_CLIENTE = ? AND ID_CONCEPTO = ?", new Object[] {  new Integer(idCliente),  new Integer(idConcepto) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria ''.
	 */
	public ClientePrecioConcepto[] findAll() throws ClientePrecioConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_CLIENTE, ID_CONCEPTO", null );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public ClientePrecioConcepto[] findWhereIdConceptoEquals(int idConcepto) throws ClientePrecioConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO = ? ORDER BY ID_CONCEPTO", new Object[] {  new Integer(idConcepto) } );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public ClientePrecioConcepto[] findWhereIdClienteEquals(int idCliente) throws ClientePrecioConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CLIENTE = ? ORDER BY ID_CLIENTE", new Object[] {  new Integer(idCliente) } );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria 'PRECIO_UNITARIO_CLIENTE = :precioUnitarioCliente'.
	 */
	public ClientePrecioConcepto[] findWherePrecioUnitarioClienteEquals(double precioUnitarioCliente) throws ClientePrecioConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_UNITARIO_CLIENTE = ? ORDER BY PRECIO_UNITARIO_CLIENTE", new Object[] {  new Double(precioUnitarioCliente) } );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria 'PRECIO_MEDIO_CLIENTE = :precioMedioCliente'.
	 */
	public ClientePrecioConcepto[] findWherePrecioMedioClienteEquals(double precioMedioCliente) throws ClientePrecioConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_MEDIO_CLIENTE = ? ORDER BY PRECIO_MEDIO_CLIENTE", new Object[] {  new Double(precioMedioCliente) } );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria 'PRECIO_MAYOREO_CLIENTE = :precioMayoreoCliente'.
	 */
	public ClientePrecioConcepto[] findWherePrecioMayoreoClienteEquals(double precioMayoreoCliente) throws ClientePrecioConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_MAYOREO_CLIENTE = ? ORDER BY PRECIO_MAYOREO_CLIENTE", new Object[] {  new Double(precioMayoreoCliente) } );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria 'PRECIO_ESPECIAL_CLIENTE = :precioEspecialCliente'.
	 */
	public ClientePrecioConcepto[] findWherePrecioEspecialClienteEquals(double precioEspecialCliente) throws ClientePrecioConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_ESPECIAL_CLIENTE = ? ORDER BY PRECIO_ESPECIAL_CLIENTE", new Object[] {  new Double(precioEspecialCliente) } );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria 'PRECIO_DOCENA_CLIENTE = :precioDocenaCliente'.
	 */
	public ClientePrecioConcepto[] findWherePrecioDocenaClienteEquals(double precioDocenaCliente) throws ClientePrecioConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_DOCENA_CLIENTE = ? ORDER BY PRECIO_DOCENA_CLIENTE", new Object[] {  new Double(precioDocenaCliente) } );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public ClientePrecioConcepto[] findWhereIdEstatusEquals(int idEstatus) throws ClientePrecioConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria 'PRECIO_UNITARIO_GRANEL_CLIENTE = :precioUnitarioGranelCliente'.
	 */
	public ClientePrecioConcepto[] findWherePrecioUnitarioGranelClienteEquals(double precioUnitarioGranelCliente) throws ClientePrecioConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_UNITARIO_GRANEL_CLIENTE = ? ORDER BY PRECIO_UNITARIO_GRANEL_CLIENTE", new Object[] {  new Double(precioUnitarioGranelCliente) } );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria 'PRECIO_MEDIO_GRANEL_CLIENTE = :precioMedioGranelCliente'.
	 */
	public ClientePrecioConcepto[] findWherePrecioMedioGranelClienteEquals(double precioMedioGranelCliente) throws ClientePrecioConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_MEDIO_GRANEL_CLIENTE = ? ORDER BY PRECIO_MEDIO_GRANEL_CLIENTE", new Object[] {  new Double(precioMedioGranelCliente) } );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria 'PRECIO_MAYOREO_GRANEL_CLIENTE = :precioMayoreoGranelCliente'.
	 */
	public ClientePrecioConcepto[] findWherePrecioMayoreoGranelClienteEquals(double precioMayoreoGranelCliente) throws ClientePrecioConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_MAYOREO_GRANEL_CLIENTE = ? ORDER BY PRECIO_MAYOREO_GRANEL_CLIENTE", new Object[] {  new Double(precioMayoreoGranelCliente) } );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the criteria 'PRECIO_ESPECIAL_GRANEL_CLIENTE = :precioEspecialGranelCliente'.
	 */
	public ClientePrecioConcepto[] findWherePrecioEspecialGranelClienteEquals(double precioEspecialGranelCliente) throws ClientePrecioConceptoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO_ESPECIAL_GRANEL_CLIENTE = ? ORDER BY PRECIO_ESPECIAL_GRANEL_CLIENTE", new Object[] {  new Double(precioEspecialGranelCliente) } );
	}

	/**
	 * Method 'ClientePrecioConceptoDaoImpl'
	 * 
	 */
	public ClientePrecioConceptoDaoImpl()
	{
	}

	/**
	 * Method 'ClientePrecioConceptoDaoImpl'
	 * 
	 * @param userConn
	 */
	public ClientePrecioConceptoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "cliente_precio_concepto";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ClientePrecioConcepto fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ClientePrecioConcepto dto = new ClientePrecioConcepto();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ClientePrecioConcepto[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ClientePrecioConcepto dto = new ClientePrecioConcepto();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ClientePrecioConcepto ret[] = new ClientePrecioConcepto[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ClientePrecioConcepto dto, ResultSet rs) throws SQLException
	{
		dto.setIdConcepto( rs.getInt( COLUMN_ID_CONCEPTO ) );
		dto.setIdCliente( rs.getInt( COLUMN_ID_CLIENTE ) );
		dto.setPrecioUnitarioCliente( rs.getDouble( COLUMN_PRECIO_UNITARIO_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setPrecioUnitarioClienteNull( true );
		}
		
		dto.setPrecioMedioCliente( rs.getDouble( COLUMN_PRECIO_MEDIO_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setPrecioMedioClienteNull( true );
		}
		
		dto.setPrecioMayoreoCliente( rs.getDouble( COLUMN_PRECIO_MAYOREO_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setPrecioMayoreoClienteNull( true );
		}
		
		dto.setPrecioEspecialCliente( rs.getDouble( COLUMN_PRECIO_ESPECIAL_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setPrecioEspecialClienteNull( true );
		}
		
		dto.setPrecioDocenaCliente( rs.getDouble( COLUMN_PRECIO_DOCENA_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setPrecioDocenaClienteNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setPrecioUnitarioGranelCliente( rs.getDouble( COLUMN_PRECIO_UNITARIO_GRANEL_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setPrecioUnitarioGranelClienteNull( true );
		}
		
		dto.setPrecioMedioGranelCliente( rs.getDouble( COLUMN_PRECIO_MEDIO_GRANEL_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setPrecioMedioGranelClienteNull( true );
		}
		
		dto.setPrecioMayoreoGranelCliente( rs.getDouble( COLUMN_PRECIO_MAYOREO_GRANEL_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setPrecioMayoreoGranelClienteNull( true );
		}
		
		dto.setPrecioEspecialGranelCliente( rs.getDouble( COLUMN_PRECIO_ESPECIAL_GRANEL_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setPrecioEspecialGranelClienteNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ClientePrecioConcepto dto)
	{
		dto.setIdConceptoModified( false );
		dto.setIdClienteModified( false );
		dto.setPrecioUnitarioClienteModified( false );
		dto.setPrecioMedioClienteModified( false );
		dto.setPrecioMayoreoClienteModified( false );
		dto.setPrecioEspecialClienteModified( false );
		dto.setPrecioDocenaClienteModified( false );
		dto.setIdEstatusModified( false );
		dto.setPrecioUnitarioGranelClienteModified( false );
		dto.setPrecioMedioGranelClienteModified( false );
		dto.setPrecioMayoreoGranelClienteModified( false );
		dto.setPrecioEspecialGranelClienteModified( false );
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the specified arbitrary SQL statement
	 */
	public ClientePrecioConcepto[] findByDynamicSelect(String sql, Object[] sqlParams) throws ClientePrecioConceptoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ClientePrecioConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the cliente_precio_concepto table that match the specified arbitrary SQL statement
	 */
	public ClientePrecioConcepto[] findByDynamicWhere(String sql, Object[] sqlParams) throws ClientePrecioConceptoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ClientePrecioConceptoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
