/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.jdbc;

import com.tsp.sct.dao.dao.*;
import com.tsp.sct.dao.factory.*;
import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EmpleadoBitacoraPosicionDaoImpl extends AbstractDAO implements EmpleadoBitacoraPosicionDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_bitacora_posicion, id_empleado, latitud, longitud, fecha, velocidad_m_x_seg, direccion_avance FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_bitacora_posicion, id_empleado, latitud, longitud, fecha, velocidad_m_x_seg, direccion_avance ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_bitacora_posicion = ?, id_empleado = ?, latitud = ?, longitud = ?, fecha = ?, velocidad_m_x_seg = ?, direccion_avance = ? WHERE id_bitacora_posicion = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_bitacora_posicion = ?";

	/** 
	 * Index of column id_bitacora_posicion
	 */
	protected static final int COLUMN_ID_BITACORA_POSICION = 1;

	/** 
	 * Index of column id_empleado
	 */
	protected static final int COLUMN_ID_EMPLEADO = 2;

	/** 
	 * Index of column latitud
	 */
	protected static final int COLUMN_LATITUD = 3;

	/** 
	 * Index of column longitud
	 */
	protected static final int COLUMN_LONGITUD = 4;

	/** 
	 * Index of column fecha
	 */
	protected static final int COLUMN_FECHA = 5;

	/** 
	 * Index of column velocidad_m_x_seg
	 */
	protected static final int COLUMN_VELOCIDAD_M_X_SEG = 6;

	/** 
	 * Index of column direccion_avance
	 */
	protected static final int COLUMN_DIRECCION_AVANCE = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column id_bitacora_posicion
	 */
	protected static final int PK_COLUMN_ID_BITACORA_POSICION = 1;

	/** 
	 * Inserts a new row in the empleado_bitacora_posicion table.
	 */
	public EmpleadoBitacoraPosicionPk insert(EmpleadoBitacoraPosicion dto) throws EmpleadoBitacoraPosicionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdBitacoraPosicionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_bitacora_posicion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpleadoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id_empleado" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLatitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "latitud" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLongitudModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "longitud" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "fecha" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isVelocidadMXSegModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "velocidad_m_x_seg" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDireccionAvanceModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "direccion_avance" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdBitacoraPosicionModified()) {
				stmt.setLong( index++, dto.getIdBitacoraPosicion() );
			}
		
			if (dto.isIdEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdEmpleado() );
			}
		
			if (dto.isLatitudModified()) {
				stmt.setDouble( index++, dto.getLatitud() );
			}
		
			if (dto.isLongitudModified()) {
				stmt.setDouble( index++, dto.getLongitud() );
			}
		
			if (dto.isFechaModified()) {
				stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			}
		
			if (dto.isVelocidadMXSegModified()) {
				if (dto.isVelocidadMXSegNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getVelocidadMXSeg() );
				}
		
			}
		
			if (dto.isDireccionAvanceModified()) {
				if (dto.isDireccionAvanceNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDireccionAvance() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdBitacoraPosicion( rs.getLong( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpleadoBitacoraPosicionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the empleado_bitacora_posicion table.
	 */
	public void update(EmpleadoBitacoraPosicionPk pk, EmpleadoBitacoraPosicion dto) throws EmpleadoBitacoraPosicionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdBitacoraPosicionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_bitacora_posicion=?" );
				modified=true;
			}
		
			if (dto.isIdEmpleadoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id_empleado=?" );
				modified=true;
			}
		
			if (dto.isLatitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "latitud=?" );
				modified=true;
			}
		
			if (dto.isLongitudModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "longitud=?" );
				modified=true;
			}
		
			if (dto.isFechaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "fecha=?" );
				modified=true;
			}
		
			if (dto.isVelocidadMXSegModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "velocidad_m_x_seg=?" );
				modified=true;
			}
		
			if (dto.isDireccionAvanceModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "direccion_avance=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id_bitacora_posicion=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdBitacoraPosicionModified()) {
				stmt.setLong( index++, dto.getIdBitacoraPosicion() );
			}
		
			if (dto.isIdEmpleadoModified()) {
				stmt.setInt( index++, dto.getIdEmpleado() );
			}
		
			if (dto.isLatitudModified()) {
				stmt.setDouble( index++, dto.getLatitud() );
			}
		
			if (dto.isLongitudModified()) {
				stmt.setDouble( index++, dto.getLongitud() );
			}
		
			if (dto.isFechaModified()) {
				stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			}
		
			if (dto.isVelocidadMXSegModified()) {
				if (dto.isVelocidadMXSegNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getVelocidadMXSeg() );
				}
		
			}
		
			if (dto.isDireccionAvanceModified()) {
				if (dto.isDireccionAvanceNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getDireccionAvance() );
				}
		
			}
		
			stmt.setLong( index++, pk.getIdBitacoraPosicion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpleadoBitacoraPosicionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the empleado_bitacora_posicion table.
	 */
	public void delete(EmpleadoBitacoraPosicionPk pk) throws EmpleadoBitacoraPosicionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getIdBitacoraPosicion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpleadoBitacoraPosicionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the empleado_bitacora_posicion table that matches the specified primary-key value.
	 */
	public EmpleadoBitacoraPosicion findByPrimaryKey(EmpleadoBitacoraPosicionPk pk) throws EmpleadoBitacoraPosicionDaoException
	{
		return findByPrimaryKey( pk.getIdBitacoraPosicion() );
	}

	/** 
	 * Returns all rows from the empleado_bitacora_posicion table that match the criteria 'id_bitacora_posicion = :idBitacoraPosicion'.
	 */
	public EmpleadoBitacoraPosicion findByPrimaryKey(long idBitacoraPosicion) throws EmpleadoBitacoraPosicionDaoException
	{
		EmpleadoBitacoraPosicion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_bitacora_posicion = ?", new Object[] {  new Long(idBitacoraPosicion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the empleado_bitacora_posicion table that match the criteria ''.
	 */
	public EmpleadoBitacoraPosicion[] findAll() throws EmpleadoBitacoraPosicionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_bitacora_posicion", null );
	}

	/** 
	 * Returns all rows from the empleado_bitacora_posicion table that match the criteria 'id_bitacora_posicion = :idBitacoraPosicion'.
	 */
	public EmpleadoBitacoraPosicion[] findWhereIdBitacoraPosicionEquals(long idBitacoraPosicion) throws EmpleadoBitacoraPosicionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_bitacora_posicion = ? ORDER BY id_bitacora_posicion", new Object[] {  new Long(idBitacoraPosicion) } );
	}

	/** 
	 * Returns all rows from the empleado_bitacora_posicion table that match the criteria 'id_empleado = :idEmpleado'.
	 */
	public EmpleadoBitacoraPosicion[] findWhereIdEmpleadoEquals(int idEmpleado) throws EmpleadoBitacoraPosicionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_empleado = ? ORDER BY id_empleado", new Object[] {  new Integer(idEmpleado) } );
	}

	/** 
	 * Returns all rows from the empleado_bitacora_posicion table that match the criteria 'latitud = :latitud'.
	 */
	public EmpleadoBitacoraPosicion[] findWhereLatitudEquals(double latitud) throws EmpleadoBitacoraPosicionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE latitud = ? ORDER BY latitud", new Object[] {  new Double(latitud) } );
	}

	/** 
	 * Returns all rows from the empleado_bitacora_posicion table that match the criteria 'longitud = :longitud'.
	 */
	public EmpleadoBitacoraPosicion[] findWhereLongitudEquals(double longitud) throws EmpleadoBitacoraPosicionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE longitud = ? ORDER BY longitud", new Object[] {  new Double(longitud) } );
	}

	/** 
	 * Returns all rows from the empleado_bitacora_posicion table that match the criteria 'fecha = :fecha'.
	 */
	public EmpleadoBitacoraPosicion[] findWhereFechaEquals(Date fecha) throws EmpleadoBitacoraPosicionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha = ? ORDER BY fecha", new Object[] { fecha==null ? null : new java.sql.Timestamp( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the empleado_bitacora_posicion table that match the criteria 'velocidad_m_x_seg = :velocidadMXSeg'.
	 */
	public EmpleadoBitacoraPosicion[] findWhereVelocidadMXSegEquals(double velocidadMXSeg) throws EmpleadoBitacoraPosicionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE velocidad_m_x_seg = ? ORDER BY velocidad_m_x_seg", new Object[] {  new Double(velocidadMXSeg) } );
	}

	/** 
	 * Returns all rows from the empleado_bitacora_posicion table that match the criteria 'direccion_avance = :direccionAvance'.
	 */
	public EmpleadoBitacoraPosicion[] findWhereDireccionAvanceEquals(double direccionAvance) throws EmpleadoBitacoraPosicionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE direccion_avance = ? ORDER BY direccion_avance", new Object[] {  new Double(direccionAvance) } );
	}

	/**
	 * Method 'EmpleadoBitacoraPosicionDaoImpl'
	 * 
	 */
	public EmpleadoBitacoraPosicionDaoImpl()
	{
	}

	/**
	 * Method 'EmpleadoBitacoraPosicionDaoImpl'
	 * 
	 * @param userConn
	 */
	public EmpleadoBitacoraPosicionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "empleado_bitacora_posicion";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected EmpleadoBitacoraPosicion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			EmpleadoBitacoraPosicion dto = new EmpleadoBitacoraPosicion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected EmpleadoBitacoraPosicion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			EmpleadoBitacoraPosicion dto = new EmpleadoBitacoraPosicion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		EmpleadoBitacoraPosicion ret[] = new EmpleadoBitacoraPosicion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(EmpleadoBitacoraPosicion dto, ResultSet rs) throws SQLException
	{
		dto.setIdBitacoraPosicion( rs.getLong( COLUMN_ID_BITACORA_POSICION ) );
		dto.setIdEmpleado( rs.getInt( COLUMN_ID_EMPLEADO ) );
		dto.setLatitud( rs.getDouble( COLUMN_LATITUD ) );
		dto.setLongitud( rs.getDouble( COLUMN_LONGITUD ) );
		dto.setFecha( rs.getTimestamp(COLUMN_FECHA ) );
		dto.setVelocidadMXSeg( rs.getDouble( COLUMN_VELOCIDAD_M_X_SEG ) );
		if (rs.wasNull()) {
			dto.setVelocidadMXSegNull( true );
		}
		
		dto.setDireccionAvance( rs.getDouble( COLUMN_DIRECCION_AVANCE ) );
		if (rs.wasNull()) {
			dto.setDireccionAvanceNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(EmpleadoBitacoraPosicion dto)
	{
		dto.setIdBitacoraPosicionModified( false );
		dto.setIdEmpleadoModified( false );
		dto.setLatitudModified( false );
		dto.setLongitudModified( false );
		dto.setFechaModified( false );
		dto.setVelocidadMXSegModified( false );
		dto.setDireccionAvanceModified( false );
	}

	/** 
	 * Returns all rows from the empleado_bitacora_posicion table that match the specified arbitrary SQL statement
	 */
	public EmpleadoBitacoraPosicion[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmpleadoBitacoraPosicionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpleadoBitacoraPosicionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the empleado_bitacora_posicion table that match the specified arbitrary SQL statement
	 */
	public EmpleadoBitacoraPosicion[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmpleadoBitacoraPosicionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EmpleadoBitacoraPosicionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
