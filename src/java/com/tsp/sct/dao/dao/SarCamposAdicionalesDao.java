/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface SarCamposAdicionalesDao
{
	/** 
	 * Inserts a new row in the sar_campos_adicionales table.
	 */
	public SarCamposAdicionalesPk insert(SarCamposAdicionales dto) throws SarCamposAdicionalesDaoException;

	/** 
	 * Updates a single row in the sar_campos_adicionales table.
	 */
	public void update(SarCamposAdicionalesPk pk, SarCamposAdicionales dto) throws SarCamposAdicionalesDaoException;

	/** 
	 * Deletes a single row in the sar_campos_adicionales table.
	 */
	public void delete(SarCamposAdicionalesPk pk) throws SarCamposAdicionalesDaoException;

	/** 
	 * Returns the rows from the sar_campos_adicionales table that matches the specified primary-key value.
	 */
	public SarCamposAdicionales findByPrimaryKey(SarCamposAdicionalesPk pk) throws SarCamposAdicionalesDaoException;

	/** 
	 * Returns all rows from the sar_campos_adicionales table that match the criteria 'ID_SAR_USUARIO = :idSarUsuario'.
	 */
	public SarCamposAdicionales findByPrimaryKey(int idSarUsuario) throws SarCamposAdicionalesDaoException;

	/** 
	 * Returns all rows from the sar_campos_adicionales table that match the criteria ''.
	 */
	public SarCamposAdicionales[] findAll() throws SarCamposAdicionalesDaoException;

	/** 
	 * Returns all rows from the sar_campos_adicionales table that match the criteria 'ID_SAR_USUARIO = :idSarUsuario'.
	 */
	public SarCamposAdicionales[] findWhereIdSarUsuarioEquals(int idSarUsuario) throws SarCamposAdicionalesDaoException;

	/** 
	 * Returns all rows from the sar_campos_adicionales table that match the criteria 'EXT_REQ_ORDEN_COMPRA = :extReqOrdenCompra'.
	 */
	public SarCamposAdicionales[] findWhereExtReqOrdenCompraEquals(int extReqOrdenCompra) throws SarCamposAdicionalesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the sar_campos_adicionales table that match the specified arbitrary SQL statement
	 */
	public SarCamposAdicionales[] findByDynamicSelect(String sql, Object[] sqlParams) throws SarCamposAdicionalesDaoException;

	/** 
	 * Returns all rows from the sar_campos_adicionales table that match the specified arbitrary SQL statement
	 */
	public SarCamposAdicionales[] findByDynamicWhere(String sql, Object[] sqlParams) throws SarCamposAdicionalesDaoException;

}
