/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface ReporteConfigurableDao
{
	/** 
	 * Inserts a new row in the reporte_configurable table.
	 */
	public ReporteConfigurablePk insert(ReporteConfigurable dto) throws ReporteConfigurableDaoException;

	/** 
	 * Updates a single row in the reporte_configurable table.
	 */
	public void update(ReporteConfigurablePk pk, ReporteConfigurable dto) throws ReporteConfigurableDaoException;

	/** 
	 * Deletes a single row in the reporte_configurable table.
	 */
	public void delete(ReporteConfigurablePk pk) throws ReporteConfigurableDaoException;

	/** 
	 * Returns the rows from the reporte_configurable table that matches the specified primary-key value.
	 */
	public ReporteConfigurable findByPrimaryKey(ReporteConfigurablePk pk) throws ReporteConfigurableDaoException;

	/** 
	 * Returns all rows from the reporte_configurable table that match the criteria 'ID_CONFIGURACION = :idConfiguracion'.
	 */
	public ReporteConfigurable findByPrimaryKey(int idConfiguracion) throws ReporteConfigurableDaoException;

	/** 
	 * Returns all rows from the reporte_configurable table that match the criteria ''.
	 */
	public ReporteConfigurable[] findAll() throws ReporteConfigurableDaoException;

	/** 
	 * Returns all rows from the reporte_configurable table that match the criteria 'ID_CONFIGURACION = :idConfiguracion'.
	 */
	public ReporteConfigurable[] findWhereIdConfiguracionEquals(int idConfiguracion) throws ReporteConfigurableDaoException;

	/** 
	 * Returns all rows from the reporte_configurable table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public ReporteConfigurable[] findWhereIdEmpresaEquals(int idEmpresa) throws ReporteConfigurableDaoException;

	/** 
	 * Returns all rows from the reporte_configurable table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public ReporteConfigurable[] findWhereIdEstatusEquals(int idEstatus) throws ReporteConfigurableDaoException;

	/** 
	 * Returns all rows from the reporte_configurable table that match the criteria 'ID_TIPO_REPORTE = :idTipoReporte'.
	 */
	public ReporteConfigurable[] findWhereIdTipoReporteEquals(int idTipoReporte) throws ReporteConfigurableDaoException;

	/** 
	 * Returns all rows from the reporte_configurable table that match the criteria 'ID_DIAS = :idDias'.
	 */
	public ReporteConfigurable[] findWhereIdDiasEquals(String idDias) throws ReporteConfigurableDaoException;

	/** 
	 * Returns all rows from the reporte_configurable table that match the criteria 'CORREOS = :correos'.
	 */
	public ReporteConfigurable[] findWhereCorreosEquals(String correos) throws ReporteConfigurableDaoException;

	/** 
	 * Returns all rows from the reporte_configurable table that match the criteria 'FILTROS = :filtros'.
	 */
	public ReporteConfigurable[] findWhereFiltrosEquals(String filtros) throws ReporteConfigurableDaoException;

	/** 
	 * Returns all rows from the reporte_configurable table that match the criteria 'MAX_TIEMPO_ATRAS = :maxTiempoAtras'.
	 */
	public ReporteConfigurable[] findWhereMaxTiempoAtrasEquals(String maxTiempoAtras) throws ReporteConfigurableDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the reporte_configurable table that match the specified arbitrary SQL statement
	 */
	public ReporteConfigurable[] findByDynamicSelect(String sql, Object[] sqlParams) throws ReporteConfigurableDaoException;

	/** 
	 * Returns all rows from the reporte_configurable table that match the specified arbitrary SQL statement
	 */
	public ReporteConfigurable[] findByDynamicWhere(String sql, Object[] sqlParams) throws ReporteConfigurableDaoException;

}
