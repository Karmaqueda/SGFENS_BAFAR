/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface CertificadoDigitalDao
{
	/** 
	 * Inserts a new row in the certificado_digital table.
	 */
	public CertificadoDigitalPk insert(CertificadoDigital dto) throws CertificadoDigitalDaoException;

	/** 
	 * Updates a single row in the certificado_digital table.
	 */
	public void update(CertificadoDigitalPk pk, CertificadoDigital dto) throws CertificadoDigitalDaoException;

	/** 
	 * Deletes a single row in the certificado_digital table.
	 */
	public void delete(CertificadoDigitalPk pk) throws CertificadoDigitalDaoException;

	/** 
	 * Returns the rows from the certificado_digital table that matches the specified primary-key value.
	 */
	public CertificadoDigital findByPrimaryKey(CertificadoDigitalPk pk) throws CertificadoDigitalDaoException;

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'ID_CERTIFICADO_DIGITAL = :idCertificadoDigital'.
	 */
	public CertificadoDigital findByPrimaryKey(int idCertificadoDigital) throws CertificadoDigitalDaoException;

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria ''.
	 */
	public CertificadoDigital[] findAll() throws CertificadoDigitalDaoException;

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'ID_CERTIFICADO_DIGITAL = :idCertificadoDigital'.
	 */
	public CertificadoDigital[] findWhereIdCertificadoDigitalEquals(int idCertificadoDigital) throws CertificadoDigitalDaoException;

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public CertificadoDigital[] findWhereIdEmpresaEquals(int idEmpresa) throws CertificadoDigitalDaoException;

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'NOMBRE_CER = :nombreCer'.
	 */
	public CertificadoDigital[] findWhereNombreCerEquals(String nombreCer) throws CertificadoDigitalDaoException;

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'NOMBRE_KEY = :nombreKey'.
	 */
	public CertificadoDigital[] findWhereNombreKeyEquals(String nombreKey) throws CertificadoDigitalDaoException;

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'PASSWORD = :password'.
	 */
	public CertificadoDigital[] findWherePasswordEquals(String password) throws CertificadoDigitalDaoException;

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'FECHA_CADUCIDAD = :fechaCaducidad'.
	 */
	public CertificadoDigital[] findWhereFechaCaducidadEquals(Date fechaCaducidad) throws CertificadoDigitalDaoException;

	/** 
	 * Returns all rows from the certificado_digital table that match the criteria 'NO_CERTIFICADO = :noCertificado'.
	 */
	public CertificadoDigital[] findWhereNoCertificadoEquals(String noCertificado) throws CertificadoDigitalDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the certificado_digital table that match the specified arbitrary SQL statement
	 */
	public CertificadoDigital[] findByDynamicSelect(String sql, Object[] sqlParams) throws CertificadoDigitalDaoException;

	/** 
	 * Returns all rows from the certificado_digital table that match the specified arbitrary SQL statement
	 */
	public CertificadoDigital[] findByDynamicWhere(String sql, Object[] sqlParams) throws CertificadoDigitalDaoException;

}
