/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface CxcNotaDao
{
	/** 
	 * Inserts a new row in the cxc_nota table.
	 */
	public CxcNotaPk insert(CxcNota dto) throws CxcNotaDaoException;

	/** 
	 * Updates a single row in the cxc_nota table.
	 */
	public void update(CxcNotaPk pk, CxcNota dto) throws CxcNotaDaoException;

	/** 
	 * Deletes a single row in the cxc_nota table.
	 */
	public void delete(CxcNotaPk pk) throws CxcNotaDaoException;

	/** 
	 * Returns the rows from the cxc_nota table that matches the specified primary-key value.
	 */
	public CxcNota findByPrimaryKey(CxcNotaPk pk) throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the criteria 'ID_CXC_NOTA = :idCxcNota'.
	 */
	public CxcNota findByPrimaryKey(int idCxcNota) throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the criteria ''.
	 */
	public CxcNota[] findAll() throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the criteria 'ID_CXC_NOTA = :idCxcNota'.
	 */
	public CxcNota[] findWhereIdCxcNotaEquals(int idCxcNota) throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public CxcNota[] findWhereIdEmpresaEquals(int idEmpresa) throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public CxcNota[] findWhereIdUsuarioEquals(int idUsuario) throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public CxcNota[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the criteria 'ID_PEDIDO = :idPedido'.
	 */
	public CxcNota[] findWhereIdPedidoEquals(int idPedido) throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the criteria 'ID_CXP_VALE_AZUL = :idCxpValeAzul'.
	 */
	public CxcNota[] findWhereIdCxpValeAzulEquals(int idCxpValeAzul) throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the criteria 'NOTA = :nota'.
	 */
	public CxcNota[] findWhereNotaEquals(String nota) throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the criteria 'FECHA_HORA_CAPTURA = :fechaHoraCaptura'.
	 */
	public CxcNota[] findWhereFechaHoraCapturaEquals(Date fechaHoraCaptura) throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public CxcNota[] findWhereIdEstatusEquals(int idEstatus) throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the criteria 'ID_CXP_COMPROBANTE_FISCAL = :idCxpComprobanteFiscal'.
	 */
	public CxcNota[] findWhereIdCxpComprobanteFiscalEquals(int idCxpComprobanteFiscal) throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the criteria 'ID_CR_CRED_CLIENTE = :idCrCredCliente'.
	 */
	public CxcNota[] findWhereIdCrCredClienteEquals(int idCrCredCliente) throws CxcNotaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the cxc_nota table that match the specified arbitrary SQL statement
	 */
	public CxcNota[] findByDynamicSelect(String sql, Object[] sqlParams) throws CxcNotaDaoException;

	/** 
	 * Returns all rows from the cxc_nota table that match the specified arbitrary SQL statement
	 */
	public CxcNota[] findByDynamicWhere(String sql, Object[] sqlParams) throws CxcNotaDaoException;

}
