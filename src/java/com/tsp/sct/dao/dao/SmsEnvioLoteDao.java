/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface SmsEnvioLoteDao
{
	/** 
	 * Inserts a new row in the sms_envio_lote table.
	 */
	public SmsEnvioLotePk insert(SmsEnvioLote dto) throws SmsEnvioLoteDaoException;

	/** 
	 * Updates a single row in the sms_envio_lote table.
	 */
	public void update(SmsEnvioLotePk pk, SmsEnvioLote dto) throws SmsEnvioLoteDaoException;

	/** 
	 * Deletes a single row in the sms_envio_lote table.
	 */
	public void delete(SmsEnvioLotePk pk) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns the rows from the sms_envio_lote table that matches the specified primary-key value.
	 */
	public SmsEnvioLote findByPrimaryKey(SmsEnvioLotePk pk) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_sms_envio_lote = :idSmsEnvioLote'.
	 */
	public SmsEnvioLote findByPrimaryKey(int idSmsEnvioLote) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria ''.
	 */
	public SmsEnvioLote[] findAll() throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_sms_envio_lote = :idSmsEnvioLote'.
	 */
	public SmsEnvioLote[] findWhereIdSmsEnvioLoteEquals(int idSmsEnvioLote) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public SmsEnvioLote[] findWhereIdEmpresaEquals(int idEmpresa) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public SmsEnvioLote[] findWhereIdEstatusEquals(int idEstatus) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_sms_plantilla = :idSmsPlantilla'.
	 */
	public SmsEnvioLote[] findWhereIdSmsPlantillaEquals(int idSmsPlantilla) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'fecha_hr_captura = :fechaHrCaptura'.
	 */
	public SmsEnvioLote[] findWhereFechaHrCapturaEquals(Date fechaHrCaptura) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'fecha_hr_programa_envio = :fechaHrProgramaEnvio'.
	 */
	public SmsEnvioLote[] findWhereFechaHrProgramaEnvioEquals(Date fechaHrProgramaEnvio) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_sms_dispositivo_movil = :idSmsDispositivoMovil'.
	 */
	public SmsEnvioLote[] findWhereIdSmsDispositivoMovilEquals(int idSmsDispositivoMovil) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'cantidad_destinatarios = :cantidadDestinatarios'.
	 */
	public SmsEnvioLote[] findWhereCantidadDestinatariosEquals(int cantidadDestinatarios) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'cantidad_creditos_sms = :cantidadCreditosSms'.
	 */
	public SmsEnvioLote[] findWhereCantidadCreditosSmsEquals(int cantidadCreditosSms) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'envio_inmediato = :envioInmediato'.
	 */
	public SmsEnvioLote[] findWhereEnvioInmediatoEquals(int envioInmediato) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'is_sms_sistema = :isSmsSistema'.
	 */
	public SmsEnvioLote[] findWhereIsSmsSistemaEquals(int isSmsSistema) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_usuario_pretoriano = :idUsuarioPretoriano'.
	 */
	public SmsEnvioLote[] findWhereIdUsuarioPretorianoEquals(int idUsuarioPretoriano) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'id_usuario_ventas = :idUsuarioVentas'.
	 */
	public SmsEnvioLote[] findWhereIdUsuarioVentasEquals(int idUsuarioVentas) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'asunto = :asunto'.
	 */
	public SmsEnvioLote[] findWhereAsuntoEquals(String asunto) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the criteria 'mensaje = :mensaje'.
	 */
	public SmsEnvioLote[] findWhereMensajeEquals(String mensaje) throws SmsEnvioLoteDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the sms_envio_lote table that match the specified arbitrary SQL statement
	 */
	public SmsEnvioLote[] findByDynamicSelect(String sql, Object[] sqlParams) throws SmsEnvioLoteDaoException;

	/** 
	 * Returns all rows from the sms_envio_lote table that match the specified arbitrary SQL statement
	 */
	public SmsEnvioLote[] findByDynamicWhere(String sql, Object[] sqlParams) throws SmsEnvioLoteDaoException;

}
