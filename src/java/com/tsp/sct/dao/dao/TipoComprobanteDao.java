/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface TipoComprobanteDao
{
	/** 
	 * Inserts a new row in the tipo_comprobante table.
	 */
	public TipoComprobantePk insert(TipoComprobante dto) throws TipoComprobanteDaoException;

	/** 
	 * Updates a single row in the tipo_comprobante table.
	 */
	public void update(TipoComprobantePk pk, TipoComprobante dto) throws TipoComprobanteDaoException;

	/** 
	 * Deletes a single row in the tipo_comprobante table.
	 */
	public void delete(TipoComprobantePk pk) throws TipoComprobanteDaoException;

	/** 
	 * Returns the rows from the tipo_comprobante table that matches the specified primary-key value.
	 */
	public TipoComprobante findByPrimaryKey(TipoComprobantePk pk) throws TipoComprobanteDaoException;

	/** 
	 * Returns all rows from the tipo_comprobante table that match the criteria 'ID_TIPO_COMPROBANTE = :idTipoComprobante'.
	 */
	public TipoComprobante findByPrimaryKey(int idTipoComprobante) throws TipoComprobanteDaoException;

	/** 
	 * Returns all rows from the tipo_comprobante table that match the criteria ''.
	 */
	public TipoComprobante[] findAll() throws TipoComprobanteDaoException;

	/** 
	 * Returns all rows from the tipo_comprobante table that match the criteria 'ID_TIPO_COMPROBANTE = :idTipoComprobante'.
	 */
	public TipoComprobante[] findWhereIdTipoComprobanteEquals(int idTipoComprobante) throws TipoComprobanteDaoException;

	/** 
	 * Returns all rows from the tipo_comprobante table that match the criteria 'NOMBRE = :nombre'.
	 */
	public TipoComprobante[] findWhereNombreEquals(String nombre) throws TipoComprobanteDaoException;

	/** 
	 * Returns all rows from the tipo_comprobante table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public TipoComprobante[] findWhereDescripcionEquals(String descripcion) throws TipoComprobanteDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the tipo_comprobante table that match the specified arbitrary SQL statement
	 */
	public TipoComprobante[] findByDynamicSelect(String sql, Object[] sqlParams) throws TipoComprobanteDaoException;

	/** 
	 * Returns all rows from the tipo_comprobante table that match the specified arbitrary SQL statement
	 */
	public TipoComprobante[] findByDynamicWhere(String sql, Object[] sqlParams) throws TipoComprobanteDaoException;

}
