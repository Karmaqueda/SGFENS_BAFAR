/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface ContribuyentesObligadosDao
{
	/** 
	 * Inserts a new row in the contribuyentes_obligados table.
	 */
	public ContribuyentesObligadosPk insert(ContribuyentesObligados dto) throws ContribuyentesObligadosDaoException;

	/** 
	 * Updates a single row in the contribuyentes_obligados table.
	 */
	public void update(ContribuyentesObligadosPk pk, ContribuyentesObligados dto) throws ContribuyentesObligadosDaoException;

	/** 
	 * Deletes a single row in the contribuyentes_obligados table.
	 */
	public void delete(ContribuyentesObligadosPk pk) throws ContribuyentesObligadosDaoException;

	/** 
	 * Returns the rows from the contribuyentes_obligados table that matches the specified primary-key value.
	 */
	public ContribuyentesObligados findByPrimaryKey(ContribuyentesObligadosPk pk) throws ContribuyentesObligadosDaoException;

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'ID_CONTRIBUYENTES_OBLIGADOS = :idContribuyentesObligados'.
	 */
	public ContribuyentesObligados findByPrimaryKey(int idContribuyentesObligados) throws ContribuyentesObligadosDaoException;

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria ''.
	 */
	public ContribuyentesObligados[] findAll() throws ContribuyentesObligadosDaoException;

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'ID_CONTRIBUYENTES_OBLIGADOS = :idContribuyentesObligados'.
	 */
	public ContribuyentesObligados[] findWhereIdContribuyentesObligadosEquals(int idContribuyentesObligados) throws ContribuyentesObligadosDaoException;

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'RFC_CONTRIBUYENTE = :rfcContribuyente'.
	 */
	public ContribuyentesObligados[] findWhereRfcContribuyenteEquals(String rfcContribuyente) throws ContribuyentesObligadosDaoException;

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'VALIDEZ_OBLIGACIONES = :validezObligaciones'.
	 */
	public ContribuyentesObligados[] findWhereValidezObligacionesEquals(int validezObligaciones) throws ContribuyentesObligadosDaoException;

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'ESTATUS_CERTIFICADO = :estatusCertificado'.
	 */
	public ContribuyentesObligados[] findWhereEstatusCertificadoEquals(String estatusCertificado) throws ContribuyentesObligadosDaoException;

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'NO_CERTIFICADO = :noCertificado'.
	 */
	public ContribuyentesObligados[] findWhereNoCertificadoEquals(String noCertificado) throws ContribuyentesObligadosDaoException;

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'FECHA_FINAL = :fechaFinal'.
	 */
	public ContribuyentesObligados[] findWhereFechaFinalEquals(Date fechaFinal) throws ContribuyentesObligadosDaoException;

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'FECHA_INICIO = :fechaInicio'.
	 */
	public ContribuyentesObligados[] findWhereFechaInicioEquals(Date fechaInicio) throws ContribuyentesObligadosDaoException;

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the criteria 'FECHA_REGISTRO = :fechaRegistro'.
	 */
	public ContribuyentesObligados[] findWhereFechaRegistroEquals(Date fechaRegistro) throws ContribuyentesObligadosDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the specified arbitrary SQL statement
	 */
	public ContribuyentesObligados[] findByDynamicSelect(String sql, Object[] sqlParams) throws ContribuyentesObligadosDaoException;

	/** 
	 * Returns all rows from the contribuyentes_obligados table that match the specified arbitrary SQL statement
	 */
	public ContribuyentesObligados[] findByDynamicWhere(String sql, Object[] sqlParams) throws ContribuyentesObligadosDaoException;

}
