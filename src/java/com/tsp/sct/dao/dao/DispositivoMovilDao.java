/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface DispositivoMovilDao
{
	/** 
	 * Inserts a new row in the dispositivo_movil table.
	 */
	public DispositivoMovilPk insert(DispositivoMovil dto) throws DispositivoMovilDaoException;

	/** 
	 * Updates a single row in the dispositivo_movil table.
	 */
	public void update(DispositivoMovilPk pk, DispositivoMovil dto) throws DispositivoMovilDaoException;

	/** 
	 * Deletes a single row in the dispositivo_movil table.
	 */
	public void delete(DispositivoMovilPk pk) throws DispositivoMovilDaoException;

	/** 
	 * Returns the rows from the dispositivo_movil table that matches the specified primary-key value.
	 */
	public DispositivoMovil findByPrimaryKey(DispositivoMovilPk pk) throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'ID_DISPOSITIVO = :idDispositivo'.
	 */
	public DispositivoMovil findByPrimaryKey(int idDispositivo) throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria ''.
	 */
	public DispositivoMovil[] findAll() throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'ID_DISPOSITIVO = :idDispositivo'.
	 */
	public DispositivoMovil[] findWhereIdDispositivoEquals(int idDispositivo) throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public DispositivoMovil[] findWhereIdEmpresaEquals(int idEmpresa) throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public DispositivoMovil[] findWhereIdEstatusEquals(int idEstatus) throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'IMEI = :imei'.
	 */
	public DispositivoMovil[] findWhereImeiEquals(String imei) throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'MARCA = :marca'.
	 */
	public DispositivoMovil[] findWhereMarcaEquals(String marca) throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'MODELO = :modelo'.
	 */
	public DispositivoMovil[] findWhereModeloEquals(String modelo) throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'NUMERO_SERIE = :numeroSerie'.
	 */
	public DispositivoMovil[] findWhereNumeroSerieEquals(String numeroSerie) throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'ASIGNADO = :asignado'.
	 */
	public DispositivoMovil[] findWhereAsignadoEquals(short asignado) throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'ALIAS_TELEFONO = :aliasTelefono'.
	 */
	public DispositivoMovil[] findWhereAliasTelefonoEquals(String aliasTelefono) throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'REPORTE_ROBO = :reporteRobo'.
	 */
	public DispositivoMovil[] findWhereReporteRoboEquals(int reporteRobo) throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the criteria 'PCT_PILA = :pctPila'.
	 */
	public DispositivoMovil[] findWherePctPilaEquals(double pctPila) throws DispositivoMovilDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the dispositivo_movil table that match the specified arbitrary SQL statement
	 */
	public DispositivoMovil[] findByDynamicSelect(String sql, Object[] sqlParams) throws DispositivoMovilDaoException;

	/** 
	 * Returns all rows from the dispositivo_movil table that match the specified arbitrary SQL statement
	 */
	public DispositivoMovil[] findByDynamicWhere(String sql, Object[] sqlParams) throws DispositivoMovilDaoException;

}
