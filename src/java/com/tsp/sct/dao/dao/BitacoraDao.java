/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface BitacoraDao
{
	/** 
	 * Inserts a new row in the bitacora table.
	 */
	public BitacoraPk insert(Bitacora dto) throws BitacoraDaoException;

	/** 
	 * Updates a single row in the bitacora table.
	 */
	public void update(BitacoraPk pk, Bitacora dto) throws BitacoraDaoException;

	/** 
	 * Deletes a single row in the bitacora table.
	 */
	public void delete(BitacoraPk pk) throws BitacoraDaoException;

	/** 
	 * Returns the rows from the bitacora table that matches the specified primary-key value.
	 */
	public Bitacora findByPrimaryKey(BitacoraPk pk) throws BitacoraDaoException;

	/** 
	 * Returns all rows from the bitacora table that match the criteria 'ID_BITACORA = :idBitacora'.
	 */
	public Bitacora findByPrimaryKey(int idBitacora) throws BitacoraDaoException;

	/** 
	 * Returns all rows from the bitacora table that match the criteria ''.
	 */
	public Bitacora[] findAll() throws BitacoraDaoException;

	/** 
	 * Returns all rows from the bitacora table that match the criteria 'ID_BITACORA = :idBitacora'.
	 */
	public Bitacora[] findWhereIdBitacoraEquals(int idBitacora) throws BitacoraDaoException;

	/** 
	 * Returns all rows from the bitacora table that match the criteria 'ID_APLICATIVO = :idAplicativo'.
	 */
	public Bitacora[] findWhereIdAplicativoEquals(int idAplicativo) throws BitacoraDaoException;

	/** 
	 * Returns all rows from the bitacora table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public Bitacora[] findWhereIdUsuarioEquals(int idUsuario) throws BitacoraDaoException;

	/** 
	 * Returns all rows from the bitacora table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Bitacora[] findWhereIdEmpresaEquals(int idEmpresa) throws BitacoraDaoException;

	/** 
	 * Returns all rows from the bitacora table that match the criteria 'USUARIO_NOMBRE = :usuarioNombre'.
	 */
	public Bitacora[] findWhereUsuarioNombreEquals(String usuarioNombre) throws BitacoraDaoException;

	/** 
	 * Returns all rows from the bitacora table that match the criteria 'DESCRIPCION_EVENTO = :descripcionEvento'.
	 */
	public Bitacora[] findWhereDescripcionEventoEquals(String descripcionEvento) throws BitacoraDaoException;

	/** 
	 * Returns all rows from the bitacora table that match the criteria 'FECHA = :fecha'.
	 */
	public Bitacora[] findWhereFechaEquals(Date fecha) throws BitacoraDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the bitacora table that match the specified arbitrary SQL statement
	 */
	public Bitacora[] findByDynamicSelect(String sql, Object[] sqlParams) throws BitacoraDaoException;

	/** 
	 * Returns all rows from the bitacora table that match the specified arbitrary SQL statement
	 */
	public Bitacora[] findByDynamicWhere(String sql, Object[] sqlParams) throws BitacoraDaoException;

}
