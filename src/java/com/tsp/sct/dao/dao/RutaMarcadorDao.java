/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface RutaMarcadorDao
{
	/** 
	 * Inserts a new row in the ruta_marcador table.
	 */
	public RutaMarcadorPk insert(RutaMarcador dto) throws RutaMarcadorDaoException;

	/** 
	 * Updates a single row in the ruta_marcador table.
	 */
	public void update(RutaMarcadorPk pk, RutaMarcador dto) throws RutaMarcadorDaoException;

	/** 
	 * Deletes a single row in the ruta_marcador table.
	 */
	public void delete(RutaMarcadorPk pk) throws RutaMarcadorDaoException;

	/** 
	 * Returns the rows from the ruta_marcador table that matches the specified primary-key value.
	 */
	public RutaMarcador findByPrimaryKey(RutaMarcadorPk pk) throws RutaMarcadorDaoException;

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'ID_RUTA_MARCADOR = :idRutaMarcador'.
	 */
	public RutaMarcador findByPrimaryKey(int idRutaMarcador) throws RutaMarcadorDaoException;

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria ''.
	 */
	public RutaMarcador[] findAll() throws RutaMarcadorDaoException;

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'ID_RUTA_MARCADOR = :idRutaMarcador'.
	 */
	public RutaMarcador[] findWhereIdRutaMarcadorEquals(int idRutaMarcador) throws RutaMarcadorDaoException;

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'ID_RUTA = :idRuta'.
	 */
	public RutaMarcador[] findWhereIdRutaEquals(int idRuta) throws RutaMarcadorDaoException;

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'INFORMACION_MARCADOR = :informacionMarcador'.
	 */
	public RutaMarcador[] findWhereInformacionMarcadorEquals(String informacionMarcador) throws RutaMarcadorDaoException;

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'LATITUD_MARCADOR = :latitudMarcador'.
	 */
	public RutaMarcador[] findWhereLatitudMarcadorEquals(String latitudMarcador) throws RutaMarcadorDaoException;

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'LONGITUD_MARCADOR = :longitudMarcador'.
	 */
	public RutaMarcador[] findWhereLongitudMarcadorEquals(String longitudMarcador) throws RutaMarcadorDaoException;

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'ID_PROSPECTO = :idProspecto'.
	 */
	public RutaMarcador[] findWhereIdProspectoEquals(int idProspecto) throws RutaMarcadorDaoException;

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public RutaMarcador[] findWhereIdClienteEquals(int idCliente) throws RutaMarcadorDaoException;

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'IS_VISITADO = :isVisitado'.
	 */
	public RutaMarcador[] findWhereIsVisitadoEquals(short isVisitado) throws RutaMarcadorDaoException;

	/** 
	 * Returns all rows from the ruta_marcador table that match the criteria 'DISTANCIA_PUNTO = :distanciaPunto'.
	 */
	public RutaMarcador[] findWhereDistanciaPuntoEquals(double distanciaPunto) throws RutaMarcadorDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ruta_marcador table that match the specified arbitrary SQL statement
	 */
	public RutaMarcador[] findByDynamicSelect(String sql, Object[] sqlParams) throws RutaMarcadorDaoException;

	/** 
	 * Returns all rows from the ruta_marcador table that match the specified arbitrary SQL statement
	 */
	public RutaMarcador[] findByDynamicWhere(String sql, Object[] sqlParams) throws RutaMarcadorDaoException;

}
