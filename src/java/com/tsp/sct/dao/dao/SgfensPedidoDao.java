/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface SgfensPedidoDao
{
	/** 
	 * Inserts a new row in the sgfens_pedido table.
	 */
	public SgfensPedidoPk insert(SgfensPedido dto) throws SgfensPedidoDaoException;

	/** 
	 * Updates a single row in the sgfens_pedido table.
	 */
	public void update(SgfensPedidoPk pk, SgfensPedido dto) throws SgfensPedidoDaoException;

	/** 
	 * Deletes a single row in the sgfens_pedido table.
	 */
	public void delete(SgfensPedidoPk pk) throws SgfensPedidoDaoException;

	/** 
	 * Returns the rows from the sgfens_pedido table that matches the specified primary-key value.
	 */
	public SgfensPedido findByPrimaryKey(SgfensPedidoPk pk) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_PEDIDO = :idPedido'.
	 */
	public SgfensPedido findByPrimaryKey(int idPedido) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria ''.
	 */
	public SgfensPedido[] findAll() throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_PEDIDO = :idPedido'.
	 */
	public SgfensPedido[] findWhereIdPedidoEquals(int idPedido) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_USUARIO_VENDEDOR = :idUsuarioVendedor'.
	 */
	public SgfensPedido[] findWhereIdUsuarioVendedorEquals(int idUsuarioVendedor) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public SgfensPedido[] findWhereIdEmpresaEquals(int idEmpresa) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public SgfensPedido[] findWhereIdClienteEquals(int idCliente) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'CONSECUTIVO_PEDIDO = :consecutivoPedido'.
	 */
	public SgfensPedido[] findWhereConsecutivoPedidoEquals(int consecutivoPedido) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FOLIO_PEDIDO = :folioPedido'.
	 */
	public SgfensPedido[] findWhereFolioPedidoEquals(String folioPedido) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FECHA_PEDIDO = :fechaPedido'.
	 */
	public SgfensPedido[] findWhereFechaPedidoEquals(Date fechaPedido) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'TIPO_MONEDA = :tipoMoneda'.
	 */
	public SgfensPedido[] findWhereTipoMonedaEquals(String tipoMoneda) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'TIEMPO_ENTREGA_DIAS = :tiempoEntregaDias'.
	 */
	public SgfensPedido[] findWhereTiempoEntregaDiasEquals(int tiempoEntregaDias) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public SgfensPedido[] findWhereComentariosEquals(String comentarios) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'DESCUENTO_TASA = :descuentoTasa'.
	 */
	public SgfensPedido[] findWhereDescuentoTasaEquals(double descuentoTasa) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'DESCUENTO_MONTO = :descuentoMonto'.
	 */
	public SgfensPedido[] findWhereDescuentoMontoEquals(double descuentoMonto) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'SUBTOTAL = :subtotal'.
	 */
	public SgfensPedido[] findWhereSubtotalEquals(double subtotal) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'TOTAL = :total'.
	 */
	public SgfensPedido[] findWhereTotalEquals(double total) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'DESCUENTO_MOTIVO = :descuentoMotivo'.
	 */
	public SgfensPedido[] findWhereDescuentoMotivoEquals(String descuentoMotivo) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FECHA_ENTREGA = :fechaEntrega'.
	 */
	public SgfensPedido[] findWhereFechaEntregaEquals(Date fechaEntrega) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FECHA_TENTATIVA_PAGO = :fechaTentativaPago'.
	 */
	public SgfensPedido[] findWhereFechaTentativaPagoEquals(Date fechaTentativaPago) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'SALDO_PAGADO = :saldoPagado'.
	 */
	public SgfensPedido[] findWhereSaldoPagadoEquals(double saldoPagado) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ADELANTO = :adelanto'.
	 */
	public SgfensPedido[] findWhereAdelantoEquals(double adelanto) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public SgfensPedido[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_ESTATUS_PEDIDO = :idEstatusPedido'.
	 */
	public SgfensPedido[] findWhereIdEstatusPedidoEquals(short idEstatusPedido) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'LATITUD = :latitud'.
	 */
	public SgfensPedido[] findWhereLatitudEquals(double latitud) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'LONGITUD = :longitud'.
	 */
	public SgfensPedido[] findWhereLongitudEquals(double longitud) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FOLIO_PEDIDO_MOVIL = :folioPedidoMovil'.
	 */
	public SgfensPedido[] findWhereFolioPedidoMovilEquals(String folioPedidoMovil) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'NOMBRE_IMAGEN_FIRMA = :nombreImagenFirma'.
	 */
	public SgfensPedido[] findWhereNombreImagenFirmaEquals(String nombreImagenFirma) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'IS_MODIFICADO_CONSOLA = :isModificadoConsola'.
	 */
	public SgfensPedido[] findWhereIsModificadoConsolaEquals(short isModificadoConsola) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'BONIFICACION_DEVOLUCION = :bonificacionDevolucion'.
	 */
	public SgfensPedido[] findWhereBonificacionDevolucionEquals(double bonificacionDevolucion) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_USUARIO_CONDUCTOR_ASIGNADO = :idUsuarioConductorAsignado'.
	 */
	public SgfensPedido[] findWhereIdUsuarioConductorAsignadoEquals(int idUsuarioConductorAsignado) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_USUARIO_VENDEDOR_ASIGNADO = :idUsuarioVendedorAsignado'.
	 */
	public SgfensPedido[] findWhereIdUsuarioVendedorAsignadoEquals(int idUsuarioVendedorAsignado) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_USUARIO_VENDEDOR_REASIGNADO = :idUsuarioVendedorReasignado'.
	 */
	public SgfensPedido[] findWhereIdUsuarioVendedorReasignadoEquals(int idUsuarioVendedorReasignado) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FECHA_LIMITE_REASIGANCION = :fechaLimiteReasigancion'.
	 */
	public SgfensPedido[] findWhereFechaLimiteReasigancionEquals(Date fechaLimiteReasigancion) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'CONSIGNA = :consigna'.
	 */
	public SgfensPedido[] findWhereConsignaEquals(int consigna) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'SINCRONIZACION_MICROSIP = :sincronizacionMicrosip'.
	 */
	public SgfensPedido[] findWhereSincronizacionMicrosipEquals(int sincronizacionMicrosip) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_VIA_EMBARQUE = :idViaEmbarque'.
	 */
	public SgfensPedido[] findWhereIdViaEmbarqueEquals(int idViaEmbarque) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_FOLIO_MOVIL_EMPLEADO = :idFolioMovilEmpleado'.
	 */
	public SgfensPedido[] findWhereIdFolioMovilEmpleadoEquals(int idFolioMovilEmpleado) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'FOLIO_MOVIL_EMPLEADO_GENERADO = :folioMovilEmpleadoGenerado'.
	 */
	public SgfensPedido[] findWhereFolioMovilEmpleadoGeneradoEquals(String folioMovilEmpleadoGenerado) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the criteria 'ID_ESTATUS_PEDIDO_SISTEMA_TERCERO = :idEstatusPedidoSistemaTercero'.
	 */
	public SgfensPedido[] findWhereIdEstatusPedidoSistemaTerceroEquals(int idEstatusPedidoSistemaTercero) throws SgfensPedidoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the sgfens_pedido table that match the specified arbitrary SQL statement
	 */
	public SgfensPedido[] findByDynamicSelect(String sql, Object[] sqlParams) throws SgfensPedidoDaoException;

	/** 
	 * Returns all rows from the sgfens_pedido table that match the specified arbitrary SQL statement
	 */
	public SgfensPedido[] findByDynamicWhere(String sql, Object[] sqlParams) throws SgfensPedidoDaoException;

}
