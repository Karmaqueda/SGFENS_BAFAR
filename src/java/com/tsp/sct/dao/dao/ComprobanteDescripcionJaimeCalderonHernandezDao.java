/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface ComprobanteDescripcionJaimeCalderonHernandezDao
{
	/** 
	 * Inserts a new row in the comprobante_descripcion_jaime_calderon_hernandez table.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandezPk insert(ComprobanteDescripcionJaimeCalderonHernandez dto) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Updates a single row in the comprobante_descripcion_jaime_calderon_hernandez table.
	 */
	public void update(ComprobanteDescripcionJaimeCalderonHernandezPk pk, ComprobanteDescripcionJaimeCalderonHernandez dto) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Deletes a single row in the comprobante_descripcion_jaime_calderon_hernandez table.
	 */
	public void delete(ComprobanteDescripcionJaimeCalderonHernandezPk pk) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns the rows from the comprobante_descripcion_jaime_calderon_hernandez table that matches the specified primary-key value.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez findByPrimaryKey(ComprobanteDescripcionJaimeCalderonHernandezPk pk) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'ID_COMPROBANTE_DESCRIPCION = :idComprobanteDescripcion'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez findByPrimaryKey(int idComprobanteDescripcion) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria ''.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findAll() throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findByComprobanteFiscal(int idComprobanteFiscal) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findByConcepto(int idConcepto) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'ID_COMPROBANTE_DESCRIPCION = :idComprobanteDescripcion'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereIdComprobanteDescripcionEquals(int idComprobanteDescripcion) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereIdConceptoEquals(int idConcepto) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereDescripcionEquals(String descripcion) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereCantidadEquals(float cantidad) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'PRECIO_UNITARIO = :precioUnitario'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWherePrecioUnitarioEquals(float precioUnitario) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'UNIDAD = :unidad'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereUnidadEquals(String unidad) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'PORCENTAJE_IMPUESTO_FLETE = :porcentajeImpuestoFlete'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWherePorcentajeImpuestoFleteEquals(String porcentajeImpuestoFlete) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'PRECIO_CONCEPTO_FLETE = :precioConceptoFlete'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWherePrecioConceptoFleteEquals(String precioConceptoFlete) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the criteria 'TOTAL_IMPUESTO_CONCEPTO_FLETE = :totalImpuestoConceptoFlete'.
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findWhereTotalImpuestoConceptoFleteEquals(String totalImpuestoConceptoFlete) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the specified arbitrary SQL statement
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findByDynamicSelect(String sql, Object[] sqlParams) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_jaime_calderon_hernandez table that match the specified arbitrary SQL statement
	 */
	public ComprobanteDescripcionJaimeCalderonHernandez[] findByDynamicWhere(String sql, Object[] sqlParams) throws ComprobanteDescripcionJaimeCalderonHernandezDaoException;

}
