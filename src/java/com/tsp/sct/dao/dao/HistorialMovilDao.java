/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface HistorialMovilDao
{
	/** 
	 * Inserts a new row in the historial_movil table.
	 */
	public HistorialMovilPk insert(HistorialMovil dto) throws HistorialMovilDaoException;

	/** 
	 * Updates a single row in the historial_movil table.
	 */
	public void update(HistorialMovilPk pk, HistorialMovil dto) throws HistorialMovilDaoException;

	/** 
	 * Deletes a single row in the historial_movil table.
	 */
	public void delete(HistorialMovilPk pk) throws HistorialMovilDaoException;

	/** 
	 * Returns the rows from the historial_movil table that matches the specified primary-key value.
	 */
	public HistorialMovil findByPrimaryKey(HistorialMovilPk pk) throws HistorialMovilDaoException;

	/** 
	 * Returns all rows from the historial_movil table that match the criteria 'ID_HISTORIAL_MOVIL = :idHistorialMovil'.
	 */
	public HistorialMovil findByPrimaryKey(int idHistorialMovil) throws HistorialMovilDaoException;

	/** 
	 * Returns all rows from the historial_movil table that match the criteria ''.
	 */
	public HistorialMovil[] findAll() throws HistorialMovilDaoException;

	/** 
	 * Returns all rows from the historial_movil table that match the criteria 'ID_HISTORIAL_MOVIL = :idHistorialMovil'.
	 */
	public HistorialMovil[] findWhereIdHistorialMovilEquals(int idHistorialMovil) throws HistorialMovilDaoException;

	/** 
	 * Returns all rows from the historial_movil table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public HistorialMovil[] findWhereIdEmpresaEquals(int idEmpresa) throws HistorialMovilDaoException;

	/** 
	 * Returns all rows from the historial_movil table that match the criteria 'IMEI = :imei'.
	 */
	public HistorialMovil[] findWhereImeiEquals(String imei) throws HistorialMovilDaoException;

	/** 
	 * Returns all rows from the historial_movil table that match the criteria 'LOCALIZACION = :localizacion'.
	 */
	public HistorialMovil[] findWhereLocalizacionEquals(String localizacion) throws HistorialMovilDaoException;

	/** 
	 * Returns all rows from the historial_movil table that match the criteria 'METODO = :metodo'.
	 */
	public HistorialMovil[] findWhereMetodoEquals(String metodo) throws HistorialMovilDaoException;

	/** 
	 * Returns all rows from the historial_movil table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public HistorialMovil[] findWhereDescripcionEquals(String descripcion) throws HistorialMovilDaoException;

	/** 
	 * Returns all rows from the historial_movil table that match the criteria 'FECHA = :fecha'.
	 */
	public HistorialMovil[] findWhereFechaEquals(Date fecha) throws HistorialMovilDaoException;

	/** 
	 * Returns all rows from the historial_movil table that match the criteria 'TIPO = :tipo'.
	 */
	public HistorialMovil[] findWhereTipoEquals(int tipo) throws HistorialMovilDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the historial_movil table that match the specified arbitrary SQL statement
	 */
	public HistorialMovil[] findByDynamicSelect(String sql, Object[] sqlParams) throws HistorialMovilDaoException;

	/** 
	 * Returns all rows from the historial_movil table that match the specified arbitrary SQL statement
	 */
	public HistorialMovil[] findByDynamicWhere(String sql, Object[] sqlParams) throws HistorialMovilDaoException;

}
