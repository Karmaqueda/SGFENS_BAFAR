/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface NominaComprobanteDescripcionDao
{
	/** 
	 * Inserts a new row in the nomina_comprobante_descripcion table.
	 */
	public NominaComprobanteDescripcionPk insert(NominaComprobanteDescripcion dto) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Updates a single row in the nomina_comprobante_descripcion table.
	 */
	public void update(NominaComprobanteDescripcionPk pk, NominaComprobanteDescripcion dto) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Deletes a single row in the nomina_comprobante_descripcion table.
	 */
	public void delete(NominaComprobanteDescripcionPk pk) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Returns the rows from the nomina_comprobante_descripcion table that matches the specified primary-key value.
	 */
	public NominaComprobanteDescripcion findByPrimaryKey(NominaComprobanteDescripcionPk pk) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion table that match the criteria 'ID_NOMINA_COMPROBANTE_DESCRIPCION = :idNominaComprobanteDescripcion'.
	 */
	public NominaComprobanteDescripcion findByPrimaryKey(int idNominaComprobanteDescripcion) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion table that match the criteria ''.
	 */
	public NominaComprobanteDescripcion[] findAll() throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion table that match the criteria 'ID_NOMINA_COMPROBANTE_DESCRIPCION = :idNominaComprobanteDescripcion'.
	 */
	public NominaComprobanteDescripcion[] findWhereIdNominaComprobanteDescripcionEquals(int idNominaComprobanteDescripcion) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion table that match the criteria 'ID_CROMPROBANTE_FISCAL = :idCromprobanteFiscal'.
	 */
	public NominaComprobanteDescripcion[] findWhereIdCromprobanteFiscalEquals(int idCromprobanteFiscal) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion table that match the criteria 'FECHA_PAGO = :fechaPago'.
	 */
	public NominaComprobanteDescripcion[] findWhereFechaPagoEquals(Date fechaPago) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion table that match the criteria 'FECHA_INICIAL_PAGO = :fechaInicialPago'.
	 */
	public NominaComprobanteDescripcion[] findWhereFechaInicialPagoEquals(Date fechaInicialPago) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion table that match the criteria 'FECHA_FIN_PAGO = :fechaFinPago'.
	 */
	public NominaComprobanteDescripcion[] findWhereFechaFinPagoEquals(Date fechaFinPago) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion table that match the criteria 'NUM_DIAS_PAGADOS = :numDiasPagados'.
	 */
	public NominaComprobanteDescripcion[] findWhereNumDiasPagadosEquals(double numDiasPagados) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion table that match the criteria 'ISR_IMPUESTO_PORCENTAJE = :isrImpuestoPorcentaje'.
	 */
	public NominaComprobanteDescripcion[] findWhereIsrImpuestoPorcentajeEquals(double isrImpuestoPorcentaje) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion table that match the criteria 'ISR_MONTO_IMPUESTO = :isrMontoImpuesto'.
	 */
	public NominaComprobanteDescripcion[] findWhereIsrMontoImpuestoEquals(double isrMontoImpuesto) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion table that match the criteria 'ID_NOMINA_REG_PATRONAL = :idNominaRegPatronal'.
	 */
	public NominaComprobanteDescripcion[] findWhereIdNominaRegPatronalEquals(int idNominaRegPatronal) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion table that match the specified arbitrary SQL statement
	 */
	public NominaComprobanteDescripcion[] findByDynamicSelect(String sql, Object[] sqlParams) throws NominaComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion table that match the specified arbitrary SQL statement
	 */
	public NominaComprobanteDescripcion[] findByDynamicWhere(String sql, Object[] sqlParams) throws NominaComprobanteDescripcionDaoException;

}
