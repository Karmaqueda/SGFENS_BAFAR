/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface AlmacenDao
{
	/** 
	 * Inserts a new row in the almacen table.
	 */
	public AlmacenPk insert(Almacen dto) throws AlmacenDaoException;

	/** 
	 * Updates a single row in the almacen table.
	 */
	public void update(AlmacenPk pk, Almacen dto) throws AlmacenDaoException;

	/** 
	 * Deletes a single row in the almacen table.
	 */
	public void delete(AlmacenPk pk) throws AlmacenDaoException;

	/** 
	 * Returns the rows from the almacen table that matches the specified primary-key value.
	 */
	public Almacen findByPrimaryKey(AlmacenPk pk) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'ID_ALMACEN = :idAlmacen'.
	 */
	public Almacen findByPrimaryKey(int idAlmacen) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria ''.
	 */
	public Almacen[] findAll() throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'ID_ALMACEN = :idAlmacen'.
	 */
	public Almacen[] findWhereIdAlmacenEquals(int idAlmacen) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Almacen[] findWhereIdEmpresaEquals(int idEmpresa) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Almacen[] findWhereIdEstatusEquals(int idEstatus) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'NOMBRE = :nombre'.
	 */
	public Almacen[] findWhereNombreEquals(String nombre) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'DIRECCION = :direccion'.
	 */
	public Almacen[] findWhereDireccionEquals(String direccion) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'AREA_ALMACEN = :areaAlmacen'.
	 */
	public Almacen[] findWhereAreaAlmacenEquals(double areaAlmacen) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'RESPONSABLE = :responsable'.
	 */
	public Almacen[] findWhereResponsableEquals(String responsable) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'PUESTO = :puesto'.
	 */
	public Almacen[] findWherePuestoEquals(String puesto) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'TELEFONO = :telefono'.
	 */
	public Almacen[] findWhereTelefonoEquals(String telefono) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'CORREO = :correo'.
	 */
	public Almacen[] findWhereCorreoEquals(String correo) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'SINCRONIZACION_MICROSIP = :sincronizacionMicrosip'.
	 */
	public Almacen[] findWhereSincronizacionMicrosipEquals(int sincronizacionMicrosip) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'isPrincipal = :isPrincipal'.
	 */
	public Almacen[] findWhereIsPrincipalEquals(int isPrincipal) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the criteria 'EXCLUIR_MOVILES = :excluirMoviles'.
	 */
	public Almacen[] findWhereExcluirMovilesEquals(int excluirMoviles) throws AlmacenDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the almacen table that match the specified arbitrary SQL statement
	 */
	public Almacen[] findByDynamicSelect(String sql, Object[] sqlParams) throws AlmacenDaoException;

	/** 
	 * Returns all rows from the almacen table that match the specified arbitrary SQL statement
	 */
	public Almacen[] findByDynamicWhere(String sql, Object[] sqlParams) throws AlmacenDaoException;

}
