/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface CrScoreDetalleDao
{
	/** 
	 * Inserts a new row in the cr_score_detalle table.
	 */
	public CrScoreDetallePk insert(CrScoreDetalle dto) throws CrScoreDetalleDaoException;

	/** 
	 * Updates a single row in the cr_score_detalle table.
	 */
	public void update(CrScoreDetallePk pk, CrScoreDetalle dto) throws CrScoreDetalleDaoException;

	/** 
	 * Deletes a single row in the cr_score_detalle table.
	 */
	public void delete(CrScoreDetallePk pk) throws CrScoreDetalleDaoException;

	/** 
	 * Returns the rows from the cr_score_detalle table that matches the specified primary-key value.
	 */
	public CrScoreDetalle findByPrimaryKey(CrScoreDetallePk pk) throws CrScoreDetalleDaoException;

	/** 
	 * Returns all rows from the cr_score_detalle table that match the criteria 'id_score_detalle = :idScoreDetalle'.
	 */
	public CrScoreDetalle findByPrimaryKey(int idScoreDetalle) throws CrScoreDetalleDaoException;

	/** 
	 * Returns all rows from the cr_score_detalle table that match the criteria ''.
	 */
	public CrScoreDetalle[] findAll() throws CrScoreDetalleDaoException;

	/** 
	 * Returns all rows from the cr_score_detalle table that match the criteria 'id_score_detalle = :idScoreDetalle'.
	 */
	public CrScoreDetalle[] findWhereIdScoreDetalleEquals(int idScoreDetalle) throws CrScoreDetalleDaoException;

	/** 
	 * Returns all rows from the cr_score_detalle table that match the criteria 'id_formulario_campo = :idFormularioCampo'.
	 */
	public CrScoreDetalle[] findWhereIdFormularioCampoEquals(int idFormularioCampo) throws CrScoreDetalleDaoException;

	/** 
	 * Returns all rows from the cr_score_detalle table that match the criteria 'id_score = :idScore'.
	 */
	public CrScoreDetalle[] findWhereIdScoreEquals(int idScore) throws CrScoreDetalleDaoException;

	/** 
	 * Returns all rows from the cr_score_detalle table that match the criteria 'valor_exacto = :valorExacto'.
	 */
	public CrScoreDetalle[] findWhereValorExactoEquals(String valorExacto) throws CrScoreDetalleDaoException;

	/** 
	 * Returns all rows from the cr_score_detalle table that match the criteria 'rango_min = :rangoMin'.
	 */
	public CrScoreDetalle[] findWhereRangoMinEquals(double rangoMin) throws CrScoreDetalleDaoException;

	/** 
	 * Returns all rows from the cr_score_detalle table that match the criteria 'rango_max = :rangoMax'.
	 */
	public CrScoreDetalle[] findWhereRangoMaxEquals(double rangoMax) throws CrScoreDetalleDaoException;

	/** 
	 * Returns all rows from the cr_score_detalle table that match the criteria 'puntos_score = :puntosScore'.
	 */
	public CrScoreDetalle[] findWherePuntosScoreEquals(int puntosScore) throws CrScoreDetalleDaoException;

	/** 
	 * Returns all rows from the cr_score_detalle table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public CrScoreDetalle[] findWhereIdEmpresaEquals(int idEmpresa) throws CrScoreDetalleDaoException;

	/** 
	 * Returns all rows from the cr_score_detalle table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public CrScoreDetalle[] findWhereIdEstatusEquals(int idEstatus) throws CrScoreDetalleDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the cr_score_detalle table that match the specified arbitrary SQL statement
	 */
	public CrScoreDetalle[] findByDynamicSelect(String sql, Object[] sqlParams) throws CrScoreDetalleDaoException;

	/** 
	 * Returns all rows from the cr_score_detalle table that match the specified arbitrary SQL statement
	 */
	public CrScoreDetalle[] findByDynamicWhere(String sql, Object[] sqlParams) throws CrScoreDetalleDaoException;

}
