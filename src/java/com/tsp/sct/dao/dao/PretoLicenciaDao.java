/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface PretoLicenciaDao
{
	/** 
	 * Inserts a new row in the preto_licencia table.
	 */
	public PretoLicenciaPk insert(PretoLicencia dto) throws PretoLicenciaDaoException;

	/** 
	 * Updates a single row in the preto_licencia table.
	 */
	public void update(PretoLicenciaPk pk, PretoLicencia dto) throws PretoLicenciaDaoException;

	/** 
	 * Deletes a single row in the preto_licencia table.
	 */
	public void delete(PretoLicenciaPk pk) throws PretoLicenciaDaoException;

	/** 
	 * Returns the rows from the preto_licencia table that matches the specified primary-key value.
	 */
	public PretoLicencia findByPrimaryKey(PretoLicenciaPk pk) throws PretoLicenciaDaoException;

	/** 
	 * Returns all rows from the preto_licencia table that match the criteria 'ID_PRETO_LICENCIA = :idPretoLicencia'.
	 */
	public PretoLicencia findByPrimaryKey(int idPretoLicencia) throws PretoLicenciaDaoException;

	/** 
	 * Returns all rows from the preto_licencia table that match the criteria ''.
	 */
	public PretoLicencia[] findAll() throws PretoLicenciaDaoException;

	/** 
	 * Returns all rows from the preto_licencia table that match the criteria 'ID_PRETO_LICENCIA = :idPretoLicencia'.
	 */
	public PretoLicencia[] findWhereIdPretoLicenciaEquals(int idPretoLicencia) throws PretoLicenciaDaoException;

	/** 
	 * Returns all rows from the preto_licencia table that match the criteria 'NOMBRE_LICENCIA = :nombreLicencia'.
	 */
	public PretoLicencia[] findWhereNombreLicenciaEquals(String nombreLicencia) throws PretoLicenciaDaoException;

	/** 
	 * Returns all rows from the preto_licencia table that match the criteria 'DESCRIPCION_LICENCIA = :descripcionLicencia'.
	 */
	public PretoLicencia[] findWhereDescripcionLicenciaEquals(String descripcionLicencia) throws PretoLicenciaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the preto_licencia table that match the specified arbitrary SQL statement
	 */
	public PretoLicencia[] findByDynamicSelect(String sql, Object[] sqlParams) throws PretoLicenciaDaoException;

	/** 
	 * Returns all rows from the preto_licencia table that match the specified arbitrary SQL statement
	 */
	public PretoLicencia[] findByDynamicWhere(String sql, Object[] sqlParams) throws PretoLicenciaDaoException;

}
