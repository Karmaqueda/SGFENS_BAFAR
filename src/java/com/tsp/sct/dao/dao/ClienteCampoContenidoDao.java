/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface ClienteCampoContenidoDao
{
	/** 
	 * Inserts a new row in the cliente_campo_contenido table.
	 */
	public ClienteCampoContenidoPk insert(ClienteCampoContenido dto) throws ClienteCampoContenidoDaoException;

	/** 
	 * Updates a single row in the cliente_campo_contenido table.
	 */
	public void update(ClienteCampoContenidoPk pk, ClienteCampoContenido dto) throws ClienteCampoContenidoDaoException;

	/** 
	 * Deletes a single row in the cliente_campo_contenido table.
	 */
	public void delete(ClienteCampoContenidoPk pk) throws ClienteCampoContenidoDaoException;

	/** 
	 * Returns the rows from the cliente_campo_contenido table that matches the specified primary-key value.
	 */
	public ClienteCampoContenido findByPrimaryKey(ClienteCampoContenidoPk pk) throws ClienteCampoContenidoDaoException;

	/** 
	 * Returns all rows from the cliente_campo_contenido table that match the criteria 'ID_CONTENIDO = :idContenido'.
	 */
	public ClienteCampoContenido findByPrimaryKey(int idContenido) throws ClienteCampoContenidoDaoException;

	/** 
	 * Returns all rows from the cliente_campo_contenido table that match the criteria ''.
	 */
	public ClienteCampoContenido[] findAll() throws ClienteCampoContenidoDaoException;

	/** 
	 * Returns all rows from the cliente_campo_contenido table that match the criteria 'ID_CONTENIDO = :idContenido'.
	 */
	public ClienteCampoContenido[] findWhereIdContenidoEquals(int idContenido) throws ClienteCampoContenidoDaoException;

	/** 
	 * Returns all rows from the cliente_campo_contenido table that match the criteria 'ID_CLIENTE_CAMPO = :idClienteCampo'.
	 */
	public ClienteCampoContenido[] findWhereIdClienteCampoEquals(int idClienteCampo) throws ClienteCampoContenidoDaoException;

	/** 
	 * Returns all rows from the cliente_campo_contenido table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public ClienteCampoContenido[] findWhereIdClienteEquals(int idCliente) throws ClienteCampoContenidoDaoException;

	/** 
	 * Returns all rows from the cliente_campo_contenido table that match the criteria 'VALOR_LABEL = :valorLabel'.
	 */
	public ClienteCampoContenido[] findWhereValorLabelEquals(String valorLabel) throws ClienteCampoContenidoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the cliente_campo_contenido table that match the specified arbitrary SQL statement
	 */
	public ClienteCampoContenido[] findByDynamicSelect(String sql, Object[] sqlParams) throws ClienteCampoContenidoDaoException;

	/** 
	 * Returns all rows from the cliente_campo_contenido table that match the specified arbitrary SQL statement
	 */
	public ClienteCampoContenido[] findByDynamicWhere(String sql, Object[] sqlParams) throws ClienteCampoContenidoDaoException;

}
