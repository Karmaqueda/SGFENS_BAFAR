/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface ImpuestoDao
{
	/** 
	 * Inserts a new row in the impuesto table.
	 */
	public ImpuestoPk insert(Impuesto dto) throws ImpuestoDaoException;

	/** 
	 * Updates a single row in the impuesto table.
	 */
	public void update(ImpuestoPk pk, Impuesto dto) throws ImpuestoDaoException;

	/** 
	 * Deletes a single row in the impuesto table.
	 */
	public void delete(ImpuestoPk pk) throws ImpuestoDaoException;

	/** 
	 * Returns the rows from the impuesto table that matches the specified primary-key value.
	 */
	public Impuesto findByPrimaryKey(ImpuestoPk pk) throws ImpuestoDaoException;

	/** 
	 * Returns all rows from the impuesto table that match the criteria 'ID_IMPUESTO = :idImpuesto'.
	 */
	public Impuesto findByPrimaryKey(int idImpuesto) throws ImpuestoDaoException;

	/** 
	 * Returns all rows from the impuesto table that match the criteria ''.
	 */
	public Impuesto[] findAll() throws ImpuestoDaoException;

	/** 
	 * Returns all rows from the impuesto table that match the criteria 'ID_IMPUESTO = :idImpuesto'.
	 */
	public Impuesto[] findWhereIdImpuestoEquals(int idImpuesto) throws ImpuestoDaoException;

	/** 
	 * Returns all rows from the impuesto table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Impuesto[] findWhereIdEmpresaEquals(int idEmpresa) throws ImpuestoDaoException;

	/** 
	 * Returns all rows from the impuesto table that match the criteria 'NOMBRE = :nombre'.
	 */
	public Impuesto[] findWhereNombreEquals(String nombre) throws ImpuestoDaoException;

	/** 
	 * Returns all rows from the impuesto table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public Impuesto[] findWhereDescripcionEquals(String descripcion) throws ImpuestoDaoException;

	/** 
	 * Returns all rows from the impuesto table that match the criteria 'PORCENTAJE = :porcentaje'.
	 */
	public Impuesto[] findWherePorcentajeEquals(float porcentaje) throws ImpuestoDaoException;

	/** 
	 * Returns all rows from the impuesto table that match the criteria 'TRASLADADO = :trasladado'.
	 */
	public Impuesto[] findWhereTrasladadoEquals(short trasladado) throws ImpuestoDaoException;

	/** 
	 * Returns all rows from the impuesto table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Impuesto[] findWhereIdEstatusEquals(int idEstatus) throws ImpuestoDaoException;

	/** 
	 * Returns all rows from the impuesto table that match the criteria 'IMPUESTO_LOCAL = :impuestoLocal'.
	 */
	public Impuesto[] findWhereImpuestoLocalEquals(short impuestoLocal) throws ImpuestoDaoException;

	/** 
	 * Returns all rows from the impuesto table that match the criteria 'SINCRONIZACION_MICROSIP = :sincronizacionMicrosip'.
	 */
	public Impuesto[] findWhereSincronizacionMicrosipEquals(int sincronizacionMicrosip) throws ImpuestoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the impuesto table that match the specified arbitrary SQL statement
	 */
	public Impuesto[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpuestoDaoException;

	/** 
	 * Returns all rows from the impuesto table that match the specified arbitrary SQL statement
	 */
	public Impuesto[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpuestoDaoException;

}
