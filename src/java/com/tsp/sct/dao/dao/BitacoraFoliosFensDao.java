/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface BitacoraFoliosFensDao
{
	/** 
	 * Inserts a new row in the bitacora_folios_fens table.
	 */
	public BitacoraFoliosFensPk insert(BitacoraFoliosFens dto) throws BitacoraFoliosFensDaoException;

	/** 
	 * Updates a single row in the bitacora_folios_fens table.
	 */
	public void update(BitacoraFoliosFensPk pk, BitacoraFoliosFens dto) throws BitacoraFoliosFensDaoException;

	/** 
	 * Deletes a single row in the bitacora_folios_fens table.
	 */
	public void delete(BitacoraFoliosFensPk pk) throws BitacoraFoliosFensDaoException;

	/** 
	 * Returns the rows from the bitacora_folios_fens table that matches the specified primary-key value.
	 */
	public BitacoraFoliosFens findByPrimaryKey(BitacoraFoliosFensPk pk) throws BitacoraFoliosFensDaoException;

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'ID_BITACORA_FOLIOS_FENS = :idBitacoraFoliosFens'.
	 */
	public BitacoraFoliosFens findByPrimaryKey(int idBitacoraFoliosFens) throws BitacoraFoliosFensDaoException;

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria ''.
	 */
	public BitacoraFoliosFens[] findAll() throws BitacoraFoliosFensDaoException;

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'ID_BITACORA_FOLIOS_FENS = :idBitacoraFoliosFens'.
	 */
	public BitacoraFoliosFens[] findWhereIdBitacoraFoliosFensEquals(int idBitacoraFoliosFens) throws BitacoraFoliosFensDaoException;

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public BitacoraFoliosFens[] findWhereIdEmpresaEquals(int idEmpresa) throws BitacoraFoliosFensDaoException;

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'FOLIOS_AGREGADOS = :foliosAgregados'.
	 */
	public BitacoraFoliosFens[] findWhereFoliosAgregadosEquals(int foliosAgregados) throws BitacoraFoliosFensDaoException;

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'FOLIOS_ELIMINADOS = :foliosEliminados'.
	 */
	public BitacoraFoliosFens[] findWhereFoliosEliminadosEquals(int foliosEliminados) throws BitacoraFoliosFensDaoException;

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'FOLIOS_UTILIZADOS = :foliosUtilizados'.
	 */
	public BitacoraFoliosFens[] findWhereFoliosUtilizadosEquals(int foliosUtilizados) throws BitacoraFoliosFensDaoException;

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'FOLIOS_TOTALES = :foliosTotales'.
	 */
	public BitacoraFoliosFens[] findWhereFoliosTotalesEquals(int foliosTotales) throws BitacoraFoliosFensDaoException;

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the criteria 'FECHA = :fecha'.
	 */
	public BitacoraFoliosFens[] findWhereFechaEquals(Date fecha) throws BitacoraFoliosFensDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the specified arbitrary SQL statement
	 */
	public BitacoraFoliosFens[] findByDynamicSelect(String sql, Object[] sqlParams) throws BitacoraFoliosFensDaoException;

	/** 
	 * Returns all rows from the bitacora_folios_fens table that match the specified arbitrary SQL statement
	 */
	public BitacoraFoliosFens[] findByDynamicWhere(String sql, Object[] sqlParams) throws BitacoraFoliosFensDaoException;

}
