/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface DetalleEdcDao
{
	/** 
	 * Inserts a new row in the detalle_edc table.
	 */
	public DetalleEdcPk insert(DetalleEdc dto) throws DetalleEdcDaoException;

	/** 
	 * Updates a single row in the detalle_edc table.
	 */
	public void update(DetalleEdcPk pk, DetalleEdc dto) throws DetalleEdcDaoException;

	/** 
	 * Deletes a single row in the detalle_edc table.
	 */
	public void delete(DetalleEdcPk pk) throws DetalleEdcDaoException;

	/** 
	 * Returns the rows from the detalle_edc table that matches the specified primary-key value.
	 */
	public DetalleEdc findByPrimaryKey(DetalleEdcPk pk) throws DetalleEdcDaoException;

	/** 
	 * Returns all rows from the detalle_edc table that match the criteria 'ID_DETALLE_EDC = :idDetalleEdc'.
	 */
	public DetalleEdc findByPrimaryKey(int idDetalleEdc) throws DetalleEdcDaoException;

	/** 
	 * Returns all rows from the detalle_edc table that match the criteria ''.
	 */
	public DetalleEdc[] findAll() throws DetalleEdcDaoException;

	/** 
	 * Returns all rows from the detalle_edc table that match the criteria 'ID_DETALLE_EDC = :idDetalleEdc'.
	 */
	public DetalleEdc[] findWhereIdDetalleEdcEquals(int idDetalleEdc) throws DetalleEdcDaoException;

	/** 
	 * Returns all rows from the detalle_edc table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public DetalleEdc[] findWhereIdEmpresaEquals(int idEmpresa) throws DetalleEdcDaoException;

	/** 
	 * Returns all rows from the detalle_edc table that match the criteria 'ID_TIPO_EDC = :idTipoEdc'.
	 */
	public DetalleEdc[] findWhereIdTipoEdcEquals(int idTipoEdc) throws DetalleEdcDaoException;

	/** 
	 * Returns all rows from the detalle_edc table that match the criteria 'ID_FOLIO = :idFolio'.
	 */
	public DetalleEdc[] findWhereIdFolioEquals(int idFolio) throws DetalleEdcDaoException;

	/** 
	 * Returns all rows from the detalle_edc table that match the criteria 'ARCHIVO = :archivo'.
	 */
	public DetalleEdc[] findWhereArchivoEquals(String archivo) throws DetalleEdcDaoException;

	/** 
	 * Returns all rows from the detalle_edc table that match the criteria 'EDC_GENERADOS = :edcGenerados'.
	 */
	public DetalleEdc[] findWhereEdcGeneradosEquals(int edcGenerados) throws DetalleEdcDaoException;

	/** 
	 * Returns all rows from the detalle_edc table that match the criteria 'FOLIO_INICIAL = :folioInicial'.
	 */
	public DetalleEdc[] findWhereFolioInicialEquals(int folioInicial) throws DetalleEdcDaoException;

	/** 
	 * Returns all rows from the detalle_edc table that match the criteria 'FOLIO_FINAL = :folioFinal'.
	 */
	public DetalleEdc[] findWhereFolioFinalEquals(int folioFinal) throws DetalleEdcDaoException;

	/** 
	 * Returns all rows from the detalle_edc table that match the criteria 'FECHA = :fecha'.
	 */
	public DetalleEdc[] findWhereFechaEquals(Date fecha) throws DetalleEdcDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the detalle_edc table that match the specified arbitrary SQL statement
	 */
	public DetalleEdc[] findByDynamicSelect(String sql, Object[] sqlParams) throws DetalleEdcDaoException;

	/** 
	 * Returns all rows from the detalle_edc table that match the specified arbitrary SQL statement
	 */
	public DetalleEdc[] findByDynamicWhere(String sql, Object[] sqlParams) throws DetalleEdcDaoException;

}
