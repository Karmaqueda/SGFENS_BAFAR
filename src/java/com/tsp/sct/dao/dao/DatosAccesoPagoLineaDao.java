/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface DatosAccesoPagoLineaDao
{
	/** 
	 * Inserts a new row in the datos_acceso_pago_linea table.
	 */
	public DatosAccesoPagoLineaPk insert(DatosAccesoPagoLinea dto) throws DatosAccesoPagoLineaDaoException;

	/** 
	 * Updates a single row in the datos_acceso_pago_linea table.
	 */
	public void update(DatosAccesoPagoLineaPk pk, DatosAccesoPagoLinea dto) throws DatosAccesoPagoLineaDaoException;

	/** 
	 * Deletes a single row in the datos_acceso_pago_linea table.
	 */
	public void delete(DatosAccesoPagoLineaPk pk) throws DatosAccesoPagoLineaDaoException;

	/** 
	 * Returns the rows from the datos_acceso_pago_linea table that matches the specified primary-key value.
	 */
	public DatosAccesoPagoLinea findByPrimaryKey(DatosAccesoPagoLineaPk pk) throws DatosAccesoPagoLineaDaoException;

	/** 
	 * Returns all rows from the datos_acceso_pago_linea table that match the criteria 'ID_DATOS_ACCESO = :idDatosAcceso'.
	 */
	public DatosAccesoPagoLinea findByPrimaryKey(int idDatosAcceso) throws DatosAccesoPagoLineaDaoException;

	/** 
	 * Returns all rows from the datos_acceso_pago_linea table that match the criteria ''.
	 */
	public DatosAccesoPagoLinea[] findAll() throws DatosAccesoPagoLineaDaoException;

	/** 
	 * Returns all rows from the datos_acceso_pago_linea table that match the criteria 'ID_DATOS_ACCESO = :idDatosAcceso'.
	 */
	public DatosAccesoPagoLinea[] findWhereIdDatosAccesoEquals(int idDatosAcceso) throws DatosAccesoPagoLineaDaoException;

	/** 
	 * Returns all rows from the datos_acceso_pago_linea table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public DatosAccesoPagoLinea[] findWhereIdEmpresaEquals(int idEmpresa) throws DatosAccesoPagoLineaDaoException;

	/** 
	 * Returns all rows from the datos_acceso_pago_linea table that match the criteria 'USUARIO = :usuario'.
	 */
	public DatosAccesoPagoLinea[] findWhereUsuarioEquals(String usuario) throws DatosAccesoPagoLineaDaoException;

	/** 
	 * Returns all rows from the datos_acceso_pago_linea table that match the criteria 'PASS = :pass'.
	 */
	public DatosAccesoPagoLinea[] findWherePassEquals(String pass) throws DatosAccesoPagoLineaDaoException;

	/** 
	 * Returns all rows from the datos_acceso_pago_linea table that match the criteria 'PIN = :pin'.
	 */
	public DatosAccesoPagoLinea[] findWherePinEquals(String pin) throws DatosAccesoPagoLineaDaoException;

	/** 
	 * Returns all rows from the datos_acceso_pago_linea table that match the criteria 'ID_USUARIOS = :idUsuarios'.
	 */
	public DatosAccesoPagoLinea[] findWhereIdUsuariosEquals(int idUsuarios) throws DatosAccesoPagoLineaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the datos_acceso_pago_linea table that match the specified arbitrary SQL statement
	 */
	public DatosAccesoPagoLinea[] findByDynamicSelect(String sql, Object[] sqlParams) throws DatosAccesoPagoLineaDaoException;

	/** 
	 * Returns all rows from the datos_acceso_pago_linea table that match the specified arbitrary SQL statement
	 */
	public DatosAccesoPagoLinea[] findByDynamicWhere(String sql, Object[] sqlParams) throws DatosAccesoPagoLineaDaoException;

}
