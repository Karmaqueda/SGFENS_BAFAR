/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface EstadoDao
{
	/** 
	 * Inserts a new row in the estado table.
	 */
	public EstadoPk insert(Estado dto) throws EstadoDaoException;

	/** 
	 * Updates a single row in the estado table.
	 */
	public void update(EstadoPk pk, Estado dto) throws EstadoDaoException;

	/** 
	 * Deletes a single row in the estado table.
	 */
	public void delete(EstadoPk pk) throws EstadoDaoException;

	/** 
	 * Returns the rows from the estado table that matches the specified primary-key value.
	 */
	public Estado findByPrimaryKey(EstadoPk pk) throws EstadoDaoException;

	/** 
	 * Returns all rows from the estado table that match the criteria 'ID_ESTADO = :idEstado'.
	 */
	public Estado findByPrimaryKey(long idEstado) throws EstadoDaoException;

	/** 
	 * Returns all rows from the estado table that match the criteria ''.
	 */
	public Estado[] findAll() throws EstadoDaoException;

	/** 
	 * Returns all rows from the estado table that match the criteria 'ID_PAIS = :idPais'.
	 */
	public Estado[] findWhereIdPaisEquals(long idPais) throws EstadoDaoException;

	/** 
	 * Returns all rows from the estado table that match the criteria 'ID_ESTADO = :idEstado'.
	 */
	public Estado[] findWhereIdEstadoEquals(long idEstado) throws EstadoDaoException;

	/** 
	 * Returns all rows from the estado table that match the criteria 'ID_CLAVE = :idClave'.
	 */
	public Estado[] findWhereIdClaveEquals(int idClave) throws EstadoDaoException;

	/** 
	 * Returns all rows from the estado table that match the criteria 'EDO_DESCRIPCION = :edoDescripcion'.
	 */
	public Estado[] findWhereEdoDescripcionEquals(String edoDescripcion) throws EstadoDaoException;

	/** 
	 * Returns all rows from the estado table that match the criteria 'ACTIVO = :activo'.
	 */
	public Estado[] findWhereActivoEquals(int activo) throws EstadoDaoException;

	/** 
	 * Returns all rows from the estado table that match the criteria 'FECHA_DESACTIVACION = :fechaDesactivacion'.
	 */
	public Estado[] findWhereFechaDesactivacionEquals(Date fechaDesactivacion) throws EstadoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the estado table that match the specified arbitrary SQL statement
	 */
	public Estado[] findByDynamicSelect(String sql, Object[] sqlParams) throws EstadoDaoException;

	/** 
	 * Returns all rows from the estado table that match the specified arbitrary SQL statement
	 */
	public Estado[] findByDynamicWhere(String sql, Object[] sqlParams) throws EstadoDaoException;

}
