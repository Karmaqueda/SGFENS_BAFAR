/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface SgfensClienteVendedorDao
{
	/** 
	 * Inserts a new row in the sgfens_cliente_vendedor table.
	 */
	public SgfensClienteVendedorPk insert(SgfensClienteVendedor dto) throws SgfensClienteVendedorDaoException;

	/** 
	 * Updates a single row in the sgfens_cliente_vendedor table.
	 */
	public void update(SgfensClienteVendedorPk pk, SgfensClienteVendedor dto) throws SgfensClienteVendedorDaoException;

	/** 
	 * Deletes a single row in the sgfens_cliente_vendedor table.
	 */
	public void delete(SgfensClienteVendedorPk pk) throws SgfensClienteVendedorDaoException;

	/** 
	 * Returns the rows from the sgfens_cliente_vendedor table that matches the specified primary-key value.
	 */
	public SgfensClienteVendedor findByPrimaryKey(SgfensClienteVendedorPk pk) throws SgfensClienteVendedorDaoException;

	/** 
	 * Returns all rows from the sgfens_cliente_vendedor table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public SgfensClienteVendedor findByPrimaryKey(int idCliente) throws SgfensClienteVendedorDaoException;

	/** 
	 * Returns all rows from the sgfens_cliente_vendedor table that match the criteria ''.
	 */
	public SgfensClienteVendedor[] findAll() throws SgfensClienteVendedorDaoException;

	/** 
	 * Returns all rows from the sgfens_cliente_vendedor table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public SgfensClienteVendedor[] findWhereIdClienteEquals(int idCliente) throws SgfensClienteVendedorDaoException;

	/** 
	 * Returns all rows from the sgfens_cliente_vendedor table that match the criteria 'ID_USUARIO_VENDEDOR = :idUsuarioVendedor'.
	 */
	public SgfensClienteVendedor[] findWhereIdUsuarioVendedorEquals(int idUsuarioVendedor) throws SgfensClienteVendedorDaoException;

	/** 
	 * Returns all rows from the sgfens_cliente_vendedor table that match the criteria 'ID_USUARIO_CONDUCTOR_ASIGNADO = :idUsuarioConductorAsignado'.
	 */
	public SgfensClienteVendedor[] findWhereIdUsuarioConductorAsignadoEquals(int idUsuarioConductorAsignado) throws SgfensClienteVendedorDaoException;

	/** 
	 * Returns all rows from the sgfens_cliente_vendedor table that match the criteria 'ID_USUARIO_VENDEDOR_REASIGNADO = :idUsuarioVendedorReasignado'.
	 */
	public SgfensClienteVendedor[] findWhereIdUsuarioVendedorReasignadoEquals(int idUsuarioVendedorReasignado) throws SgfensClienteVendedorDaoException;

	/** 
	 * Returns all rows from the sgfens_cliente_vendedor table that match the criteria 'FECHA_LIMITE_REASIGANCION = :fechaLimiteReasigancion'.
	 */
	public SgfensClienteVendedor[] findWhereFechaLimiteReasigancionEquals(Date fechaLimiteReasigancion) throws SgfensClienteVendedorDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the sgfens_cliente_vendedor table that match the specified arbitrary SQL statement
	 */
	public SgfensClienteVendedor[] findByDynamicSelect(String sql, Object[] sqlParams) throws SgfensClienteVendedorDaoException;

	/** 
	 * Returns all rows from the sgfens_cliente_vendedor table that match the specified arbitrary SQL statement
	 */
	public SgfensClienteVendedor[] findByDynamicWhere(String sql, Object[] sqlParams) throws SgfensClienteVendedorDaoException;

}
