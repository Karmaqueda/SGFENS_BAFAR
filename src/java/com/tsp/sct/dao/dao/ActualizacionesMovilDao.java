/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface ActualizacionesMovilDao
{
	/** 
	 * Inserts a new row in the actualizaciones_movil table.
	 */
	public ActualizacionesMovilPk insert(ActualizacionesMovil dto) throws ActualizacionesMovilDaoException;

	/** 
	 * Updates a single row in the actualizaciones_movil table.
	 */
	public void update(ActualizacionesMovilPk pk, ActualizacionesMovil dto) throws ActualizacionesMovilDaoException;

	/** 
	 * Deletes a single row in the actualizaciones_movil table.
	 */
	public void delete(ActualizacionesMovilPk pk) throws ActualizacionesMovilDaoException;

	/** 
	 * Returns the rows from the actualizaciones_movil table that matches the specified primary-key value.
	 */
	public ActualizacionesMovil findByPrimaryKey(ActualizacionesMovilPk pk) throws ActualizacionesMovilDaoException;

	/** 
	 * Returns all rows from the actualizaciones_movil table that match the criteria 'ID_ACTUALIZACION = :idActualizacion'.
	 */
	public ActualizacionesMovil findByPrimaryKey(int idActualizacion) throws ActualizacionesMovilDaoException;

	/** 
	 * Returns all rows from the actualizaciones_movil table that match the criteria ''.
	 */
	public ActualizacionesMovil[] findAll() throws ActualizacionesMovilDaoException;

	/** 
	 * Returns all rows from the actualizaciones_movil table that match the criteria 'ID_ACTUALIZACION = :idActualizacion'.
	 */
	public ActualizacionesMovil[] findWhereIdActualizacionEquals(int idActualizacion) throws ActualizacionesMovilDaoException;

	/** 
	 * Returns all rows from the actualizaciones_movil table that match the criteria 'VERSION_CODE = :versionCode'.
	 */
	public ActualizacionesMovil[] findWhereVersionCodeEquals(int versionCode) throws ActualizacionesMovilDaoException;

	/** 
	 * Returns all rows from the actualizaciones_movil table that match the criteria 'NUM_VERSION = :numVersion'.
	 */
	public ActualizacionesMovil[] findWhereNumVersionEquals(String numVersion) throws ActualizacionesMovilDaoException;

	/** 
	 * Returns all rows from the actualizaciones_movil table that match the criteria 'FECHA_LIBERACION = :fechaLiberacion'.
	 */
	public ActualizacionesMovil[] findWhereFechaLiberacionEquals(Date fechaLiberacion) throws ActualizacionesMovilDaoException;

	/** 
	 * Returns all rows from the actualizaciones_movil table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ActualizacionesMovil[] findWhereComentariosEquals(String comentarios) throws ActualizacionesMovilDaoException;

	/** 
	 * Returns all rows from the actualizaciones_movil table that match the criteria 'PLATAFORMA = :plataforma'.
	 */
	public ActualizacionesMovil[] findWherePlataformaEquals(int plataforma) throws ActualizacionesMovilDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the actualizaciones_movil table that match the specified arbitrary SQL statement
	 */
	public ActualizacionesMovil[] findByDynamicSelect(String sql, Object[] sqlParams) throws ActualizacionesMovilDaoException;

	/** 
	 * Returns all rows from the actualizaciones_movil table that match the specified arbitrary SQL statement
	 */
	public ActualizacionesMovil[] findByDynamicWhere(String sql, Object[] sqlParams) throws ActualizacionesMovilDaoException;

}
