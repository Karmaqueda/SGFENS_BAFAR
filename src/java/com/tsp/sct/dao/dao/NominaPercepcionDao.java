/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface NominaPercepcionDao
{
	/** 
	 * Inserts a new row in the nomina_percepcion table.
	 */
	public NominaPercepcionPk insert(NominaPercepcion dto) throws NominaPercepcionDaoException;

	/** 
	 * Updates a single row in the nomina_percepcion table.
	 */
	public void update(NominaPercepcionPk pk, NominaPercepcion dto) throws NominaPercepcionDaoException;

	/** 
	 * Deletes a single row in the nomina_percepcion table.
	 */
	public void delete(NominaPercepcionPk pk) throws NominaPercepcionDaoException;

	/** 
	 * Returns the rows from the nomina_percepcion table that matches the specified primary-key value.
	 */
	public NominaPercepcion findByPrimaryKey(NominaPercepcionPk pk) throws NominaPercepcionDaoException;

	/** 
	 * Returns all rows from the nomina_percepcion table that match the criteria 'ID_NOMINA_PERCEPCION = :idNominaPercepcion'.
	 */
	public NominaPercepcion findByPrimaryKey(int idNominaPercepcion) throws NominaPercepcionDaoException;

	/** 
	 * Returns all rows from the nomina_percepcion table that match the criteria ''.
	 */
	public NominaPercepcion[] findAll() throws NominaPercepcionDaoException;

	/** 
	 * Returns all rows from the nomina_percepcion table that match the criteria 'ID_NOMINA_PERCEPCION = :idNominaPercepcion'.
	 */
	public NominaPercepcion[] findWhereIdNominaPercepcionEquals(int idNominaPercepcion) throws NominaPercepcionDaoException;

	/** 
	 * Returns all rows from the nomina_percepcion table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public NominaPercepcion[] findWhereIdEmpresaEquals(int idEmpresa) throws NominaPercepcionDaoException;

	/** 
	 * Returns all rows from the nomina_percepcion table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public NominaPercepcion[] findWhereIdEstatusEquals(int idEstatus) throws NominaPercepcionDaoException;

	/** 
	 * Returns all rows from the nomina_percepcion table that match the criteria 'ID_NOMINA_TIPO_PERCEPCION = :idNominaTipoPercepcion'.
	 */
	public NominaPercepcion[] findWhereIdNominaTipoPercepcionEquals(int idNominaTipoPercepcion) throws NominaPercepcionDaoException;

	/** 
	 * Returns all rows from the nomina_percepcion table that match the criteria 'CLAVE = :clave'.
	 */
	public NominaPercepcion[] findWhereClaveEquals(String clave) throws NominaPercepcionDaoException;

	/** 
	 * Returns all rows from the nomina_percepcion table that match the criteria 'CONCEPTO = :concepto'.
	 */
	public NominaPercepcion[] findWhereConceptoEquals(String concepto) throws NominaPercepcionDaoException;

	/** 
	 * Returns all rows from the nomina_percepcion table that match the criteria 'IMPORTE_GRAVADO = :importeGravado'.
	 */
	public NominaPercepcion[] findWhereImporteGravadoEquals(double importeGravado) throws NominaPercepcionDaoException;

	/** 
	 * Returns all rows from the nomina_percepcion table that match the criteria 'IMPORTE_EXCEPTO = :importeExcepto'.
	 */
	public NominaPercepcion[] findWhereImporteExceptoEquals(double importeExcepto) throws NominaPercepcionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the nomina_percepcion table that match the specified arbitrary SQL statement
	 */
	public NominaPercepcion[] findByDynamicSelect(String sql, Object[] sqlParams) throws NominaPercepcionDaoException;

	/** 
	 * Returns all rows from the nomina_percepcion table that match the specified arbitrary SQL statement
	 */
	public NominaPercepcion[] findByDynamicWhere(String sql, Object[] sqlParams) throws NominaPercepcionDaoException;

}
