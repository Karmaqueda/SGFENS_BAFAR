/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface ComprobanteDescripcionPerfloresDao
{
	/** 
	 * Inserts a new row in the comprobante_descripcion_perflores table.
	 */
	public ComprobanteDescripcionPerfloresPk insert(ComprobanteDescripcionPerflores dto) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Updates a single row in the comprobante_descripcion_perflores table.
	 */
	public void update(ComprobanteDescripcionPerfloresPk pk, ComprobanteDescripcionPerflores dto) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Deletes a single row in the comprobante_descripcion_perflores table.
	 */
	public void delete(ComprobanteDescripcionPerfloresPk pk) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns the rows from the comprobante_descripcion_perflores table that matches the specified primary-key value.
	 */
	public ComprobanteDescripcionPerflores findByPrimaryKey(ComprobanteDescripcionPerfloresPk pk) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'ID_COMPROBANTE_DESCRIPCION = :idComprobanteDescripcion'.
	 */
	public ComprobanteDescripcionPerflores findByPrimaryKey(int idComprobanteDescripcion) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria ''.
	 */
	public ComprobanteDescripcionPerflores[] findAll() throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public ComprobanteDescripcionPerflores[] findByComprobanteFiscal(int idComprobanteFiscal) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public ComprobanteDescripcionPerflores[] findByConcepto(int idConcepto) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'ID_COMPROBANTE_DESCRIPCION = :idComprobanteDescripcion'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereIdComprobanteDescripcionEquals(int idComprobanteDescripcion) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereIdConceptoEquals(int idConcepto) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereDescripcionEquals(String descripcion) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereCantidadEquals(float cantidad) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'PRECIO_UNITARIO = :precioUnitario'.
	 */
	public ComprobanteDescripcionPerflores[] findWherePrecioUnitarioEquals(float precioUnitario) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'UNIDAD = :unidad'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereUnidadEquals(String unidad) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'PORCENTAJE = :porcentaje'.
	 */
	public ComprobanteDescripcionPerflores[] findWherePorcentajeEquals(String porcentaje) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'TOTAL_OBRA = :totalObra'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereTotalObraEquals(String totalObra) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'AMORTIZACION = :amortizacion'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereAmortizacionEquals(String amortizacion) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'SUMA = :suma'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereSumaEquals(String suma) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'SUBTOTAL1 = :subtotal1'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereSubtotal1Equals(String subtotal1) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'INSP_Y_VIGI = :inspYVigi'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereInspYVigiEquals(String inspYVigi) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'CAPA_ICIC = :capaIcic'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereCapaIcicEquals(String capaIcic) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'FONDO_SEGURIDAD = :fondoSeguridad'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereFondoSeguridadEquals(String fondoSeguridad) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'SUBTOTAL2 = :subtotal2'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereSubtotal2Equals(String subtotal2) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the criteria 'ALCANCE_LIQUIDO = :alcanceLiquido'.
	 */
	public ComprobanteDescripcionPerflores[] findWhereAlcanceLiquidoEquals(String alcanceLiquido) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the specified arbitrary SQL statement
	 */
	public ComprobanteDescripcionPerflores[] findByDynamicSelect(String sql, Object[] sqlParams) throws ComprobanteDescripcionPerfloresDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion_perflores table that match the specified arbitrary SQL statement
	 */
	public ComprobanteDescripcionPerflores[] findByDynamicWhere(String sql, Object[] sqlParams) throws ComprobanteDescripcionPerfloresDaoException;

}
