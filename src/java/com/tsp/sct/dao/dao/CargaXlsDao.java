/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface CargaXlsDao
{
	/** 
	 * Inserts a new row in the carga_xls table.
	 */
	public CargaXlsPk insert(CargaXls dto) throws CargaXlsDaoException;

	/** 
	 * Updates a single row in the carga_xls table.
	 */
	public void update(CargaXlsPk pk, CargaXls dto) throws CargaXlsDaoException;

	/** 
	 * Deletes a single row in the carga_xls table.
	 */
	public void delete(CargaXlsPk pk) throws CargaXlsDaoException;

	/** 
	 * Returns the rows from the carga_xls table that matches the specified primary-key value.
	 */
	public CargaXls findByPrimaryKey(CargaXlsPk pk) throws CargaXlsDaoException;

	/** 
	 * Returns all rows from the carga_xls table that match the criteria 'ID_CARGA = :idCarga'.
	 */
	public CargaXls findByPrimaryKey(int idCarga) throws CargaXlsDaoException;

	/** 
	 * Returns all rows from the carga_xls table that match the criteria ''.
	 */
	public CargaXls[] findAll() throws CargaXlsDaoException;

	/** 
	 * Returns all rows from the carga_xls table that match the criteria 'ID_CARGA = :idCarga'.
	 */
	public CargaXls[] findWhereIdCargaEquals(int idCarga) throws CargaXlsDaoException;

	/** 
	 * Returns all rows from the carga_xls table that match the criteria 'ID_TIPO_CARGA = :idTipoCarga'.
	 */
	public CargaXls[] findWhereIdTipoCargaEquals(int idTipoCarga) throws CargaXlsDaoException;

	/** 
	 * Returns all rows from the carga_xls table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public CargaXls[] findWhereIdEmpresaEquals(int idEmpresa) throws CargaXlsDaoException;

	/** 
	 * Returns all rows from the carga_xls table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public CargaXls[] findWhereIdUsuarioEquals(int idUsuario) throws CargaXlsDaoException;

	/** 
	 * Returns all rows from the carga_xls table that match the criteria 'FECHA = :fecha'.
	 */
	public CargaXls[] findWhereFechaEquals(Date fecha) throws CargaXlsDaoException;

	/** 
	 * Returns all rows from the carga_xls table that match the criteria 'NOMBRE_ARCHIVO = :nombreArchivo'.
	 */
	public CargaXls[] findWhereNombreArchivoEquals(String nombreArchivo) throws CargaXlsDaoException;

	/** 
	 * Returns all rows from the carga_xls table that match the criteria 'ID_ESTATUS_CARGA = :idEstatusCarga'.
	 */
	public CargaXls[] findWhereIdEstatusCargaEquals(int idEstatusCarga) throws CargaXlsDaoException;

	/** 
	 * Returns all rows from the carga_xls table that match the criteria 'LOG_TEXT = :logText'.
	 */
	public CargaXls[] findWhereLogTextEquals(String logText) throws CargaXlsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the carga_xls table that match the specified arbitrary SQL statement
	 */
	public CargaXls[] findByDynamicSelect(String sql, Object[] sqlParams) throws CargaXlsDaoException;

	/** 
	 * Returns all rows from the carga_xls table that match the specified arbitrary SQL statement
	 */
	public CargaXls[] findByDynamicWhere(String sql, Object[] sqlParams) throws CargaXlsDaoException;

}
