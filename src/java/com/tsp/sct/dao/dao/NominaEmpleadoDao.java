/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface NominaEmpleadoDao
{
	/** 
	 * Inserts a new row in the nomina_empleado table.
	 */
	public NominaEmpleadoPk insert(NominaEmpleado dto) throws NominaEmpleadoDaoException;

	/** 
	 * Updates a single row in the nomina_empleado table.
	 */
	public void update(NominaEmpleadoPk pk, NominaEmpleado dto) throws NominaEmpleadoDaoException;

	/** 
	 * Deletes a single row in the nomina_empleado table.
	 */
	public void delete(NominaEmpleadoPk pk) throws NominaEmpleadoDaoException;

	/** 
	 * Returns the rows from the nomina_empleado table that matches the specified primary-key value.
	 */
	public NominaEmpleado findByPrimaryKey(NominaEmpleadoPk pk) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public NominaEmpleado findByPrimaryKey(int idEmpleado) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria ''.
	 */
	public NominaEmpleado[] findAll() throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public NominaEmpleado[] findWhereIdEmpleadoEquals(int idEmpleado) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public NominaEmpleado[] findWhereIdEmpresaEquals(int idEmpresa) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public NominaEmpleado[] findWhereIdEstatusEquals(int idEstatus) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'RFC = :rfc'.
	 */
	public NominaEmpleado[] findWhereRfcEquals(String rfc) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'NOMBRE = :nombre'.
	 */
	public NominaEmpleado[] findWhereNombreEquals(String nombre) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'APELLIDO_PATERNO = :apellidoPaterno'.
	 */
	public NominaEmpleado[] findWhereApellidoPaternoEquals(String apellidoPaterno) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'APELLIDO_MATERNO = :apellidoMaterno'.
	 */
	public NominaEmpleado[] findWhereApellidoMaternoEquals(String apellidoMaterno) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'NUM_EMPLEADO = :numEmpleado'.
	 */
	public NominaEmpleado[] findWhereNumEmpleadoEquals(String numEmpleado) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'CURP = :curp'.
	 */
	public NominaEmpleado[] findWhereCurpEquals(String curp) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_NOMINA_REGIMEN_FISCAL = :idNominaRegimenFiscal'.
	 */
	public NominaEmpleado[] findWhereIdNominaRegimenFiscalEquals(int idNominaRegimenFiscal) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'NUM_SEGURO_SOCIAL = :numSeguroSocial'.
	 */
	public NominaEmpleado[] findWhereNumSeguroSocialEquals(String numSeguroSocial) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_PUESTO = :idPuesto'.
	 */
	public NominaEmpleado[] findWhereIdPuestoEquals(int idPuesto) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_DEPARTAMENTO = :idDepartamento'.
	 */
	public NominaEmpleado[] findWhereIdDepartamentoEquals(int idDepartamento) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'CLABE = :clabe'.
	 */
	public NominaEmpleado[] findWhereClabeEquals(String clabe) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_NOMINA_BANCO = :idNominaBanco'.
	 */
	public NominaEmpleado[] findWhereIdNominaBancoEquals(int idNominaBanco) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'FECHA_INICIO_RELACION_LABORAL = :fechaInicioRelacionLaboral'.
	 */
	public NominaEmpleado[] findWhereFechaInicioRelacionLaboralEquals(Date fechaInicioRelacionLaboral) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'FECHA_ALTA = :fechaAlta'.
	 */
	public NominaEmpleado[] findWhereFechaAltaEquals(Date fechaAlta) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'TIPO_CONTRATO = :tipoContrato'.
	 */
	public NominaEmpleado[] findWhereTipoContratoEquals(String tipoContrato) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'TIPO_JORNADA = :tipoJornada'.
	 */
	public NominaEmpleado[] findWhereTipoJornadaEquals(String tipoJornada) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'PERIODICIDAD_PAGO = :periodicidadPago'.
	 */
	public NominaEmpleado[] findWherePeriodicidadPagoEquals(String periodicidadPago) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'SALARIO_BASE_COT_APOR = :salarioBaseCotApor'.
	 */
	public NominaEmpleado[] findWhereSalarioBaseCotAporEquals(double salarioBaseCotApor) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'ID_RIESGO_PUESTO = :idRiesgoPuesto'.
	 */
	public NominaEmpleado[] findWhereIdRiesgoPuestoEquals(int idRiesgoPuesto) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'SALARIO_DIARIO_INTEGRADO = :salarioDiarioIntegrado'.
	 */
	public NominaEmpleado[] findWhereSalarioDiarioIntegradoEquals(double salarioDiarioIntegrado) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'FECHA_BAJA = :fechaBaja'.
	 */
	public NominaEmpleado[] findWhereFechaBajaEquals(Date fechaBaja) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'CORREO = :correo'.
	 */
	public NominaEmpleado[] findWhereCorreoEquals(String correo) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the criteria 'TELEFONO = :telefono'.
	 */
	public NominaEmpleado[] findWhereTelefonoEquals(String telefono) throws NominaEmpleadoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the nomina_empleado table that match the specified arbitrary SQL statement
	 */
	public NominaEmpleado[] findByDynamicSelect(String sql, Object[] sqlParams) throws NominaEmpleadoDaoException;

	/** 
	 * Returns all rows from the nomina_empleado table that match the specified arbitrary SQL statement
	 */
	public NominaEmpleado[] findByDynamicWhere(String sql, Object[] sqlParams) throws NominaEmpleadoDaoException;

}
