/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface CrSolicitudBitacoraDao
{
	/** 
	 * Inserts a new row in the cr_solicitud_bitacora table.
	 */
	public CrSolicitudBitacoraPk insert(CrSolicitudBitacora dto) throws CrSolicitudBitacoraDaoException;

	/** 
	 * Updates a single row in the cr_solicitud_bitacora table.
	 */
	public void update(CrSolicitudBitacoraPk pk, CrSolicitudBitacora dto) throws CrSolicitudBitacoraDaoException;

	/** 
	 * Deletes a single row in the cr_solicitud_bitacora table.
	 */
	public void delete(CrSolicitudBitacoraPk pk) throws CrSolicitudBitacoraDaoException;

	/** 
	 * Returns the rows from the cr_solicitud_bitacora table that matches the specified primary-key value.
	 */
	public CrSolicitudBitacora findByPrimaryKey(CrSolicitudBitacoraPk pk) throws CrSolicitudBitacoraDaoException;

	/** 
	 * Returns all rows from the cr_solicitud_bitacora table that match the criteria 'id_solicitud_bitacora = :idSolicitudBitacora'.
	 */
	public CrSolicitudBitacora findByPrimaryKey(int idSolicitudBitacora) throws CrSolicitudBitacoraDaoException;

	/** 
	 * Returns all rows from the cr_solicitud_bitacora table that match the criteria ''.
	 */
	public CrSolicitudBitacora[] findAll() throws CrSolicitudBitacoraDaoException;

	/** 
	 * Returns all rows from the cr_solicitud_bitacora table that match the criteria 'id_solicitud_bitacora = :idSolicitudBitacora'.
	 */
	public CrSolicitudBitacora[] findWhereIdSolicitudBitacoraEquals(int idSolicitudBitacora) throws CrSolicitudBitacoraDaoException;

	/** 
	 * Returns all rows from the cr_solicitud_bitacora table that match the criteria 'id_formulario_evento = :idFormularioEvento'.
	 */
	public CrSolicitudBitacora[] findWhereIdFormularioEventoEquals(int idFormularioEvento) throws CrSolicitudBitacoraDaoException;

	/** 
	 * Returns all rows from the cr_solicitud_bitacora table that match the criteria 'id_estado_solicitud = :idEstadoSolicitud'.
	 */
	public CrSolicitudBitacora[] findWhereIdEstadoSolicitudEquals(int idEstadoSolicitud) throws CrSolicitudBitacoraDaoException;

	/** 
	 * Returns all rows from the cr_solicitud_bitacora table that match the criteria 'id_usuario = :idUsuario'.
	 */
	public CrSolicitudBitacora[] findWhereIdUsuarioEquals(int idUsuario) throws CrSolicitudBitacoraDaoException;

	/** 
	 * Returns all rows from the cr_solicitud_bitacora table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public CrSolicitudBitacora[] findWhereIdEmpresaEquals(int idEmpresa) throws CrSolicitudBitacoraDaoException;

	/** 
	 * Returns all rows from the cr_solicitud_bitacora table that match the criteria 'descripcion_evento = :descripcionEvento'.
	 */
	public CrSolicitudBitacora[] findWhereDescripcionEventoEquals(String descripcionEvento) throws CrSolicitudBitacoraDaoException;

	/** 
	 * Returns all rows from the cr_solicitud_bitacora table that match the criteria 'fecha_hr_creacion = :fechaHrCreacion'.
	 */
	public CrSolicitudBitacora[] findWhereFechaHrCreacionEquals(Date fechaHrCreacion) throws CrSolicitudBitacoraDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the cr_solicitud_bitacora table that match the specified arbitrary SQL statement
	 */
	public CrSolicitudBitacora[] findByDynamicSelect(String sql, Object[] sqlParams) throws CrSolicitudBitacoraDaoException;

	/** 
	 * Returns all rows from the cr_solicitud_bitacora table that match the specified arbitrary SQL statement
	 */
	public CrSolicitudBitacora[] findByDynamicWhere(String sql, Object[] sqlParams) throws CrSolicitudBitacoraDaoException;

}
