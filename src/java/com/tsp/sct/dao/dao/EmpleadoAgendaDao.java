/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface EmpleadoAgendaDao
{
	/** 
	 * Inserts a new row in the empleado_agenda table.
	 */
	public EmpleadoAgendaPk insert(EmpleadoAgenda dto) throws EmpleadoAgendaDaoException;

	/** 
	 * Updates a single row in the empleado_agenda table.
	 */
	public void update(EmpleadoAgendaPk pk, EmpleadoAgenda dto) throws EmpleadoAgendaDaoException;

	/** 
	 * Deletes a single row in the empleado_agenda table.
	 */
	public void delete(EmpleadoAgendaPk pk) throws EmpleadoAgendaDaoException;

	/** 
	 * Returns the rows from the empleado_agenda table that matches the specified primary-key value.
	 */
	public EmpleadoAgenda findByPrimaryKey(EmpleadoAgendaPk pk) throws EmpleadoAgendaDaoException;

	/** 
	 * Returns all rows from the empleado_agenda table that match the criteria 'ID_AGENDA = :idAgenda'.
	 */
	public EmpleadoAgenda findByPrimaryKey(int idAgenda) throws EmpleadoAgendaDaoException;

	/** 
	 * Returns all rows from the empleado_agenda table that match the criteria ''.
	 */
	public EmpleadoAgenda[] findAll() throws EmpleadoAgendaDaoException;

	/** 
	 * Returns all rows from the empleado_agenda table that match the criteria 'ID_AGENDA = :idAgenda'.
	 */
	public EmpleadoAgenda[] findWhereIdAgendaEquals(int idAgenda) throws EmpleadoAgendaDaoException;

	/** 
	 * Returns all rows from the empleado_agenda table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public EmpleadoAgenda[] findWhereIdEmpleadoEquals(int idEmpleado) throws EmpleadoAgendaDaoException;

	/** 
	 * Returns all rows from the empleado_agenda table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public EmpleadoAgenda[] findWhereIdEstatusEquals(int idEstatus) throws EmpleadoAgendaDaoException;

	/** 
	 * Returns all rows from the empleado_agenda table that match the criteria 'FECHA_CREACION = :fechaCreacion'.
	 */
	public EmpleadoAgenda[] findWhereFechaCreacionEquals(Date fechaCreacion) throws EmpleadoAgendaDaoException;

	/** 
	 * Returns all rows from the empleado_agenda table that match the criteria 'FECHA_PROGRAMADA = :fechaProgramada'.
	 */
	public EmpleadoAgenda[] findWhereFechaProgramadaEquals(Date fechaProgramada) throws EmpleadoAgendaDaoException;

	/** 
	 * Returns all rows from the empleado_agenda table that match the criteria 'FECHA_EJECUCION = :fechaEjecucion'.
	 */
	public EmpleadoAgenda[] findWhereFechaEjecucionEquals(Date fechaEjecucion) throws EmpleadoAgendaDaoException;

	/** 
	 * Returns all rows from the empleado_agenda table that match the criteria 'NOMBRE_TAREA = :nombreTarea'.
	 */
	public EmpleadoAgenda[] findWhereNombreTareaEquals(String nombreTarea) throws EmpleadoAgendaDaoException;

	/** 
	 * Returns all rows from the empleado_agenda table that match the criteria 'DESCRIPCION_TAREA = :descripcionTarea'.
	 */
	public EmpleadoAgenda[] findWhereDescripcionTareaEquals(String descripcionTarea) throws EmpleadoAgendaDaoException;

	/** 
	 * Returns all rows from the empleado_agenda table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public EmpleadoAgenda[] findWhereIdClienteEquals(int idCliente) throws EmpleadoAgendaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the empleado_agenda table that match the specified arbitrary SQL statement
	 */
	public EmpleadoAgenda[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmpleadoAgendaDaoException;

	/** 
	 * Returns all rows from the empleado_agenda table that match the specified arbitrary SQL statement
	 */
	public EmpleadoAgenda[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmpleadoAgendaDaoException;

}
