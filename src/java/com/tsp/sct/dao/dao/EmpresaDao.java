/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface EmpresaDao
{
	/** 
	 * Inserts a new row in the empresa table.
	 */
	public EmpresaPk insert(Empresa dto) throws EmpresaDaoException;

	/** 
	 * Updates a single row in the empresa table.
	 */
	public void update(EmpresaPk pk, Empresa dto) throws EmpresaDaoException;

	/** 
	 * Deletes a single row in the empresa table.
	 */
	public void delete(EmpresaPk pk) throws EmpresaDaoException;

	/** 
	 * Returns the rows from the empresa table that matches the specified primary-key value.
	 */
	public Empresa findByPrimaryKey(EmpresaPk pk) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Empresa findByPrimaryKey(int idEmpresa) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria ''.
	 */
	public Empresa[] findAll() throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Empresa[] findWhereIdEmpresaEquals(int idEmpresa) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_EMPRESA_PADRE = :idEmpresaPadre'.
	 */
	public Empresa[] findWhereIdEmpresaPadreEquals(int idEmpresaPadre) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_UBICACION_FISCAL = :idUbicacionFiscal'.
	 */
	public Empresa[] findWhereIdUbicacionFiscalEquals(int idUbicacionFiscal) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_TIPO_EMPRESA = :idTipoEmpresa'.
	 */
	public Empresa[] findWhereIdTipoEmpresaEquals(int idTipoEmpresa) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'RFC = :rfc'.
	 */
	public Empresa[] findWhereRfcEquals(String rfc) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'RAZON_SOCIAL = :razonSocial'.
	 */
	public Empresa[] findWhereRazonSocialEquals(String razonSocial) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'NOMBRE_COMERCIAL = :nombreComercial'.
	 */
	public Empresa[] findWhereNombreComercialEquals(String nombreComercial) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'FOLIOS_DISPONIBLES = :foliosDisponibles'.
	 */
	public Empresa[] findWhereFoliosDisponiblesEquals(int foliosDisponibles) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'REGIMEN_FISCAL = :regimenFiscal'.
	 */
	public Empresa[] findWhereRegimenFiscalEquals(String regimenFiscal) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Empresa[] findWhereIdEstatusEquals(int idEstatus) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TIPO_PDF = :tipoPdf'.
	 */
	public Empresa[] findWhereTipoPdfEquals(int tipoPdf) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TIPO_PDF_HONORARIOS = :tipoPdfHonorarios'.
	 */
	public Empresa[] findWhereTipoPdfHonorariosEquals(int tipoPdfHonorarios) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TIPO_PDF_ARRENDAMIENTO = :tipoPdfArrendamiento'.
	 */
	public Empresa[] findWhereTipoPdfArrendamientoEquals(int tipoPdfArrendamiento) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_VENDEDOR = :idVendedor'.
	 */
	public Empresa[] findWhereIdVendedorEquals(int idVendedor) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TIPO_PAGO = :tipoPago'.
	 */
	public Empresa[] findWhereTipoPagoEquals(int tipoPago) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_PAGO = :idPago'.
	 */
	public Empresa[] findWhereIdPagoEquals(int idPago) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_PAQUETE = :idPaquete'.
	 */
	public Empresa[] findWhereIdPaqueteEquals(int idPaquete) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'REFERENCIA_PAGO = :referenciaPago'.
	 */
	public Empresa[] findWhereReferenciaPagoEquals(String referenciaPago) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'FECHA_REGISTRO = :fechaRegistro'.
	 */
	public Empresa[] findWhereFechaRegistroEquals(Date fechaRegistro) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'COMPARTIR_CONCEPTOS_MATRIZ = :compartirConceptosMatriz'.
	 */
	public Empresa[] findWhereCompartirConceptosMatrizEquals(int compartirConceptosMatriz) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'LATITUD = :latitud'.
	 */
	public Empresa[] findWhereLatitudEquals(double latitud) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'LONGITUD = :longitud'.
	 */
	public Empresa[] findWhereLongitudEquals(double longitud) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'REGISTRO_PATRONAL = :registroPatronal'.
	 */
	public Empresa[] findWhereRegistroPatronalEquals(String registroPatronal) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'CREDITO_VALIDA_XML = :creditoValidaXml'.
	 */
	public Empresa[] findWhereCreditoValidaXmlEquals(int creditoValidaXml) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'CREDITOS_DISPONIBLES_SECTOR_PRIMARIO = :creditosDisponiblesSectorPrimario'.
	 */
	public Empresa[] findWhereCreditosDisponiblesSectorPrimarioEquals(int creditosDisponiblesSectorPrimario) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ADDEDAS_PERMITIDAS = :addedasPermitidas'.
	 */
	public Empresa[] findWhereAddedasPermitidasEquals(String addedasPermitidas) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_FRANQUICIATARIO = :idFranquiciatario'.
	 */
	public Empresa[] findWhereIdFranquiciatarioEquals(int idFranquiciatario) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'MENSAJE_PERSONALIZADO_VISITA = :mensajePersonalizadoVisita'.
	 */
	public Empresa[] findWhereMensajePersonalizadoVisitaEquals(String mensajePersonalizadoVisita) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'PRINT_RAZON_SOCIAL = :printRazonSocial'.
	 */
	public Empresa[] findWherePrintRazonSocialEquals(int printRazonSocial) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'PRINT_NOMBRE_COMERCIAL = :printNombreComercial'.
	 */
	public Empresa[] findWherePrintNombreComercialEquals(int printNombreComercial) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'GIRO = :giro'.
	 */
	public Empresa[] findWhereGiroEquals(String giro) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'CREDITOS_OPERACION = :creditosOperacion'.
	 */
	public Empresa[] findWhereCreditosOperacionEquals(int creditosOperacion) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'INTENTOS_LOGIN_NO_CREDITOS = :intentosLoginNoCreditos'.
	 */
	public Empresa[] findWhereIntentosLoginNoCreditosEquals(int intentosLoginNoCreditos) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'PRINT_TK_PRODS = :printTkProds'.
	 */
	public Empresa[] findWherePrintTkProdsEquals(int printTkProds) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TK_MOVIL_TIPO = :tkMovilTipo'.
	 */
	public Empresa[] findWhereTkMovilTipoEquals(int tkMovilTipo) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TK_MOVIL_POR_MARCA = :tkMovilPorMarca'.
	 */
	public Empresa[] findWhereTkMovilPorMarcaEquals(int tkMovilPorMarca) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TK_MOVIL_MOSTRAR_ZONA = :tkMovilMostrarZona'.
	 */
	public Empresa[] findWhereTkMovilMostrarZonaEquals(int tkMovilMostrarZona) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'TK_MOVIL_MOSTRAR_FOLIO = :tkMovilMostrarFolio'.
	 */
	public Empresa[] findWhereTkMovilMostrarFolioEquals(int tkMovilMostrarFolio) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'CREDITOS_SMS = :creditosSms'.
	 */
	public Empresa[] findWhereCreditosSmsEquals(int creditosSms) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'ID_SMS_DISPOSITIVO_MOVIL = :idSmsDispositivoMovil'.
	 */
	public Empresa[] findWhereIdSmsDispositivoMovilEquals(int idSmsDispositivoMovil) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the criteria 'CONTACTO_CELULAR = :contactoCelular'.
	 */
	public Empresa[] findWhereContactoCelularEquals(String contactoCelular) throws EmpresaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the empresa table that match the specified arbitrary SQL statement
	 */
	public Empresa[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmpresaDaoException;

	/** 
	 * Returns all rows from the empresa table that match the specified arbitrary SQL statement
	 */
	public Empresa[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmpresaDaoException;

}
