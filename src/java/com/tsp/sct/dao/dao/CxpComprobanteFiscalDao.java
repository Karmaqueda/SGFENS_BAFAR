/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface CxpComprobanteFiscalDao
{
	/** 
	 * Inserts a new row in the cxp_comprobante_fiscal table.
	 */
	public CxpComprobanteFiscalPk insert(CxpComprobanteFiscal dto) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Updates a single row in the cxp_comprobante_fiscal table.
	 */
	public void update(CxpComprobanteFiscalPk pk, CxpComprobanteFiscal dto) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Deletes a single row in the cxp_comprobante_fiscal table.
	 */
	public void delete(CxpComprobanteFiscalPk pk) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns the rows from the cxp_comprobante_fiscal table that matches the specified primary-key value.
	 */
	public CxpComprobanteFiscal findByPrimaryKey(CxpComprobanteFiscalPk pk) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'ID_CXP_COMPROBANTE_FISCAL = :idCxpComprobanteFiscal'.
	 */
	public CxpComprobanteFiscal findByPrimaryKey(int idCxpComprobanteFiscal) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria ''.
	 */
	public CxpComprobanteFiscal[] findAll() throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'ID_CXP_COMPROBANTE_FISCAL = :idCxpComprobanteFiscal'.
	 */
	public CxpComprobanteFiscal[] findWhereIdCxpComprobanteFiscalEquals(int idCxpComprobanteFiscal) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public CxpComprobanteFiscal[] findWhereIdEmpresaEquals(int idEmpresa) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'ID_VALIDACION = :idValidacion'.
	 */
	public CxpComprobanteFiscal[] findWhereIdValidacionEquals(int idValidacion) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'EMISOR_RFC = :emisorRfc'.
	 */
	public CxpComprobanteFiscal[] findWhereEmisorRfcEquals(String emisorRfc) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'EMISOR_NOMBRE = :emisorNombre'.
	 */
	public CxpComprobanteFiscal[] findWhereEmisorNombreEquals(String emisorNombre) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'SERIE = :serie'.
	 */
	public CxpComprobanteFiscal[] findWhereSerieEquals(String serie) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'FOLIO = :folio'.
	 */
	public CxpComprobanteFiscal[] findWhereFolioEquals(String folio) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'TOTAL = :total'.
	 */
	public CxpComprobanteFiscal[] findWhereTotalEquals(double total) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'IMPORTE_PAGADO = :importePagado'.
	 */
	public CxpComprobanteFiscal[] findWhereImportePagadoEquals(double importePagado) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'FECHA_HORA_CAPTURA = :fechaHoraCaptura'.
	 */
	public CxpComprobanteFiscal[] findWhereFechaHoraCapturaEquals(Date fechaHoraCaptura) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'FECHA_HORA_SELLO = :fechaHoraSello'.
	 */
	public CxpComprobanteFiscal[] findWhereFechaHoraSelloEquals(Date fechaHoraSello) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'FECHA_TENTATIVA_PAGO = :fechaTentativaPago'.
	 */
	public CxpComprobanteFiscal[] findWhereFechaTentativaPagoEquals(Date fechaTentativaPago) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'SELLO_EMISOR = :selloEmisor'.
	 */
	public CxpComprobanteFiscal[] findWhereSelloEmisorEquals(String selloEmisor) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'CFDI_UUID = :cfdiUuid'.
	 */
	public CxpComprobanteFiscal[] findWhereCfdiUuidEquals(String cfdiUuid) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public CxpComprobanteFiscal[] findWhereIdEstatusEquals(int idEstatus) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the specified arbitrary SQL statement
	 */
	public CxpComprobanteFiscal[] findByDynamicSelect(String sql, Object[] sqlParams) throws CxpComprobanteFiscalDaoException;

	/** 
	 * Returns all rows from the cxp_comprobante_fiscal table that match the specified arbitrary SQL statement
	 */
	public CxpComprobanteFiscal[] findByDynamicWhere(String sql, Object[] sqlParams) throws CxpComprobanteFiscalDaoException;

}
