/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface AddendaDao
{
	/** 
	 * Inserts a new row in the addenda table.
	 */
	public AddendaPk insert(Addenda dto) throws AddendaDaoException;

	/** 
	 * Updates a single row in the addenda table.
	 */
	public void update(AddendaPk pk, Addenda dto) throws AddendaDaoException;

	/** 
	 * Deletes a single row in the addenda table.
	 */
	public void delete(AddendaPk pk) throws AddendaDaoException;

	/** 
	 * Returns the rows from the addenda table that matches the specified primary-key value.
	 */
	public Addenda findByPrimaryKey(AddendaPk pk) throws AddendaDaoException;

	/** 
	 * Returns all rows from the addenda table that match the criteria 'ID_ADDENDA = :idAddenda'.
	 */
	public Addenda findByPrimaryKey(int idAddenda) throws AddendaDaoException;

	/** 
	 * Returns all rows from the addenda table that match the criteria ''.
	 */
	public Addenda[] findAll() throws AddendaDaoException;

	/** 
	 * Returns all rows from the addenda table that match the criteria 'ID_ADDENDA = :idAddenda'.
	 */
	public Addenda[] findWhereIdAddendaEquals(int idAddenda) throws AddendaDaoException;

	/** 
	 * Returns all rows from the addenda table that match the criteria 'ID_FACTURA = :idFactura'.
	 */
	public Addenda[] findWhereIdFacturaEquals(int idFactura) throws AddendaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the addenda table that match the specified arbitrary SQL statement
	 */
	public Addenda[] findByDynamicSelect(String sql, Object[] sqlParams) throws AddendaDaoException;

	/** 
	 * Returns all rows from the addenda table that match the specified arbitrary SQL statement
	 */
	public Addenda[] findByDynamicWhere(String sql, Object[] sqlParams) throws AddendaDaoException;

}
