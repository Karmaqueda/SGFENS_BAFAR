/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface EmpleadoArqueoDao
{
	/** 
	 * Inserts a new row in the empleado_arqueo table.
	 */
	public EmpleadoArqueoPk insert(EmpleadoArqueo dto) throws EmpleadoArqueoDaoException;

	/** 
	 * Updates a single row in the empleado_arqueo table.
	 */
	public void update(EmpleadoArqueoPk pk, EmpleadoArqueo dto) throws EmpleadoArqueoDaoException;

	/** 
	 * Deletes a single row in the empleado_arqueo table.
	 */
	public void delete(EmpleadoArqueoPk pk) throws EmpleadoArqueoDaoException;

	/** 
	 * Returns the rows from the empleado_arqueo table that matches the specified primary-key value.
	 */
	public EmpleadoArqueo findByPrimaryKey(EmpleadoArqueoPk pk) throws EmpleadoArqueoDaoException;

	/** 
	 * Returns all rows from the empleado_arqueo table that match the criteria 'ID_ARQUEO = :idArqueo'.
	 */
	public EmpleadoArqueo findByPrimaryKey(int idArqueo) throws EmpleadoArqueoDaoException;

	/** 
	 * Returns all rows from the empleado_arqueo table that match the criteria ''.
	 */
	public EmpleadoArqueo[] findAll() throws EmpleadoArqueoDaoException;

	/** 
	 * Returns all rows from the empleado_arqueo table that match the criteria 'ID_ARQUEO = :idArqueo'.
	 */
	public EmpleadoArqueo[] findWhereIdArqueoEquals(int idArqueo) throws EmpleadoArqueoDaoException;

	/** 
	 * Returns all rows from the empleado_arqueo table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public EmpleadoArqueo[] findWhereIdEmpleadoEquals(int idEmpleado) throws EmpleadoArqueoDaoException;

	/** 
	 * Returns all rows from the empleado_arqueo table that match the criteria 'ID_COBRANZA_METODO_PAGO = :idCobranzaMetodoPago'.
	 */
	public EmpleadoArqueo[] findWhereIdCobranzaMetodoPagoEquals(int idCobranzaMetodoPago) throws EmpleadoArqueoDaoException;

	/** 
	 * Returns all rows from the empleado_arqueo table that match the criteria 'MONTO = :monto'.
	 */
	public EmpleadoArqueo[] findWhereMontoEquals(double monto) throws EmpleadoArqueoDaoException;

	/** 
	 * Returns all rows from the empleado_arqueo table that match the criteria 'REFERENCIA = :referencia'.
	 */
	public EmpleadoArqueo[] findWhereReferenciaEquals(String referencia) throws EmpleadoArqueoDaoException;

	/** 
	 * Returns all rows from the empleado_arqueo table that match the criteria 'FECHA = :fecha'.
	 */
	public EmpleadoArqueo[] findWhereFechaEquals(Date fecha) throws EmpleadoArqueoDaoException;

	/** 
	 * Returns all rows from the empleado_arqueo table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public EmpleadoArqueo[] findWhereIdEstatusEquals(int idEstatus) throws EmpleadoArqueoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the empleado_arqueo table that match the specified arbitrary SQL statement
	 */
	public EmpleadoArqueo[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmpleadoArqueoDaoException;

	/** 
	 * Returns all rows from the empleado_arqueo table that match the specified arbitrary SQL statement
	 */
	public EmpleadoArqueo[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmpleadoArqueoDaoException;

}
