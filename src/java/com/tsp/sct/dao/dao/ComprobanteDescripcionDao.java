/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface ComprobanteDescripcionDao
{
	/** 
	 * Inserts a new row in the comprobante_descripcion table.
	 */
	public ComprobanteDescripcionPk insert(ComprobanteDescripcion dto) throws ComprobanteDescripcionDaoException;

	/** 
	 * Updates a single row in the comprobante_descripcion table.
	 */
	public void update(ComprobanteDescripcionPk pk, ComprobanteDescripcion dto) throws ComprobanteDescripcionDaoException;

	/** 
	 * Deletes a single row in the comprobante_descripcion table.
	 */
	public void delete(ComprobanteDescripcionPk pk) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns the rows from the comprobante_descripcion table that matches the specified primary-key value.
	 */
	public ComprobanteDescripcion findByPrimaryKey(ComprobanteDescripcionPk pk) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ID_COMPROBANTE_DESCRIPCION = :idComprobanteDescripcion'.
	 */
	public ComprobanteDescripcion findByPrimaryKey(int idComprobanteDescripcion) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria ''.
	 */
	public ComprobanteDescripcion[] findAll() throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ID_COMPROBANTE_DESCRIPCION = :idComprobanteDescripcion'.
	 */
	public ComprobanteDescripcion[] findWhereIdComprobanteDescripcionEquals(int idComprobanteDescripcion) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public ComprobanteDescripcion[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public ComprobanteDescripcion[] findWhereIdConceptoEquals(int idConcepto) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public ComprobanteDescripcion[] findWhereDescripcionEquals(String descripcion) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public ComprobanteDescripcion[] findWhereCantidadEquals(float cantidad) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'PRECIO_UNITARIO = :precioUnitario'.
	 */
	public ComprobanteDescripcion[] findWherePrecioUnitarioEquals(float precioUnitario) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'UNIDAD = :unidad'.
	 */
	public ComprobanteDescripcion[] findWhereUnidadEquals(String unidad) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'IDENTIFICACION = :identificacion'.
	 */
	public ComprobanteDescripcion[] findWhereIdentificacionEquals(String identificacion) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ORDEN = :orden'.
	 */
	public ComprobanteDescripcion[] findWhereOrdenEquals(int orden) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ID_SERVICIO = :idServicio'.
	 */
	public ComprobanteDescripcion[] findWhereIdServicioEquals(int idServicio) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'NOMBRE_CONCEPTO = :nombreConcepto'.
	 */
	public ComprobanteDescripcion[] findWhereNombreConceptoEquals(String nombreConcepto) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'ID_IMPUESTO = :idImpuesto'.
	 */
	public ComprobanteDescripcion[] findWhereIdImpuestoEquals(int idImpuesto) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'DESCUENTO_PORCENTAJE = :descuentoPorcentaje'.
	 */
	public ComprobanteDescripcion[] findWhereDescuentoPorcentajeEquals(float descuentoPorcentaje) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'DESCUENTO_MONTO = :descuentoMonto'.
	 */
	public ComprobanteDescripcion[] findWhereDescuentoMontoEquals(float descuentoMonto) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the criteria 'id_Almacen_Origen = :idAlmacenOrigen'.
	 */
	public ComprobanteDescripcion[] findWhereIdAlmacenOrigenEquals(int idAlmacenOrigen) throws ComprobanteDescripcionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the specified arbitrary SQL statement
	 */
	public ComprobanteDescripcion[] findByDynamicSelect(String sql, Object[] sqlParams) throws ComprobanteDescripcionDaoException;

	/** 
	 * Returns all rows from the comprobante_descripcion table that match the specified arbitrary SQL statement
	 */
	public ComprobanteDescripcion[] findByDynamicWhere(String sql, Object[] sqlParams) throws ComprobanteDescripcionDaoException;

}
