/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface IeduDao
{
	/** 
	 * Inserts a new row in the iedu table.
	 */
	public IeduPk insert(Iedu dto) throws IeduDaoException;

	/** 
	 * Updates a single row in the iedu table.
	 */
	public void update(IeduPk pk, Iedu dto) throws IeduDaoException;

	/** 
	 * Deletes a single row in the iedu table.
	 */
	public void delete(IeduPk pk) throws IeduDaoException;

	/** 
	 * Returns the rows from the iedu table that matches the specified primary-key value.
	 */
	public Iedu findByPrimaryKey(IeduPk pk) throws IeduDaoException;

	/** 
	 * Returns all rows from the iedu table that match the criteria 'ID_IEDU = :idIedu'.
	 */
	public Iedu findByPrimaryKey(int idIedu) throws IeduDaoException;

	/** 
	 * Returns all rows from the iedu table that match the criteria ''.
	 */
	public Iedu[] findAll() throws IeduDaoException;

	/** 
	 * Returns all rows from the iedu table that match the criteria 'ID_IEDU = :idIedu'.
	 */
	public Iedu[] findWhereIdIeduEquals(int idIedu) throws IeduDaoException;

	/** 
	 * Returns all rows from the iedu table that match the criteria 'VERSION = :version'.
	 */
	public Iedu[] findWhereVersionEquals(String version) throws IeduDaoException;

	/** 
	 * Returns all rows from the iedu table that match the criteria 'NOMBRE_ALUMNO = :nombreAlumno'.
	 */
	public Iedu[] findWhereNombreAlumnoEquals(String nombreAlumno) throws IeduDaoException;

	/** 
	 * Returns all rows from the iedu table that match the criteria 'CURP = :curp'.
	 */
	public Iedu[] findWhereCurpEquals(String curp) throws IeduDaoException;

	/** 
	 * Returns all rows from the iedu table that match the criteria 'NIVEL_EDUCATIVO = :nivelEducativo'.
	 */
	public Iedu[] findWhereNivelEducativoEquals(String nivelEducativo) throws IeduDaoException;

	/** 
	 * Returns all rows from the iedu table that match the criteria 'AUT_RVOE = :autRvoe'.
	 */
	public Iedu[] findWhereAutRvoeEquals(String autRvoe) throws IeduDaoException;

	/** 
	 * Returns all rows from the iedu table that match the criteria 'RFC_PAGO = :rfcPago'.
	 */
	public Iedu[] findWhereRfcPagoEquals(String rfcPago) throws IeduDaoException;

	/** 
	 * Returns all rows from the iedu table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public Iedu[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws IeduDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the iedu table that match the specified arbitrary SQL statement
	 */
	public Iedu[] findByDynamicSelect(String sql, Object[] sqlParams) throws IeduDaoException;

	/** 
	 * Returns all rows from the iedu table that match the specified arbitrary SQL statement
	 */
	public Iedu[] findByDynamicWhere(String sql, Object[] sqlParams) throws IeduDaoException;

}
