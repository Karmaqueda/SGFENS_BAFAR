/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface SarComprobanteDao
{
	/** 
	 * Inserts a new row in the sar_comprobante table.
	 */
	public SarComprobantePk insert(SarComprobante dto) throws SarComprobanteDaoException;

	/** 
	 * Updates a single row in the sar_comprobante table.
	 */
	public void update(SarComprobantePk pk, SarComprobante dto) throws SarComprobanteDaoException;

	/** 
	 * Deletes a single row in the sar_comprobante table.
	 */
	public void delete(SarComprobantePk pk) throws SarComprobanteDaoException;

	/** 
	 * Returns the rows from the sar_comprobante table that matches the specified primary-key value.
	 */
	public SarComprobante findByPrimaryKey(SarComprobantePk pk) throws SarComprobanteDaoException;

	/** 
	 * Returns all rows from the sar_comprobante table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public SarComprobante findByPrimaryKey(int idComprobanteFiscal) throws SarComprobanteDaoException;

	/** 
	 * Returns all rows from the sar_comprobante table that match the criteria ''.
	 */
	public SarComprobante[] findAll() throws SarComprobanteDaoException;

	/** 
	 * Returns all rows from the sar_comprobante table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public SarComprobante[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws SarComprobanteDaoException;

	/** 
	 * Returns all rows from the sar_comprobante table that match the criteria 'ID_SAR_USUARIO = :idSarUsuario'.
	 */
	public SarComprobante[] findWhereIdSarUsuarioEquals(int idSarUsuario) throws SarComprobanteDaoException;

	/** 
	 * Returns all rows from the sar_comprobante table that match the criteria 'ID_SAR_AREA_ENTREGA = :idSarAreaEntrega'.
	 */
	public SarComprobante[] findWhereIdSarAreaEntregaEquals(int idSarAreaEntrega) throws SarComprobanteDaoException;

	/** 
	 * Returns all rows from the sar_comprobante table that match the criteria 'EXT_SAR_ID_FACTURA = :extSarIdFactura'.
	 */
	public SarComprobante[] findWhereExtSarIdFacturaEquals(int extSarIdFactura) throws SarComprobanteDaoException;

	/** 
	 * Returns all rows from the sar_comprobante table that match the criteria 'EXT_SAR_ID_ESTATUS = :extSarIdEstatus'.
	 */
	public SarComprobante[] findWhereExtSarIdEstatusEquals(int extSarIdEstatus) throws SarComprobanteDaoException;

	/** 
	 * Returns all rows from the sar_comprobante table that match the criteria 'EXT_SAR_DESC_ESTATUS = :extSarDescEstatus'.
	 */
	public SarComprobante[] findWhereExtSarDescEstatusEquals(String extSarDescEstatus) throws SarComprobanteDaoException;

	/** 
	 * Returns all rows from the sar_comprobante table that match the criteria 'EXT_SAR_ULTIMO_COMENTARIO = :extSarUltimoComentario'.
	 */
	public SarComprobante[] findWhereExtSarUltimoComentarioEquals(String extSarUltimoComentario) throws SarComprobanteDaoException;

	/** 
	 * Returns all rows from the sar_comprobante table that match the criteria 'NOMBRE_ARCHIVO_ACUSE = :nombreArchivoAcuse'.
	 */
	public SarComprobante[] findWhereNombreArchivoAcuseEquals(String nombreArchivoAcuse) throws SarComprobanteDaoException;

	/** 
	 * Returns all rows from the sar_comprobante table that match the criteria 'ORDEN_COMPRA = :ordenCompra'.
	 */
	public SarComprobante[] findWhereOrdenCompraEquals(String ordenCompra) throws SarComprobanteDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the sar_comprobante table that match the specified arbitrary SQL statement
	 */
	public SarComprobante[] findByDynamicSelect(String sql, Object[] sqlParams) throws SarComprobanteDaoException;

	/** 
	 * Returns all rows from the sar_comprobante table that match the specified arbitrary SQL statement
	 */
	public SarComprobante[] findByDynamicWhere(String sql, Object[] sqlParams) throws SarComprobanteDaoException;

}
