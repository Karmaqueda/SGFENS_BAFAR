/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface RegionDao
{
	/** 
	 * Inserts a new row in the region table.
	 */
	public RegionPk insert(Region dto) throws RegionDaoException;

	/** 
	 * Updates a single row in the region table.
	 */
	public void update(RegionPk pk, Region dto) throws RegionDaoException;

	/** 
	 * Deletes a single row in the region table.
	 */
	public void delete(RegionPk pk) throws RegionDaoException;

	/** 
	 * Returns the rows from the region table that matches the specified primary-key value.
	 */
	public Region findByPrimaryKey(RegionPk pk) throws RegionDaoException;

	/** 
	 * Returns all rows from the region table that match the criteria 'ID_REGION = :idRegion'.
	 */
	public Region findByPrimaryKey(long idRegion) throws RegionDaoException;

	/** 
	 * Returns all rows from the region table that match the criteria ''.
	 */
	public Region[] findAll() throws RegionDaoException;

	/** 
	 * Returns all rows from the region table that match the criteria 'ID_REGION = :idRegion'.
	 */
	public Region[] findWhereIdRegionEquals(long idRegion) throws RegionDaoException;

	/** 
	 * Returns all rows from the region table that match the criteria 'NOMBRE = :nombre'.
	 */
	public Region[] findWhereNombreEquals(String nombre) throws RegionDaoException;

	/** 
	 * Returns all rows from the region table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public Region[] findWhereDescripcionEquals(String descripcion) throws RegionDaoException;

	/** 
	 * Returns all rows from the region table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Region[] findWhereIdEmpresaEquals(long idEmpresa) throws RegionDaoException;

	/** 
	 * Returns all rows from the region table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Region[] findWhereIdEstatusEquals(long idEstatus) throws RegionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the region table that match the specified arbitrary SQL statement
	 */
	public Region[] findByDynamicSelect(String sql, Object[] sqlParams) throws RegionDaoException;

	/** 
	 * Returns all rows from the region table that match the specified arbitrary SQL statement
	 */
	public Region[] findByDynamicWhere(String sql, Object[] sqlParams) throws RegionDaoException;

}
