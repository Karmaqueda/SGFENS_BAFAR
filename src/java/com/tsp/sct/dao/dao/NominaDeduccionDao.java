/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface NominaDeduccionDao
{
	/** 
	 * Inserts a new row in the nomina_deduccion table.
	 */
	public NominaDeduccionPk insert(NominaDeduccion dto) throws NominaDeduccionDaoException;

	/** 
	 * Updates a single row in the nomina_deduccion table.
	 */
	public void update(NominaDeduccionPk pk, NominaDeduccion dto) throws NominaDeduccionDaoException;

	/** 
	 * Deletes a single row in the nomina_deduccion table.
	 */
	public void delete(NominaDeduccionPk pk) throws NominaDeduccionDaoException;

	/** 
	 * Returns the rows from the nomina_deduccion table that matches the specified primary-key value.
	 */
	public NominaDeduccion findByPrimaryKey(NominaDeduccionPk pk) throws NominaDeduccionDaoException;

	/** 
	 * Returns all rows from the nomina_deduccion table that match the criteria 'ID_NOMINA_DEDUCCION = :idNominaDeduccion'.
	 */
	public NominaDeduccion findByPrimaryKey(int idNominaDeduccion) throws NominaDeduccionDaoException;

	/** 
	 * Returns all rows from the nomina_deduccion table that match the criteria ''.
	 */
	public NominaDeduccion[] findAll() throws NominaDeduccionDaoException;

	/** 
	 * Returns all rows from the nomina_deduccion table that match the criteria 'ID_NOMINA_DEDUCCION = :idNominaDeduccion'.
	 */
	public NominaDeduccion[] findWhereIdNominaDeduccionEquals(int idNominaDeduccion) throws NominaDeduccionDaoException;

	/** 
	 * Returns all rows from the nomina_deduccion table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public NominaDeduccion[] findWhereIdEmpresaEquals(int idEmpresa) throws NominaDeduccionDaoException;

	/** 
	 * Returns all rows from the nomina_deduccion table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public NominaDeduccion[] findWhereIdEstatusEquals(int idEstatus) throws NominaDeduccionDaoException;

	/** 
	 * Returns all rows from the nomina_deduccion table that match the criteria 'ID_NOMINA_TIPO_DEDUCCION = :idNominaTipoDeduccion'.
	 */
	public NominaDeduccion[] findWhereIdNominaTipoDeduccionEquals(int idNominaTipoDeduccion) throws NominaDeduccionDaoException;

	/** 
	 * Returns all rows from the nomina_deduccion table that match the criteria 'CLAVE = :clave'.
	 */
	public NominaDeduccion[] findWhereClaveEquals(String clave) throws NominaDeduccionDaoException;

	/** 
	 * Returns all rows from the nomina_deduccion table that match the criteria 'CONCEPTO = :concepto'.
	 */
	public NominaDeduccion[] findWhereConceptoEquals(String concepto) throws NominaDeduccionDaoException;

	/** 
	 * Returns all rows from the nomina_deduccion table that match the criteria 'IMPORTE_GRAVADO = :importeGravado'.
	 */
	public NominaDeduccion[] findWhereImporteGravadoEquals(double importeGravado) throws NominaDeduccionDaoException;

	/** 
	 * Returns all rows from the nomina_deduccion table that match the criteria 'IMPORTE_EXCEPTO = :importeExcepto'.
	 */
	public NominaDeduccion[] findWhereImporteExceptoEquals(double importeExcepto) throws NominaDeduccionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the nomina_deduccion table that match the specified arbitrary SQL statement
	 */
	public NominaDeduccion[] findByDynamicSelect(String sql, Object[] sqlParams) throws NominaDeduccionDaoException;

	/** 
	 * Returns all rows from the nomina_deduccion table that match the specified arbitrary SQL statement
	 */
	public NominaDeduccion[] findByDynamicWhere(String sql, Object[] sqlParams) throws NominaDeduccionDaoException;

}
