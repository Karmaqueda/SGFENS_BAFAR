/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface VentaDao
{
	/** 
	 * Inserts a new row in the VENTA table.
	 */
	public VentaPk insert(Venta dto) throws VentaDaoException;

	/** 
	 * Updates a single row in the VENTA table.
	 */
	public void update(VentaPk pk, Venta dto) throws VentaDaoException;

	/** 
	 * Deletes a single row in the VENTA table.
	 */
	public void delete(VentaPk pk) throws VentaDaoException;

	/** 
	 * Returns the rows from the VENTA table that matches the specified primary-key value.
	 */
	public Venta findByPrimaryKey(VentaPk pk) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_VENTA = :idVenta'.
	 */
	public Venta findByPrimaryKey(int idVenta) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria ''.
	 */
	public Venta[] findAll() throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_VENTA = :idVenta'.
	 */
	public Venta[] findWhereIdVentaEquals(int idVenta) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Venta[] findWhereIdEmpresaEquals(int idEmpresa) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public Venta[] findWhereIdEmpleadoEquals(int idEmpleado) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public Venta[] findWhereIdClienteEquals(int idCliente) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_OPERACION_BANCARIA = :idOperacionBancaria'.
	 */
	public Venta[] findWhereIdOperacionBancariaEquals(int idOperacionBancaria) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public Venta[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'FECHA_VENTA = :fechaVenta'.
	 */
	public Venta[] findWhereFechaVentaEquals(Date fechaVenta) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'TOTAL = :total'.
	 */
	public Venta[] findWhereTotalEquals(double total) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Venta[] findWhereIdEstatusEquals(int idEstatus) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'FACTURADO = :facturado'.
	 */
	public Venta[] findWhereFacturadoEquals(int facturado) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'ID_VENTA_METODO_PAGO = :idVentaMetodoPago'.
	 */
	public Venta[] findWhereIdVentaMetodoPagoEquals(int idVentaMetodoPago) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'CREDITO_FECHA_PAGO = :creditoFechaPago'.
	 */
	public Venta[] findWhereCreditoFechaPagoEquals(Date creditoFechaPago) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the criteria 'PAGADA_TOTAL = :pagadaTotal'.
	 */
	public Venta[] findWherePagadaTotalEquals(int pagadaTotal) throws VentaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the VENTA table that match the specified arbitrary SQL statement
	 */
	public Venta[] findByDynamicSelect(String sql, Object[] sqlParams) throws VentaDaoException;

	/** 
	 * Returns all rows from the VENTA table that match the specified arbitrary SQL statement
	 */
	public Venta[] findByDynamicWhere(String sql, Object[] sqlParams) throws VentaDaoException;

}
