/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface CrTipoCampoDao
{
	/** 
	 * Inserts a new row in the cr_tipo_campo table.
	 */
	public CrTipoCampoPk insert(CrTipoCampo dto) throws CrTipoCampoDaoException;

	/** 
	 * Updates a single row in the cr_tipo_campo table.
	 */
	public void update(CrTipoCampoPk pk, CrTipoCampo dto) throws CrTipoCampoDaoException;

	/** 
	 * Deletes a single row in the cr_tipo_campo table.
	 */
	public void delete(CrTipoCampoPk pk) throws CrTipoCampoDaoException;

	/** 
	 * Returns the rows from the cr_tipo_campo table that matches the specified primary-key value.
	 */
	public CrTipoCampo findByPrimaryKey(CrTipoCampoPk pk) throws CrTipoCampoDaoException;

	/** 
	 * Returns all rows from the cr_tipo_campo table that match the criteria 'id_tipo_campo = :idTipoCampo'.
	 */
	public CrTipoCampo findByPrimaryKey(int idTipoCampo) throws CrTipoCampoDaoException;

	/** 
	 * Returns all rows from the cr_tipo_campo table that match the criteria ''.
	 */
	public CrTipoCampo[] findAll() throws CrTipoCampoDaoException;

	/** 
	 * Returns all rows from the cr_tipo_campo table that match the criteria 'id_tipo_campo = :idTipoCampo'.
	 */
	public CrTipoCampo[] findWhereIdTipoCampoEquals(int idTipoCampo) throws CrTipoCampoDaoException;

	/** 
	 * Returns all rows from the cr_tipo_campo table that match the criteria 'nombre = :nombre'.
	 */
	public CrTipoCampo[] findWhereNombreEquals(String nombre) throws CrTipoCampoDaoException;

	/** 
	 * Returns all rows from the cr_tipo_campo table that match the criteria 'descripcion = :descripcion'.
	 */
	public CrTipoCampo[] findWhereDescripcionEquals(String descripcion) throws CrTipoCampoDaoException;

	/** 
	 * Returns all rows from the cr_tipo_campo table that match the criteria 'img_vista_previa = :imgVistaPrevia'.
	 */
	public CrTipoCampo[] findWhereImgVistaPreviaEquals(String imgVistaPrevia) throws CrTipoCampoDaoException;

	/** 
	 * Returns all rows from the cr_tipo_campo table that match the criteria 'icono_nombre = :iconoNombre'.
	 */
	public CrTipoCampo[] findWhereIconoNombreEquals(byte[] iconoNombre) throws CrTipoCampoDaoException;

	/** 
	 * Returns all rows from the cr_tipo_campo table that match the criteria 'id_empresa = :idEmpresa'.
	 */
	public CrTipoCampo[] findWhereIdEmpresaEquals(int idEmpresa) throws CrTipoCampoDaoException;

	/** 
	 * Returns all rows from the cr_tipo_campo table that match the criteria 'id_estatus = :idEstatus'.
	 */
	public CrTipoCampo[] findWhereIdEstatusEquals(int idEstatus) throws CrTipoCampoDaoException;

	/** 
	 * Returns all rows from the cr_tipo_campo table that match the criteria 'is_creado_sistema = :isCreadoSistema'.
	 */
	public CrTipoCampo[] findWhereIsCreadoSistemaEquals(int isCreadoSistema) throws CrTipoCampoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the cr_tipo_campo table that match the specified arbitrary SQL statement
	 */
	public CrTipoCampo[] findByDynamicSelect(String sql, Object[] sqlParams) throws CrTipoCampoDaoException;

	/** 
	 * Returns all rows from the cr_tipo_campo table that match the specified arbitrary SQL statement
	 */
	public CrTipoCampo[] findByDynamicWhere(String sql, Object[] sqlParams) throws CrTipoCampoDaoException;

}
