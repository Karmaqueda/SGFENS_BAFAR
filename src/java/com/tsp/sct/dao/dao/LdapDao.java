/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface LdapDao
{
	/** 
	 * Inserts a new row in the ldap table.
	 */
	public LdapPk insert(Ldap dto) throws LdapDaoException;

	/** 
	 * Updates a single row in the ldap table.
	 */
	public void update(LdapPk pk, Ldap dto) throws LdapDaoException;

	/** 
	 * Deletes a single row in the ldap table.
	 */
	public void delete(LdapPk pk) throws LdapDaoException;

	/** 
	 * Returns the rows from the ldap table that matches the specified primary-key value.
	 */
	public Ldap findByPrimaryKey(LdapPk pk) throws LdapDaoException;

	/** 
	 * Returns all rows from the ldap table that match the criteria 'ID_LDAP = :idLdap'.
	 */
	public Ldap findByPrimaryKey(int idLdap) throws LdapDaoException;

	/** 
	 * Returns all rows from the ldap table that match the criteria ''.
	 */
	public Ldap[] findAll() throws LdapDaoException;

	/** 
	 * Returns all rows from the ldap table that match the criteria 'ID_LDAP = :idLdap'.
	 */
	public Ldap[] findWhereIdLdapEquals(int idLdap) throws LdapDaoException;

	/** 
	 * Returns all rows from the ldap table that match the criteria 'USUARIO = :usuario'.
	 */
	public Ldap[] findWhereUsuarioEquals(String usuario) throws LdapDaoException;

	/** 
	 * Returns all rows from the ldap table that match the criteria 'PASSWORD = :password'.
	 */
	public Ldap[] findWherePasswordEquals(String password) throws LdapDaoException;

	/** 
	 * Returns all rows from the ldap table that match the criteria 'CONTRASENAS = :contrasenas'.
	 */
	public Ldap[] findWhereContrasenasEquals(String contrasenas) throws LdapDaoException;

	/** 
	 * Returns all rows from the ldap table that match the criteria 'FIRMADO = :firmado'.
	 */
	public Ldap[] findWhereFirmadoEquals(int firmado) throws LdapDaoException;

	/** 
	 * Returns all rows from the ldap table that match the criteria 'EMAIL = :email'.
	 */
	public Ldap[] findWhereEmailEquals(String email) throws LdapDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ldap table that match the specified arbitrary SQL statement
	 */
	public Ldap[] findByDynamicSelect(String sql, Object[] sqlParams) throws LdapDaoException;

	/** 
	 * Returns all rows from the ldap table that match the specified arbitrary SQL statement
	 */
	public Ldap[] findByDynamicWhere(String sql, Object[] sqlParams) throws LdapDaoException;

}
