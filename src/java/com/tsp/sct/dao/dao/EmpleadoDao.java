/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import java.util.Date;
import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface EmpleadoDao
{
	/** 
	 * Inserts a new row in the empleado table.
	 */
	public EmpleadoPk insert(Empleado dto) throws EmpleadoDaoException;

	/** 
	 * Updates a single row in the empleado table.
	 */
	public void update(EmpleadoPk pk, Empleado dto) throws EmpleadoDaoException;

	/** 
	 * Deletes a single row in the empleado table.
	 */
	public void delete(EmpleadoPk pk) throws EmpleadoDaoException;

	/** 
	 * Returns the rows from the empleado table that matches the specified primary-key value.
	 */
	public Empleado findByPrimaryKey(EmpleadoPk pk) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public Empleado findByPrimaryKey(int idEmpleado) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria ''.
	 */
	public Empleado[] findAll() throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_EMPLEADO = :idEmpleado'.
	 */
	public Empleado[] findWhereIdEmpleadoEquals(int idEmpleado) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Empleado[] findWhereIdEmpresaEquals(int idEmpresa) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Empleado[] findWhereIdEstatusEquals(int idEstatus) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'NOMBRE = :nombre'.
	 */
	public Empleado[] findWhereNombreEquals(String nombre) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'APELLIDO_PATERNO = :apellidoPaterno'.
	 */
	public Empleado[] findWhereApellidoPaternoEquals(String apellidoPaterno) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'APELLIDO_MATERNO = :apellidoMaterno'.
	 */
	public Empleado[] findWhereApellidoMaternoEquals(String apellidoMaterno) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'TELEFONO_LOCAL = :telefonoLocal'.
	 */
	public Empleado[] findWhereTelefonoLocalEquals(String telefonoLocal) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'NUM_EMPLEADO = :numEmpleado'.
	 */
	public Empleado[] findWhereNumEmpleadoEquals(String numEmpleado) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'CORREO_ELECTRONICO = :correoElectronico'.
	 */
	public Empleado[] findWhereCorreoElectronicoEquals(String correoElectronico) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_SUCURSAL = :idSucursal'.
	 */
	public Empleado[] findWhereIdSucursalEquals(int idSucursal) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_DISPOSITIVO = :idDispositivo'.
	 */
	public Empleado[] findWhereIdDispositivoEquals(int idDispositivo) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'LATITUD = :latitud'.
	 */
	public Empleado[] findWhereLatitudEquals(double latitud) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'LONGITUD = :longitud'.
	 */
	public Empleado[] findWhereLongitudEquals(double longitud) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_MOVIL_EMPLEADO_ROL = :idMovilEmpleadoRol'.
	 */
	public Empleado[] findWhereIdMovilEmpleadoRolEquals(int idMovilEmpleadoRol) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_USUARIOS = :idUsuarios'.
	 */
	public Empleado[] findWhereIdUsuariosEquals(int idUsuarios) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'USUARIO = :usuario'.
	 */
	public Empleado[] findWhereUsuarioEquals(String usuario) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PASSWORD = :password'.
	 */
	public Empleado[] findWherePasswordEquals(String password) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_ESTADO = :idEstado'.
	 */
	public Empleado[] findWhereIdEstadoEquals(int idEstado) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'FECHA_HORA = :fechaHora'.
	 */
	public Empleado[] findWhereFechaHoraEquals(Date fechaHora) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_GEOCERCA = :idGeocerca'.
	 */
	public Empleado[] findWhereIdGeocercaEquals(int idGeocerca) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'HORA_INICIO = :horaInicio'.
	 */
	public Empleado[] findWhereHoraInicioEquals(Date horaInicio) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'HORA_FIN = :horaFin'.
	 */
	public Empleado[] findWhereHoraFinEquals(Date horaFin) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'REPARTIDOR = :repartidor'.
	 */
	public Empleado[] findWhereRepartidorEquals(int repartidor) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_REGION = :idRegion'.
	 */
	public Empleado[] findWhereIdRegionEquals(int idRegion) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'SUELDO = :sueldo'.
	 */
	public Empleado[] findWhereSueldoEquals(double sueldo) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PORCENTAJE_COMISION = :porcentajeComision'.
	 */
	public Empleado[] findWherePorcentajeComisionEquals(double porcentajeComision) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_PERIODO_PAGO = :idPeriodoPago'.
	 */
	public Empleado[] findWhereIdPeriodoPagoEquals(int idPeriodoPago) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_VENTA_RAPIDA = :permisoVentaRapida'.
	 */
	public Empleado[] findWherePermisoVentaRapidaEquals(int permisoVentaRapida) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'SINCRONIZACION_MICROSIP = :sincronizacionMicrosip'.
	 */
	public Empleado[] findWhereSincronizacionMicrosipEquals(int sincronizacionMicrosip) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'VENTA_CONSIGNA = :ventaConsigna'.
	 */
	public Empleado[] findWhereVentaConsignaEquals(int ventaConsigna) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_VENTA_CREDITO = :permisoVentaCredito'.
	 */
	public Empleado[] findWherePermisoVentaCreditoEquals(int permisoVentaCredito) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'TRABAJAR_FUERA_LINEA = :trabajarFueraLinea'.
	 */
	public Empleado[] findWhereTrabajarFueraLineaEquals(int trabajarFueraLinea) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'CLIENTES_CODIGO_BARRAS = :clientesCodigoBarras'.
	 */
	public Empleado[] findWhereClientesCodigoBarrasEquals(int clientesCodigoBarras) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'DISTANCIA_OBLIGATORIO = :distanciaObligatorio'.
	 */
	public Empleado[] findWhereDistanciaObligatorioEquals(double distanciaObligatorio) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PRECIO_DE_COMPRA = :precioDeCompra'.
	 */
	public Empleado[] findWherePrecioDeCompraEquals(int precioDeCompra) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_CREAR_CLIENTE = :permisoCrearCliente'.
	 */
	public Empleado[] findWherePermisoCrearClienteEquals(int permisoCrearCliente) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_ACCIONES_CLIENTE = :permisoAccionesCliente'.
	 */
	public Empleado[] findWherePermisoAccionesClienteEquals(int permisoAccionesCliente) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_HORARIO = :idHorario'.
	 */
	public Empleado[] findWhereIdHorarioEquals(int idHorario) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'ID_FOLIO_MOVIL_EMPLEADO = :idFolioMovilEmpleado'.
	 */
	public Empleado[] findWhereIdFolioMovilEmpleadoEquals(int idFolioMovilEmpleado) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_DEVOLUCIONES = :permisoDevoluciones'.
	 */
	public Empleado[] findWherePermisoDevolucionesEquals(int permisoDevoluciones) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_AUTO_SERV_INVENTARIO = :permisoAutoServInventario'.
	 */
	public Empleado[] findWherePermisoAutoServInventarioEquals(int permisoAutoServInventario) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_NO_COBRO_PARCIAL = :permisoNoCobroParcial'.
	 */
	public Empleado[] findWherePermisoNoCobroParcialEquals(int permisoNoCobroParcial) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'PERMISO_VER_PROVEEDORES = :permisoVerProveedores'.
	 */
	public Empleado[] findWherePermisoVerProveedoresEquals(int permisoVerProveedores) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'CONTACTO_CELULAR = :contactoCelular'.
	 */
	public Empleado[] findWhereContactoCelularEquals(String contactoCelular) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the criteria 'INTERVALO_UBICACION_SEG = :intervaloUbicacionSeg'.
	 */
	public Empleado[] findWhereIntervaloUbicacionSegEquals(int intervaloUbicacionSeg) throws EmpleadoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the empleado table that match the specified arbitrary SQL statement
	 */
	public Empleado[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmpleadoDaoException;

	/** 
	 * Returns all rows from the empleado table that match the specified arbitrary SQL statement
	 */
	public Empleado[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmpleadoDaoException;

}
