/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface NominaComprobanteDescripcionIncapacidadDao
{
	/** 
	 * Inserts a new row in the nomina_comprobante_descripcion_incapacidad table.
	 */
	public NominaComprobanteDescripcionIncapacidadPk insert(NominaComprobanteDescripcionIncapacidad dto) throws NominaComprobanteDescripcionIncapacidadDaoException;

	/** 
	 * Updates a single row in the nomina_comprobante_descripcion_incapacidad table.
	 */
	public void update(NominaComprobanteDescripcionIncapacidadPk pk, NominaComprobanteDescripcionIncapacidad dto) throws NominaComprobanteDescripcionIncapacidadDaoException;

	/** 
	 * Deletes a single row in the nomina_comprobante_descripcion_incapacidad table.
	 */
	public void delete(NominaComprobanteDescripcionIncapacidadPk pk) throws NominaComprobanteDescripcionIncapacidadDaoException;

	/** 
	 * Returns the rows from the nomina_comprobante_descripcion_incapacidad table that matches the specified primary-key value.
	 */
	public NominaComprobanteDescripcionIncapacidad findByPrimaryKey(NominaComprobanteDescripcionIncapacidadPk pk) throws NominaComprobanteDescripcionIncapacidadDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_incapacidad table that match the criteria 'ID_NOMINA_COMPROBANTE_DESCRIPCION = :idNominaComprobanteDescripcion'.
	 */
	public NominaComprobanteDescripcionIncapacidad findByPrimaryKey(int idNominaComprobanteDescripcion) throws NominaComprobanteDescripcionIncapacidadDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_incapacidad table that match the criteria ''.
	 */
	public NominaComprobanteDescripcionIncapacidad[] findAll() throws NominaComprobanteDescripcionIncapacidadDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_incapacidad table that match the criteria 'ID_NOMINA_COMPROBANTE_DESCRIPCION = :idNominaComprobanteDescripcion'.
	 */
	public NominaComprobanteDescripcionIncapacidad[] findWhereIdNominaComprobanteDescripcionEquals(int idNominaComprobanteDescripcion) throws NominaComprobanteDescripcionIncapacidadDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_incapacidad table that match the criteria 'ID_CROMPROBANTE_FISCAL = :idCromprobanteFiscal'.
	 */
	public NominaComprobanteDescripcionIncapacidad[] findWhereIdCromprobanteFiscalEquals(int idCromprobanteFiscal) throws NominaComprobanteDescripcionIncapacidadDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_incapacidad table that match the criteria 'DIAS_INCAPACIDAD = :diasIncapacidad'.
	 */
	public NominaComprobanteDescripcionIncapacidad[] findWhereDiasIncapacidadEquals(double diasIncapacidad) throws NominaComprobanteDescripcionIncapacidadDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_incapacidad table that match the criteria 'CLAVE_TIPO_INCAPACIDAD = :claveTipoIncapacidad'.
	 */
	public NominaComprobanteDescripcionIncapacidad[] findWhereClaveTipoIncapacidadEquals(int claveTipoIncapacidad) throws NominaComprobanteDescripcionIncapacidadDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_incapacidad table that match the criteria 'DESCUENTO = :descuento'.
	 */
	public NominaComprobanteDescripcionIncapacidad[] findWhereDescuentoEquals(double descuento) throws NominaComprobanteDescripcionIncapacidadDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_incapacidad table that match the specified arbitrary SQL statement
	 */
	public NominaComprobanteDescripcionIncapacidad[] findByDynamicSelect(String sql, Object[] sqlParams) throws NominaComprobanteDescripcionIncapacidadDaoException;

	/** 
	 * Returns all rows from the nomina_comprobante_descripcion_incapacidad table that match the specified arbitrary SQL statement
	 */
	public NominaComprobanteDescripcionIncapacidad[] findByDynamicWhere(String sql, Object[] sqlParams) throws NominaComprobanteDescripcionIncapacidadDaoException;

}
