/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface ViaEmbarqueDao
{
	/** 
	 * Inserts a new row in the via_embarque table.
	 */
	public ViaEmbarquePk insert(ViaEmbarque dto) throws ViaEmbarqueDaoException;

	/** 
	 * Updates a single row in the via_embarque table.
	 */
	public void update(ViaEmbarquePk pk, ViaEmbarque dto) throws ViaEmbarqueDaoException;

	/** 
	 * Deletes a single row in the via_embarque table.
	 */
	public void delete(ViaEmbarquePk pk) throws ViaEmbarqueDaoException;

	/** 
	 * Returns the rows from the via_embarque table that matches the specified primary-key value.
	 */
	public ViaEmbarque findByPrimaryKey(ViaEmbarquePk pk) throws ViaEmbarqueDaoException;

	/** 
	 * Returns all rows from the via_embarque table that match the criteria 'ID_VIA_EMBARQUE = :idViaEmbarque'.
	 */
	public ViaEmbarque findByPrimaryKey(int idViaEmbarque) throws ViaEmbarqueDaoException;

	/** 
	 * Returns all rows from the via_embarque table that match the criteria ''.
	 */
	public ViaEmbarque[] findAll() throws ViaEmbarqueDaoException;

	/** 
	 * Returns all rows from the via_embarque table that match the criteria 'ID_VIA_EMBARQUE = :idViaEmbarque'.
	 */
	public ViaEmbarque[] findWhereIdViaEmbarqueEquals(int idViaEmbarque) throws ViaEmbarqueDaoException;

	/** 
	 * Returns all rows from the via_embarque table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public ViaEmbarque[] findWhereIdEmpresaEquals(int idEmpresa) throws ViaEmbarqueDaoException;

	/** 
	 * Returns all rows from the via_embarque table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public ViaEmbarque[] findWhereIdEstatusEquals(int idEstatus) throws ViaEmbarqueDaoException;

	/** 
	 * Returns all rows from the via_embarque table that match the criteria 'NOMBRE = :nombre'.
	 */
	public ViaEmbarque[] findWhereNombreEquals(String nombre) throws ViaEmbarqueDaoException;

	/** 
	 * Returns all rows from the via_embarque table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public ViaEmbarque[] findWhereDescripcionEquals(String descripcion) throws ViaEmbarqueDaoException;

	/** 
	 * Returns all rows from the via_embarque table that match the criteria 'CLAVE = :clave'.
	 */
	public ViaEmbarque[] findWhereClaveEquals(String clave) throws ViaEmbarqueDaoException;

	/** 
	 * Returns all rows from the via_embarque table that match the criteria 'SINCRONIZACION_MICROSIP = :sincronizacionMicrosip'.
	 */
	public ViaEmbarque[] findWhereSincronizacionMicrosipEquals(int sincronizacionMicrosip) throws ViaEmbarqueDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the via_embarque table that match the specified arbitrary SQL statement
	 */
	public ViaEmbarque[] findByDynamicSelect(String sql, Object[] sqlParams) throws ViaEmbarqueDaoException;

	/** 
	 * Returns all rows from the via_embarque table that match the specified arbitrary SQL statement
	 */
	public ViaEmbarque[] findByDynamicWhere(String sql, Object[] sqlParams) throws ViaEmbarqueDaoException;

}
