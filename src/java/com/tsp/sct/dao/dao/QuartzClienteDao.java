/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface QuartzClienteDao
{
	/** 
	 * Inserts a new row in the quartz_cliente table.
	 */
	public QuartzClientePk insert(QuartzCliente dto) throws QuartzClienteDaoException;

	/** 
	 * Updates a single row in the quartz_cliente table.
	 */
	public void update(QuartzClientePk pk, QuartzCliente dto) throws QuartzClienteDaoException;

	/** 
	 * Deletes a single row in the quartz_cliente table.
	 */
	public void delete(QuartzClientePk pk) throws QuartzClienteDaoException;

	/** 
	 * Returns the rows from the quartz_cliente table that matches the specified primary-key value.
	 */
	public QuartzCliente findByPrimaryKey(QuartzClientePk pk) throws QuartzClienteDaoException;

	/** 
	 * Returns all rows from the quartz_cliente table that match the criteria 'ID_QUARTZ = :idQuartz'.
	 */
	public QuartzCliente findByPrimaryKey(int idQuartz) throws QuartzClienteDaoException;

	/** 
	 * Returns all rows from the quartz_cliente table that match the criteria ''.
	 */
	public QuartzCliente[] findAll() throws QuartzClienteDaoException;

	/** 
	 * Returns all rows from the quartz_cliente table that match the criteria 'ID_QUARTZ = :idQuartz'.
	 */
	public QuartzCliente[] findWhereIdQuartzEquals(int idQuartz) throws QuartzClienteDaoException;

	/** 
	 * Returns all rows from the quartz_cliente table that match the criteria 'ID_CLIENTE_EVC = :idClienteEvc'.
	 */
	public QuartzCliente[] findWhereIdClienteEvcEquals(int idClienteEvc) throws QuartzClienteDaoException;

	/** 
	 * Returns all rows from the quartz_cliente table that match the criteria 'ID_CLIENTE_SISTEM_TERCERO = :idClienteSistemTercero'.
	 */
	public QuartzCliente[] findWhereIdClienteSistemTerceroEquals(int idClienteSistemTercero) throws QuartzClienteDaoException;

	/** 
	 * Returns all rows from the quartz_cliente table that match the criteria 'CLAVE = :clave'.
	 */
	public QuartzCliente[] findWhereClaveEquals(String clave) throws QuartzClienteDaoException;

	/** 
	 * Returns all rows from the quartz_cliente table that match the criteria 'ID_SISTEMA_TERCERO = :idSistemaTercero'.
	 */
	public QuartzCliente[] findWhereIdSistemaTerceroEquals(int idSistemaTercero) throws QuartzClienteDaoException;

	/** 
	 * Returns all rows from the quartz_cliente table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public QuartzCliente[] findWhereIdEmpresaEquals(int idEmpresa) throws QuartzClienteDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the quartz_cliente table that match the specified arbitrary SQL statement
	 */
	public QuartzCliente[] findByDynamicSelect(String sql, Object[] sqlParams) throws QuartzClienteDaoException;

	/** 
	 * Returns all rows from the quartz_cliente table that match the specified arbitrary SQL statement
	 */
	public QuartzCliente[] findByDynamicWhere(String sql, Object[] sqlParams) throws QuartzClienteDaoException;

}
