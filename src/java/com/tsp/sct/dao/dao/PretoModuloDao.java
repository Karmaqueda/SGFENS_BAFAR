/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface PretoModuloDao
{
	/** 
	 * Inserts a new row in the preto_modulo table.
	 */
	public PretoModuloPk insert(PretoModulo dto) throws PretoModuloDaoException;

	/** 
	 * Updates a single row in the preto_modulo table.
	 */
	public void update(PretoModuloPk pk, PretoModulo dto) throws PretoModuloDaoException;

	/** 
	 * Deletes a single row in the preto_modulo table.
	 */
	public void delete(PretoModuloPk pk) throws PretoModuloDaoException;

	/** 
	 * Returns the rows from the preto_modulo table that matches the specified primary-key value.
	 */
	public PretoModulo findByPrimaryKey(PretoModuloPk pk) throws PretoModuloDaoException;

	/** 
	 * Returns all rows from the preto_modulo table that match the criteria 'ID_PRETO_MODULO = :idPretoModulo'.
	 */
	public PretoModulo findByPrimaryKey(int idPretoModulo) throws PretoModuloDaoException;

	/** 
	 * Returns all rows from the preto_modulo table that match the criteria ''.
	 */
	public PretoModulo[] findAll() throws PretoModuloDaoException;

	/** 
	 * Returns all rows from the preto_modulo table that match the criteria 'ID_PRETO_MODULO = :idPretoModulo'.
	 */
	public PretoModulo[] findWhereIdPretoModuloEquals(int idPretoModulo) throws PretoModuloDaoException;

	/** 
	 * Returns all rows from the preto_modulo table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public PretoModulo[] findWhereIdEstatusEquals(int idEstatus) throws PretoModuloDaoException;

	/** 
	 * Returns all rows from the preto_modulo table that match the criteria 'NOMBRE_MODULO = :nombreModulo'.
	 */
	public PretoModulo[] findWhereNombreModuloEquals(String nombreModulo) throws PretoModuloDaoException;

	/** 
	 * Returns all rows from the preto_modulo table that match the criteria 'IDENTIFICADOR = :identificador'.
	 */
	public PretoModulo[] findWhereIdentificadorEquals(String identificador) throws PretoModuloDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the preto_modulo table that match the specified arbitrary SQL statement
	 */
	public PretoModulo[] findByDynamicSelect(String sql, Object[] sqlParams) throws PretoModuloDaoException;

	/** 
	 * Returns all rows from the preto_modulo table that match the specified arbitrary SQL statement
	 */
	public PretoModulo[] findByDynamicWhere(String sql, Object[] sqlParams) throws PretoModuloDaoException;

}
