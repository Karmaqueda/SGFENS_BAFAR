/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.sct.dao.dao;

import com.tsp.sct.dao.dto.*;
import com.tsp.sct.dao.exceptions.*;

public interface SarComprobanteAdjuntoDao
{
	/** 
	 * Inserts a new row in the sar_comprobante_adjunto table.
	 */
	public SarComprobanteAdjuntoPk insert(SarComprobanteAdjunto dto) throws SarComprobanteAdjuntoDaoException;

	/** 
	 * Updates a single row in the sar_comprobante_adjunto table.
	 */
	public void update(SarComprobanteAdjuntoPk pk, SarComprobanteAdjunto dto) throws SarComprobanteAdjuntoDaoException;

	/** 
	 * Deletes a single row in the sar_comprobante_adjunto table.
	 */
	public void delete(SarComprobanteAdjuntoPk pk) throws SarComprobanteAdjuntoDaoException;

	/** 
	 * Returns the rows from the sar_comprobante_adjunto table that matches the specified primary-key value.
	 */
	public SarComprobanteAdjunto findByPrimaryKey(SarComprobanteAdjuntoPk pk) throws SarComprobanteAdjuntoDaoException;

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'ID_SAR_COMPROBANTE_ADJUNTO = :idSarComprobanteAdjunto'.
	 */
	public SarComprobanteAdjunto findByPrimaryKey(int idSarComprobanteAdjunto) throws SarComprobanteAdjuntoDaoException;

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria ''.
	 */
	public SarComprobanteAdjunto[] findAll() throws SarComprobanteAdjuntoDaoException;

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'ID_SAR_COMPROBANTE_ADJUNTO = :idSarComprobanteAdjunto'.
	 */
	public SarComprobanteAdjunto[] findWhereIdSarComprobanteAdjuntoEquals(int idSarComprobanteAdjunto) throws SarComprobanteAdjuntoDaoException;

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'ID_COMPROBANTE_FISCAL = :idComprobanteFiscal'.
	 */
	public SarComprobanteAdjunto[] findWhereIdComprobanteFiscalEquals(int idComprobanteFiscal) throws SarComprobanteAdjuntoDaoException;

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'NOMBRE_ARCHIVO = :nombreArchivo'.
	 */
	public SarComprobanteAdjunto[] findWhereNombreArchivoEquals(String nombreArchivo) throws SarComprobanteAdjuntoDaoException;

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'ID_PEDIDO = :idPedido'.
	 */
	public SarComprobanteAdjunto[] findWhereIdPedidoEquals(int idPedido) throws SarComprobanteAdjuntoDaoException;

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'ID_CXP_VALE_AZUL = :idCxpValeAzul'.
	 */
	public SarComprobanteAdjunto[] findWhereIdCxpValeAzulEquals(int idCxpValeAzul) throws SarComprobanteAdjuntoDaoException;

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the criteria 'ID_CXP_COMPROBANTE_FISCAL = :idCxpComprobanteFiscal'.
	 */
	public SarComprobanteAdjunto[] findWhereIdCxpComprobanteFiscalEquals(int idCxpComprobanteFiscal) throws SarComprobanteAdjuntoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the specified arbitrary SQL statement
	 */
	public SarComprobanteAdjunto[] findByDynamicSelect(String sql, Object[] sqlParams) throws SarComprobanteAdjuntoDaoException;

	/** 
	 * Returns all rows from the sar_comprobante_adjunto table that match the specified arbitrary SQL statement
	 */
	public SarComprobanteAdjunto[] findByDynamicWhere(String sql, Object[] sqlParams) throws SarComprobanteAdjuntoDaoException;

}
